
FinalAudioClassificationPPGC8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016600  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00091090  080167d0  080167d0  000267d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080a7860  080a7860  000c0ef8  2**0
                  CONTENTS
  4 .ARM          00000008  080a7860  080a7860  000b7860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080a7868  080a7868  000c0ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080a7868  080a7868  000b7868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080a786c  080a786c  000b786c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ef8  20000000  080a7870  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002e0d4  20000ef8  080a8768  000c0ef8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2002efcc  080a8768  000cefcc  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  000c0ef8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000194a8  00000000  00000000  000c0f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037e1  00000000  00000000  000da3d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e68  00000000  00000000  000ddbb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb8  00000000  00000000  000dea20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029b4e  00000000  00000000  000df6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000108f5  00000000  00000000  00109226  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ffbc6  00000000  00000000  00119b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000543f  00000000  00000000  002196e1  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  000001c1  00000000  00000000  0021eb20  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000020  00000000  00000000  0021ece4  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00009978  00000000  00000000  0021ed04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000ef8 	.word	0x20000ef8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080167b8 	.word	0x080167b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000efc 	.word	0x20000efc
 800020c:	080167b8 	.word	0x080167b8

08000210 <CRC_Lock>:
 8000210:	f8df 0904 	ldr.w	r0, [pc, #2308]	; 8000b18 <.text_19>
 8000214:	f240 4249 	movw	r2, #1097	; 0x449
 8000218:	6801      	ldr	r1, [r0, #0]
 800021a:	0849      	lsrs	r1, r1, #1
 800021c:	0049      	lsls	r1, r1, #1
 800021e:	6001      	str	r1, [r0, #0]
 8000220:	f8df 08f8 	ldr.w	r0, [pc, #2296]	; 8000b1c <.text_20>
 8000224:	6801      	ldr	r1, [r0, #0]
 8000226:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800022a:	4291      	cmp	r1, r2
 800022c:	d115      	bne.n	800025a <CRC_Lock+0x4a>
 800022e:	2001      	movs	r0, #1
 8000230:	2200      	movs	r2, #0
 8000232:	2100      	movs	r1, #0
 8000234:	4310      	orrs	r0, r2
 8000236:	4308      	orrs	r0, r1
 8000238:	d01d      	beq.n	8000276 <CRC_Lock+0x66>
 800023a:	f8df 18e4 	ldr.w	r1, [pc, #2276]	; 8000b20 <.text_21>
 800023e:	2201      	movs	r2, #1
 8000240:	608a      	str	r2, [r1, #8]
 8000242:	6888      	ldr	r0, [r1, #8]
 8000244:	2800      	cmp	r0, #0
 8000246:	d1fc      	bne.n	8000242 <CRC_Lock+0x32>
 8000248:	f8df 28d8 	ldr.w	r2, [pc, #2264]	; 8000b24 <.text_22>
 800024c:	f8df 38d8 	ldr.w	r3, [pc, #2264]	; 8000b28 <.text_23>
 8000250:	600a      	str	r2, [r1, #0]
 8000252:	6809      	ldr	r1, [r1, #0]
 8000254:	4299      	cmp	r1, r3
 8000256:	d026      	beq.n	80002a6 <CRC_Lock+0x96>
 8000258:	e7fe      	b.n	8000258 <CRC_Lock+0x48>
 800025a:	2000      	movs	r0, #0
 800025c:	f240 4c51 	movw	ip, #1105	; 0x451
 8000260:	4561      	cmp	r1, ip
 8000262:	bf08      	it	eq
 8000264:	2201      	moveq	r2, #1
 8000266:	d0e4      	beq.n	8000232 <CRC_Lock+0x22>
 8000268:	2200      	movs	r2, #0
 800026a:	f240 4352 	movw	r3, #1106	; 0x452
 800026e:	4299      	cmp	r1, r3
 8000270:	d1df      	bne.n	8000232 <CRC_Lock+0x22>
 8000272:	2101      	movs	r1, #1
 8000274:	e7de      	b.n	8000234 <CRC_Lock+0x24>
 8000276:	f8df 08b4 	ldr.w	r0, [pc, #2228]	; 8000b2c <.text_24>
 800027a:	6801      	ldr	r1, [r0, #0]
 800027c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000280:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8000284:	d10f      	bne.n	80002a6 <CRC_Lock+0x96>
 8000286:	f8df 18a8 	ldr.w	r1, [pc, #2216]	; 8000b30 <.text_25>
 800028a:	2201      	movs	r2, #1
 800028c:	608a      	str	r2, [r1, #8]
 800028e:	6888      	ldr	r0, [r1, #8]
 8000290:	2800      	cmp	r0, #0
 8000292:	d1fc      	bne.n	800028e <CRC_Lock+0x7e>
 8000294:	f8df 288c 	ldr.w	r2, [pc, #2188]	; 8000b24 <.text_22>
 8000298:	f8df 388c 	ldr.w	r3, [pc, #2188]	; 8000b28 <.text_23>
 800029c:	600a      	str	r2, [r1, #0]
 800029e:	6809      	ldr	r1, [r1, #0]
 80002a0:	4299      	cmp	r1, r3
 80002a2:	d000      	beq.n	80002a6 <CRC_Lock+0x96>
 80002a4:	e7fe      	b.n	80002a4 <CRC_Lock+0x94>
 80002a6:	4770      	bx	lr

080002a8 <_ai_platform_get_io_buffers_info>:
 80002a8:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	2500      	movs	r5, #0
 80002ae:	46aa      	mov	sl, r5
 80002b0:	b082      	sub	sp, #8
 80002b2:	4607      	mov	r7, r0
 80002b4:	46ab      	mov	fp, r5
 80002b6:	46d0      	mov	r8, sl
 80002b8:	46d1      	mov	r9, sl
 80002ba:	e028      	b.n	800030e <_ai_platform_get_io_buffers_info+0x66>
 80002bc:	2000      	movs	r0, #0
 80002be:	e01c      	b.n	80002fa <_ai_platform_get_io_buffers_info+0x52>
 80002c0:	f850 400a 	ldr.w	r4, [r0, sl]
 80002c4:	b364      	cbz	r4, 8000320 <_ai_platform_get_io_buffers_info+0x78>
 80002c6:	68b8      	ldr	r0, [r7, #8]
 80002c8:	6882      	ldr	r2, [r0, #8]
 80002ca:	4442      	add	r2, r8
 80002cc:	6841      	ldr	r1, [r0, #4]
 80002ce:	9200      	str	r2, [sp, #0]
 80002d0:	69a3      	ldr	r3, [r4, #24]
 80002d2:	6818      	ldr	r0, [r3, #0]
 80002d4:	eb01 0609 	add.w	r6, r1, r9
 80002d8:	f006 f86a 	bl	80063b0 <ai_array_to_buffer_fmt>
 80002dc:	2101      	movs	r1, #1
 80002de:	6030      	str	r0, [r6, #0]
 80002e0:	80b1      	strh	r1, [r6, #4]
 80002e2:	68e0      	ldr	r0, [r4, #12]
 80002e4:	68c2      	ldr	r2, [r0, #12]
 80002e6:	80f2      	strh	r2, [r6, #6]
 80002e8:	6881      	ldr	r1, [r0, #8]
 80002ea:	8131      	strh	r1, [r6, #8]
 80002ec:	6840      	ldr	r0, [r0, #4]
 80002ee:	60f0      	str	r0, [r6, #12]
 80002f0:	69a1      	ldr	r1, [r4, #24]
 80002f2:	688a      	ldr	r2, [r1, #8]
 80002f4:	6132      	str	r2, [r6, #16]
 80002f6:	9800      	ldr	r0, [sp, #0]
 80002f8:	b9e0      	cbnz	r0, 8000334 <_ai_platform_get_io_buffers_info+0x8c>
 80002fa:	6170      	str	r0, [r6, #20]
 80002fc:	1c6d      	adds	r5, r5, #1
 80002fe:	f10b 0b01 	add.w	fp, fp, #1
 8000302:	f109 0918 	add.w	r9, r9, #24
 8000306:	f108 0808 	add.w	r8, r8, #8
 800030a:	f10a 0a04 	add.w	sl, sl, #4
 800030e:	2f00      	cmp	r7, #0
 8000310:	bf14      	ite	ne
 8000312:	8838      	ldrhne	r0, [r7, #0]
 8000314:	2000      	moveq	r0, #0
 8000316:	4583      	cmp	fp, r0
 8000318:	d202      	bcs.n	8000320 <_ai_platform_get_io_buffers_info+0x78>
 800031a:	6878      	ldr	r0, [r7, #4]
 800031c:	2800      	cmp	r0, #0
 800031e:	d1cf      	bne.n	80002c0 <_ai_platform_get_io_buffers_info+0x18>
 8000320:	b2a8      	uxth	r0, r5
 8000322:	b118      	cbz	r0, 800032c <_ai_platform_get_io_buffers_info+0x84>
 8000324:	68b9      	ldr	r1, [r7, #8]
 8000326:	9802      	ldr	r0, [sp, #8]
 8000328:	684a      	ldr	r2, [r1, #4]
 800032a:	6002      	str	r2, [r0, #0]
 800032c:	b2a8      	uxth	r0, r5
 800032e:	b003      	add	sp, #12
 8000330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000334:	9900      	ldr	r1, [sp, #0]
 8000336:	2000      	movs	r0, #0
 8000338:	6008      	str	r0, [r1, #0]
 800033a:	9a00      	ldr	r2, [sp, #0]
 800033c:	6820      	ldr	r0, [r4, #0]
 800033e:	2800      	cmp	r0, #0
 8000340:	6050      	str	r0, [r2, #4]
 8000342:	bf1c      	itt	ne
 8000344:	8840      	ldrhne	r0, [r0, #2]
 8000346:	2800      	cmpne	r0, #0
 8000348:	d0b8      	beq.n	80002bc <_ai_platform_get_io_buffers_info+0x14>
 800034a:	9a00      	ldr	r2, [sp, #0]
 800034c:	2101      	movs	r1, #1
 800034e:	6011      	str	r1, [r2, #0]
 8000350:	9800      	ldr	r0, [sp, #0]
 8000352:	e7d2      	b.n	80002fa <_ai_platform_get_io_buffers_info+0x52>

08000354 <_platform_network_state_setup>:
 8000354:	b470      	push	{r4, r5, r6}
 8000356:	68d3      	ldr	r3, [r2, #12]
 8000358:	6955      	ldr	r5, [r2, #20]
 800035a:	68dc      	ldr	r4, [r3, #12]
 800035c:	68eb      	ldr	r3, [r5, #12]
 800035e:	435c      	muls	r4, r3
 8000360:	6084      	str	r4, [r0, #8]
 8000362:	888e      	ldrh	r6, [r1, #4]
 8000364:	4374      	muls	r4, r6
 8000366:	60c4      	str	r4, [r0, #12]
 8000368:	6909      	ldr	r1, [r1, #16]
 800036a:	68c3      	ldr	r3, [r0, #12]
 800036c:	6041      	str	r1, [r0, #4]
 800036e:	4419      	add	r1, r3
 8000370:	6001      	str	r1, [r0, #0]
 8000372:	6992      	ldr	r2, [r2, #24]
 8000374:	6814      	ldr	r4, [r2, #0]
 8000376:	00a5      	lsls	r5, r4, #2
 8000378:	d407      	bmi.n	800038a <_platform_network_state_setup+0x36>
 800037a:	6894      	ldr	r4, [r2, #8]
 800037c:	68d1      	ldr	r1, [r2, #12]
 800037e:	6843      	ldr	r3, [r0, #4]
 8000380:	1a64      	subs	r4, r4, r1
 8000382:	1919      	adds	r1, r3, r4
 8000384:	6091      	str	r1, [r2, #8]
 8000386:	6840      	ldr	r0, [r0, #4]
 8000388:	60d0      	str	r0, [r2, #12]
 800038a:	bc70      	pop	{r4, r5, r6}
 800038c:	4770      	bx	lr

0800038e <ai_platform_runtime_get_revision>:
 800038e:	f8df 0788 	ldr.w	r0, [pc, #1928]	; 8000b18 <.text_19>
 8000392:	f240 4249 	movw	r2, #1097	; 0x449
 8000396:	6801      	ldr	r1, [r0, #0]
 8000398:	0849      	lsrs	r1, r1, #1
 800039a:	0049      	lsls	r1, r1, #1
 800039c:	6001      	str	r1, [r0, #0]
 800039e:	f8df 077c 	ldr.w	r0, [pc, #1916]	; 8000b1c <.text_20>
 80003a2:	6801      	ldr	r1, [r0, #0]
 80003a4:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80003a8:	4291      	cmp	r1, r2
 80003aa:	d115      	bne.n	80003d8 <ai_platform_runtime_get_revision+0x4a>
 80003ac:	2001      	movs	r0, #1
 80003ae:	2200      	movs	r2, #0
 80003b0:	2100      	movs	r1, #0
 80003b2:	4310      	orrs	r0, r2
 80003b4:	4308      	orrs	r0, r1
 80003b6:	d01d      	beq.n	80003f4 <ai_platform_runtime_get_revision+0x66>
 80003b8:	f8df 1764 	ldr.w	r1, [pc, #1892]	; 8000b20 <.text_21>
 80003bc:	2201      	movs	r2, #1
 80003be:	608a      	str	r2, [r1, #8]
 80003c0:	6888      	ldr	r0, [r1, #8]
 80003c2:	2800      	cmp	r0, #0
 80003c4:	d1fc      	bne.n	80003c0 <ai_platform_runtime_get_revision+0x32>
 80003c6:	f8df 275c 	ldr.w	r2, [pc, #1884]	; 8000b24 <.text_22>
 80003ca:	f8df 375c 	ldr.w	r3, [pc, #1884]	; 8000b28 <.text_23>
 80003ce:	600a      	str	r2, [r1, #0]
 80003d0:	6809      	ldr	r1, [r1, #0]
 80003d2:	4299      	cmp	r1, r3
 80003d4:	d026      	beq.n	8000424 <ai_platform_runtime_get_revision+0x96>
 80003d6:	e7fe      	b.n	80003d6 <ai_platform_runtime_get_revision+0x48>
 80003d8:	2000      	movs	r0, #0
 80003da:	f240 4c51 	movw	ip, #1105	; 0x451
 80003de:	4561      	cmp	r1, ip
 80003e0:	bf08      	it	eq
 80003e2:	2201      	moveq	r2, #1
 80003e4:	d0e4      	beq.n	80003b0 <ai_platform_runtime_get_revision+0x22>
 80003e6:	2200      	movs	r2, #0
 80003e8:	f240 4352 	movw	r3, #1106	; 0x452
 80003ec:	4299      	cmp	r1, r3
 80003ee:	d1df      	bne.n	80003b0 <ai_platform_runtime_get_revision+0x22>
 80003f0:	2101      	movs	r1, #1
 80003f2:	e7de      	b.n	80003b2 <ai_platform_runtime_get_revision+0x24>
 80003f4:	f8df 0734 	ldr.w	r0, [pc, #1844]	; 8000b2c <.text_24>
 80003f8:	6801      	ldr	r1, [r0, #0]
 80003fa:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80003fe:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8000402:	d10f      	bne.n	8000424 <ai_platform_runtime_get_revision+0x96>
 8000404:	f8df 1728 	ldr.w	r1, [pc, #1832]	; 8000b30 <.text_25>
 8000408:	2201      	movs	r2, #1
 800040a:	608a      	str	r2, [r1, #8]
 800040c:	6888      	ldr	r0, [r1, #8]
 800040e:	2800      	cmp	r0, #0
 8000410:	d1fc      	bne.n	800040c <ai_platform_runtime_get_revision+0x7e>
 8000412:	f8df 2710 	ldr.w	r2, [pc, #1808]	; 8000b24 <.text_22>
 8000416:	f8df 3710 	ldr.w	r3, [pc, #1808]	; 8000b28 <.text_23>
 800041a:	600a      	str	r2, [r1, #0]
 800041c:	6809      	ldr	r1, [r1, #0]
 800041e:	4299      	cmp	r1, r3
 8000420:	d000      	beq.n	8000424 <ai_platform_runtime_get_revision+0x96>
 8000422:	e7fe      	b.n	8000422 <ai_platform_runtime_get_revision+0x94>
 8000424:	a0a3      	add	r0, pc, #652	; (adr r0, 80006b4 <.text_11>)
 8000426:	4770      	bx	lr

08000428 <ai_platform_runtime_get_version>:
 8000428:	f8df 06ec 	ldr.w	r0, [pc, #1772]	; 8000b18 <.text_19>
 800042c:	f240 4249 	movw	r2, #1097	; 0x449
 8000430:	6801      	ldr	r1, [r0, #0]
 8000432:	0849      	lsrs	r1, r1, #1
 8000434:	0049      	lsls	r1, r1, #1
 8000436:	6001      	str	r1, [r0, #0]
 8000438:	f8df 06e0 	ldr.w	r0, [pc, #1760]	; 8000b1c <.text_20>
 800043c:	6801      	ldr	r1, [r0, #0]
 800043e:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000442:	4291      	cmp	r1, r2
 8000444:	d115      	bne.n	8000472 <ai_platform_runtime_get_version+0x4a>
 8000446:	2001      	movs	r0, #1
 8000448:	2200      	movs	r2, #0
 800044a:	2100      	movs	r1, #0
 800044c:	4310      	orrs	r0, r2
 800044e:	4308      	orrs	r0, r1
 8000450:	d01d      	beq.n	800048e <ai_platform_runtime_get_version+0x66>
 8000452:	f8df 16cc 	ldr.w	r1, [pc, #1740]	; 8000b20 <.text_21>
 8000456:	2201      	movs	r2, #1
 8000458:	608a      	str	r2, [r1, #8]
 800045a:	6888      	ldr	r0, [r1, #8]
 800045c:	2800      	cmp	r0, #0
 800045e:	d1fc      	bne.n	800045a <ai_platform_runtime_get_version+0x32>
 8000460:	f8df 26c0 	ldr.w	r2, [pc, #1728]	; 8000b24 <.text_22>
 8000464:	f8df 36c0 	ldr.w	r3, [pc, #1728]	; 8000b28 <.text_23>
 8000468:	600a      	str	r2, [r1, #0]
 800046a:	6809      	ldr	r1, [r1, #0]
 800046c:	4299      	cmp	r1, r3
 800046e:	d026      	beq.n	80004be <ai_platform_runtime_get_version+0x96>
 8000470:	e7fe      	b.n	8000470 <ai_platform_runtime_get_version+0x48>
 8000472:	2000      	movs	r0, #0
 8000474:	f240 4c51 	movw	ip, #1105	; 0x451
 8000478:	4561      	cmp	r1, ip
 800047a:	bf08      	it	eq
 800047c:	2201      	moveq	r2, #1
 800047e:	d0e4      	beq.n	800044a <ai_platform_runtime_get_version+0x22>
 8000480:	2200      	movs	r2, #0
 8000482:	f240 4352 	movw	r3, #1106	; 0x452
 8000486:	4299      	cmp	r1, r3
 8000488:	d1df      	bne.n	800044a <ai_platform_runtime_get_version+0x22>
 800048a:	2101      	movs	r1, #1
 800048c:	e7de      	b.n	800044c <ai_platform_runtime_get_version+0x24>
 800048e:	f8df 069c 	ldr.w	r0, [pc, #1692]	; 8000b2c <.text_24>
 8000492:	6801      	ldr	r1, [r0, #0]
 8000494:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000498:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800049c:	d10f      	bne.n	80004be <ai_platform_runtime_get_version+0x96>
 800049e:	f8df 1690 	ldr.w	r1, [pc, #1680]	; 8000b30 <.text_25>
 80004a2:	2201      	movs	r2, #1
 80004a4:	608a      	str	r2, [r1, #8]
 80004a6:	6888      	ldr	r0, [r1, #8]
 80004a8:	2800      	cmp	r0, #0
 80004aa:	d1fc      	bne.n	80004a6 <ai_platform_runtime_get_version+0x7e>
 80004ac:	f8df 2674 	ldr.w	r2, [pc, #1652]	; 8000b24 <.text_22>
 80004b0:	f8df 3674 	ldr.w	r3, [pc, #1652]	; 8000b28 <.text_23>
 80004b4:	600a      	str	r2, [r1, #0]
 80004b6:	6809      	ldr	r1, [r1, #0]
 80004b8:	4299      	cmp	r1, r3
 80004ba:	d000      	beq.n	80004be <ai_platform_runtime_get_version+0x96>
 80004bc:	e7fe      	b.n	80004bc <ai_platform_runtime_get_version+0x94>
 80004be:	f60f 20b0 	addw	r0, pc, #2736	; 0xab0
 80004c2:	6800      	ldr	r0, [r0, #0]
 80004c4:	4770      	bx	lr

080004c6 <ai_platform_api_get_version>:
 80004c6:	f8df 0650 	ldr.w	r0, [pc, #1616]	; 8000b18 <.text_19>
 80004ca:	f240 4249 	movw	r2, #1097	; 0x449
 80004ce:	6801      	ldr	r1, [r0, #0]
 80004d0:	0849      	lsrs	r1, r1, #1
 80004d2:	0049      	lsls	r1, r1, #1
 80004d4:	6001      	str	r1, [r0, #0]
 80004d6:	f8df 0644 	ldr.w	r0, [pc, #1604]	; 8000b1c <.text_20>
 80004da:	6801      	ldr	r1, [r0, #0]
 80004dc:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80004e0:	4291      	cmp	r1, r2
 80004e2:	d115      	bne.n	8000510 <ai_platform_api_get_version+0x4a>
 80004e4:	2001      	movs	r0, #1
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	4310      	orrs	r0, r2
 80004ec:	4308      	orrs	r0, r1
 80004ee:	d01d      	beq.n	800052c <ai_platform_api_get_version+0x66>
 80004f0:	f8df 162c 	ldr.w	r1, [pc, #1580]	; 8000b20 <.text_21>
 80004f4:	2201      	movs	r2, #1
 80004f6:	608a      	str	r2, [r1, #8]
 80004f8:	6888      	ldr	r0, [r1, #8]
 80004fa:	2800      	cmp	r0, #0
 80004fc:	d1fc      	bne.n	80004f8 <ai_platform_api_get_version+0x32>
 80004fe:	f8df 2624 	ldr.w	r2, [pc, #1572]	; 8000b24 <.text_22>
 8000502:	f8df 3624 	ldr.w	r3, [pc, #1572]	; 8000b28 <.text_23>
 8000506:	600a      	str	r2, [r1, #0]
 8000508:	6809      	ldr	r1, [r1, #0]
 800050a:	4299      	cmp	r1, r3
 800050c:	d026      	beq.n	800055c <ai_platform_api_get_version+0x96>
 800050e:	e7fe      	b.n	800050e <ai_platform_api_get_version+0x48>
 8000510:	2000      	movs	r0, #0
 8000512:	f240 4c51 	movw	ip, #1105	; 0x451
 8000516:	4561      	cmp	r1, ip
 8000518:	bf08      	it	eq
 800051a:	2201      	moveq	r2, #1
 800051c:	d0e4      	beq.n	80004e8 <ai_platform_api_get_version+0x22>
 800051e:	2200      	movs	r2, #0
 8000520:	f240 4352 	movw	r3, #1106	; 0x452
 8000524:	4299      	cmp	r1, r3
 8000526:	d1df      	bne.n	80004e8 <ai_platform_api_get_version+0x22>
 8000528:	2101      	movs	r1, #1
 800052a:	e7de      	b.n	80004ea <ai_platform_api_get_version+0x24>
 800052c:	f8df 05fc 	ldr.w	r0, [pc, #1532]	; 8000b2c <.text_24>
 8000530:	6801      	ldr	r1, [r0, #0]
 8000532:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000536:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800053a:	d10f      	bne.n	800055c <ai_platform_api_get_version+0x96>
 800053c:	f8df 15f0 	ldr.w	r1, [pc, #1520]	; 8000b30 <.text_25>
 8000540:	2201      	movs	r2, #1
 8000542:	608a      	str	r2, [r1, #8]
 8000544:	6888      	ldr	r0, [r1, #8]
 8000546:	2800      	cmp	r0, #0
 8000548:	d1fc      	bne.n	8000544 <ai_platform_api_get_version+0x7e>
 800054a:	f8df 25d8 	ldr.w	r2, [pc, #1496]	; 8000b24 <.text_22>
 800054e:	f8df 35d8 	ldr.w	r3, [pc, #1496]	; 8000b28 <.text_23>
 8000552:	600a      	str	r2, [r1, #0]
 8000554:	6809      	ldr	r1, [r1, #0]
 8000556:	4299      	cmp	r1, r3
 8000558:	d000      	beq.n	800055c <ai_platform_api_get_version+0x96>
 800055a:	e7fe      	b.n	800055a <ai_platform_api_get_version+0x94>
 800055c:	f60f 2014 	addw	r0, pc, #2580	; 0xa14
 8000560:	6800      	ldr	r0, [r0, #0]
 8000562:	4770      	bx	lr

08000564 <ai_platform_interface_api_get_version>:
 8000564:	f8df 05b0 	ldr.w	r0, [pc, #1456]	; 8000b18 <.text_19>
 8000568:	f240 4249 	movw	r2, #1097	; 0x449
 800056c:	6801      	ldr	r1, [r0, #0]
 800056e:	0849      	lsrs	r1, r1, #1
 8000570:	0049      	lsls	r1, r1, #1
 8000572:	6001      	str	r1, [r0, #0]
 8000574:	f8df 05a4 	ldr.w	r0, [pc, #1444]	; 8000b1c <.text_20>
 8000578:	6801      	ldr	r1, [r0, #0]
 800057a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800057e:	4291      	cmp	r1, r2
 8000580:	d115      	bne.n	80005ae <ai_platform_interface_api_get_version+0x4a>
 8000582:	2001      	movs	r0, #1
 8000584:	2200      	movs	r2, #0
 8000586:	2100      	movs	r1, #0
 8000588:	4310      	orrs	r0, r2
 800058a:	4308      	orrs	r0, r1
 800058c:	d01d      	beq.n	80005ca <ai_platform_interface_api_get_version+0x66>
 800058e:	f8df 1590 	ldr.w	r1, [pc, #1424]	; 8000b20 <.text_21>
 8000592:	2201      	movs	r2, #1
 8000594:	608a      	str	r2, [r1, #8]
 8000596:	6888      	ldr	r0, [r1, #8]
 8000598:	2800      	cmp	r0, #0
 800059a:	d1fc      	bne.n	8000596 <ai_platform_interface_api_get_version+0x32>
 800059c:	f8df 2584 	ldr.w	r2, [pc, #1412]	; 8000b24 <.text_22>
 80005a0:	f8df 3584 	ldr.w	r3, [pc, #1412]	; 8000b28 <.text_23>
 80005a4:	600a      	str	r2, [r1, #0]
 80005a6:	6809      	ldr	r1, [r1, #0]
 80005a8:	4299      	cmp	r1, r3
 80005aa:	d026      	beq.n	80005fa <ai_platform_interface_api_get_version+0x96>
 80005ac:	e7fe      	b.n	80005ac <ai_platform_interface_api_get_version+0x48>
 80005ae:	2000      	movs	r0, #0
 80005b0:	f240 4c51 	movw	ip, #1105	; 0x451
 80005b4:	4561      	cmp	r1, ip
 80005b6:	bf08      	it	eq
 80005b8:	2201      	moveq	r2, #1
 80005ba:	d0e4      	beq.n	8000586 <ai_platform_interface_api_get_version+0x22>
 80005bc:	2200      	movs	r2, #0
 80005be:	f240 4352 	movw	r3, #1106	; 0x452
 80005c2:	4299      	cmp	r1, r3
 80005c4:	d1df      	bne.n	8000586 <ai_platform_interface_api_get_version+0x22>
 80005c6:	2101      	movs	r1, #1
 80005c8:	e7de      	b.n	8000588 <ai_platform_interface_api_get_version+0x24>
 80005ca:	f8df 0560 	ldr.w	r0, [pc, #1376]	; 8000b2c <.text_24>
 80005ce:	6801      	ldr	r1, [r0, #0]
 80005d0:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80005d4:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80005d8:	d10f      	bne.n	80005fa <ai_platform_interface_api_get_version+0x96>
 80005da:	f8df 1554 	ldr.w	r1, [pc, #1364]	; 8000b30 <.text_25>
 80005de:	2201      	movs	r2, #1
 80005e0:	608a      	str	r2, [r1, #8]
 80005e2:	6888      	ldr	r0, [r1, #8]
 80005e4:	2800      	cmp	r0, #0
 80005e6:	d1fc      	bne.n	80005e2 <ai_platform_interface_api_get_version+0x7e>
 80005e8:	f8df 2538 	ldr.w	r2, [pc, #1336]	; 8000b24 <.text_22>
 80005ec:	f8df 3538 	ldr.w	r3, [pc, #1336]	; 8000b28 <.text_23>
 80005f0:	600a      	str	r2, [r1, #0]
 80005f2:	6809      	ldr	r1, [r1, #0]
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d000      	beq.n	80005fa <ai_platform_interface_api_get_version+0x96>
 80005f8:	e7fe      	b.n	80005f8 <ai_platform_interface_api_get_version+0x94>
 80005fa:	f60f 107c 	addw	r0, pc, #2428	; 0x97c
 80005fe:	6800      	ldr	r0, [r0, #0]
 8000600:	4770      	bx	lr

08000602 <ai_platform_context_acquire>:
 8000602:	b430      	push	{r4, r5}
 8000604:	b120      	cbz	r0, 8000610 <ai_platform_context_acquire+0xe>
 8000606:	6801      	ldr	r1, [r0, #0]
 8000608:	f8df 2940 	ldr.w	r2, [pc, #2368]	; 8000f4c <.text_27>
 800060c:	4291      	cmp	r1, r2
 800060e:	d000      	beq.n	8000612 <ai_platform_context_acquire+0x10>
 8000610:	2000      	movs	r0, #0
 8000612:	f8df 1504 	ldr.w	r1, [pc, #1284]	; 8000b18 <.text_19>
 8000616:	f240 4449 	movw	r4, #1097	; 0x449
 800061a:	680b      	ldr	r3, [r1, #0]
 800061c:	085b      	lsrs	r3, r3, #1
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	600b      	str	r3, [r1, #0]
 8000622:	f8df 14f8 	ldr.w	r1, [pc, #1272]	; 8000b1c <.text_20>
 8000626:	680a      	ldr	r2, [r1, #0]
 8000628:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800062c:	42a2      	cmp	r2, r4
 800062e:	d115      	bne.n	800065c <ai_platform_context_acquire+0x5a>
 8000630:	2101      	movs	r1, #1
 8000632:	2300      	movs	r3, #0
 8000634:	2200      	movs	r2, #0
 8000636:	4319      	orrs	r1, r3
 8000638:	4311      	orrs	r1, r2
 800063a:	d01d      	beq.n	8000678 <ai_platform_context_acquire+0x76>
 800063c:	f8df 24e0 	ldr.w	r2, [pc, #1248]	; 8000b20 <.text_21>
 8000640:	2301      	movs	r3, #1
 8000642:	6093      	str	r3, [r2, #8]
 8000644:	6891      	ldr	r1, [r2, #8]
 8000646:	2900      	cmp	r1, #0
 8000648:	d1fc      	bne.n	8000644 <ai_platform_context_acquire+0x42>
 800064a:	f8df 34d8 	ldr.w	r3, [pc, #1240]	; 8000b24 <.text_22>
 800064e:	f8df 44d8 	ldr.w	r4, [pc, #1240]	; 8000b28 <.text_23>
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	6812      	ldr	r2, [r2, #0]
 8000656:	42a2      	cmp	r2, r4
 8000658:	d026      	beq.n	80006a8 <ai_platform_context_acquire+0xa6>
 800065a:	e7fe      	b.n	800065a <ai_platform_context_acquire+0x58>
 800065c:	2100      	movs	r1, #0
 800065e:	f240 4551 	movw	r5, #1105	; 0x451
 8000662:	42aa      	cmp	r2, r5
 8000664:	bf08      	it	eq
 8000666:	2301      	moveq	r3, #1
 8000668:	d0e4      	beq.n	8000634 <ai_platform_context_acquire+0x32>
 800066a:	2300      	movs	r3, #0
 800066c:	f240 4452 	movw	r4, #1106	; 0x452
 8000670:	42a2      	cmp	r2, r4
 8000672:	d1df      	bne.n	8000634 <ai_platform_context_acquire+0x32>
 8000674:	2201      	movs	r2, #1
 8000676:	e7de      	b.n	8000636 <ai_platform_context_acquire+0x34>
 8000678:	f8df 14b0 	ldr.w	r1, [pc, #1200]	; 8000b2c <.text_24>
 800067c:	680a      	ldr	r2, [r1, #0]
 800067e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000682:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8000686:	d10f      	bne.n	80006a8 <ai_platform_context_acquire+0xa6>
 8000688:	f8df 24a4 	ldr.w	r2, [pc, #1188]	; 8000b30 <.text_25>
 800068c:	2301      	movs	r3, #1
 800068e:	6093      	str	r3, [r2, #8]
 8000690:	6891      	ldr	r1, [r2, #8]
 8000692:	2900      	cmp	r1, #0
 8000694:	d1fc      	bne.n	8000690 <ai_platform_context_acquire+0x8e>
 8000696:	f8df 348c 	ldr.w	r3, [pc, #1164]	; 8000b24 <.text_22>
 800069a:	f8df 448c 	ldr.w	r4, [pc, #1164]	; 8000b28 <.text_23>
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	6812      	ldr	r2, [r2, #0]
 80006a2:	42a2      	cmp	r2, r4
 80006a4:	d000      	beq.n	80006a8 <ai_platform_context_acquire+0xa6>
 80006a6:	e7fe      	b.n	80006a6 <ai_platform_context_acquire+0xa4>
 80006a8:	bc30      	pop	{r4, r5}
 80006aa:	4770      	bx	lr

080006ac <ai_platform_context_release>:
 80006ac:	f8df 189c 	ldr.w	r1, [pc, #2204]	; 8000f4c <.text_27>
 80006b0:	6001      	str	r1, [r0, #0]
 80006b2:	4770      	bx	lr

080006b4 <.text_11>:
 80006b4:	00000000 	.word	0x00000000

080006b8 <ai_platform_network_get_error>:
 80006b8:	b430      	push	{r4, r5}
 80006ba:	b120      	cbz	r0, 80006c6 <ai_platform_network_get_error+0xe>
 80006bc:	6801      	ldr	r1, [r0, #0]
 80006be:	f8df 288c 	ldr.w	r2, [pc, #2188]	; 8000f4c <.text_27>
 80006c2:	4291      	cmp	r1, r2
 80006c4:	d000      	beq.n	80006c8 <ai_platform_network_get_error+0x10>
 80006c6:	2000      	movs	r0, #0
 80006c8:	f8df 144c 	ldr.w	r1, [pc, #1100]	; 8000b18 <.text_19>
 80006cc:	f240 4449 	movw	r4, #1097	; 0x449
 80006d0:	680b      	ldr	r3, [r1, #0]
 80006d2:	085b      	lsrs	r3, r3, #1
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	600b      	str	r3, [r1, #0]
 80006d8:	f8df 1440 	ldr.w	r1, [pc, #1088]	; 8000b1c <.text_20>
 80006dc:	680a      	ldr	r2, [r1, #0]
 80006de:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80006e2:	42a2      	cmp	r2, r4
 80006e4:	d115      	bne.n	8000712 <ai_platform_network_get_error+0x5a>
 80006e6:	2101      	movs	r1, #1
 80006e8:	2300      	movs	r3, #0
 80006ea:	2200      	movs	r2, #0
 80006ec:	4319      	orrs	r1, r3
 80006ee:	4311      	orrs	r1, r2
 80006f0:	d01d      	beq.n	800072e <ai_platform_network_get_error+0x76>
 80006f2:	f8df 242c 	ldr.w	r2, [pc, #1068]	; 8000b20 <.text_21>
 80006f6:	2301      	movs	r3, #1
 80006f8:	6093      	str	r3, [r2, #8]
 80006fa:	6891      	ldr	r1, [r2, #8]
 80006fc:	2900      	cmp	r1, #0
 80006fe:	d1fc      	bne.n	80006fa <ai_platform_network_get_error+0x42>
 8000700:	f8df 3420 	ldr.w	r3, [pc, #1056]	; 8000b24 <.text_22>
 8000704:	f8df 4420 	ldr.w	r4, [pc, #1056]	; 8000b28 <.text_23>
 8000708:	6013      	str	r3, [r2, #0]
 800070a:	6812      	ldr	r2, [r2, #0]
 800070c:	42a2      	cmp	r2, r4
 800070e:	d026      	beq.n	800075e <ai_platform_network_get_error+0xa6>
 8000710:	e7fe      	b.n	8000710 <ai_platform_network_get_error+0x58>
 8000712:	2100      	movs	r1, #0
 8000714:	f240 4551 	movw	r5, #1105	; 0x451
 8000718:	42aa      	cmp	r2, r5
 800071a:	bf08      	it	eq
 800071c:	2301      	moveq	r3, #1
 800071e:	d0e4      	beq.n	80006ea <ai_platform_network_get_error+0x32>
 8000720:	2300      	movs	r3, #0
 8000722:	f240 4452 	movw	r4, #1106	; 0x452
 8000726:	42a2      	cmp	r2, r4
 8000728:	d1df      	bne.n	80006ea <ai_platform_network_get_error+0x32>
 800072a:	2201      	movs	r2, #1
 800072c:	e7de      	b.n	80006ec <ai_platform_network_get_error+0x34>
 800072e:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8000b2c <.text_24>
 8000732:	680a      	ldr	r2, [r1, #0]
 8000734:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000738:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800073c:	d10f      	bne.n	800075e <ai_platform_network_get_error+0xa6>
 800073e:	f8df 23f0 	ldr.w	r2, [pc, #1008]	; 8000b30 <.text_25>
 8000742:	2301      	movs	r3, #1
 8000744:	6093      	str	r3, [r2, #8]
 8000746:	6891      	ldr	r1, [r2, #8]
 8000748:	2900      	cmp	r1, #0
 800074a:	d1fc      	bne.n	8000746 <ai_platform_network_get_error+0x8e>
 800074c:	f8df 33d4 	ldr.w	r3, [pc, #980]	; 8000b24 <.text_22>
 8000750:	f8df 43d4 	ldr.w	r4, [pc, #980]	; 8000b28 <.text_23>
 8000754:	6013      	str	r3, [r2, #0]
 8000756:	6812      	ldr	r2, [r2, #0]
 8000758:	42a2      	cmp	r2, r4
 800075a:	d000      	beq.n	800075e <ai_platform_network_get_error+0xa6>
 800075c:	e7fe      	b.n	800075c <ai_platform_network_get_error+0xa4>
 800075e:	b920      	cbnz	r0, 800076a <ai_platform_network_get_error+0xb2>
 8000760:	f60f 0028 	addw	r0, pc, #2088	; 0x828
 8000764:	6800      	ldr	r0, [r0, #0]
 8000766:	bc30      	pop	{r4, r5}
 8000768:	4770      	bx	lr
 800076a:	3010      	adds	r0, #16
 800076c:	bc30      	pop	{r4, r5}
 800076e:	f000 bc15 	b.w	8000f9c <core_get_error>

08000772 <ai_platform_network_set_error>:
 8000772:	2800      	cmp	r0, #0
 8000774:	bf1c      	itt	ne
 8000776:	3010      	addne	r0, #16
 8000778:	f000 bc15 	bne.w	8000fa6 <core_set_error>
 800077c:	4770      	bx	lr

0800077e <ai_platform_api_get_network_report>:
 800077e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000782:	0004      	movs	r4, r0
 8000784:	b081      	sub	sp, #4
 8000786:	460d      	mov	r5, r1
 8000788:	d004      	beq.n	8000794 <ai_platform_api_get_network_report+0x16>
 800078a:	6820      	ldr	r0, [r4, #0]
 800078c:	f8df 17bc 	ldr.w	r1, [pc, #1980]	; 8000f4c <.text_27>
 8000790:	4288      	cmp	r0, r1
 8000792:	d000      	beq.n	8000796 <ai_platform_api_get_network_report+0x18>
 8000794:	2400      	movs	r4, #0
 8000796:	f8df 0380 	ldr.w	r0, [pc, #896]	; 8000b18 <.text_19>
 800079a:	f240 4349 	movw	r3, #1097	; 0x449
 800079e:	6802      	ldr	r2, [r0, #0]
 80007a0:	0852      	lsrs	r2, r2, #1
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	6002      	str	r2, [r0, #0]
 80007a6:	f8df 0374 	ldr.w	r0, [pc, #884]	; 8000b1c <.text_20>
 80007aa:	6801      	ldr	r1, [r0, #0]
 80007ac:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80007b0:	4299      	cmp	r1, r3
 80007b2:	d115      	bne.n	80007e0 <ai_platform_api_get_network_report+0x62>
 80007b4:	2001      	movs	r0, #1
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	4310      	orrs	r0, r2
 80007bc:	4308      	orrs	r0, r1
 80007be:	d01d      	beq.n	80007fc <ai_platform_api_get_network_report+0x7e>
 80007c0:	f8df 135c 	ldr.w	r1, [pc, #860]	; 8000b20 <.text_21>
 80007c4:	2201      	movs	r2, #1
 80007c6:	608a      	str	r2, [r1, #8]
 80007c8:	6888      	ldr	r0, [r1, #8]
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d1fc      	bne.n	80007c8 <ai_platform_api_get_network_report+0x4a>
 80007ce:	f8df 2354 	ldr.w	r2, [pc, #852]	; 8000b24 <.text_22>
 80007d2:	f8df 3354 	ldr.w	r3, [pc, #852]	; 8000b28 <.text_23>
 80007d6:	600a      	str	r2, [r1, #0]
 80007d8:	6809      	ldr	r1, [r1, #0]
 80007da:	4299      	cmp	r1, r3
 80007dc:	d026      	beq.n	800082c <ai_platform_api_get_network_report+0xae>
 80007de:	e7fe      	b.n	80007de <ai_platform_api_get_network_report+0x60>
 80007e0:	2000      	movs	r0, #0
 80007e2:	f240 4651 	movw	r6, #1105	; 0x451
 80007e6:	42b1      	cmp	r1, r6
 80007e8:	bf08      	it	eq
 80007ea:	2201      	moveq	r2, #1
 80007ec:	d0e4      	beq.n	80007b8 <ai_platform_api_get_network_report+0x3a>
 80007ee:	2200      	movs	r2, #0
 80007f0:	f240 4352 	movw	r3, #1106	; 0x452
 80007f4:	4299      	cmp	r1, r3
 80007f6:	d1df      	bne.n	80007b8 <ai_platform_api_get_network_report+0x3a>
 80007f8:	2101      	movs	r1, #1
 80007fa:	e7de      	b.n	80007ba <ai_platform_api_get_network_report+0x3c>
 80007fc:	f8df 032c 	ldr.w	r0, [pc, #812]	; 8000b2c <.text_24>
 8000800:	6801      	ldr	r1, [r0, #0]
 8000802:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000806:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800080a:	d10f      	bne.n	800082c <ai_platform_api_get_network_report+0xae>
 800080c:	f8df 1320 	ldr.w	r1, [pc, #800]	; 8000b30 <.text_25>
 8000810:	2201      	movs	r2, #1
 8000812:	608a      	str	r2, [r1, #8]
 8000814:	6888      	ldr	r0, [r1, #8]
 8000816:	2800      	cmp	r0, #0
 8000818:	d1fc      	bne.n	8000814 <ai_platform_api_get_network_report+0x96>
 800081a:	f8df 2308 	ldr.w	r2, [pc, #776]	; 8000b24 <.text_22>
 800081e:	f8df 3308 	ldr.w	r3, [pc, #776]	; 8000b28 <.text_23>
 8000822:	600a      	str	r2, [r1, #0]
 8000824:	6809      	ldr	r1, [r1, #0]
 8000826:	4299      	cmp	r1, r3
 8000828:	d000      	beq.n	800082c <ai_platform_api_get_network_report+0xae>
 800082a:	e7fe      	b.n	800082a <ai_platform_api_get_network_report+0xac>
 800082c:	2c00      	cmp	r4, #0
 800082e:	bf18      	it	ne
 8000830:	2d00      	cmpne	r5, #0
 8000832:	d032      	beq.n	800089a <ai_platform_api_get_network_report+0x11c>
 8000834:	2000      	movs	r0, #0
 8000836:	66e8      	str	r0, [r5, #108]	; 0x6c
 8000838:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800083a:	b152      	cbz	r2, 8000852 <ai_platform_api_get_network_report+0xd4>
 800083c:	e000      	b.n	8000840 <ai_platform_api_get_network_report+0xc2>
 800083e:	4602      	mov	r2, r0
 8000840:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8000842:	1c49      	adds	r1, r1, #1
 8000844:	66e9      	str	r1, [r5, #108]	; 0x6c
 8000846:	68d0      	ldr	r0, [r2, #12]
 8000848:	4282      	cmp	r2, r0
 800084a:	bf18      	it	ne
 800084c:	2800      	cmpne	r0, #0
 800084e:	d1f6      	bne.n	800083e <ai_platform_api_get_network_report+0xc0>
 8000850:	b911      	cbnz	r1, 8000858 <ai_platform_api_get_network_report+0xda>
 8000852:	2218      	movs	r2, #24
 8000854:	2111      	movs	r1, #17
 8000856:	e01c      	b.n	8000892 <ai_platform_api_get_network_report+0x114>
 8000858:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 800085c:	b100      	cbz	r0, 8000860 <ai_platform_api_get_network_report+0xe2>
 800085e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000860:	f105 0134 	add.w	r1, r5, #52	; 0x34
 8000864:	f7ff fd20 	bl	80002a8 <_ai_platform_get_io_buffers_info>
 8000868:	8628      	strh	r0, [r5, #48]	; 0x30
 800086a:	b910      	cbnz	r0, 8000872 <ai_platform_api_get_network_report+0xf4>
 800086c:	2218      	movs	r2, #24
 800086e:	2112      	movs	r1, #18
 8000870:	e00f      	b.n	8000892 <ai_platform_api_get_network_report+0x114>
 8000872:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8000876:	2802      	cmp	r0, #2
 8000878:	bfa6      	itte	ge
 800087a:	6ce1      	ldrge	r1, [r4, #76]	; 0x4c
 800087c:	f101 000c 	addge.w	r0, r1, #12
 8000880:	2000      	movlt	r0, #0
 8000882:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8000886:	f7ff fd0f 	bl	80002a8 <_ai_platform_get_io_buffers_info>
 800088a:	8668      	strh	r0, [r5, #50]	; 0x32
 800088c:	b948      	cbnz	r0, 80008a2 <ai_platform_api_get_network_report+0x124>
 800088e:	2218      	movs	r2, #24
 8000890:	2113      	movs	r1, #19
 8000892:	f104 0010 	add.w	r0, r4, #16
 8000896:	f000 fb86 	bl	8000fa6 <core_set_error>
 800089a:	2000      	movs	r0, #0
 800089c:	b001      	add	sp, #4
 800089e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008a2:	6860      	ldr	r0, [r4, #4]
 80008a4:	f104 0230 	add.w	r2, r4, #48	; 0x30
 80008a8:	6728      	str	r0, [r5, #112]	; 0x70
 80008aa:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 80008ae:	e892 51c8 	ldmia.w	r2, {r3, r6, r7, r8, ip, lr}
 80008b2:	e881 51c8 	stmia.w	r1, {r3, r6, r7, r8, ip, lr}
 80008b6:	3418      	adds	r4, #24
 80008b8:	f105 0954 	add.w	r9, r5, #84	; 0x54
 80008bc:	e894 0c0f 	ldmia.w	r4, {r0, r1, r2, r3, sl, fp}
 80008c0:	e889 0c0f 	stmia.w	r9, {r0, r1, r2, r3, sl, fp}
 80008c4:	f7ff fca4 	bl	8000210 <CRC_Lock>
 80008c8:	a092      	add	r0, pc, #584	; (adr r0, 8000b14 <.text_18>)
 80008ca:	6128      	str	r0, [r5, #16]
 80008cc:	f7ff fca0 	bl	8000210 <CRC_Lock>
 80008d0:	f20f 619c 	addw	r1, pc, #1692	; 0x69c
 80008d4:	680a      	ldr	r2, [r1, #0]
 80008d6:	616a      	str	r2, [r5, #20]
 80008d8:	f7ff fc9a 	bl	8000210 <CRC_Lock>
 80008dc:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 80008e0:	6801      	ldr	r1, [r0, #0]
 80008e2:	6269      	str	r1, [r5, #36]	; 0x24
 80008e4:	f7ff fc94 	bl	8000210 <CRC_Lock>
 80008e8:	f20f 628c 	addw	r2, pc, #1676	; 0x68c
 80008ec:	6810      	ldr	r0, [r2, #0]
 80008ee:	62a8      	str	r0, [r5, #40]	; 0x28
 80008f0:	2001      	movs	r0, #1
 80008f2:	b001      	add	sp, #4
 80008f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080008f8 <ai_platform_network_create>:
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fa:	b081      	sub	sp, #4
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	9d06      	ldr	r5, [sp, #24]
 8000900:	4604      	mov	r4, r0
 8000902:	9807      	ldr	r0, [sp, #28]
 8000904:	4616      	mov	r6, r2
 8000906:	042d      	lsls	r5, r5, #16
 8000908:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 800090c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000910:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 8000914:	6807      	ldr	r7, [r0, #0]
 8000916:	f7ff fc7b 	bl	8000210 <CRC_Lock>
 800091a:	b924      	cbnz	r4, 8000926 <ai_platform_network_create+0x2e>
 800091c:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 8000920:	b001      	add	sp, #4
 8000922:	6800      	ldr	r0, [r0, #0]
 8000924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000926:	f8df 1624 	ldr.w	r1, [pc, #1572]	; 8000f4c <.text_27>
 800092a:	6031      	str	r1, [r6, #0]
 800092c:	6026      	str	r6, [r4, #0]
 800092e:	f000 fb33 	bl	8000f98 <core_init>
 8000932:	b910      	cbnz	r0, 800093a <ai_platform_network_create+0x42>
 8000934:	f20f 6044 	addw	r0, pc, #1604	; 0x644
 8000938:	e00e      	b.n	8000958 <ai_platform_network_create+0x60>
 800093a:	f8df 1614 	ldr.w	r1, [pc, #1556]	; 8000f50 <.text_28>
 800093e:	428d      	cmp	r5, r1
 8000940:	d303      	bcc.n	800094a <ai_platform_network_create+0x52>
 8000942:	f20f 623c 	addw	r2, pc, #1596	; 0x63c
 8000946:	6817      	ldr	r7, [r2, #0]
 8000948:	e007      	b.n	800095a <ai_platform_network_create+0x62>
 800094a:	f20f 6038 	addw	r0, pc, #1592	; 0x638
 800094e:	f000 fb3f 	bl	8000fd0 <ai_check_custom_types>
 8000952:	b920      	cbnz	r0, 800095e <ai_platform_network_create+0x66>
 8000954:	f20f 6030 	addw	r0, pc, #1584	; 0x630
 8000958:	6807      	ldr	r7, [r0, #0]
 800095a:	2100      	movs	r1, #0
 800095c:	6021      	str	r1, [r4, #0]
 800095e:	4638      	mov	r0, r7
 8000960:	b001      	add	sp, #4
 8000962:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000964 <ai_platform_network_destroy>:
 8000964:	b470      	push	{r4, r5, r6}
 8000966:	b130      	cbz	r0, 8000976 <ai_platform_network_destroy+0x12>
 8000968:	6801      	ldr	r1, [r0, #0]
 800096a:	f8df 25e0 	ldr.w	r2, [pc, #1504]	; 8000f4c <.text_27>
 800096e:	4291      	cmp	r1, r2
 8000970:	bf08      	it	eq
 8000972:	4602      	moveq	r2, r0
 8000974:	d000      	beq.n	8000978 <ai_platform_network_destroy+0x14>
 8000976:	2200      	movs	r2, #0
 8000978:	4967      	ldr	r1, [pc, #412]	; (8000b18 <.text_19>)
 800097a:	f240 4449 	movw	r4, #1097	; 0x449
 800097e:	680b      	ldr	r3, [r1, #0]
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	600b      	str	r3, [r1, #0]
 8000986:	4965      	ldr	r1, [pc, #404]	; (8000b1c <.text_20>)
 8000988:	680b      	ldr	r3, [r1, #0]
 800098a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800098e:	42a3      	cmp	r3, r4
 8000990:	d112      	bne.n	80009b8 <ai_platform_network_destroy+0x54>
 8000992:	2101      	movs	r1, #1
 8000994:	2400      	movs	r4, #0
 8000996:	2300      	movs	r3, #0
 8000998:	4321      	orrs	r1, r4
 800099a:	4319      	orrs	r1, r3
 800099c:	d01a      	beq.n	80009d4 <ai_platform_network_destroy+0x70>
 800099e:	4b60      	ldr	r3, [pc, #384]	; (8000b20 <.text_21>)
 80009a0:	2401      	movs	r4, #1
 80009a2:	609c      	str	r4, [r3, #8]
 80009a4:	6899      	ldr	r1, [r3, #8]
 80009a6:	2900      	cmp	r1, #0
 80009a8:	d1fc      	bne.n	80009a4 <ai_platform_network_destroy+0x40>
 80009aa:	4c5e      	ldr	r4, [pc, #376]	; (8000b24 <.text_22>)
 80009ac:	4d5e      	ldr	r5, [pc, #376]	; (8000b28 <.text_23>)
 80009ae:	601c      	str	r4, [r3, #0]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	42ab      	cmp	r3, r5
 80009b4:	d022      	beq.n	80009fc <ai_platform_network_destroy+0x98>
 80009b6:	e7fe      	b.n	80009b6 <ai_platform_network_destroy+0x52>
 80009b8:	2100      	movs	r1, #0
 80009ba:	f240 4651 	movw	r6, #1105	; 0x451
 80009be:	42b3      	cmp	r3, r6
 80009c0:	bf08      	it	eq
 80009c2:	2401      	moveq	r4, #1
 80009c4:	d0e7      	beq.n	8000996 <ai_platform_network_destroy+0x32>
 80009c6:	2400      	movs	r4, #0
 80009c8:	f240 4552 	movw	r5, #1106	; 0x452
 80009cc:	42ab      	cmp	r3, r5
 80009ce:	d1e2      	bne.n	8000996 <ai_platform_network_destroy+0x32>
 80009d0:	2301      	movs	r3, #1
 80009d2:	e7e1      	b.n	8000998 <ai_platform_network_destroy+0x34>
 80009d4:	4955      	ldr	r1, [pc, #340]	; (8000b2c <.text_24>)
 80009d6:	680b      	ldr	r3, [r1, #0]
 80009d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009dc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80009e0:	d10c      	bne.n	80009fc <ai_platform_network_destroy+0x98>
 80009e2:	4b53      	ldr	r3, [pc, #332]	; (8000b30 <.text_25>)
 80009e4:	2401      	movs	r4, #1
 80009e6:	609c      	str	r4, [r3, #8]
 80009e8:	6899      	ldr	r1, [r3, #8]
 80009ea:	2900      	cmp	r1, #0
 80009ec:	d1fc      	bne.n	80009e8 <ai_platform_network_destroy+0x84>
 80009ee:	4c4d      	ldr	r4, [pc, #308]	; (8000b24 <.text_22>)
 80009f0:	4d4d      	ldr	r5, [pc, #308]	; (8000b28 <.text_23>)
 80009f2:	601c      	str	r4, [r3, #0]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	42ab      	cmp	r3, r5
 80009f8:	d000      	beq.n	80009fc <ai_platform_network_destroy+0x98>
 80009fa:	e7fe      	b.n	80009fa <ai_platform_network_destroy+0x96>
 80009fc:	b102      	cbz	r2, 8000a00 <ai_platform_network_destroy+0x9c>
 80009fe:	2000      	movs	r0, #0
 8000a00:	bc70      	pop	{r4, r5, r6}
 8000a02:	4770      	bx	lr

08000a04 <ai_platform_network_init>:
 8000a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a08:	b081      	sub	sp, #4
 8000a0a:	460a      	mov	r2, r1
 8000a0c:	b120      	cbz	r0, 8000a18 <ai_platform_network_init+0x14>
 8000a0e:	6801      	ldr	r1, [r0, #0]
 8000a10:	f8df 3538 	ldr.w	r3, [pc, #1336]	; 8000f4c <.text_27>
 8000a14:	4299      	cmp	r1, r3
 8000a16:	d000      	beq.n	8000a1a <ai_platform_network_init+0x16>
 8000a18:	2000      	movs	r0, #0
 8000a1a:	493f      	ldr	r1, [pc, #252]	; (8000b18 <.text_19>)
 8000a1c:	f240 4549 	movw	r5, #1097	; 0x449
 8000a20:	680c      	ldr	r4, [r1, #0]
 8000a22:	0864      	lsrs	r4, r4, #1
 8000a24:	0064      	lsls	r4, r4, #1
 8000a26:	600c      	str	r4, [r1, #0]
 8000a28:	493c      	ldr	r1, [pc, #240]	; (8000b1c <.text_20>)
 8000a2a:	680b      	ldr	r3, [r1, #0]
 8000a2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a30:	42ab      	cmp	r3, r5
 8000a32:	d112      	bne.n	8000a5a <ai_platform_network_init+0x56>
 8000a34:	2101      	movs	r1, #1
 8000a36:	2400      	movs	r4, #0
 8000a38:	2300      	movs	r3, #0
 8000a3a:	4321      	orrs	r1, r4
 8000a3c:	4319      	orrs	r1, r3
 8000a3e:	d01a      	beq.n	8000a76 <ai_platform_network_init+0x72>
 8000a40:	4b37      	ldr	r3, [pc, #220]	; (8000b20 <.text_21>)
 8000a42:	2401      	movs	r4, #1
 8000a44:	609c      	str	r4, [r3, #8]
 8000a46:	6899      	ldr	r1, [r3, #8]
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	d1fc      	bne.n	8000a46 <ai_platform_network_init+0x42>
 8000a4c:	4c35      	ldr	r4, [pc, #212]	; (8000b24 <.text_22>)
 8000a4e:	4d36      	ldr	r5, [pc, #216]	; (8000b28 <.text_23>)
 8000a50:	601c      	str	r4, [r3, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	42ab      	cmp	r3, r5
 8000a56:	d022      	beq.n	8000a9e <ai_platform_network_init+0x9a>
 8000a58:	e7fe      	b.n	8000a58 <ai_platform_network_init+0x54>
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f240 4651 	movw	r6, #1105	; 0x451
 8000a60:	42b3      	cmp	r3, r6
 8000a62:	bf08      	it	eq
 8000a64:	2401      	moveq	r4, #1
 8000a66:	d0e7      	beq.n	8000a38 <ai_platform_network_init+0x34>
 8000a68:	2400      	movs	r4, #0
 8000a6a:	f240 4552 	movw	r5, #1106	; 0x452
 8000a6e:	42ab      	cmp	r3, r5
 8000a70:	d1e2      	bne.n	8000a38 <ai_platform_network_init+0x34>
 8000a72:	2301      	movs	r3, #1
 8000a74:	e7e1      	b.n	8000a3a <ai_platform_network_init+0x36>
 8000a76:	492d      	ldr	r1, [pc, #180]	; (8000b2c <.text_24>)
 8000a78:	680b      	ldr	r3, [r1, #0]
 8000a7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a7e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000a82:	d10c      	bne.n	8000a9e <ai_platform_network_init+0x9a>
 8000a84:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <.text_25>)
 8000a86:	2401      	movs	r4, #1
 8000a88:	609c      	str	r4, [r3, #8]
 8000a8a:	6899      	ldr	r1, [r3, #8]
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	d1fc      	bne.n	8000a8a <ai_platform_network_init+0x86>
 8000a90:	4c24      	ldr	r4, [pc, #144]	; (8000b24 <.text_22>)
 8000a92:	4d25      	ldr	r5, [pc, #148]	; (8000b28 <.text_23>)
 8000a94:	601c      	str	r4, [r3, #0]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	42ab      	cmp	r3, r5
 8000a9a:	d000      	beq.n	8000a9e <ai_platform_network_init+0x9a>
 8000a9c:	e7fe      	b.n	8000a9c <ai_platform_network_init+0x98>
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	d035      	beq.n	8000b0e <ai_platform_network_init+0x10a>
 8000aa2:	b90a      	cbnz	r2, 8000aa8 <ai_platform_network_init+0xa4>
 8000aa4:	2211      	movs	r2, #17
 8000aa6:	e012      	b.n	8000ace <ai_platform_network_init+0xca>
 8000aa8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000aaa:	6913      	ldr	r3, [r2, #16]
 8000aac:	b939      	cbnz	r1, 8000abe <ai_platform_network_init+0xba>
 8000aae:	8c14      	ldrh	r4, [r2, #32]
 8000ab0:	8bd5      	ldrh	r5, [r2, #30]
 8000ab2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000ab4:	436c      	muls	r4, r5
 8000ab6:	434c      	muls	r4, r1
 8000ab8:	bf18      	it	ne
 8000aba:	2213      	movne	r2, #19
 8000abc:	d107      	bne.n	8000ace <ai_platform_network_init+0xca>
 8000abe:	b973      	cbnz	r3, 8000ade <ai_platform_network_init+0xda>
 8000ac0:	8911      	ldrh	r1, [r2, #8]
 8000ac2:	88d4      	ldrh	r4, [r2, #6]
 8000ac4:	68d3      	ldr	r3, [r2, #12]
 8000ac6:	4361      	muls	r1, r4
 8000ac8:	4359      	muls	r1, r3
 8000aca:	d008      	beq.n	8000ade <ai_platform_network_init+0xda>
 8000acc:	2212      	movs	r2, #18
 8000ace:	2110      	movs	r1, #16
 8000ad0:	3010      	adds	r0, #16
 8000ad2:	f000 fa68 	bl	8000fa6 <core_set_error>
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	b001      	add	sp, #4
 8000ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ade:	f100 0118 	add.w	r1, r0, #24
 8000ae2:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 8000ae6:	e8b2 10f8 	ldmia.w	r2!, {r3, r4, r5, r6, r7, ip}
 8000aea:	e881 10f8 	stmia.w	r1, {r3, r4, r5, r6, r7, ip}
 8000aee:	e892 0f0a 	ldmia.w	r2, {r1, r3, r8, r9, sl, fp}
 8000af2:	e88e 0f0a 	stmia.w	lr, {r1, r3, r8, r9, sl, fp}
 8000af6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8000af8:	2103      	movs	r1, #3
 8000afa:	60c1      	str	r1, [r0, #12]
 8000afc:	b13a      	cbz	r2, 8000b0e <ai_platform_network_init+0x10a>
 8000afe:	e000      	b.n	8000b02 <ai_platform_network_init+0xfe>
 8000b00:	460a      	mov	r2, r1
 8000b02:	68d1      	ldr	r1, [r2, #12]
 8000b04:	6090      	str	r0, [r2, #8]
 8000b06:	428a      	cmp	r2, r1
 8000b08:	bf18      	it	ne
 8000b0a:	2900      	cmpne	r1, #0
 8000b0c:	d1f8      	bne.n	8000b00 <ai_platform_network_init+0xfc>
 8000b0e:	b001      	add	sp, #4
 8000b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000b14 <.text_18>:
 8000b14:	00000000 	.word	0x00000000

08000b18 <.text_19>:
 8000b18:	e0002000 	.word	0xe0002000

08000b1c <.text_20>:
 8000b1c:	e0042000 	.word	0xe0042000

08000b20 <.text_21>:
 8000b20:	40023000 	.word	0x40023000

08000b24 <.text_22>:
 8000b24:	f407a5c2 	.word	0xf407a5c2

08000b28 <.text_23>:
 8000b28:	b5e8b5cd 	.word	0xb5e8b5cd

08000b2c <.text_24>:
 8000b2c:	5c001000 	.word	0x5c001000

08000b30 <.text_25>:
 8000b30:	58024c00 	.word	0x58024c00

08000b34 <ai_platform_network_process>:
 8000b34:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	460a      	mov	r2, r1
 8000b3c:	b120      	cbz	r0, 8000b48 <ai_platform_network_process+0x14>
 8000b3e:	6801      	ldr	r1, [r0, #0]
 8000b40:	f8df 3408 	ldr.w	r3, [pc, #1032]	; 8000f4c <.text_27>
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d000      	beq.n	8000b4a <ai_platform_network_process+0x16>
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 8000f54 <.text_29>
 8000b4e:	f240 4549 	movw	r5, #1097	; 0x449
 8000b52:	680c      	ldr	r4, [r1, #0]
 8000b54:	0864      	lsrs	r4, r4, #1
 8000b56:	0064      	lsls	r4, r4, #1
 8000b58:	600c      	str	r4, [r1, #0]
 8000b5a:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8000f58 <.text_30>
 8000b5e:	680b      	ldr	r3, [r1, #0]
 8000b60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b64:	42ab      	cmp	r3, r5
 8000b66:	d115      	bne.n	8000b94 <ai_platform_network_process+0x60>
 8000b68:	2101      	movs	r1, #1
 8000b6a:	2400      	movs	r4, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4321      	orrs	r1, r4
 8000b70:	4319      	orrs	r1, r3
 8000b72:	d01d      	beq.n	8000bb0 <ai_platform_network_process+0x7c>
 8000b74:	f8df 33e4 	ldr.w	r3, [pc, #996]	; 8000f5c <.text_31>
 8000b78:	2401      	movs	r4, #1
 8000b7a:	609c      	str	r4, [r3, #8]
 8000b7c:	6899      	ldr	r1, [r3, #8]
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d1fc      	bne.n	8000b7c <ai_platform_network_process+0x48>
 8000b82:	f8df 43dc 	ldr.w	r4, [pc, #988]	; 8000f60 <.text_32>
 8000b86:	f8df 53dc 	ldr.w	r5, [pc, #988]	; 8000f64 <.text_33>
 8000b8a:	601c      	str	r4, [r3, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	42ab      	cmp	r3, r5
 8000b90:	d026      	beq.n	8000be0 <ai_platform_network_process+0xac>
 8000b92:	e7fe      	b.n	8000b92 <ai_platform_network_process+0x5e>
 8000b94:	2100      	movs	r1, #0
 8000b96:	f240 4a51 	movw	sl, #1105	; 0x451
 8000b9a:	4553      	cmp	r3, sl
 8000b9c:	bf08      	it	eq
 8000b9e:	2401      	moveq	r4, #1
 8000ba0:	d0e4      	beq.n	8000b6c <ai_platform_network_process+0x38>
 8000ba2:	2400      	movs	r4, #0
 8000ba4:	f240 4552 	movw	r5, #1106	; 0x452
 8000ba8:	42ab      	cmp	r3, r5
 8000baa:	d1df      	bne.n	8000b6c <ai_platform_network_process+0x38>
 8000bac:	2301      	movs	r3, #1
 8000bae:	e7de      	b.n	8000b6e <ai_platform_network_process+0x3a>
 8000bb0:	f8df 13b4 	ldr.w	r1, [pc, #948]	; 8000f68 <.text_34>
 8000bb4:	680b      	ldr	r3, [r1, #0]
 8000bb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000bba:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000bbe:	d10f      	bne.n	8000be0 <ai_platform_network_process+0xac>
 8000bc0:	f8df 33a8 	ldr.w	r3, [pc, #936]	; 8000f6c <.text_35>
 8000bc4:	2401      	movs	r4, #1
 8000bc6:	609c      	str	r4, [r3, #8]
 8000bc8:	6899      	ldr	r1, [r3, #8]
 8000bca:	2900      	cmp	r1, #0
 8000bcc:	d1fc      	bne.n	8000bc8 <ai_platform_network_process+0x94>
 8000bce:	f8df 4390 	ldr.w	r4, [pc, #912]	; 8000f60 <.text_32>
 8000bd2:	f8df 5390 	ldr.w	r5, [pc, #912]	; 8000f64 <.text_33>
 8000bd6:	601c      	str	r4, [r3, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	42ab      	cmp	r3, r5
 8000bdc:	d000      	beq.n	8000be0 <ai_platform_network_process+0xac>
 8000bde:	e7fe      	b.n	8000bde <ai_platform_network_process+0xaa>
 8000be0:	2800      	cmp	r0, #0
 8000be2:	f000 8114 	beq.w	8000e0e <ai_platform_network_process+0x2da>
 8000be6:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
 8000bea:	b101      	cbz	r1, 8000bee <ai_platform_network_process+0xba>
 8000bec:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8000bee:	7b05      	ldrb	r5, [r0, #12]
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	2400      	movs	r4, #0
 8000bf4:	82c3      	strh	r3, [r0, #22]
 8000bf6:	8284      	strh	r4, [r0, #20]
 8000bf8:	f005 0503 	and.w	r5, r5, #3
 8000bfc:	2d03      	cmp	r5, #3
 8000bfe:	d002      	beq.n	8000c06 <ai_platform_network_process+0xd2>
 8000c00:	2230      	movs	r2, #48	; 0x30
 8000c02:	2111      	movs	r1, #17
 8000c04:	e100      	b.n	8000e08 <ai_platform_network_process+0x2d4>
 8000c06:	2a00      	cmp	r2, #0
 8000c08:	bf1e      	ittt	ne
 8000c0a:	2900      	cmpne	r1, #0
 8000c0c:	880b      	ldrhne	r3, [r1, #0]
 8000c0e:	2b00      	cmpne	r3, #0
 8000c10:	f000 80f8 	beq.w	8000e04 <ai_platform_network_process+0x2d0>
 8000c14:	f8b2 b004 	ldrh.w	fp, [r2, #4]
 8000c18:	46a0      	mov	r8, r4
 8000c1a:	46a1      	mov	r9, r4
 8000c1c:	2600      	movs	r6, #0
 8000c1e:	1d17      	adds	r7, r2, #4
 8000c20:	4682      	mov	sl, r0
 8000c22:	9100      	str	r1, [sp, #0]
 8000c24:	e014      	b.n	8000c50 <ai_platform_network_process+0x11c>
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	f000 80ea 	beq.w	8000e02 <ai_platform_network_process+0x2ce>
 8000c2e:	8838      	ldrh	r0, [r7, #0]
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d052      	beq.n	8000cda <ai_platform_network_process+0x1a6>
 8000c34:	4558      	cmp	r0, fp
 8000c36:	4622      	mov	r2, r4
 8000c38:	f108 0801 	add.w	r8, r8, #1
 8000c3c:	f109 0904 	add.w	r9, r9, #4
 8000c40:	bf28      	it	cs
 8000c42:	4683      	movcs	fp, r0
 8000c44:	1f39      	subs	r1, r7, #4
 8000c46:	4628      	mov	r0, r5
 8000c48:	f7ff fb84 	bl	8000354 <_platform_network_state_setup>
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	3610      	adds	r6, #16
 8000c50:	9800      	ldr	r0, [sp, #0]
 8000c52:	8801      	ldrh	r1, [r0, #0]
 8000c54:	4588      	cmp	r8, r1
 8000c56:	d24a      	bcs.n	8000cee <ai_platform_network_process+0x1ba>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	6850      	ldr	r0, [r2, #4]
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	bf1c      	itt	ne
 8000c60:	f850 4009 	ldrne.w	r4, [r0, r9]
 8000c64:	2c00      	cmpne	r4, #0
 8000c66:	d042      	beq.n	8000cee <ai_platform_network_process+0x1ba>
 8000c68:	6891      	ldr	r1, [r2, #8]
 8000c6a:	680a      	ldr	r2, [r1, #0]
 8000c6c:	1995      	adds	r5, r2, r6
 8000c6e:	f000 80c8 	beq.w	8000e02 <ai_platform_network_process+0x2ce>
 8000c72:	69a0      	ldr	r0, [r4, #24]
 8000c74:	887b      	ldrh	r3, [r7, #2]
 8000c76:	88ba      	ldrh	r2, [r7, #4]
 8000c78:	6841      	ldr	r1, [r0, #4]
 8000c7a:	68b8      	ldr	r0, [r7, #8]
 8000c7c:	fb03 fc02 	mul.w	ip, r3, r2
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	4561      	cmp	r1, ip
 8000c86:	d32d      	bcc.n	8000ce4 <ai_platform_network_process+0x1b0>
 8000c88:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000c8c:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000c90:	459e      	cmp	lr, r3
 8000c92:	bf01      	itttt	eq
 8000c94:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 8000c98:	4293      	cmpeq	r3, r2
 8000c9a:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000c9e:	4282      	cmpeq	r2, r0
 8000ca0:	d120      	bne.n	8000ce4 <ai_platform_network_process+0x1b0>
 8000ca2:	69a0      	ldr	r0, [r4, #24]
 8000ca4:	6800      	ldr	r0, [r0, #0]
 8000ca6:	f005 fc5b 	bl	8006560 <ai_array_get_byte_size>
 8000caa:	68e1      	ldr	r1, [r4, #12]
 8000cac:	6963      	ldr	r3, [r4, #20]
 8000cae:	68ca      	ldr	r2, [r1, #12]
 8000cb0:	68d9      	ldr	r1, [r3, #12]
 8000cb2:	434a      	muls	r2, r1
 8000cb4:	4290      	cmp	r0, r2
 8000cb6:	d315      	bcc.n	8000ce4 <ai_platform_network_process+0x1b0>
 8000cb8:	69a0      	ldr	r0, [r4, #24]
 8000cba:	6800      	ldr	r0, [r0, #0]
 8000cbc:	f005 fb78 	bl	80063b0 <ai_array_to_buffer_fmt>
 8000cc0:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8000cc4:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8000cc8:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	d0aa      	beq.n	8000c26 <ai_platform_network_process+0xf2>
 8000cd0:	2219      	movs	r2, #25
 8000cd2:	2112      	movs	r1, #18
 8000cd4:	f10a 0010 	add.w	r0, sl, #16
 8000cd8:	e097      	b.n	8000e0a <ai_platform_network_process+0x2d6>
 8000cda:	2221      	movs	r2, #33	; 0x21
 8000cdc:	2112      	movs	r1, #18
 8000cde:	f10a 0010 	add.w	r0, sl, #16
 8000ce2:	e092      	b.n	8000e0a <ai_platform_network_process+0x2d6>
 8000ce4:	2218      	movs	r2, #24
 8000ce6:	2112      	movs	r1, #18
 8000ce8:	f10a 0010 	add.w	r0, sl, #16
 8000cec:	e08d      	b.n	8000e0a <ai_platform_network_process+0x2d6>
 8000cee:	9902      	ldr	r1, [sp, #8]
 8000cf0:	4655      	mov	r5, sl
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	d076      	beq.n	8000de4 <ai_platform_network_process+0x2b0>
 8000cf6:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8000cfa:	2802      	cmp	r0, #2
 8000cfc:	db7c      	blt.n	8000df8 <ai_platform_network_process+0x2c4>
 8000cfe:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000d00:	f113 000c 	adds.w	r0, r3, #12
 8000d04:	bf1c      	itt	ne
 8000d06:	8802      	ldrhne	r2, [r0, #0]
 8000d08:	2a00      	cmpne	r2, #0
 8000d0a:	d075      	beq.n	8000df8 <ai_platform_network_process+0x2c4>
 8000d0c:	f04f 0800 	mov.w	r8, #0
 8000d10:	46c1      	mov	r9, r8
 8000d12:	2600      	movs	r6, #0
 8000d14:	1d0f      	adds	r7, r1, #4
 8000d16:	9000      	str	r0, [sp, #0]
 8000d18:	e013      	b.n	8000d42 <ai_platform_network_process+0x20e>
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	d059      	beq.n	8000dd4 <ai_platform_network_process+0x2a0>
 8000d20:	8838      	ldrh	r0, [r7, #0]
 8000d22:	2800      	cmp	r0, #0
 8000d24:	d051      	beq.n	8000dca <ai_platform_network_process+0x296>
 8000d26:	4558      	cmp	r0, fp
 8000d28:	4622      	mov	r2, r4
 8000d2a:	f108 0801 	add.w	r8, r8, #1
 8000d2e:	f109 0904 	add.w	r9, r9, #4
 8000d32:	bf28      	it	cs
 8000d34:	4683      	movcs	fp, r0
 8000d36:	1f39      	subs	r1, r7, #4
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f7ff fb0b 	bl	8000354 <_platform_network_state_setup>
 8000d3e:	3718      	adds	r7, #24
 8000d40:	3610      	adds	r6, #16
 8000d42:	9800      	ldr	r0, [sp, #0]
 8000d44:	8801      	ldrh	r1, [r0, #0]
 8000d46:	4588      	cmp	r8, r1
 8000d48:	d249      	bcs.n	8000dde <ai_platform_network_process+0x2aa>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	6850      	ldr	r0, [r2, #4]
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	bf1c      	itt	ne
 8000d52:	f850 4009 	ldrne.w	r4, [r0, r9]
 8000d56:	2c00      	cmpne	r4, #0
 8000d58:	d041      	beq.n	8000dde <ai_platform_network_process+0x2aa>
 8000d5a:	6891      	ldr	r1, [r2, #8]
 8000d5c:	680a      	ldr	r2, [r1, #0]
 8000d5e:	1995      	adds	r5, r2, r6
 8000d60:	d038      	beq.n	8000dd4 <ai_platform_network_process+0x2a0>
 8000d62:	69a0      	ldr	r0, [r4, #24]
 8000d64:	887b      	ldrh	r3, [r7, #2]
 8000d66:	88ba      	ldrh	r2, [r7, #4]
 8000d68:	6841      	ldr	r1, [r0, #4]
 8000d6a:	68b8      	ldr	r0, [r7, #8]
 8000d6c:	fb03 fc02 	mul.w	ip, r3, r2
 8000d70:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d74:	4561      	cmp	r1, ip
 8000d76:	d33e      	bcc.n	8000df6 <ai_platform_network_process+0x2c2>
 8000d78:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000d7c:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000d80:	459e      	cmp	lr, r3
 8000d82:	bf01      	itttt	eq
 8000d84:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 8000d88:	4293      	cmpeq	r3, r2
 8000d8a:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000d8e:	4282      	cmpeq	r2, r0
 8000d90:	d131      	bne.n	8000df6 <ai_platform_network_process+0x2c2>
 8000d92:	69a0      	ldr	r0, [r4, #24]
 8000d94:	6800      	ldr	r0, [r0, #0]
 8000d96:	f005 fbe3 	bl	8006560 <ai_array_get_byte_size>
 8000d9a:	68e1      	ldr	r1, [r4, #12]
 8000d9c:	6963      	ldr	r3, [r4, #20]
 8000d9e:	68ca      	ldr	r2, [r1, #12]
 8000da0:	68d9      	ldr	r1, [r3, #12]
 8000da2:	434a      	muls	r2, r1
 8000da4:	4290      	cmp	r0, r2
 8000da6:	d326      	bcc.n	8000df6 <ai_platform_network_process+0x2c2>
 8000da8:	69a0      	ldr	r0, [r4, #24]
 8000daa:	6800      	ldr	r0, [r0, #0]
 8000dac:	f005 fb00 	bl	80063b0 <ai_array_to_buffer_fmt>
 8000db0:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8000db4:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8000db8:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	d0ac      	beq.n	8000d1a <ai_platform_network_process+0x1e6>
 8000dc0:	2219      	movs	r2, #25
 8000dc2:	2113      	movs	r1, #19
 8000dc4:	f10a 0010 	add.w	r0, sl, #16
 8000dc8:	e01f      	b.n	8000e0a <ai_platform_network_process+0x2d6>
 8000dca:	2221      	movs	r2, #33	; 0x21
 8000dcc:	2113      	movs	r1, #19
 8000dce:	f10a 0010 	add.w	r0, sl, #16
 8000dd2:	e01a      	b.n	8000e0a <ai_platform_network_process+0x2d6>
 8000dd4:	2217      	movs	r2, #23
 8000dd6:	2113      	movs	r1, #19
 8000dd8:	f10a 0010 	add.w	r0, sl, #16
 8000ddc:	e015      	b.n	8000e0a <ai_platform_network_process+0x2d6>
 8000dde:	4655      	mov	r5, sl
 8000de0:	f8a5 b014 	strh.w	fp, [r5, #20]
 8000de4:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8000de8:	2800      	cmp	r0, #0
 8000dea:	bf14      	ite	ne
 8000dec:	f8d5 a04c 	ldrne.w	sl, [r5, #76]	; 0x4c
 8000df0:	f04f 0a00 	moveq.w	sl, #0
 8000df4:	e00f      	b.n	8000e16 <ai_platform_network_process+0x2e2>
 8000df6:	4655      	mov	r5, sl
 8000df8:	2218      	movs	r2, #24
 8000dfa:	2113      	movs	r1, #19
 8000dfc:	f105 0010 	add.w	r0, r5, #16
 8000e00:	e003      	b.n	8000e0a <ai_platform_network_process+0x2d6>
 8000e02:	4650      	mov	r0, sl
 8000e04:	2217      	movs	r2, #23
 8000e06:	2112      	movs	r1, #18
 8000e08:	3010      	adds	r0, #16
 8000e0a:	f000 f8cc 	bl	8000fa6 <core_set_error>
 8000e0e:	2000      	movs	r0, #0
 8000e10:	b003      	add	sp, #12
 8000e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e16:	2802      	cmp	r0, #2
 8000e18:	8aa9      	ldrh	r1, [r5, #20]
 8000e1a:	bfa6      	itte	ge
 8000e1c:	6ce8      	ldrge	r0, [r5, #76]	; 0x4c
 8000e1e:	f100 0b0c 	addge.w	fp, r0, #12
 8000e22:	f04f 0b00 	movlt.w	fp, #0
 8000e26:	8ae8      	ldrh	r0, [r5, #22]
 8000e28:	ebb0 0f01 	cmp.w	r0, r1
 8000e2c:	f080 8089 	bcs.w	8000f42 <ai_platform_network_process+0x40e>
 8000e30:	f04f 0800 	mov.w	r8, #0
 8000e34:	4654      	mov	r4, sl
 8000e36:	46c1      	mov	r9, r8
 8000e38:	46c2      	mov	sl, r8
 8000e3a:	e018      	b.n	8000e6e <ai_platform_network_process+0x33a>
 8000e3c:	6882      	ldr	r2, [r0, #8]
 8000e3e:	68c3      	ldr	r3, [r0, #12]
 8000e40:	6871      	ldr	r1, [r6, #4]
 8000e42:	1ad2      	subs	r2, r2, r3
 8000e44:	188b      	adds	r3, r1, r2
 8000e46:	6083      	str	r3, [r0, #8]
 8000e48:	6871      	ldr	r1, [r6, #4]
 8000e4a:	60c1      	str	r1, [r0, #12]
 8000e4c:	6870      	ldr	r0, [r6, #4]
 8000e4e:	68b1      	ldr	r1, [r6, #8]
 8000e50:	4408      	add	r0, r1
 8000e52:	6070      	str	r0, [r6, #4]
 8000e54:	6831      	ldr	r1, [r6, #0]
 8000e56:	4288      	cmp	r0, r1
 8000e58:	d302      	bcc.n	8000e60 <ai_platform_network_process+0x32c>
 8000e5a:	68f0      	ldr	r0, [r6, #12]
 8000e5c:	4240      	negs	r0, r0
 8000e5e:	4408      	add	r0, r1
 8000e60:	6070      	str	r0, [r6, #4]
 8000e62:	f10a 0a01 	add.w	sl, sl, #1
 8000e66:	f109 0910 	add.w	r9, r9, #16
 8000e6a:	f108 0804 	add.w	r8, r8, #4
 8000e6e:	2c00      	cmp	r4, #0
 8000e70:	bf14      	ite	ne
 8000e72:	8820      	ldrhne	r0, [r4, #0]
 8000e74:	2000      	moveq	r0, #0
 8000e76:	4582      	cmp	sl, r0
 8000e78:	d212      	bcs.n	8000ea0 <ai_platform_network_process+0x36c>
 8000e7a:	6860      	ldr	r0, [r4, #4]
 8000e7c:	b180      	cbz	r0, 8000ea0 <ai_platform_network_process+0x36c>
 8000e7e:	f850 0008 	ldr.w	r0, [r0, r8]
 8000e82:	b168      	cbz	r0, 8000ea0 <ai_platform_network_process+0x36c>
 8000e84:	6980      	ldr	r0, [r0, #24]
 8000e86:	68a1      	ldr	r1, [r4, #8]
 8000e88:	6803      	ldr	r3, [r0, #0]
 8000e8a:	680a      	ldr	r2, [r1, #0]
 8000e8c:	0099      	lsls	r1, r3, #2
 8000e8e:	eb02 0609 	add.w	r6, r2, r9
 8000e92:	d5d3      	bpl.n	8000e3c <ai_platform_network_process+0x308>
 8000e94:	68b2      	ldr	r2, [r6, #8]
 8000e96:	6871      	ldr	r1, [r6, #4]
 8000e98:	6880      	ldr	r0, [r0, #8]
 8000e9a:	f00e fb18 	bl	800f4ce <__aeabi_memcpy>
 8000e9e:	e7d5      	b.n	8000e4c <ai_platform_network_process+0x318>
 8000ea0:	46a2      	mov	sl, r4
 8000ea2:	4628      	mov	r0, r5
 8000ea4:	f04f 0800 	mov.w	r8, #0
 8000ea8:	465c      	mov	r4, fp
 8000eaa:	f000 f93b 	bl	8001124 <ai_layers_forward_all>
 8000eae:	46c1      	mov	r9, r8
 8000eb0:	46c3      	mov	fp, r8
 8000eb2:	e019      	b.n	8000ee8 <ai_platform_network_process+0x3b4>
 8000eb4:	6871      	ldr	r1, [r6, #4]
 8000eb6:	68b2      	ldr	r2, [r6, #8]
 8000eb8:	4411      	add	r1, r2
 8000eba:	6071      	str	r1, [r6, #4]
 8000ebc:	6832      	ldr	r2, [r6, #0]
 8000ebe:	4291      	cmp	r1, r2
 8000ec0:	d302      	bcc.n	8000ec8 <ai_platform_network_process+0x394>
 8000ec2:	68f1      	ldr	r1, [r6, #12]
 8000ec4:	4249      	negs	r1, r1
 8000ec6:	4411      	add	r1, r2
 8000ec8:	6071      	str	r1, [r6, #4]
 8000eca:	460a      	mov	r2, r1
 8000ecc:	6881      	ldr	r1, [r0, #8]
 8000ece:	68c3      	ldr	r3, [r0, #12]
 8000ed0:	1ac9      	subs	r1, r1, r3
 8000ed2:	1853      	adds	r3, r2, r1
 8000ed4:	6083      	str	r3, [r0, #8]
 8000ed6:	6872      	ldr	r2, [r6, #4]
 8000ed8:	f8c0 200c 	str.w	r2, [r0, #12]
 8000edc:	f10b 0b01 	add.w	fp, fp, #1
 8000ee0:	f109 0910 	add.w	r9, r9, #16
 8000ee4:	f108 0804 	add.w	r8, r8, #4
 8000ee8:	2c00      	cmp	r4, #0
 8000eea:	bf14      	ite	ne
 8000eec:	8820      	ldrhne	r0, [r4, #0]
 8000eee:	2000      	moveq	r0, #0
 8000ef0:	4583      	cmp	fp, r0
 8000ef2:	d21d      	bcs.n	8000f30 <ai_platform_network_process+0x3fc>
 8000ef4:	6860      	ldr	r0, [r4, #4]
 8000ef6:	b1d8      	cbz	r0, 8000f30 <ai_platform_network_process+0x3fc>
 8000ef8:	f850 0008 	ldr.w	r0, [r0, r8]
 8000efc:	b1c0      	cbz	r0, 8000f30 <ai_platform_network_process+0x3fc>
 8000efe:	6980      	ldr	r0, [r0, #24]
 8000f00:	68a1      	ldr	r1, [r4, #8]
 8000f02:	6803      	ldr	r3, [r0, #0]
 8000f04:	680a      	ldr	r2, [r1, #0]
 8000f06:	0099      	lsls	r1, r3, #2
 8000f08:	eb02 0609 	add.w	r6, r2, r9
 8000f0c:	d5d2      	bpl.n	8000eb4 <ai_platform_network_process+0x380>
 8000f0e:	6881      	ldr	r1, [r0, #8]
 8000f10:	68b2      	ldr	r2, [r6, #8]
 8000f12:	6870      	ldr	r0, [r6, #4]
 8000f14:	f00e fadb 	bl	800f4ce <__aeabi_memcpy>
 8000f18:	6870      	ldr	r0, [r6, #4]
 8000f1a:	68b1      	ldr	r1, [r6, #8]
 8000f1c:	4408      	add	r0, r1
 8000f1e:	6070      	str	r0, [r6, #4]
 8000f20:	6831      	ldr	r1, [r6, #0]
 8000f22:	4288      	cmp	r0, r1
 8000f24:	d302      	bcc.n	8000f2c <ai_platform_network_process+0x3f8>
 8000f26:	68f0      	ldr	r0, [r6, #12]
 8000f28:	4240      	negs	r0, r0
 8000f2a:	4408      	add	r0, r1
 8000f2c:	6070      	str	r0, [r6, #4]
 8000f2e:	e7d5      	b.n	8000edc <ai_platform_network_process+0x3a8>
 8000f30:	8ae8      	ldrh	r0, [r5, #22]
 8000f32:	8aa9      	ldrh	r1, [r5, #20]
 8000f34:	46a3      	mov	fp, r4
 8000f36:	1c40      	adds	r0, r0, #1
 8000f38:	82e8      	strh	r0, [r5, #22]
 8000f3a:	b280      	uxth	r0, r0
 8000f3c:	4288      	cmp	r0, r1
 8000f3e:	f4ff af77 	bcc.w	8000e30 <ai_platform_network_process+0x2fc>
 8000f42:	8ae8      	ldrh	r0, [r5, #22]
 8000f44:	b003      	add	sp, #12
 8000f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000f4c <.text_27>:
 8000f4c:	a1c00100 	.word	0xa1c00100

08000f50 <.text_28>:
 8000f50:	01030001 	.word	0x01030001

08000f54 <.text_29>:
 8000f54:	e0002000 	.word	0xe0002000

08000f58 <.text_30>:
 8000f58:	e0042000 	.word	0xe0042000

08000f5c <.text_31>:
 8000f5c:	40023000 	.word	0x40023000

08000f60 <.text_32>:
 8000f60:	f407a5c2 	.word	0xf407a5c2

08000f64 <.text_33>:
 8000f64:	b5e8b5cd 	.word	0xb5e8b5cd

08000f68 <.text_34>:
 8000f68:	5c001000 	.word	0x5c001000

08000f6c <.text_35>:
 8000f6c:	58024c00 	.word	0x58024c00

08000f70 <.text_36>:
 8000f70:	00000104 	.word	0x00000104

08000f74 <.text_37>:
 8000f74:	00000101 	.word	0x00000101

08000f78 <.text_38>:
 8000f78:	00000301 	.word	0x00000301

08000f7c <.text_39>:
 8000f7c:	00001030 	.word	0x00001030

08000f80 <.text_40>:
 8000f80:	00001001 	.word	0x00001001

08000f84 <_platform_network_sanity_check{5}::signatures>:
 8000f84:	84048403                                ....

08000f88 <.text_42>:
 8000f88:	00001002 	.word	0x00001002

08000f8c <.text_43>:
 8000f8c:	00001010 	.word	0x00001010

08000f90 <.text_44>:
 8000f90:	00000000 	.word	0x00000000

08000f94 <.text_45>:
 8000f94:	00001010 	.word	0x00001010

08000f98 <core_init>:
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4770      	bx	lr

08000f9c <core_get_error>:
 8000f9c:	4601      	mov	r1, r0
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	6808      	ldr	r0, [r1, #0]
 8000fa2:	600a      	str	r2, [r1, #0]
 8000fa4:	4770      	bx	lr

08000fa6 <core_set_error>:
 8000fa6:	7803      	ldrb	r3, [r0, #0]
 8000fa8:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000fac:	d104      	bne.n	8000fb8 <core_set_error+0x12>
 8000fae:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000fb2:	6001      	str	r1, [r0, #0]
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	4770      	bx	lr
 8000fb8:	2000      	movs	r0, #0
 8000fba:	4770      	bx	lr

08000fbc <ai_layers_forward_layer>:
 8000fbc:	b510      	push	{r4, lr}
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	6921      	ldr	r1, [r4, #16]
 8000fc2:	4788      	blx	r1
 8000fc4:	68e0      	ldr	r0, [r4, #12]
 8000fc6:	42a0      	cmp	r0, r4
 8000fc8:	bf08      	it	eq
 8000fca:	2000      	moveq	r0, #0
 8000fcc:	bd10      	pop	{r4, pc}
	...

08000fd0 <ai_check_custom_types>:
 8000fd0:	b500      	push	{lr}
 8000fd2:	b081      	sub	sp, #4
 8000fd4:	b160      	cbz	r0, 8000ff0 <ai_check_custom_types+0x20>
 8000fd6:	7801      	ldrb	r1, [r0, #0]
 8000fd8:	2903      	cmp	r1, #3
 8000fda:	d109      	bne.n	8000ff0 <ai_check_custom_types+0x20>
 8000fdc:	f05f 0204 	movs.w	r2, #4
 8000fe0:	a18d      	add	r1, pc, #564	; (adr r1, 8001218 <ai_check_custom_types::ref_signatures>)
 8000fe2:	f00e fb29 	bl	800f638 <memcmp>
 8000fe6:	1e40      	subs	r0, r0, #1
 8000fe8:	4180      	sbcs	r0, r0
 8000fea:	0fc0      	lsrs	r0, r0, #31
 8000fec:	b001      	add	sp, #4
 8000fee:	bd00      	pop	{pc}
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	b001      	add	sp, #4
 8000ff4:	bd00      	pop	{pc}
	...

08000ff8 <ai_layer_type_name>:
 8000ff8:	f242 7211 	movw	r2, #10001	; 0x2711
 8000ffc:	1a81      	subs	r1, r0, r2
 8000ffe:	2901      	cmp	r1, #1
 8001000:	bf81      	itttt	hi
 8001002:	1ec9      	subhi	r1, r1, #3
 8001004:	290d      	cmphi	r1, #13
 8001006:	390f      	subhi	r1, #15
 8001008:	2909      	cmphi	r1, #9
 800100a:	f200 806b 	bhi.w	80010e4 <ai_layer_type_name+0xec>
 800100e:	1a80      	subs	r0, r0, r2
 8001010:	d033      	beq.n	800107a <ai_layer_type_name+0x82>
 8001012:	1e40      	subs	r0, r0, #1
 8001014:	d033      	beq.n	800107e <ai_layer_type_name+0x86>
 8001016:	1e80      	subs	r0, r0, #2
 8001018:	d033      	beq.n	8001082 <ai_layer_type_name+0x8a>
 800101a:	1e40      	subs	r0, r0, #1
 800101c:	d034      	beq.n	8001088 <ai_layer_type_name+0x90>
 800101e:	1e40      	subs	r0, r0, #1
 8001020:	d034      	beq.n	800108c <ai_layer_type_name+0x94>
 8001022:	1e40      	subs	r0, r0, #1
 8001024:	d034      	beq.n	8001090 <ai_layer_type_name+0x98>
 8001026:	1e40      	subs	r0, r0, #1
 8001028:	d034      	beq.n	8001094 <ai_layer_type_name+0x9c>
 800102a:	1e40      	subs	r0, r0, #1
 800102c:	d034      	beq.n	8001098 <ai_layer_type_name+0xa0>
 800102e:	1e40      	subs	r0, r0, #1
 8001030:	d034      	beq.n	800109c <ai_layer_type_name+0xa4>
 8001032:	1e40      	subs	r0, r0, #1
 8001034:	d034      	beq.n	80010a0 <ai_layer_type_name+0xa8>
 8001036:	1e40      	subs	r0, r0, #1
 8001038:	d034      	beq.n	80010a4 <ai_layer_type_name+0xac>
 800103a:	1e40      	subs	r0, r0, #1
 800103c:	d034      	beq.n	80010a8 <ai_layer_type_name+0xb0>
 800103e:	1e40      	subs	r0, r0, #1
 8001040:	d034      	beq.n	80010ac <ai_layer_type_name+0xb4>
 8001042:	1e40      	subs	r0, r0, #1
 8001044:	d034      	beq.n	80010b0 <ai_layer_type_name+0xb8>
 8001046:	1e40      	subs	r0, r0, #1
 8001048:	d034      	beq.n	80010b4 <ai_layer_type_name+0xbc>
 800104a:	1e40      	subs	r0, r0, #1
 800104c:	d034      	beq.n	80010b8 <ai_layer_type_name+0xc0>
 800104e:	1e80      	subs	r0, r0, #2
 8001050:	d034      	beq.n	80010bc <ai_layer_type_name+0xc4>
 8001052:	1e40      	subs	r0, r0, #1
 8001054:	d034      	beq.n	80010c0 <ai_layer_type_name+0xc8>
 8001056:	1e40      	subs	r0, r0, #1
 8001058:	d034      	beq.n	80010c4 <ai_layer_type_name+0xcc>
 800105a:	1e40      	subs	r0, r0, #1
 800105c:	d034      	beq.n	80010c8 <ai_layer_type_name+0xd0>
 800105e:	1e40      	subs	r0, r0, #1
 8001060:	d034      	beq.n	80010cc <ai_layer_type_name+0xd4>
 8001062:	1e40      	subs	r0, r0, #1
 8001064:	d034      	beq.n	80010d0 <ai_layer_type_name+0xd8>
 8001066:	1e40      	subs	r0, r0, #1
 8001068:	d034      	beq.n	80010d4 <ai_layer_type_name+0xdc>
 800106a:	1e40      	subs	r0, r0, #1
 800106c:	d034      	beq.n	80010d8 <ai_layer_type_name+0xe0>
 800106e:	1e40      	subs	r0, r0, #1
 8001070:	d034      	beq.n	80010dc <ai_layer_type_name+0xe4>
 8001072:	1e40      	subs	r0, r0, #1
 8001074:	d034      	beq.n	80010e0 <ai_layer_type_name+0xe8>
 8001076:	a01c      	add	r0, pc, #112	; (adr r0, 80010e8 <.text_5>)
 8001078:	4770      	bx	lr
 800107a:	a01c      	add	r0, pc, #112	; (adr r0, 80010ec <.text_6>)
 800107c:	4770      	bx	lr
 800107e:	a01c      	add	r0, pc, #112	; (adr r0, 80010f0 <.text_7>)
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	a031      	add	r0, pc, #196	; (adr r0, 800114c <.text_15>)
 8001086:	4770      	bx	lr
 8001088:	a032      	add	r0, pc, #200	; (adr r0, 8001154 <.text_16>)
 800108a:	4770      	bx	lr
 800108c:	a019      	add	r0, pc, #100	; (adr r0, 80010f4 <.text_8>)
 800108e:	4770      	bx	lr
 8001090:	a019      	add	r0, pc, #100	; (adr r0, 80010f8 <.text_9>)
 8001092:	4770      	bx	lr
 8001094:	a031      	add	r0, pc, #196	; (adr r0, 800115c <.text_17>)
 8001096:	4770      	bx	lr
 8001098:	a018      	add	r0, pc, #96	; (adr r0, 80010fc <.text_10>)
 800109a:	4770      	bx	lr
 800109c:	a031      	add	r0, pc, #196	; (adr r0, 8001164 <.text_18>)
 800109e:	4770      	bx	lr
 80010a0:	a032      	add	r0, pc, #200	; (adr r0, 800116c <.text_19>)
 80010a2:	4770      	bx	lr
 80010a4:	a036      	add	r0, pc, #216	; (adr r0, 8001180 <.text_20>)
 80010a6:	4770      	bx	lr
 80010a8:	a038      	add	r0, pc, #224	; (adr r0, 800118c <.text_21>)
 80010aa:	4770      	bx	lr
 80010ac:	a014      	add	r0, pc, #80	; (adr r0, 8001100 <.text_11>)
 80010ae:	4770      	bx	lr
 80010b0:	a038      	add	r0, pc, #224	; (adr r0, 8001194 <.text_22>)
 80010b2:	4770      	bx	lr
 80010b4:	a039      	add	r0, pc, #228	; (adr r0, 800119c <.text_23>)
 80010b6:	4770      	bx	lr
 80010b8:	a03b      	add	r0, pc, #236	; (adr r0, 80011a8 <.text_24>)
 80010ba:	4770      	bx	lr
 80010bc:	a03f      	add	r0, pc, #252	; (adr r0, 80011bc <.text_25>)
 80010be:	4770      	bx	lr
 80010c0:	a040      	add	r0, pc, #256	; (adr r0, 80011c4 <.text_26>)
 80010c2:	4770      	bx	lr
 80010c4:	a041      	add	r0, pc, #260	; (adr r0, 80011cc <.text_27>)
 80010c6:	4770      	bx	lr
 80010c8:	a043      	add	r0, pc, #268	; (adr r0, 80011d8 <.text_28>)
 80010ca:	4770      	bx	lr
 80010cc:	a044      	add	r0, pc, #272	; (adr r0, 80011e0 <.text_29>)
 80010ce:	4770      	bx	lr
 80010d0:	a045      	add	r0, pc, #276	; (adr r0, 80011e8 <.text_30>)
 80010d2:	4770      	bx	lr
 80010d4:	a00b      	add	r0, pc, #44	; (adr r0, 8001104 <.text_12>)
 80010d6:	4770      	bx	lr
 80010d8:	a049      	add	r0, pc, #292	; (adr r0, 8001200 <.text_31>)
 80010da:	4770      	bx	lr
 80010dc:	a04a      	add	r0, pc, #296	; (adr r0, 8001208 <.text_32>)
 80010de:	4770      	bx	lr
 80010e0:	a04b      	add	r0, pc, #300	; (adr r0, 8001210 <.text_33>)
 80010e2:	4770      	bx	lr
 80010e4:	a000      	add	r0, pc, #0	; (adr r0, 80010e8 <.text_5>)
 80010e6:	4770      	bx	lr

080010e8 <.text_5>:
 80010e8:	00000000 	.word	0x00000000

080010ec <.text_6>:
 80010ec:	00444441 	.word	0x00444441

080010f0 <.text_7>:
 80010f0:	00004e42 	.word	0x00004e42

080010f4 <.text_8>:
 80010f4:	00555247 	.word	0x00555247

080010f8 <.text_9>:
 80010f8:	004e524c 	.word	0x004e524c

080010fc <.text_10>:
 80010fc:	00004c4e 	.word	0x00004c4e

08001100 <.text_11>:
 8001100:	00004d53 	.word	0x00004d53

08001104 <.text_12>:
 8001104:	00444150 	.word	0x00444150

08001108 <ai_layer_type_is_valid>:
 8001108:	f242 7111 	movw	r1, #10001	; 0x2711
 800110c:	1a40      	subs	r0, r0, r1
 800110e:	2801      	cmp	r0, #1
 8001110:	bf81      	itttt	hi
 8001112:	1ec0      	subhi	r0, r0, #3
 8001114:	280d      	cmphi	r0, #13
 8001116:	380f      	subhi	r0, #15
 8001118:	2809      	cmphi	r0, #9
 800111a:	d801      	bhi.n	8001120 <ai_layer_type_is_valid+0x18>
 800111c:	2001      	movs	r0, #1
 800111e:	4770      	bx	lr
 8001120:	2000      	movs	r0, #0
 8001122:	4770      	bx	lr

08001124 <ai_layers_forward_all>:
 8001124:	b530      	push	{r4, r5, lr}
 8001126:	b081      	sub	sp, #4
 8001128:	4604      	mov	r4, r0
 800112a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800112c:	b158      	cbz	r0, 8001146 <ai_layers_forward_all+0x22>
 800112e:	6560      	str	r0, [r4, #84]	; 0x54
 8001130:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8001132:	6929      	ldr	r1, [r5, #16]
 8001134:	4628      	mov	r0, r5
 8001136:	4788      	blx	r1
 8001138:	68e8      	ldr	r0, [r5, #12]
 800113a:	42a8      	cmp	r0, r5
 800113c:	bf08      	it	eq
 800113e:	2000      	moveq	r0, #0
 8001140:	2800      	cmp	r0, #0
 8001142:	6560      	str	r0, [r4, #84]	; 0x54
 8001144:	d1f4      	bne.n	8001130 <ai_layers_forward_all+0xc>
 8001146:	b001      	add	sp, #4
 8001148:	bd30      	pop	{r4, r5, pc}
	...

0800114c <.text_15>:
 800114c:	564e4f43 	.word	0x564e4f43
 8001150:	00004432 	.word	0x00004432

08001154 <.text_16>:
 8001154:	534e4544 	.word	0x534e4544
 8001158:	0045      	.short	0x0045
	...

0800115c <.text_17>:
 800115c:	4d54534c 	.word	0x4d54534c
 8001160:	00          	.byte	0x00
 8001161:	00          	.byte	0x00
	...

08001164 <.text_18>:
 8001164:	4d524f4e 	.word	0x4d524f4e
 8001168:	00          	.byte	0x00
 8001169:	00          	.byte	0x00
	...

0800116c <.text_19>:
 800116c:	4954504f 	.word	0x4954504f
 8001170:	455a494d 	.word	0x455a494d
 8001174:	4f435f44 	.word	0x4f435f44
 8001178:	4432564e 	.word	0x4432564e
 800117c:	00          	.byte	0x00
 800117d:	00          	.byte	0x00
	...

08001180 <.text_20>:
 8001180:	4e415254 	.word	0x4e415254
 8001184:	534f5053 	.word	0x534f5053
 8001188:	0045      	.short	0x0045
	...

0800118c <.text_21>:
 800118c:	4c4f4f50 	.word	0x4c4f4f50
 8001190:	00          	.byte	0x00
 8001191:	00          	.byte	0x00
	...

08001194 <.text_22>:
 8001194:	494c5053 	.word	0x494c5053
 8001198:	0054      	.short	0x0054
	...

0800119c <.text_23>:
 800119c:	454d4954 	.word	0x454d4954
 80011a0:	4c45445f 	.word	0x4c45445f
 80011a4:	00005941 	.word	0x00005941

080011a8 <.text_24>:
 80011a8:	454d4954 	.word	0x454d4954
 80011ac:	5349445f 	.word	0x5349445f
 80011b0:	42495254 	.word	0x42495254
 80011b4:	44455455 	.word	0x44455455
 80011b8:	00          	.byte	0x00
 80011b9:	00          	.byte	0x00
	...

080011bc <.text_25>:
 80011bc:	434e4f43 	.word	0x434e4f43
 80011c0:	00005441 	.word	0x00005441

080011c4 <.text_26>:
 80011c4:	4d4d4547 	.word	0x4d4d4547
 80011c8:	00          	.byte	0x00
 80011c9:	00          	.byte	0x00
	...

080011cc <.text_27>:
 80011cc:	41535055 	.word	0x41535055
 80011d0:	454c504d 	.word	0x454c504d
 80011d4:	00          	.byte	0x00
 80011d5:	00          	.byte	0x00
	...

080011d8 <.text_28>:
 80011d8:	57544c45 	.word	0x57544c45
 80011dc:	00455349 	.word	0x00455349

080011e0 <.text_29>:
 80011e0:	454e4547 	.word	0x454e4547
 80011e4:	00434952 	.word	0x00434952

080011e8 <.text_30>:
 80011e8:	54534e49 	.word	0x54534e49
 80011ec:	45434e41 	.word	0x45434e41
 80011f0:	4d524f4e 	.word	0x4d524f4e
 80011f4:	5a494c41 	.word	0x5a494c41
 80011f8:	4f495441 	.word	0x4f495441
 80011fc:	004e      	.short	0x004e
	...

08001200 <.text_31>:
 8001200:	43494c53 	.word	0x43494c53
 8001204:	0045      	.short	0x0045
	...

08001208 <.text_32>:
 8001208:	454c4954 	.word	0x454c4954
 800120c:	00          	.byte	0x00
 800120d:	00          	.byte	0x00
	...

08001210 <.text_33>:
 8001210:	55444552 	.word	0x55444552
 8001214:	00004543 	.word	0x00004543

08001218 <ai_check_custom_types::ref_signatures>:
 8001218:	84048403                                ....

0800121c <ai_conv2d_stripe_f32>:
 800121c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001220:	b098      	sub	sp, #96	; 0x60
 8001222:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001224:	2800      	cmp	r0, #0
 8001226:	f000 82e3 	beq.w	80017f0 <ai_conv2d_stripe_f32+0x5d4>
 800122a:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 800122c:	f8dd e090 	ldr.w	lr, [sp, #144]	; 0x90
 8001230:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8001232:	9004      	str	r0, [sp, #16]
 8001234:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001236:	f9bd a0c0 	ldrsh.w	sl, [sp, #192]	; 0xc0
 800123a:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800123c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001240:	fb0e 6707 	mla	r7, lr, r7, r6
 8001244:	f9bd 60c0 	ldrsh.w	r6, [sp, #192]	; 0xc0
 8001248:	9705      	str	r7, [sp, #20]
 800124a:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 800124c:	9100      	str	r1, [sp, #0]
 800124e:	9217      	str	r2, [sp, #92]	; 0x5c
 8001250:	fb0e f707 	mul.w	r7, lr, r7
 8001254:	1986      	adds	r6, r0, r6
 8001256:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001258:	1e76      	subs	r6, r6, #1
 800125a:	fb96 fafa 	sdiv	sl, r6, sl
 800125e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8001260:	f9bd e0c0 	ldrsh.w	lr, [sp, #192]	; 0xc0
 8001264:	fb0a fa00 	mul.w	sl, sl, r0
 8001268:	9306      	str	r3, [sp, #24]
 800126a:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
 800126e:	f8dd a0a8 	ldr.w	sl, [sp, #168]	; 0xa8
 8001272:	4377      	muls	r7, r6
 8001274:	970b      	str	r7, [sp, #44]	; 0x2c
 8001276:	f9bd 70bc 	ldrsh.w	r7, [sp, #188]	; 0xbc
 800127a:	4377      	muls	r7, r6
 800127c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800127e:	9715      	str	r7, [sp, #84]	; 0x54
 8001280:	f9bd 70c0 	ldrsh.w	r7, [sp, #192]	; 0xc0
 8001284:	eba7 070a 	sub.w	r7, r7, sl
 8001288:	9713      	str	r7, [sp, #76]	; 0x4c
 800128a:	4657      	mov	r7, sl
 800128c:	4347      	muls	r7, r0
 800128e:	9711      	str	r7, [sp, #68]	; 0x44
 8001290:	fb06 fe0e 	mul.w	lr, r6, lr
 8001294:	f9bd 60bc 	ldrsh.w	r6, [sp, #188]	; 0xbc
 8001298:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 800129c:	f9bd 70c0 	ldrsh.w	r7, [sp, #192]	; 0xc0
 80012a0:	fb00 fe0a 	mul.w	lr, r0, sl
 80012a4:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 80012a8:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 80012ac:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80012b0:	fb16 f707 	smulbb	r7, r6, r7
 80012b4:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80012b6:	970a      	str	r7, [sp, #40]	; 0x28
 80012b8:	9f22      	ldr	r7, [sp, #136]	; 0x88
 80012ba:	fb00 fe0e 	mul.w	lr, r0, lr
 80012be:	fbba f6f6 	udiv	r6, sl, r6
 80012c2:	9610      	str	r6, [sp, #64]	; 0x40
 80012c4:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
 80012c8:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80012ca:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80012ce:	fbb7 fafa 	udiv	sl, r7, sl
 80012d2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 80012d6:	fbb6 f7f7 	udiv	r7, r6, r7
 80012da:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80012dc:	970e      	str	r7, [sp, #56]	; 0x38
 80012de:	1bad      	subs	r5, r5, r6
 80012e0:	950c      	str	r5, [sp, #48]	; 0x30
 80012e2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80012e4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80012e6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80012e8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80012ea:	4264      	negs	r4, r4
 80012ec:	bfd8      	it	le
 80012ee:	2400      	movle	r4, #0
 80012f0:	1a09      	subs	r1, r1, r0
 80012f2:	4291      	cmp	r1, r2
 80012f4:	bf3a      	itte	cc
 80012f6:	9924      	ldrcc	r1, [sp, #144]	; 0x90
 80012f8:	1a0e      	subcc	r6, r1, r0
 80012fa:	4616      	movcs	r6, r2
 80012fc:	9a05      	ldr	r2, [sp, #20]
 80012fe:	9922      	ldr	r1, [sp, #136]	; 0x88
 8001300:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001302:	18a2      	adds	r2, r4, r2
 8001304:	434a      	muls	r2, r1
 8001306:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800130a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800130c:	b900      	cbnz	r0, 8001310 <ai_conv2d_stripe_f32+0xf4>
 800130e:	9800      	ldr	r0, [sp, #0]
 8001310:	9001      	str	r0, [sp, #4]
 8001312:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001314:	1b36      	subs	r6, r6, r4
 8001316:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001318:	2801      	cmp	r0, #1
 800131a:	bf04      	itt	eq
 800131c:	990a      	ldreq	r1, [sp, #40]	; 0x28
 800131e:	2901      	cmpeq	r1, #1
 8001320:	f040 80ad 	bne.w	800147e <ai_conv2d_stripe_f32+0x262>
 8001324:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
 8001328:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800132a:	9822      	ldr	r0, [sp, #136]	; 0x88
 800132c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8001330:	ebaa 0a06 	sub.w	sl, sl, r6
 8001334:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8001336:	1b9b      	subs	r3, r3, r6
 8001338:	f8dd e000 	ldr.w	lr, [sp]
 800133c:	fb0a fa00 	mul.w	sl, sl, r0
 8001340:	fb03 f100 	mul.w	r1, r3, r0
 8001344:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8001346:	9b06      	ldr	r3, [sp, #24]
 8001348:	19e4      	adds	r4, r4, r7
 800134a:	1b40      	subs	r0, r0, r5
 800134c:	fb00 fc0c 	mul.w	ip, r0, ip
 8001350:	9822      	ldr	r0, [sp, #136]	; 0x88
 8001352:	4344      	muls	r4, r0
 8001354:	4370      	muls	r0, r6
 8001356:	eb03 0784 	add.w	r7, r3, r4, lsl #2
 800135a:	9e01      	ldr	r6, [sp, #4]
 800135c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800135e:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8001362:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8001364:	4576      	cmp	r6, lr
 8001366:	bf0c      	ite	eq
 8001368:	eddf 0ab0 	vldreq	s1, [pc, #704]	; 800162c <ai_conv2d_stripe_f32+0x410>
 800136c:	eef0 0a40 	vmovne.f32	s1, s0
 8001370:	2a00      	cmp	r2, #0
 8001372:	f000 8229 	beq.w	80017c8 <ai_conv2d_stripe_f32+0x5ac>
 8001376:	46b0      	mov	r8, r6
 8001378:	4613      	mov	r3, r2
 800137a:	462e      	mov	r6, r5
 800137c:	463a      	mov	r2, r7
 800137e:	f8cd c008 	str.w	ip, [sp, #8]
 8001382:	461d      	mov	r5, r3
 8001384:	4607      	mov	r7, r0
 8001386:	f8cd 9004 	str.w	r9, [sp, #4]
 800138a:	46c4      	mov	ip, r8
 800138c:	9b00      	ldr	r3, [sp, #0]
 800138e:	f027 0403 	bic.w	r4, r7, #3
 8001392:	2e00      	cmp	r6, #0
 8001394:	ed9c 1a00 	vldr	s2, [ip]
 8001398:	ee21 1a20 	vmul.f32	s2, s2, s1
 800139c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80013a0:	dd60      	ble.n	8001464 <ai_conv2d_stripe_f32+0x248>
 80013a2:	4630      	mov	r0, r6
 80013a4:	2c00      	cmp	r4, #0
 80013a6:	f04f 0900 	mov.w	r9, #0
 80013aa:	dd1e      	ble.n	80013ea <ai_conv2d_stripe_f32+0x1ce>
 80013ac:	edd2 4a00 	vldr	s9, [r2]
 80013b0:	f109 0904 	add.w	r9, r9, #4
 80013b4:	ed98 5a00 	vldr	s10, [r8]
 80013b8:	edd2 3a01 	vldr	s7, [r2, #4]
 80013bc:	ed98 4a01 	vldr	s8, [r8, #4]
 80013c0:	ee04 1a85 	vmla.f32	s2, s9, s10
 80013c4:	edd2 2a02 	vldr	s5, [r2, #8]
 80013c8:	ed98 3a02 	vldr	s6, [r8, #8]
 80013cc:	ee03 1a84 	vmla.f32	s2, s7, s8
 80013d0:	edd2 1a03 	vldr	s3, [r2, #12]
 80013d4:	3210      	adds	r2, #16
 80013d6:	45a1      	cmp	r9, r4
 80013d8:	ed98 2a03 	vldr	s4, [r8, #12]
 80013dc:	ee02 1a83 	vmla.f32	s2, s5, s6
 80013e0:	f108 0810 	add.w	r8, r8, #16
 80013e4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80013e8:	dbe0      	blt.n	80013ac <ai_conv2d_stripe_f32+0x190>
 80013ea:	45b9      	cmp	r9, r7
 80013ec:	f280 8034 	bge.w	8001458 <ai_conv2d_stripe_f32+0x23c>
 80013f0:	f109 0901 	add.w	r9, r9, #1
 80013f4:	edd2 2a00 	vldr	s5, [r2]
 80013f8:	1d12      	adds	r2, r2, #4
 80013fa:	edd8 1a00 	vldr	s3, [r8]
 80013fe:	45b9      	cmp	r9, r7
 8001400:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8001404:	f108 0804 	add.w	r8, r8, #4
 8001408:	da26      	bge.n	8001458 <ai_conv2d_stripe_f32+0x23c>
 800140a:	f109 0901 	add.w	r9, r9, #1
 800140e:	ed92 3a00 	vldr	s6, [r2]
 8001412:	1d12      	adds	r2, r2, #4
 8001414:	ed98 2a00 	vldr	s4, [r8]
 8001418:	45b9      	cmp	r9, r7
 800141a:	ee03 1a02 	vmla.f32	s2, s6, s4
 800141e:	f108 0804 	add.w	r8, r8, #4
 8001422:	da19      	bge.n	8001458 <ai_conv2d_stripe_f32+0x23c>
 8001424:	f109 0901 	add.w	r9, r9, #1
 8001428:	edd2 2a00 	vldr	s5, [r2]
 800142c:	1d12      	adds	r2, r2, #4
 800142e:	edd8 1a00 	vldr	s3, [r8]
 8001432:	45b9      	cmp	r9, r7
 8001434:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8001438:	f108 0804 	add.w	r8, r8, #4
 800143c:	da0c      	bge.n	8001458 <ai_conv2d_stripe_f32+0x23c>
 800143e:	f109 0901 	add.w	r9, r9, #1
 8001442:	ed92 2a00 	vldr	s4, [r2]
 8001446:	1d12      	adds	r2, r2, #4
 8001448:	ed98 3a00 	vldr	s6, [r8]
 800144c:	45b9      	cmp	r9, r7
 800144e:	ee02 1a03 	vmla.f32	s2, s4, s6
 8001452:	f108 0804 	add.w	r8, r8, #4
 8001456:	dbcb      	blt.n	80013f0 <ai_conv2d_stripe_f32+0x1d4>
 8001458:	1e40      	subs	r0, r0, #1
 800145a:	eb08 088a 	add.w	r8, r8, sl, lsl #2
 800145e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001462:	d19f      	bne.n	80013a4 <ai_conv2d_stripe_f32+0x188>
 8001464:	1e6d      	subs	r5, r5, #1
 8001466:	9802      	ldr	r0, [sp, #8]
 8001468:	ed8e 1a00 	vstr	s2, [lr]
 800146c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8001470:	f10e 0e04 	add.w	lr, lr, #4
 8001474:	f10c 0c04 	add.w	ip, ip, #4
 8001478:	d18b      	bne.n	8001392 <ai_conv2d_stripe_f32+0x176>
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	e1a4      	b.n	80017c8 <ai_conv2d_stripe_f32+0x5ac>
 800147e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8001480:	4288      	cmp	r0, r1
 8001482:	bf04      	itt	eq
 8001484:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
 8001486:	2b01      	cmpeq	r3, #1
 8001488:	f040 80d2 	bne.w	8001630 <ai_conv2d_stripe_f32+0x414>
 800148c:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800148e:	9822      	ldr	r0, [sp, #136]	; 0x88
 8001490:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001492:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8001496:	9102      	str	r1, [sp, #8]
 8001498:	9926      	ldr	r1, [sp, #152]	; 0x98
 800149a:	1bbf      	subs	r7, r7, r6
 800149c:	9b06      	ldr	r3, [sp, #24]
 800149e:	4347      	muls	r7, r0
 80014a0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80014a2:	4454      	add	r4, sl
 80014a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80014a8:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
 80014ac:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80014b0:	1b40      	subs	r0, r0, r5
 80014b2:	4341      	muls	r1, r0
 80014b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80014b8:	9b00      	ldr	r3, [sp, #0]
 80014ba:	ebac 0c06 	sub.w	ip, ip, r6
 80014be:	459e      	cmp	lr, r3
 80014c0:	eb02 0e8a 	add.w	lr, r2, sl, lsl #2
 80014c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80014c6:	f04f 0a00 	mov.w	sl, #0
 80014ca:	eb0e 0883 	add.w	r8, lr, r3, lsl #2
 80014ce:	bf0c      	ite	eq
 80014d0:	eddf 0a56 	vldreq	s1, [pc, #344]	; 800162c <ai_conv2d_stripe_f32+0x410>
 80014d4:	eef0 0a40 	vmovne.f32	s1, s0
 80014d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80014dc:	45c6      	cmp	lr, r8
 80014de:	f080 8173 	bcs.w	80017c8 <ai_conv2d_stripe_f32+0x5ac>
 80014e2:	9b00      	ldr	r3, [sp, #0]
 80014e4:	9a02      	ldr	r2, [sp, #8]
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	f000 8099 	beq.w	800161e <ai_conv2d_stripe_f32+0x402>
 80014ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80014f0:	9500      	str	r5, [sp, #0]
 80014f2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80014f6:	f8dd b008 	ldr.w	fp, [sp, #8]
 80014fa:	9108      	str	r1, [sp, #32]
 80014fc:	eb09 048a 	add.w	r4, r9, sl, lsl #2
 8001500:	f8cd e01c 	str.w	lr, [sp, #28]
 8001504:	4615      	mov	r5, r2
 8001506:	9a00      	ldr	r2, [sp, #0]
 8001508:	ed94 1a00 	vldr	s2, [r4]
 800150c:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001510:	9907      	ldr	r1, [sp, #28]
 8001512:	2a00      	cmp	r2, #0
 8001514:	f340 8072 	ble.w	80015fc <ai_conv2d_stripe_f32+0x3e0>
 8001518:	f026 0e03 	bic.w	lr, r6, #3
 800151c:	f1be 0f00 	cmp.w	lr, #0
 8001520:	f04f 0900 	mov.w	r9, #0
 8001524:	f340 8029 	ble.w	800157a <ai_conv2d_stripe_f32+0x35e>
 8001528:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 800152c:	edd0 1a00 	vldr	s3, [r0]
 8001530:	f109 0904 	add.w	r9, r9, #4
 8001534:	ed91 2a00 	vldr	s4, [r1]
 8001538:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 800153c:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001540:	edd0 2a01 	vldr	s5, [r0, #4]
 8001544:	edd0 1a02 	vldr	s3, [r0, #8]
 8001548:	ed91 3a00 	vldr	s6, [r1]
 800154c:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8001550:	ee02 1a83 	vmla.f32	s2, s5, s6
 8001554:	edd0 2a03 	vldr	s5, [r0, #12]
 8001558:	3010      	adds	r0, #16
 800155a:	45f1      	cmp	r9, lr
 800155c:	ed91 2a00 	vldr	s4, [r1]
 8001560:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8001564:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001568:	ed91 3a00 	vldr	s6, [r1]
 800156c:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8001570:	ee02 1a83 	vmla.f32	s2, s5, s6
 8001574:	dbda      	blt.n	800152c <ai_conv2d_stripe_f32+0x310>
 8001576:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 800157a:	45b1      	cmp	r9, r6
 800157c:	f280 8038 	bge.w	80015f0 <ai_conv2d_stripe_f32+0x3d4>
 8001580:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 8001584:	f109 0901 	add.w	r9, r9, #1
 8001588:	edd0 1a00 	vldr	s3, [r0]
 800158c:	1d00      	adds	r0, r0, #4
 800158e:	ed91 2a00 	vldr	s4, [r1]
 8001592:	45b1      	cmp	r9, r6
 8001594:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001598:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800159c:	da26      	bge.n	80015ec <ai_conv2d_stripe_f32+0x3d0>
 800159e:	f109 0901 	add.w	r9, r9, #1
 80015a2:	ed90 2a00 	vldr	s4, [r0]
 80015a6:	1d00      	adds	r0, r0, #4
 80015a8:	edd1 1a00 	vldr	s3, [r1]
 80015ac:	45b1      	cmp	r9, r6
 80015ae:	ee02 1a21 	vmla.f32	s2, s4, s3
 80015b2:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80015b6:	da19      	bge.n	80015ec <ai_conv2d_stripe_f32+0x3d0>
 80015b8:	f109 0901 	add.w	r9, r9, #1
 80015bc:	edd0 1a00 	vldr	s3, [r0]
 80015c0:	1d00      	adds	r0, r0, #4
 80015c2:	ed91 2a00 	vldr	s4, [r1]
 80015c6:	45b1      	cmp	r9, r6
 80015c8:	ee01 1a82 	vmla.f32	s2, s3, s4
 80015cc:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80015d0:	da0c      	bge.n	80015ec <ai_conv2d_stripe_f32+0x3d0>
 80015d2:	f109 0901 	add.w	r9, r9, #1
 80015d6:	ed90 2a00 	vldr	s4, [r0]
 80015da:	1d00      	adds	r0, r0, #4
 80015dc:	edd1 1a00 	vldr	s3, [r1]
 80015e0:	45b1      	cmp	r9, r6
 80015e2:	ee02 1a21 	vmla.f32	s2, s4, s3
 80015e6:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80015ea:	dbcb      	blt.n	8001584 <ai_conv2d_stripe_f32+0x368>
 80015ec:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 80015f0:	1e52      	subs	r2, r2, #1
 80015f2:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 80015f6:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 80015fa:	d18d      	bne.n	8001518 <ai_conv2d_stripe_f32+0x2fc>
 80015fc:	1d24      	adds	r4, r4, #4
 80015fe:	9908      	ldr	r1, [sp, #32]
 8001600:	ed85 1a00 	vstr	s2, [r5]
 8001604:	1d2d      	adds	r5, r5, #4
 8001606:	f1bb 0b01 	subs.w	fp, fp, #1
 800160a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800160e:	f10a 0a01 	add.w	sl, sl, #1
 8001612:	f47f af78 	bne.w	8001506 <ai_conv2d_stripe_f32+0x2ea>
 8001616:	9d00      	ldr	r5, [sp, #0]
 8001618:	9908      	ldr	r1, [sp, #32]
 800161a:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800161e:	9a03      	ldr	r2, [sp, #12]
 8001620:	f10e 0e04 	add.w	lr, lr, #4
 8001624:	4596      	cmp	lr, r2
 8001626:	f4bf af28 	bcs.w	800147a <ai_conv2d_stripe_f32+0x25e>
 800162a:	e75b      	b.n	80014e4 <ai_conv2d_stripe_f32+0x2c8>
 800162c:	00000000 	.word	0x00000000
 8001630:	f9bd 10bc 	ldrsh.w	r1, [sp, #188]	; 0xbc
 8001634:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8001638:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 800163c:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 8001640:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 8001644:	4608      	mov	r0, r1
 8001646:	1b0b      	subs	r3, r1, r4
 8001648:	1876      	adds	r6, r6, r1
 800164a:	fb94 faf0 	sdiv	sl, r4, r0
 800164e:	fb00 300a 	mla	r0, r0, sl, r3
 8001652:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8001656:	1e76      	subs	r6, r6, #1
 8001658:	1864      	adds	r4, r4, r1
 800165a:	1e64      	subs	r4, r4, #1
 800165c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8001660:	fb90 f7f1 	sdiv	r7, r0, r1
 8001664:	fb01 0717 	mls	r7, r1, r7, r0
 8001668:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800166a:	fb90 f0f3 	sdiv	r0, r0, r3
 800166e:	fb03 c000 	mla	r0, r3, r0, ip
 8001672:	1bf6      	subs	r6, r6, r7
 8001674:	fb90 fbf3 	sdiv	fp, r0, r3
 8001678:	fb03 0b1b 	mls	fp, r3, fp, r0
 800167c:	fb96 f0f1 	sdiv	r0, r6, r1
 8001680:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001682:	fb00 9911 	mls	r9, r0, r1, r9
 8001686:	9609      	str	r6, [sp, #36]	; 0x24
 8001688:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800168a:	fb94 f1f1 	sdiv	r1, r4, r1
 800168e:	9c00      	ldr	r4, [sp, #0]
 8001690:	eba5 050b 	sub.w	r5, r5, fp
 8001694:	195d      	adds	r5, r3, r5
 8001696:	1e6d      	subs	r5, r5, #1
 8001698:	fb95 fcf3 	sdiv	ip, r5, r3
 800169c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800169e:	eba6 060c 	sub.w	r6, r6, ip
 80016a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80016a4:	eba8 0800 	sub.w	r8, r8, r0
 80016a8:	fb05 f909 	mul.w	r9, r5, r9
 80016ac:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80016ae:	fb0e fe03 	mul.w	lr, lr, r3
 80016b2:	ebaa 0a03 	sub.w	sl, sl, r3
 80016b6:	fb08 f803 	mul.w	r8, r8, r3
 80016ba:	194d      	adds	r5, r1, r5
 80016bc:	fb06 fe0e 	mul.w	lr, r6, lr
 80016c0:	9e06      	ldr	r6, [sp, #24]
 80016c2:	435d      	muls	r5, r3
 80016c4:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 80016c8:	9d01      	ldr	r5, [sp, #4]
 80016ca:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80016cc:	42a5      	cmp	r5, r4
 80016ce:	9c24      	ldr	r4, [sp, #144]	; 0x90
 80016d0:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80016d2:	44b3      	add	fp, r6
 80016d4:	fb04 770b 	mla	r7, r4, fp, r7
 80016d8:	bf0c      	ite	eq
 80016da:	eddf 0a47 	vldreq	s1, [pc, #284]	; 80017f8 <.text_3>
 80016de:	eef0 0a40 	vmovne.f32	s1, s0
 80016e2:	436f      	muls	r7, r5
 80016e4:	eb02 0487 	add.w	r4, r2, r7, lsl #2
 80016e8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80016ea:	2500      	movs	r5, #0
 80016ec:	2a00      	cmp	r2, #0
 80016ee:	d06b      	beq.n	80017c8 <ai_conv2d_stripe_f32+0x5ac>
 80016f0:	9202      	str	r2, [sp, #8]
 80016f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016f4:	2a00      	cmp	r2, #0
 80016f6:	d061      	beq.n	80017bc <ai_conv2d_stripe_f32+0x5a0>
 80016f8:	9a00      	ldr	r2, [sp, #0]
 80016fa:	9e01      	ldr	r6, [sp, #4]
 80016fc:	f8cd c00c 	str.w	ip, [sp, #12]
 8001700:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8001704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001706:	f8cd e020 	str.w	lr, [sp, #32]
 800170a:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800170e:	9407      	str	r4, [sp, #28]
 8001710:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8001714:	ed96 1a00 	vldr	s2, [r6]
 8001718:	ee21 1a20 	vmul.f32	s2, s2, s1
 800171c:	9c07      	ldr	r4, [sp, #28]
 800171e:	f1be 0f00 	cmp.w	lr, #0
 8001722:	dd3b      	ble.n	800179c <ai_conv2d_stripe_f32+0x580>
 8001724:	2800      	cmp	r0, #0
 8001726:	dd32      	ble.n	800178e <ai_conv2d_stripe_f32+0x572>
 8001728:	ea4f 0c00 	mov.w	ip, r0
 800172c:	eb04 0b83 	add.w	fp, r4, r3, lsl #2
 8001730:	455c      	cmp	r4, fp
 8001732:	d227      	bcs.n	8001784 <ai_conv2d_stripe_f32+0x568>
 8001734:	edd1 2a00 	vldr	s5, [r1]
 8001738:	1d09      	adds	r1, r1, #4
 800173a:	edd4 1a00 	vldr	s3, [r4]
 800173e:	1d24      	adds	r4, r4, #4
 8001740:	455c      	cmp	r4, fp
 8001742:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8001746:	d21d      	bcs.n	8001784 <ai_conv2d_stripe_f32+0x568>
 8001748:	ed91 3a00 	vldr	s6, [r1]
 800174c:	1d09      	adds	r1, r1, #4
 800174e:	ed94 2a00 	vldr	s4, [r4]
 8001752:	1d24      	adds	r4, r4, #4
 8001754:	455c      	cmp	r4, fp
 8001756:	ee03 1a02 	vmla.f32	s2, s6, s4
 800175a:	d213      	bcs.n	8001784 <ai_conv2d_stripe_f32+0x568>
 800175c:	edd1 2a00 	vldr	s5, [r1]
 8001760:	1d09      	adds	r1, r1, #4
 8001762:	edd4 1a00 	vldr	s3, [r4]
 8001766:	1d24      	adds	r4, r4, #4
 8001768:	455c      	cmp	r4, fp
 800176a:	ee02 1aa1 	vmla.f32	s2, s5, s3
 800176e:	d209      	bcs.n	8001784 <ai_conv2d_stripe_f32+0x568>
 8001770:	ed91 2a00 	vldr	s4, [r1]
 8001774:	1d09      	adds	r1, r1, #4
 8001776:	ed94 3a00 	vldr	s6, [r4]
 800177a:	1d24      	adds	r4, r4, #4
 800177c:	455c      	cmp	r4, fp
 800177e:	ee02 1a03 	vmla.f32	s2, s4, s6
 8001782:	d3d7      	bcc.n	8001734 <ai_conv2d_stripe_f32+0x518>
 8001784:	f1bc 0c01 	subs.w	ip, ip, #1
 8001788:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 800178c:	d1ce      	bne.n	800172c <ai_conv2d_stripe_f32+0x510>
 800178e:	f1be 0e01 	subs.w	lr, lr, #1
 8001792:	eb04 0489 	add.w	r4, r4, r9, lsl #2
 8001796:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 800179a:	d1c3      	bne.n	8001724 <ai_conv2d_stripe_f32+0x508>
 800179c:	1c6d      	adds	r5, r5, #1
 800179e:	f8dd c020 	ldr.w	ip, [sp, #32]
 80017a2:	ed87 1a00 	vstr	s2, [r7]
 80017a6:	1d3f      	adds	r7, r7, #4
 80017a8:	1d36      	adds	r6, r6, #4
 80017aa:	1e52      	subs	r2, r2, #1
 80017ac:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 80017b0:	d1ae      	bne.n	8001710 <ai_conv2d_stripe_f32+0x4f4>
 80017b2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80017b6:	f8dd e020 	ldr.w	lr, [sp, #32]
 80017ba:	9c07      	ldr	r4, [sp, #28]
 80017bc:	9f02      	ldr	r7, [sp, #8]
 80017be:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80017c2:	1e7f      	subs	r7, r7, #1
 80017c4:	9702      	str	r7, [sp, #8]
 80017c6:	d194      	bne.n	80016f2 <ai_conv2d_stripe_f32+0x4d6>
 80017c8:	9900      	ldr	r1, [sp, #0]
 80017ca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80017cc:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80017d0:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 80017d4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	9b05      	ldr	r3, [sp, #20]
 80017da:	188a      	adds	r2, r1, r2
 80017dc:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 80017e0:	922c      	str	r2, [sp, #176]	; 0xb0
 80017e2:	9a04      	ldr	r2, [sp, #16]
 80017e4:	1859      	adds	r1, r3, r1
 80017e6:	9105      	str	r1, [sp, #20]
 80017e8:	1e52      	subs	r2, r2, #1
 80017ea:	9204      	str	r2, [sp, #16]
 80017ec:	f47f ad79 	bne.w	80012e2 <ai_conv2d_stripe_f32+0xc6>
 80017f0:	b018      	add	sp, #96	; 0x60
 80017f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080017f8 <.text_3>:
 80017f8:	00000000 	.word	0x00000000

080017fc <func_dummy>:
 80017fc:	4770      	bx	lr
	...

08001800 <ai_dict8_dot_array_f32>:
 8001800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001802:	4604      	mov	r4, r0
 8001804:	9805      	ldr	r0, [sp, #20]
 8001806:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 800180a:	ed9f 0adb 	vldr	s0, [pc, #876]	; 8001b78 <.text_7>
 800180e:	3d20      	subs	r5, #32
 8001810:	2808      	cmp	r0, #8
 8001812:	d231      	bcs.n	8001878 <ai_dict8_dot_array_f32+0x78>
 8001814:	3520      	adds	r5, #32
 8001816:	42ab      	cmp	r3, r5
 8001818:	f080 8159 	bcs.w	8001ace <ai_dict8_dot_array_f32+0x2ce>
 800181c:	780e      	ldrb	r6, [r1, #0]
 800181e:	edd3 0a00 	vldr	s1, [r3]
 8001822:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 8001826:	ed90 1a00 	vldr	s2, [r0]
 800182a:	1d18      	adds	r0, r3, #4
 800182c:	42a8      	cmp	r0, r5
 800182e:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001832:	f080 814c 	bcs.w	8001ace <ai_dict8_dot_array_f32+0x2ce>
 8001836:	784e      	ldrb	r6, [r1, #1]
 8001838:	edd0 0a00 	vldr	s1, [r0]
 800183c:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8001840:	1d00      	adds	r0, r0, #4
 8001842:	42a8      	cmp	r0, r5
 8001844:	ed93 1a00 	vldr	s2, [r3]
 8001848:	ee01 0a20 	vmla.f32	s0, s2, s1
 800184c:	f080 813f 	bcs.w	8001ace <ai_dict8_dot_array_f32+0x2ce>
 8001850:	788e      	ldrb	r6, [r1, #2]
 8001852:	1cc9      	adds	r1, r1, #3
 8001854:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8001858:	edd0 0a00 	vldr	s1, [r0]
 800185c:	ed93 1a00 	vldr	s2, [r3]
 8001860:	1d03      	adds	r3, r0, #4
 8001862:	42ab      	cmp	r3, r5
 8001864:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001868:	d3d8      	bcc.n	800181c <ai_dict8_dot_array_f32+0x1c>
 800186a:	edd4 0a00 	vldr	s1, [r4]
 800186e:	ee30 0a80 	vadd.f32	s0, s1, s0
 8001872:	ed84 0a00 	vstr	s0, [r4]
 8001876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001878:	f001 0003 	and.w	r0, r1, #3
 800187c:	2803      	cmp	r0, #3
 800187e:	f200 8126 	bhi.w	8001ace <ai_dict8_dot_array_f32+0x2ce>
 8001882:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001886:	0004      	.short	0x0004
 8001888:	00940089 	.word	0x00940089
 800188c:	009f      	.short	0x009f
 800188e:	429d      	cmp	r5, r3
 8001890:	d231      	bcs.n	80018f6 <ai_dict8_dot_array_f32+0xf6>
 8001892:	3520      	adds	r5, #32
 8001894:	42ab      	cmp	r3, r5
 8001896:	f080 811a 	bcs.w	8001ace <ai_dict8_dot_array_f32+0x2ce>
 800189a:	780e      	ldrb	r6, [r1, #0]
 800189c:	edd3 0a00 	vldr	s1, [r3]
 80018a0:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 80018a4:	ed90 1a00 	vldr	s2, [r0]
 80018a8:	1d18      	adds	r0, r3, #4
 80018aa:	42a8      	cmp	r0, r5
 80018ac:	ee01 0a20 	vmla.f32	s0, s2, s1
 80018b0:	f080 810d 	bcs.w	8001ace <ai_dict8_dot_array_f32+0x2ce>
 80018b4:	784e      	ldrb	r6, [r1, #1]
 80018b6:	edd0 0a00 	vldr	s1, [r0]
 80018ba:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 80018be:	1d00      	adds	r0, r0, #4
 80018c0:	42a8      	cmp	r0, r5
 80018c2:	ed93 1a00 	vldr	s2, [r3]
 80018c6:	ee01 0a20 	vmla.f32	s0, s2, s1
 80018ca:	f080 8100 	bcs.w	8001ace <ai_dict8_dot_array_f32+0x2ce>
 80018ce:	788e      	ldrb	r6, [r1, #2]
 80018d0:	1cc9      	adds	r1, r1, #3
 80018d2:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 80018d6:	edd0 0a00 	vldr	s1, [r0]
 80018da:	ed93 1a00 	vldr	s2, [r3]
 80018de:	1d03      	adds	r3, r0, #4
 80018e0:	42ab      	cmp	r3, r5
 80018e2:	ee01 0a20 	vmla.f32	s0, s2, s1
 80018e6:	d3d8      	bcc.n	800189a <ai_dict8_dot_array_f32+0x9a>
 80018e8:	edd4 0a00 	vldr	s1, [r4]
 80018ec:	ee30 0a80 	vadd.f32	s0, s1, s0
 80018f0:	ed84 0a00 	vstr	s0, [r4]
 80018f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018f6:	78cf      	ldrb	r7, [r1, #3]
 80018f8:	f891 e000 	ldrb.w	lr, [r1]
 80018fc:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001900:	788f      	ldrb	r7, [r1, #2]
 8001902:	f103 0010 	add.w	r0, r3, #16
 8001906:	ed93 4a00 	vldr	s8, [r3]
 800190a:	ed93 3a01 	vldr	s6, [r3, #4]
 800190e:	ed93 2a02 	vldr	s4, [r3, #8]
 8001912:	eddc 0a00 	vldr	s1, [ip]
 8001916:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 800191a:	784f      	ldrb	r7, [r1, #1]
 800191c:	ed93 1a03 	vldr	s2, [r3, #12]
 8001920:	790b      	ldrb	r3, [r1, #4]
 8001922:	eddc 1a00 	vldr	s3, [ip]
 8001926:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 800192a:	eb02 078e 	add.w	r7, r2, lr, lsl #2
 800192e:	edd7 3a00 	vldr	s7, [r7]
 8001932:	794f      	ldrb	r7, [r1, #5]
 8001934:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001938:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 800193c:	eddc 2a00 	vldr	s5, [ip]
 8001940:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001944:	ee02 0a83 	vmla.f32	s0, s5, s6
 8001948:	798b      	ldrb	r3, [r1, #6]
 800194a:	ee01 0a82 	vmla.f32	s0, s3, s4
 800194e:	79cf      	ldrb	r7, [r1, #7]
 8001950:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001954:	3108      	adds	r1, #8
 8001956:	eddc 0a00 	vldr	s1, [ip]
 800195a:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 800195e:	ed9e 1a00 	vldr	s2, [lr]
 8001962:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001966:	ed90 4a00 	vldr	s8, [r0]
 800196a:	f100 0310 	add.w	r3, r0, #16
 800196e:	edd0 3a01 	vldr	s7, [r0, #4]
 8001972:	429d      	cmp	r5, r3
 8001974:	ee00 0a84 	vmla.f32	s0, s1, s8
 8001978:	eddc 1a00 	vldr	s3, [ip]
 800197c:	ed90 3a02 	vldr	s6, [r0, #8]
 8001980:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001984:	ed9e 2a00 	vldr	s4, [lr]
 8001988:	edd0 2a03 	vldr	s5, [r0, #12]
 800198c:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001990:	ee02 0a22 	vmla.f32	s0, s4, s5
 8001994:	d2af      	bcs.n	80018f6 <ai_dict8_dot_array_f32+0xf6>
 8001996:	e77c      	b.n	8001892 <ai_dict8_dot_array_f32+0x92>
 8001998:	f811 0b01 	ldrb.w	r0, [r1], #1
 800199c:	edd3 0a00 	vldr	s1, [r3]
 80019a0:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80019a4:	1d1b      	adds	r3, r3, #4
 80019a6:	ed96 0a00 	vldr	s0, [r6]
 80019aa:	ee20 0a20 	vmul.f32	s0, s0, s1
 80019ae:	f811 0b01 	ldrb.w	r0, [r1], #1
 80019b2:	edd3 0a00 	vldr	s1, [r3]
 80019b6:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80019ba:	1d1b      	adds	r3, r3, #4
 80019bc:	ed96 1a00 	vldr	s2, [r6]
 80019c0:	ee01 0a20 	vmla.f32	s0, s2, s1
 80019c4:	f811 0b01 	ldrb.w	r0, [r1], #1
 80019c8:	edd3 0a00 	vldr	s1, [r3]
 80019cc:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80019d0:	1d1b      	adds	r3, r3, #4
 80019d2:	429d      	cmp	r5, r3
 80019d4:	ed96 1a00 	vldr	s2, [r6]
 80019d8:	ee01 0a20 	vmla.f32	s0, s2, s1
 80019dc:	d34f      	bcc.n	8001a7e <ai_dict8_dot_array_f32+0x27e>
 80019de:	78cf      	ldrb	r7, [r1, #3]
 80019e0:	f891 e000 	ldrb.w	lr, [r1]
 80019e4:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 80019e8:	788f      	ldrb	r7, [r1, #2]
 80019ea:	f103 0010 	add.w	r0, r3, #16
 80019ee:	ed93 4a00 	vldr	s8, [r3]
 80019f2:	ed93 3a01 	vldr	s6, [r3, #4]
 80019f6:	ed93 2a02 	vldr	s4, [r3, #8]
 80019fa:	eddc 0a00 	vldr	s1, [ip]
 80019fe:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001a02:	784f      	ldrb	r7, [r1, #1]
 8001a04:	ed93 1a03 	vldr	s2, [r3, #12]
 8001a08:	790b      	ldrb	r3, [r1, #4]
 8001a0a:	eddc 1a00 	vldr	s3, [ip]
 8001a0e:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001a12:	eb02 078e 	add.w	r7, r2, lr, lsl #2
 8001a16:	edd7 3a00 	vldr	s7, [r7]
 8001a1a:	794f      	ldrb	r7, [r1, #5]
 8001a1c:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001a20:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001a24:	eddc 2a00 	vldr	s5, [ip]
 8001a28:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001a2c:	ee02 0a83 	vmla.f32	s0, s5, s6
 8001a30:	798b      	ldrb	r3, [r1, #6]
 8001a32:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001a36:	79cf      	ldrb	r7, [r1, #7]
 8001a38:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001a3c:	3108      	adds	r1, #8
 8001a3e:	eddc 0a00 	vldr	s1, [ip]
 8001a42:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001a46:	ed9e 1a00 	vldr	s2, [lr]
 8001a4a:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001a4e:	ed90 4a00 	vldr	s8, [r0]
 8001a52:	f100 0310 	add.w	r3, r0, #16
 8001a56:	edd0 3a01 	vldr	s7, [r0, #4]
 8001a5a:	429d      	cmp	r5, r3
 8001a5c:	ee00 0a84 	vmla.f32	s0, s1, s8
 8001a60:	eddc 1a00 	vldr	s3, [ip]
 8001a64:	ed90 3a02 	vldr	s6, [r0, #8]
 8001a68:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001a6c:	ed9e 2a00 	vldr	s4, [lr]
 8001a70:	edd0 2a03 	vldr	s5, [r0, #12]
 8001a74:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001a78:	ee02 0a22 	vmla.f32	s0, s4, s5
 8001a7c:	d2af      	bcs.n	80019de <ai_dict8_dot_array_f32+0x1de>
 8001a7e:	3520      	adds	r5, #32
 8001a80:	42ab      	cmp	r3, r5
 8001a82:	d224      	bcs.n	8001ace <ai_dict8_dot_array_f32+0x2ce>
 8001a84:	780e      	ldrb	r6, [r1, #0]
 8001a86:	edd3 0a00 	vldr	s1, [r3]
 8001a8a:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 8001a8e:	ed90 1a00 	vldr	s2, [r0]
 8001a92:	1d18      	adds	r0, r3, #4
 8001a94:	42a8      	cmp	r0, r5
 8001a96:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001a9a:	d218      	bcs.n	8001ace <ai_dict8_dot_array_f32+0x2ce>
 8001a9c:	784e      	ldrb	r6, [r1, #1]
 8001a9e:	edd0 0a00 	vldr	s1, [r0]
 8001aa2:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8001aa6:	1d00      	adds	r0, r0, #4
 8001aa8:	42a8      	cmp	r0, r5
 8001aaa:	ed93 1a00 	vldr	s2, [r3]
 8001aae:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001ab2:	d20c      	bcs.n	8001ace <ai_dict8_dot_array_f32+0x2ce>
 8001ab4:	788e      	ldrb	r6, [r1, #2]
 8001ab6:	1cc9      	adds	r1, r1, #3
 8001ab8:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8001abc:	edd0 0a00 	vldr	s1, [r0]
 8001ac0:	ed93 1a00 	vldr	s2, [r3]
 8001ac4:	1d03      	adds	r3, r0, #4
 8001ac6:	42ab      	cmp	r3, r5
 8001ac8:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001acc:	d3da      	bcc.n	8001a84 <ai_dict8_dot_array_f32+0x284>
 8001ace:	edd4 0a00 	vldr	s1, [r4]
 8001ad2:	ee30 0a80 	vadd.f32	s0, s1, s0
 8001ad6:	ed84 0a00 	vstr	s0, [r4]
 8001ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001adc <ai_dict4_dot_array_f32>:
 8001adc:	b4f0      	push	{r4, r5, r6, r7}
 8001ade:	9c04      	ldr	r4, [sp, #16]
 8001ae0:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001b78 <.text_7>
 8001ae4:	0865      	lsrs	r5, r4, #1
 8001ae6:	006d      	lsls	r5, r5, #1
 8001ae8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001aec:	42ab      	cmp	r3, r5
 8001aee:	d22f      	bcs.n	8001b50 <ai_dict4_dot_array_f32+0x74>
 8001af0:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001af4:	edd3 1a00 	vldr	s3, [r3]
 8001af8:	edd3 0a01 	vldr	s1, [r3, #4]
 8001afc:	3308      	adds	r3, #8
 8001afe:	f006 070f 	and.w	r7, r6, #15
 8001b02:	0936      	lsrs	r6, r6, #4
 8001b04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8001b08:	42ab      	cmp	r3, r5
 8001b0a:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001b0e:	ed96 2a00 	vldr	s4, [r6]
 8001b12:	ee02 0a21 	vmla.f32	s0, s4, s3
 8001b16:	ed9c 1a00 	vldr	s2, [ip]
 8001b1a:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001b1e:	d217      	bcs.n	8001b50 <ai_dict4_dot_array_f32+0x74>
 8001b20:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001b24:	ed93 1a00 	vldr	s2, [r3]
 8001b28:	ed93 2a01 	vldr	s4, [r3, #4]
 8001b2c:	3308      	adds	r3, #8
 8001b2e:	f006 070f 	and.w	r7, r6, #15
 8001b32:	0936      	lsrs	r6, r6, #4
 8001b34:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8001b38:	42ab      	cmp	r3, r5
 8001b3a:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001b3e:	edd6 1a00 	vldr	s3, [r6]
 8001b42:	ee01 0a81 	vmla.f32	s0, s3, s2
 8001b46:	eddc 0a00 	vldr	s1, [ip]
 8001b4a:	ee00 0a82 	vmla.f32	s0, s1, s4
 8001b4e:	d3cf      	bcc.n	8001af0 <ai_dict4_dot_array_f32+0x14>
 8001b50:	07e4      	lsls	r4, r4, #31
 8001b52:	d509      	bpl.n	8001b68 <ai_dict4_dot_array_f32+0x8c>
 8001b54:	7809      	ldrb	r1, [r1, #0]
 8001b56:	ed93 1a00 	vldr	s2, [r3]
 8001b5a:	0909      	lsrs	r1, r1, #4
 8001b5c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001b60:	edd2 0a00 	vldr	s1, [r2]
 8001b64:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001b68:	edd0 1a00 	vldr	s3, [r0]
 8001b6c:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001b70:	ed80 0a00 	vstr	s0, [r0]
 8001b74:	bcf0      	pop	{r4, r5, r6, r7}
 8001b76:	4770      	bx	lr

08001b78 <.text_7>:
 8001b78:	00000000 	.word	0x00000000

08001b7c <ai_dict_decompress_f32>:
 8001b7c:	b4f0      	push	{r4, r5, r6, r7}
 8001b7e:	4604      	mov	r4, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	9805      	ldr	r0, [sp, #20]
 8001b84:	9e04      	ldr	r6, [sp, #16]
 8001b86:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8001b8a:	d003      	beq.n	8001b94 <ai_dict_decompress_f32+0x18>
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d03f      	beq.n	8001c10 <ai_dict_decompress_f32+0x94>
 8001b90:	bcf0      	pop	{r4, r5, r6, r7}
 8001b92:	4770      	bx	lr
 8001b94:	42ac      	cmp	r4, r5
 8001b96:	d25a      	bcs.n	8001c4e <ai_dict_decompress_f32+0xd2>
 8001b98:	0870      	lsrs	r0, r6, #1
 8001b9a:	d02f      	beq.n	8001bfc <ai_dict_decompress_f32+0x80>
 8001b9c:	07c3      	lsls	r3, r0, #31
 8001b9e:	d50d      	bpl.n	8001bbc <ai_dict_decompress_f32+0x40>
 8001ba0:	780f      	ldrb	r7, [r1, #0]
 8001ba2:	093f      	lsrs	r7, r7, #4
 8001ba4:	f852 c027 	ldr.w	ip, [r2, r7, lsl #2]
 8001ba8:	f8c4 c000 	str.w	ip, [r4]
 8001bac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001bb8:	6067      	str	r7, [r4, #4]
 8001bba:	3408      	adds	r4, #8
 8001bbc:	0840      	lsrs	r0, r0, #1
 8001bbe:	d01d      	beq.n	8001bfc <ai_dict_decompress_f32+0x80>
 8001bc0:	780b      	ldrb	r3, [r1, #0]
 8001bc2:	091b      	lsrs	r3, r3, #4
 8001bc4:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001bc8:	6027      	str	r7, [r4, #0]
 8001bca:	f811 cb01 	ldrb.w	ip, [r1], #1
 8001bce:	f00c 0c0f 	and.w	ip, ip, #15
 8001bd2:	f852 302c 	ldr.w	r3, [r2, ip, lsl #2]
 8001bd6:	6063      	str	r3, [r4, #4]
 8001bd8:	f104 0308 	add.w	r3, r4, #8
 8001bdc:	780c      	ldrb	r4, [r1, #0]
 8001bde:	0924      	lsrs	r4, r4, #4
 8001be0:	1e40      	subs	r0, r0, #1
 8001be2:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 8001be6:	601f      	str	r7, [r3, #0]
 8001be8:	f811 cb01 	ldrb.w	ip, [r1], #1
 8001bec:	f00c 0c0f 	and.w	ip, ip, #15
 8001bf0:	f852 402c 	ldr.w	r4, [r2, ip, lsl #2]
 8001bf4:	605c      	str	r4, [r3, #4]
 8001bf6:	f103 0408 	add.w	r4, r3, #8
 8001bfa:	d1e1      	bne.n	8001bc0 <ai_dict_decompress_f32+0x44>
 8001bfc:	07f0      	lsls	r0, r6, #31
 8001bfe:	d5c9      	bpl.n	8001b94 <ai_dict_decompress_f32+0x18>
 8001c00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001c0a:	f844 7b04 	str.w	r7, [r4], #4
 8001c0e:	e7c1      	b.n	8001b94 <ai_dict_decompress_f32+0x18>
 8001c10:	42ac      	cmp	r4, r5
 8001c12:	d21c      	bcs.n	8001c4e <ai_dict_decompress_f32+0xd2>
 8001c14:	7808      	ldrb	r0, [r1, #0]
 8001c16:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8001c1a:	6020      	str	r0, [r4, #0]
 8001c1c:	1d20      	adds	r0, r4, #4
 8001c1e:	42a8      	cmp	r0, r5
 8001c20:	bf3f      	itttt	cc
 8001c22:	784c      	ldrbcc	r4, [r1, #1]
 8001c24:	f852 3024 	ldrcc.w	r3, [r2, r4, lsl #2]
 8001c28:	f840 3b04 	strcc.w	r3, [r0], #4
 8001c2c:	42a8      	cmpcc	r0, r5
 8001c2e:	d20e      	bcs.n	8001c4e <ai_dict_decompress_f32+0xd2>
 8001c30:	788b      	ldrb	r3, [r1, #2]
 8001c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c36:	f840 3b04 	str.w	r3, [r0], #4
 8001c3a:	42a8      	cmp	r0, r5
 8001c3c:	d207      	bcs.n	8001c4e <ai_dict_decompress_f32+0xd2>
 8001c3e:	78cc      	ldrb	r4, [r1, #3]
 8001c40:	1d09      	adds	r1, r1, #4
 8001c42:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8001c46:	1d04      	adds	r4, r0, #4
 8001c48:	42ac      	cmp	r4, r5
 8001c4a:	6003      	str	r3, [r0, #0]
 8001c4c:	d3e2      	bcc.n	8001c14 <ai_dict_decompress_f32+0x98>
 8001c4e:	bcf0      	pop	{r4, r5, r6, r7}
 8001c50:	4770      	bx	lr

08001c52 <forward_conv2d>:
 8001c52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c56:	b0a9      	sub	sp, #164	; 0xa4
 8001c58:	4605      	mov	r5, r0
 8001c5a:	696b      	ldr	r3, [r5, #20]
 8001c5c:	8819      	ldrh	r1, [r3, #0]
 8001c5e:	2900      	cmp	r1, #0
 8001c60:	bf1a      	itte	ne
 8001c62:	6858      	ldrne	r0, [r3, #4]
 8001c64:	1d00      	addne	r0, r0, #4
 8001c66:	2004      	moveq	r0, #4
 8001c68:	6800      	ldr	r0, [r0, #0]
 8001c6a:	2800      	cmp	r0, #0
 8001c6c:	bf14      	ite	ne
 8001c6e:	6802      	ldrne	r2, [r0, #0]
 8001c70:	2200      	moveq	r2, #0
 8001c72:	2901      	cmp	r1, #1
 8001c74:	bfc6      	itte	gt
 8001c76:	6858      	ldrgt	r0, [r3, #4]
 8001c78:	3010      	addgt	r0, #16
 8001c7a:	2004      	movle	r0, #4
 8001c7c:	6800      	ldr	r0, [r0, #0]
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	bf14      	ite	ne
 8001c82:	f8d0 a000 	ldrne.w	sl, [r0]
 8001c86:	f04f 0a00 	moveq.w	sl, #0
 8001c8a:	2902      	cmp	r1, #2
 8001c8c:	bfc6      	itte	gt
 8001c8e:	6858      	ldrgt	r0, [r3, #4]
 8001c90:	f100 091c 	addgt.w	r9, r0, #28
 8001c94:	f04f 0904 	movle.w	r9, #4
 8001c98:	f8d9 0000 	ldr.w	r0, [r9]
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	bf14      	ite	ne
 8001ca0:	6806      	ldrne	r6, [r0, #0]
 8001ca2:	2600      	moveq	r6, #0
 8001ca4:	2902      	cmp	r1, #2
 8001ca6:	dd0a      	ble.n	8001cbe <forward_conv2d+0x6c>
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f113 0118 	adds.w	r1, r3, #24
 8001cae:	d006      	beq.n	8001cbe <forward_conv2d+0x6c>
 8001cb0:	8b1f      	ldrh	r7, [r3, #24]
 8001cb2:	2f01      	cmp	r7, #1
 8001cb4:	dd03      	ble.n	8001cbe <forward_conv2d+0x6c>
 8001cb6:	69d9      	ldr	r1, [r3, #28]
 8001cb8:	b109      	cbz	r1, 8001cbe <forward_conv2d+0x6c>
 8001cba:	6849      	ldr	r1, [r1, #4]
 8001cbc:	e000      	b.n	8001cc0 <forward_conv2d+0x6e>
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	b100      	cbz	r0, 8001cc4 <forward_conv2d+0x72>
 8001cc2:	6880      	ldr	r0, [r0, #8]
 8001cc4:	68d7      	ldr	r7, [r2, #12]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	931b      	str	r3, [sp, #108]	; 0x6c
 8001cca:	f8da c00c 	ldr.w	ip, [sl, #12]
 8001cce:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8001cd2:	f8cd 9010 	str.w	r9, [sp, #16]
 8001cd6:	f8dc 900c 	ldr.w	r9, [ip, #12]
 8001cda:	f8dc e008 	ldr.w	lr, [ip, #8]
 8001cde:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 8001ce2:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8001ce6:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8001cea:	68bf      	ldr	r7, [r7, #8]
 8001cec:	9720      	str	r7, [sp, #128]	; 0x80
 8001cee:	f8d5 e024 	ldr.w	lr, [r5, #36]	; 0x24
 8001cf2:	f8ad e040 	strh.w	lr, [sp, #64]	; 0x40
 8001cf6:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 8001cf8:	971f      	str	r7, [sp, #124]	; 0x7c
 8001cfa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001cfc:	f8d5 e02c 	ldr.w	lr, [r5, #44]	; 0x2c
 8001d00:	681f      	ldr	r7, [r3, #0]
 8001d02:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001d06:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 8001d0a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8001d0c:	9418      	str	r4, [sp, #96]	; 0x60
 8001d0e:	68f3      	ldr	r3, [r6, #12]
 8001d10:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8001d14:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 8001d18:	685c      	ldr	r4, [r3, #4]
 8001d1a:	9412      	str	r4, [sp, #72]	; 0x48
 8001d1c:	f8d5 e018 	ldr.w	lr, [r5, #24]
 8001d20:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 8001d24:	6994      	ldr	r4, [r2, #24]
 8001d26:	68a3      	ldr	r3, [r4, #8]
 8001d28:	931d      	str	r3, [sp, #116]	; 0x74
 8001d2a:	f8d6 c018 	ldr.w	ip, [r6, #24]
 8001d2e:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8001d32:	b119      	cbz	r1, 8001d3c <forward_conv2d+0xea>
 8001d34:	698a      	ldr	r2, [r1, #24]
 8001d36:	6893      	ldr	r3, [r2, #8]
 8001d38:	9317      	str	r3, [sp, #92]	; 0x5c
 8001d3a:	e003      	b.n	8001d44 <forward_conv2d+0xf2>
 8001d3c:	f04f 0e00 	mov.w	lr, #0
 8001d40:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 8001d44:	f8da 1018 	ldr.w	r1, [sl, #24]
 8001d48:	688a      	ldr	r2, [r1, #8]
 8001d4a:	9203      	str	r2, [sp, #12]
 8001d4c:	69e9      	ldr	r1, [r5, #28]
 8001d4e:	b118      	cbz	r0, 8001d58 <forward_conv2d+0x106>
 8001d50:	6981      	ldr	r1, [r0, #24]
 8001d52:	688a      	ldr	r2, [r1, #8]
 8001d54:	9215      	str	r2, [sp, #84]	; 0x54
 8001d56:	e005      	b.n	8001d64 <forward_conv2d+0x112>
 8001d58:	b111      	cbz	r1, 8001d60 <forward_conv2d+0x10e>
 8001d5a:	688a      	ldr	r2, [r1, #8]
 8001d5c:	9215      	str	r2, [sp, #84]	; 0x54
 8001d5e:	e001      	b.n	8001d64 <forward_conv2d+0x112>
 8001d60:	2300      	movs	r3, #0
 8001d62:	9315      	str	r3, [sp, #84]	; 0x54
 8001d64:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001d66:	9202      	str	r2, [sp, #8]
 8001d68:	b920      	cbnz	r0, 8001d74 <forward_conv2d+0x122>
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	9124      	str	r1, [sp, #144]	; 0x90
 8001d70:	9223      	str	r2, [sp, #140]	; 0x8c
 8001d72:	e008      	b.n	8001d86 <forward_conv2d+0x134>
 8001d74:	6941      	ldr	r1, [r0, #20]
 8001d76:	688a      	ldr	r2, [r1, #8]
 8001d78:	9224      	str	r2, [sp, #144]	; 0x90
 8001d7a:	6980      	ldr	r0, [r0, #24]
 8001d7c:	6841      	ldr	r1, [r0, #4]
 8001d7e:	6800      	ldr	r0, [r0, #0]
 8001d80:	f004 fbee 	bl	8006560 <ai_array_get_byte_size>
 8001d84:	9023      	str	r0, [sp, #140]	; 0x8c
 8001d86:	6a28      	ldr	r0, [r5, #32]
 8001d88:	2800      	cmp	r0, #0
 8001d8a:	bf12      	itee	ne
 8001d8c:	9022      	strne	r0, [sp, #136]	; 0x88
 8001d8e:	f8df 1d7c 	ldreq.w	r1, [pc, #3452]	; 8002b0c <.text_15>
 8001d92:	9122      	streq	r1, [sp, #136]	; 0x88
 8001d94:	a818      	add	r0, sp, #96	; 0x60
 8001d96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001d98:	8803      	ldrh	r3, [r0, #0]
 8001d9a:	1e51      	subs	r1, r2, #1
 8001d9c:	1e5b      	subs	r3, r3, #1
 8001d9e:	fb03 2201 	mla	r2, r3, r1, r2
 8001da2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001da4:	9216      	str	r2, [sp, #88]	; 0x58
 8001da6:	aa19      	add	r2, sp, #100	; 0x64
 8001da8:	8813      	ldrh	r3, [r2, #0]
 8001daa:	2200      	movs	r2, #0
 8001dac:	1e48      	subs	r0, r1, #1
 8001dae:	1e5b      	subs	r3, r3, #1
 8001db0:	fb03 1100 	mla	r1, r3, r0, r1
 8001db4:	2000      	movs	r0, #0
 8001db6:	911c      	str	r1, [sp, #112]	; 0x70
 8001db8:	69b6      	ldr	r6, [r6, #24]
 8001dba:	4683      	mov	fp, r0
 8001dbc:	6831      	ldr	r1, [r6, #0]
 8001dbe:	11cb      	asrs	r3, r1, #7
 8001dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dc4:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8001dc8:	1449      	asrs	r1, r1, #17
 8001dca:	f001 010f 	and.w	r1, r1, #15
 8001dce:	f00c 0c03 	and.w	ip, ip, #3
 8001dd2:	2904      	cmp	r1, #4
 8001dd4:	fa23 f30c 	lsr.w	r3, r3, ip
 8001dd8:	bf14      	ite	ne
 8001dda:	2908      	cmpne	r1, #8
 8001ddc:	68f2      	ldreq	r2, [r6, #12]
 8001dde:	b1da      	cbz	r2, 8001e18 <forward_conv2d+0x1c6>
 8001de0:	6969      	ldr	r1, [r5, #20]
 8001de2:	880d      	ldrh	r5, [r1, #0]
 8001de4:	2d04      	cmp	r5, #4
 8001de6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8001de8:	bfa6      	itte	ge
 8001dea:	6849      	ldrge	r1, [r1, #4]
 8001dec:	3128      	addge	r1, #40	; 0x28
 8001dee:	2104      	movlt	r1, #4
 8001df0:	6809      	ldr	r1, [r1, #0]
 8001df2:	2900      	cmp	r1, #0
 8001df4:	bf1f      	itttt	ne
 8001df6:	6808      	ldrne	r0, [r1, #0]
 8001df8:	2800      	cmpne	r0, #0
 8001dfa:	6981      	ldrne	r1, [r0, #24]
 8001dfc:	f8d1 b008 	ldrne.w	fp, [r1, #8]
 8001e00:	6980      	ldr	r0, [r0, #24]
 8001e02:	6841      	ldr	r1, [r0, #4]
 8001e04:	9500      	str	r5, [sp, #0]
 8001e06:	9101      	str	r1, [sp, #4]
 8001e08:	68b1      	ldr	r1, [r6, #8]
 8001e0a:	4658      	mov	r0, fp
 8001e0c:	f7ff feb6 	bl	8001b7c <ai_dict_decompress_f32>
 8001e10:	f1bb 0f00 	cmp.w	fp, #0
 8001e14:	bf18      	it	ne
 8001e16:	465c      	movne	r4, fp
 8001e18:	b2bf      	uxth	r7, r7
 8001e1a:	427f      	negs	r7, r7
 8001e1c:	f1b9 0f00 	cmp.w	r9, #0
 8001e20:	d06f      	beq.n	8001f02 <forward_conv2d+0x2b0>
 8001e22:	464a      	mov	r2, r9
 8001e24:	f1c8 0800 	rsb	r8, r8, #0
 8001e28:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
 8001e2c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8001e30:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8001e34:	9427      	str	r4, [sp, #156]	; 0x9c
 8001e36:	9711      	str	r7, [sp, #68]	; 0x44
 8001e38:	9e02      	ldr	r6, [sp, #8]
 8001e3a:	9221      	str	r2, [sp, #132]	; 0x84
 8001e3c:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001e3e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001e40:	9025      	str	r0, [sp, #148]	; 0x94
 8001e42:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001e44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001e46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001e48:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8001e4a:	f8cd 9008 	str.w	r9, [sp, #8]
 8001e4e:	4240      	negs	r0, r0
 8001e50:	950d      	str	r5, [sp, #52]	; 0x34
 8001e52:	bfd8      	it	le
 8001e54:	2000      	movle	r0, #0
 8001e56:	1a89      	subs	r1, r1, r2
 8001e58:	4299      	cmp	r1, r3
 8001e5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8001e5c:	9009      	str	r0, [sp, #36]	; 0x24
 8001e5e:	bf28      	it	cs
 8001e60:	4619      	movcs	r1, r3
 8001e62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001e64:	910a      	str	r1, [sp, #40]	; 0x28
 8001e66:	b212      	sxth	r2, r2
 8001e68:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001e6a:	920f      	str	r2, [sp, #60]	; 0x3c
 8001e6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001e6e:	920c      	str	r2, [sp, #48]	; 0x30
 8001e70:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001e78:	930e      	str	r3, [sp, #56]	; 0x38
 8001e7a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8001e7c:	9008      	str	r0, [sp, #32]
 8001e7e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001e80:	9107      	str	r1, [sp, #28]
 8001e82:	9914      	ldr	r1, [sp, #80]	; 0x50
 8001e84:	9206      	str	r2, [sp, #24]
 8001e86:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001e88:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e8a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001e8c:	9005      	str	r0, [sp, #20]
 8001e8e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001e90:	9104      	str	r1, [sp, #16]
 8001e92:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001e94:	9203      	str	r2, [sp, #12]
 8001e96:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001e98:	9001      	str	r0, [sp, #4]
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	9100      	str	r1, [sp, #0]
 8001e9e:	4659      	mov	r1, fp
 8001ea0:	f7ff f9bc 	bl	800121c <ai_conv2d_stripe_f32>
 8001ea4:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001ea6:	b300      	cbz	r0, 8001eea <forward_conv2d+0x298>
 8001ea8:	f8cd a000 	str.w	sl, [sp]
 8001eac:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001eae:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8001eb0:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8001eb4:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8001eb6:	4682      	mov	sl, r0
 8001eb8:	9800      	ldr	r0, [sp, #0]
 8001eba:	462b      	mov	r3, r5
 8001ebc:	464a      	mov	r2, r9
 8001ebe:	443d      	add	r5, r7
 8001ec0:	6981      	ldr	r1, [r0, #24]
 8001ec2:	f8c1 b008 	str.w	fp, [r1, #8]
 8001ec6:	eb0b 0b89 	add.w	fp, fp, r9, lsl #2
 8001eca:	4608      	mov	r0, r1
 8001ecc:	47a0      	blx	r4
 8001ece:	1ba9      	subs	r1, r5, r6
 8001ed0:	4541      	cmp	r1, r8
 8001ed2:	bfa8      	it	ge
 8001ed4:	4635      	movge	r5, r6
 8001ed6:	f1ba 0a01 	subs.w	sl, sl, #1
 8001eda:	d1ed      	bne.n	8001eb8 <forward_conv2d+0x266>
 8001edc:	f8dd a000 	ldr.w	sl, [sp]
 8001ee0:	9515      	str	r5, [sp, #84]	; 0x54
 8001ee2:	9724      	str	r7, [sp, #144]	; 0x90
 8001ee4:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
 8001ee8:	9422      	str	r4, [sp, #136]	; 0x88
 8001eea:	f8da 0018 	ldr.w	r0, [sl, #24]
 8001eee:	68c1      	ldr	r1, [r0, #12]
 8001ef0:	6081      	str	r1, [r0, #8]
 8001ef2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001ef4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001ef6:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001ef8:	189a      	adds	r2, r3, r2
 8001efa:	9211      	str	r2, [sp, #68]	; 0x44
 8001efc:	1e49      	subs	r1, r1, #1
 8001efe:	9121      	str	r1, [sp, #132]	; 0x84
 8001f00:	d19c      	bne.n	8001e3c <forward_conv2d+0x1ea>
 8001f02:	b029      	add	sp, #164	; 0xa4
 8001f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001f08 <forward_conv2d_nl_pool>:
 8001f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f0c:	b0b9      	sub	sp, #228	; 0xe4
 8001f0e:	4604      	mov	r4, r0
 8001f10:	6963      	ldr	r3, [r4, #20]
 8001f12:	8819      	ldrh	r1, [r3, #0]
 8001f14:	2900      	cmp	r1, #0
 8001f16:	bf1a      	itte	ne
 8001f18:	6858      	ldrne	r0, [r3, #4]
 8001f1a:	1d00      	addne	r0, r0, #4
 8001f1c:	2004      	moveq	r0, #4
 8001f1e:	6800      	ldr	r0, [r0, #0]
 8001f20:	2800      	cmp	r0, #0
 8001f22:	bf14      	ite	ne
 8001f24:	6802      	ldrne	r2, [r0, #0]
 8001f26:	2200      	moveq	r2, #0
 8001f28:	2901      	cmp	r1, #1
 8001f2a:	bfc6      	itte	gt
 8001f2c:	6858      	ldrgt	r0, [r3, #4]
 8001f2e:	3010      	addgt	r0, #16
 8001f30:	2004      	movle	r0, #4
 8001f32:	6800      	ldr	r0, [r0, #0]
 8001f34:	2800      	cmp	r0, #0
 8001f36:	bf14      	ite	ne
 8001f38:	f8d0 a000 	ldrne.w	sl, [r0]
 8001f3c:	f04f 0a00 	moveq.w	sl, #0
 8001f40:	2902      	cmp	r1, #2
 8001f42:	bfc6      	itte	gt
 8001f44:	6858      	ldrgt	r0, [r3, #4]
 8001f46:	f100 071c 	addgt.w	r7, r0, #28
 8001f4a:	2704      	movle	r7, #4
 8001f4c:	6838      	ldr	r0, [r7, #0]
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	bf14      	ite	ne
 8001f52:	6806      	ldrne	r6, [r0, #0]
 8001f54:	2600      	moveq	r6, #0
 8001f56:	2902      	cmp	r1, #2
 8001f58:	dd0c      	ble.n	8001f74 <forward_conv2d_nl_pool+0x6c>
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f113 0118 	adds.w	r1, r3, #24
 8001f60:	d008      	beq.n	8001f74 <forward_conv2d_nl_pool+0x6c>
 8001f62:	f8b3 c018 	ldrh.w	ip, [r3, #24]
 8001f66:	f1bc 0f01 	cmp.w	ip, #1
 8001f6a:	dd03      	ble.n	8001f74 <forward_conv2d_nl_pool+0x6c>
 8001f6c:	69d9      	ldr	r1, [r3, #28]
 8001f6e:	b109      	cbz	r1, 8001f74 <forward_conv2d_nl_pool+0x6c>
 8001f70:	6849      	ldr	r1, [r1, #4]
 8001f72:	e000      	b.n	8001f76 <forward_conv2d_nl_pool+0x6e>
 8001f74:	2100      	movs	r1, #0
 8001f76:	b100      	cbz	r0, 8001f7a <forward_conv2d_nl_pool+0x72>
 8001f78:	6880      	ldr	r0, [r0, #8]
 8001f7a:	68d7      	ldr	r7, [r2, #12]
 8001f7c:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8001f80:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
 8001f84:	f8da e00c 	ldr.w	lr, [sl, #12]
 8001f88:	f8de 8004 	ldr.w	r8, [lr, #4]
 8001f8c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8001f90:	f8de 900c 	ldr.w	r9, [lr, #12]
 8001f94:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8001f98:	f8de e008 	ldr.w	lr, [lr, #8]
 8001f9c:	f8cd e084 	str.w	lr, [sp, #132]	; 0x84
 8001fa0:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8001fa4:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 8001fa8:	68bf      	ldr	r7, [r7, #8]
 8001faa:	972d      	str	r7, [sp, #180]	; 0xb4
 8001fac:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
 8001fb0:	f8ad e04c 	strh.w	lr, [sp, #76]	; 0x4c
 8001fb4:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 8001fb6:	9720      	str	r7, [sp, #128]	; 0x80
 8001fb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fba:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8001fbe:	881f      	ldrh	r7, [r3, #0]
 8001fc0:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001fc4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8001fc8:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
 8001fcc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8001fce:	951f      	str	r5, [sp, #124]	; 0x7c
 8001fd0:	f8d4 e030 	ldr.w	lr, [r4, #48]	; 0x30
 8001fd4:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 8001fd8:	68f3      	ldr	r3, [r6, #12]
 8001fda:	685d      	ldr	r5, [r3, #4]
 8001fdc:	951a      	str	r5, [sp, #104]	; 0x68
 8001fde:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8001fe2:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 8001fe6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001fe8:	952b      	str	r5, [sp, #172]	; 0xac
 8001fea:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 8001fee:	f8cd e0a8 	str.w	lr, [sp, #168]	; 0xa8
 8001ff2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001ff4:	9511      	str	r5, [sp, #68]	; 0x44
 8001ff6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001ff8:	681d      	ldr	r5, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	9329      	str	r3, [sp, #164]	; 0xa4
 8001ffe:	f8d2 e018 	ldr.w	lr, [r2, #24]
 8002002:	f8de b008 	ldr.w	fp, [lr, #8]
 8002006:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
 800200a:	69b3      	ldr	r3, [r6, #24]
 800200c:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8002010:	b119      	cbz	r1, 800201a <forward_conv2d_nl_pool+0x112>
 8002012:	698a      	ldr	r2, [r1, #24]
 8002014:	6893      	ldr	r3, [r2, #8]
 8002016:	931d      	str	r3, [sp, #116]	; 0x74
 8002018:	e003      	b.n	8002022 <forward_conv2d_nl_pool+0x11a>
 800201a:	f04f 0e00 	mov.w	lr, #0
 800201e:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
 8002022:	69e1      	ldr	r1, [r4, #28]
 8002024:	b118      	cbz	r0, 800202e <forward_conv2d_nl_pool+0x126>
 8002026:	6981      	ldr	r1, [r0, #24]
 8002028:	688a      	ldr	r2, [r1, #8]
 800202a:	921c      	str	r2, [sp, #112]	; 0x70
 800202c:	e005      	b.n	800203a <forward_conv2d_nl_pool+0x132>
 800202e:	b111      	cbz	r1, 8002036 <forward_conv2d_nl_pool+0x12e>
 8002030:	688a      	ldr	r2, [r1, #8]
 8002032:	921c      	str	r2, [sp, #112]	; 0x70
 8002034:	e001      	b.n	800203a <forward_conv2d_nl_pool+0x132>
 8002036:	2300      	movs	r3, #0
 8002038:	931c      	str	r3, [sp, #112]	; 0x70
 800203a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800203c:	9202      	str	r2, [sp, #8]
 800203e:	b920      	cbnz	r0, 800204a <forward_conv2d_nl_pool+0x142>
 8002040:	2100      	movs	r1, #0
 8002042:	2201      	movs	r2, #1
 8002044:	9116      	str	r1, [sp, #88]	; 0x58
 8002046:	9215      	str	r2, [sp, #84]	; 0x54
 8002048:	e008      	b.n	800205c <forward_conv2d_nl_pool+0x154>
 800204a:	6941      	ldr	r1, [r0, #20]
 800204c:	688a      	ldr	r2, [r1, #8]
 800204e:	9216      	str	r2, [sp, #88]	; 0x58
 8002050:	6980      	ldr	r0, [r0, #24]
 8002052:	6841      	ldr	r1, [r0, #4]
 8002054:	6800      	ldr	r0, [r0, #0]
 8002056:	f004 fa83 	bl	8006560 <ai_array_get_byte_size>
 800205a:	9015      	str	r0, [sp, #84]	; 0x54
 800205c:	6a20      	ldr	r0, [r4, #32]
 800205e:	2800      	cmp	r0, #0
 8002060:	bf12      	itee	ne
 8002062:	9030      	strne	r0, [sp, #192]	; 0xc0
 8002064:	f8df 1aa4 	ldreq.w	r1, [pc, #2724]	; 8002b0c <.text_15>
 8002068:	9130      	streq	r1, [sp, #192]	; 0xc0
 800206a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800206c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800206e:	9227      	str	r2, [sp, #156]	; 0x9c
 8002070:	aa1e      	add	r2, sp, #120	; 0x78
 8002072:	8813      	ldrh	r3, [r2, #0]
 8002074:	1e41      	subs	r1, r0, #1
 8002076:	1e5b      	subs	r3, r3, #1
 8002078:	fb03 0001 	mla	r0, r3, r1, r0
 800207c:	ab1f      	add	r3, sp, #124	; 0x7c
 800207e:	f8b3 e000 	ldrh.w	lr, [r3]
 8002082:	9018      	str	r0, [sp, #96]	; 0x60
 8002084:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002086:	9818      	ldr	r0, [sp, #96]	; 0x60
 8002088:	1e4a      	subs	r2, r1, #1
 800208a:	f1ae 0e01 	sub.w	lr, lr, #1
 800208e:	fb0e 1102 	mla	r1, lr, r2, r1
 8002092:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002094:	9126      	str	r1, [sp, #152]	; 0x98
 8002096:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002098:	9112      	str	r1, [sp, #72]	; 0x48
 800209a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800209c:	1a12      	subs	r2, r2, r0
 800209e:	18ba      	adds	r2, r7, r2
 80020a0:	fa12 f089 	uxtah	r0, r2, r9
 80020a4:	2200      	movs	r2, #0
 80020a6:	fbb0 f1f1 	udiv	r1, r0, r1
 80020aa:	1c49      	adds	r1, r1, #1
 80020ac:	2000      	movs	r0, #0
 80020ae:	9114      	str	r1, [sp, #80]	; 0x50
 80020b0:	69b6      	ldr	r6, [r6, #24]
 80020b2:	4681      	mov	r9, r0
 80020b4:	6831      	ldr	r1, [r6, #0]
 80020b6:	11cb      	asrs	r3, r1, #7
 80020b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020bc:	ea4f 5c61 	mov.w	ip, r1, asr #21
 80020c0:	1449      	asrs	r1, r1, #17
 80020c2:	f001 010f 	and.w	r1, r1, #15
 80020c6:	f00c 0c03 	and.w	ip, ip, #3
 80020ca:	2904      	cmp	r1, #4
 80020cc:	fa23 f30c 	lsr.w	r3, r3, ip
 80020d0:	bf14      	ite	ne
 80020d2:	2908      	cmpne	r1, #8
 80020d4:	68f2      	ldreq	r2, [r6, #12]
 80020d6:	b302      	cbz	r2, 800211a <forward_conv2d_nl_pool+0x212>
 80020d8:	6961      	ldr	r1, [r4, #20]
 80020da:	f8b1 c000 	ldrh.w	ip, [r1]
 80020de:	f1bc 0f04 	cmp.w	ip, #4
 80020e2:	f8dd c08c 	ldr.w	ip, [sp, #140]	; 0x8c
 80020e6:	bfa6      	itte	ge
 80020e8:	6849      	ldrge	r1, [r1, #4]
 80020ea:	3128      	addge	r1, #40	; 0x28
 80020ec:	2104      	movlt	r1, #4
 80020ee:	6809      	ldr	r1, [r1, #0]
 80020f0:	2900      	cmp	r1, #0
 80020f2:	bf1f      	itttt	ne
 80020f4:	6848      	ldrne	r0, [r1, #4]
 80020f6:	2800      	cmpne	r0, #0
 80020f8:	6981      	ldrne	r1, [r0, #24]
 80020fa:	f8d1 9008 	ldrne.w	r9, [r1, #8]
 80020fe:	6980      	ldr	r0, [r0, #24]
 8002100:	6841      	ldr	r1, [r0, #4]
 8002102:	f8cd c000 	str.w	ip, [sp]
 8002106:	9101      	str	r1, [sp, #4]
 8002108:	68b1      	ldr	r1, [r6, #8]
 800210a:	4648      	mov	r0, r9
 800210c:	f7ff fd36 	bl	8001b7c <ai_dict_decompress_f32>
 8002110:	f1b9 0f00 	cmp.w	r9, #0
 8002114:	bf18      	it	ne
 8002116:	4648      	movne	r0, r9
 8002118:	d100      	bne.n	800211c <forward_conv2d_nl_pool+0x214>
 800211a:	4658      	mov	r0, fp
 800211c:	6963      	ldr	r3, [r4, #20]
 800211e:	2600      	movs	r6, #0
 8002120:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8002124:	f8da 1018 	ldr.w	r1, [sl, #24]
 8002128:	b22d      	sxth	r5, r5
 800212a:	f1c8 0800 	rsb	r8, r8, #0
 800212e:	881c      	ldrh	r4, [r3, #0]
 8002130:	46aa      	mov	sl, r5
 8002132:	2c04      	cmp	r4, #4
 8002134:	bfa6      	itte	ge
 8002136:	685b      	ldrge	r3, [r3, #4]
 8002138:	3328      	addge	r3, #40	; 0x28
 800213a:	2304      	movlt	r3, #4
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf14      	ite	ne
 8002142:	f8d3 9000 	ldrne.w	r9, [r3]
 8002146:	46b1      	moveq	r9, r6
 8002148:	f8d9 4018 	ldr.w	r4, [r9, #24]
 800214c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002150:	427f      	negs	r7, r7
 8002152:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8002156:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
 800215e:	435c      	muls	r4, r3
 8002160:	fb0e f404 	mul.w	r4, lr, r4
 8002164:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 8002168:	9437      	str	r4, [sp, #220]	; 0xdc
 800216a:	ac11      	add	r4, sp, #68	; 0x44
 800216c:	f9b4 c000 	ldrsh.w	ip, [r4]
 8002170:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002172:	fb0e f404 	mul.w	r4, lr, r4
 8002176:	9435      	str	r4, [sp, #212]	; 0xd4
 8002178:	ac12      	add	r4, sp, #72	; 0x48
 800217a:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
 800217e:	f9b4 c000 	ldrsh.w	ip, [r4]
 8002182:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002184:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
 8002188:	435c      	muls	r4, r3
 800218a:	9433      	str	r4, [sp, #204]	; 0xcc
 800218c:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800218e:	2c00      	cmp	r4, #0
 8002190:	f000 812d 	beq.w	80023ee <forward_conv2d_nl_pool+0x4e6>
 8002194:	9038      	str	r0, [sp, #224]	; 0xe0
 8002196:	462c      	mov	r4, r5
 8002198:	9125      	str	r1, [sp, #148]	; 0x94
 800219a:	962f      	str	r6, [sp, #188]	; 0xbc
 800219c:	962e      	str	r6, [sp, #184]	; 0xb8
 800219e:	9324      	str	r3, [sp, #144]	; 0x90
 80021a0:	9717      	str	r7, [sp, #92]	; 0x5c
 80021a2:	9d02      	ldr	r5, [sp, #8]
 80021a4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80021a6:	2800      	cmp	r0, #0
 80021a8:	dd68      	ble.n	800227c <forward_conv2d_nl_pool+0x374>
 80021aa:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80021ac:	9932      	ldr	r1, [sp, #200]	; 0xc8
 80021ae:	9131      	str	r1, [sp, #196]	; 0xc4
 80021b0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80021b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80021b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80021b6:	4240      	negs	r0, r0
 80021b8:	9e26      	ldr	r6, [sp, #152]	; 0x98
 80021ba:	960d      	str	r6, [sp, #52]	; 0x34
 80021bc:	bfd8      	it	le
 80021be:	2000      	movle	r0, #0
 80021c0:	1a89      	subs	r1, r1, r2
 80021c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80021c4:	4299      	cmp	r1, r3
 80021c6:	9009      	str	r0, [sp, #36]	; 0x24
 80021c8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80021ca:	b212      	sxth	r2, r2
 80021cc:	9008      	str	r0, [sp, #32]
 80021ce:	920f      	str	r2, [sp, #60]	; 0x3c
 80021d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80021d2:	bf28      	it	cs
 80021d4:	4619      	movcs	r1, r3
 80021d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80021d8:	920c      	str	r2, [sp, #48]	; 0x30
 80021da:	910a      	str	r1, [sp, #40]	; 0x28
 80021dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80021de:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80021e2:	9206      	str	r2, [sp, #24]
 80021e4:	b21b      	sxth	r3, r3
 80021e6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80021e8:	930e      	str	r3, [sp, #56]	; 0x38
 80021ea:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80021ec:	9107      	str	r1, [sp, #28]
 80021ee:	981a      	ldr	r0, [sp, #104]	; 0x68
 80021f0:	9203      	str	r2, [sp, #12]
 80021f2:	9924      	ldr	r1, [sp, #144]	; 0x90
 80021f4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80021f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80021f8:	9005      	str	r0, [sp, #20]
 80021fa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80021fc:	9104      	str	r1, [sp, #16]
 80021fe:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8002200:	9200      	str	r2, [sp, #0]
 8002202:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8002204:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002206:	9002      	str	r0, [sp, #8]
 8002208:	9101      	str	r1, [sp, #4]
 800220a:	4659      	mov	r1, fp
 800220c:	2000      	movs	r0, #0
 800220e:	f7ff f805 	bl	800121c <ai_conv2d_stripe_f32>
 8002212:	9824      	ldr	r0, [sp, #144]	; 0x90
 8002214:	b350      	cbz	r0, 800226c <forward_conv2d_nl_pool+0x364>
 8002216:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8002218:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800221a:	9502      	str	r5, [sp, #8]
 800221c:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 8002220:	ea4f 0500 	mov.w	r5, r0
 8002224:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8002228:	463b      	mov	r3, r7
 800222a:	4632      	mov	r2, r6
 800222c:	f8c1 b008 	str.w	fp, [r1, #8]
 8002230:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
 8002234:	4608      	mov	r0, r1
 8002236:	47c0      	blx	r8
 8002238:	9816      	ldr	r0, [sp, #88]	; 0x58
 800223a:	9902      	ldr	r1, [sp, #8]
 800223c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800223e:	4407      	add	r7, r0
 8002240:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8002244:	1a79      	subs	r1, r7, r1
 8002246:	4291      	cmp	r1, r2
 8002248:	6841      	ldr	r1, [r0, #4]
 800224a:	68c0      	ldr	r0, [r0, #12]
 800224c:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8002250:	bfa8      	it	ge
 8002252:	9f02      	ldrge	r7, [sp, #8]
 8002254:	4593      	cmp	fp, r2
 8002256:	d302      	bcc.n	800225e <forward_conv2d_nl_pool+0x356>
 8002258:	0089      	lsls	r1, r1, #2
 800225a:	4249      	negs	r1, r1
 800225c:	448b      	add	fp, r1
 800225e:	1e6d      	subs	r5, r5, #1
 8002260:	d1e0      	bne.n	8002224 <forward_conv2d_nl_pool+0x31c>
 8002262:	9610      	str	r6, [sp, #64]	; 0x40
 8002264:	971c      	str	r7, [sp, #112]	; 0x70
 8002266:	9d02      	ldr	r5, [sp, #8]
 8002268:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
 800226c:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8002270:	f10a 0a01 	add.w	sl, sl, #1
 8002274:	fa0f fa8a 	sxth.w	sl, sl
 8002278:	68c1      	ldr	r1, [r0, #12]
 800227a:	6081      	str	r1, [r0, #8]
 800227c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800227e:	1e40      	subs	r0, r0, #1
 8002280:	9014      	str	r0, [sp, #80]	; 0x50
 8002282:	d56d      	bpl.n	8002360 <forward_conv2d_nl_pool+0x458>
 8002284:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8002286:	4659      	mov	r1, fp
 8002288:	fb00 f00a 	mul.w	r0, r0, sl
 800228c:	0080      	lsls	r0, r0, #2
 800228e:	4240      	negs	r0, r0
 8002290:	eb0b 0200 	add.w	r2, fp, r0
 8002294:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8002298:	68c3      	ldr	r3, [r0, #12]
 800229a:	429a      	cmp	r2, r3
 800229c:	bf3c      	itt	cc
 800229e:	6847      	ldrcc	r7, [r0, #4]
 80022a0:	eb02 0287 	addcc.w	r2, r2, r7, lsl #2
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d237      	bcs.n	8002318 <forward_conv2d_nl_pool+0x410>
 80022a8:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 80022aa:	45b2      	cmp	sl, r6
 80022ac:	d034      	beq.n	8002318 <forward_conv2d_nl_pool+0x410>
 80022ae:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80022b2:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 80022b6:	429a      	cmp	r2, r3
 80022b8:	f080 802e 	bcs.w	8002318 <forward_conv2d_nl_pool+0x410>
 80022bc:	ed92 0a00 	vldr	s0, [r2]
 80022c0:	1d12      	adds	r2, r2, #4
 80022c2:	ed8b 0a00 	vstr	s0, [fp]
 80022c6:	68c6      	ldr	r6, [r0, #12]
 80022c8:	6843      	ldr	r3, [r0, #4]
 80022ca:	eb06 0783 	add.w	r7, r6, r3, lsl #2
 80022ce:	42ba      	cmp	r2, r7
 80022d0:	d222      	bcs.n	8002318 <forward_conv2d_nl_pool+0x410>
 80022d2:	edd2 0a00 	vldr	s1, [r2]
 80022d6:	1d12      	adds	r2, r2, #4
 80022d8:	edcb 0a01 	vstr	s1, [fp, #4]
 80022dc:	68c3      	ldr	r3, [r0, #12]
 80022de:	6846      	ldr	r6, [r0, #4]
 80022e0:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 80022e4:	42ba      	cmp	r2, r7
 80022e6:	d217      	bcs.n	8002318 <forward_conv2d_nl_pool+0x410>
 80022e8:	ed92 0a00 	vldr	s0, [r2]
 80022ec:	1d12      	adds	r2, r2, #4
 80022ee:	ed8b 0a02 	vstr	s0, [fp, #8]
 80022f2:	68c3      	ldr	r3, [r0, #12]
 80022f4:	6846      	ldr	r6, [r0, #4]
 80022f6:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 80022fa:	42ba      	cmp	r2, r7
 80022fc:	d20c      	bcs.n	8002318 <forward_conv2d_nl_pool+0x410>
 80022fe:	edd2 0a00 	vldr	s1, [r2]
 8002302:	1d12      	adds	r2, r2, #4
 8002304:	edcb 0a03 	vstr	s1, [fp, #12]
 8002308:	68c3      	ldr	r3, [r0, #12]
 800230a:	6846      	ldr	r6, [r0, #4]
 800230c:	f10b 0b10 	add.w	fp, fp, #16
 8002310:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8002314:	42ba      	cmp	r2, r7
 8002316:	d3d1      	bcc.n	80022bc <forward_conv2d_nl_pool+0x3b4>
 8002318:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800231a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800231c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800231e:	189a      	adds	r2, r3, r2
 8002320:	eba2 020a 	sub.w	r2, r2, sl
 8002324:	922f      	str	r2, [sp, #188]	; 0xbc
 8002326:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8002328:	eb01 0b82 	add.w	fp, r1, r2, lsl #2
 800232c:	68c1      	ldr	r1, [r0, #12]
 800232e:	6843      	ldr	r3, [r0, #4]
 8002330:	44b2      	add	sl, r6
 8002332:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8002336:	fa0f fa8a 	sxth.w	sl, sl
 800233a:	460b      	mov	r3, r1
 800233c:	4593      	cmp	fp, r2
 800233e:	d30f      	bcc.n	8002360 <forward_conv2d_nl_pool+0x458>
 8002340:	6841      	ldr	r1, [r0, #4]
 8002342:	008a      	lsls	r2, r1, #2
 8002344:	4252      	negs	r2, r2
 8002346:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800234a:	4493      	add	fp, r2
 800234c:	458b      	cmp	fp, r1
 800234e:	bf24      	itt	cs
 8002350:	4493      	addcs	fp, r2
 8002352:	458b      	cmpcs	fp, r1
 8002354:	bf21      	itttt	cs
 8002356:	4493      	addcs	fp, r2
 8002358:	458b      	cmpcs	fp, r1
 800235a:	4493      	addcs	fp, r2
 800235c:	458b      	cmpcs	fp, r1
 800235e:	d2ef      	bcs.n	8002340 <forward_conv2d_nl_pool+0x438>
 8002360:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002362:	4582      	cmp	sl, r0
 8002364:	d339      	bcc.n	80023da <forward_conv2d_nl_pool+0x4d2>
 8002366:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8002368:	9825      	ldr	r0, [sp, #148]	; 0x94
 800236a:	9008      	str	r0, [sp, #32]
 800236c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800236e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002370:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8002372:	1c52      	adds	r2, r2, #1
 8002374:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002376:	922e      	str	r2, [sp, #184]	; 0xb8
 8002378:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800237a:	b280      	uxth	r0, r0
 800237c:	b29b      	uxth	r3, r3
 800237e:	9004      	str	r0, [sp, #16]
 8002380:	b2a0      	uxth	r0, r4
 8002382:	b292      	uxth	r2, r2
 8002384:	9003      	str	r0, [sp, #12]
 8002386:	9206      	str	r2, [sp, #24]
 8002388:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800238a:	982b      	ldr	r0, [sp, #172]	; 0xac
 800238c:	9305      	str	r3, [sp, #20]
 800238e:	b292      	uxth	r2, r2
 8002390:	ebaa 0a01 	sub.w	sl, sl, r1
 8002394:	2101      	movs	r1, #1
 8002396:	9201      	str	r2, [sp, #4]
 8002398:	9107      	str	r1, [sp, #28]
 800239a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800239c:	b280      	uxth	r0, r0
 800239e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80023a0:	9000      	str	r0, [sp, #0]
 80023a2:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80023a4:	b289      	uxth	r1, r1
 80023a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80023a8:	9102      	str	r1, [sp, #8]
 80023aa:	9924      	ldr	r1, [sp, #144]	; 0x90
 80023ac:	1a12      	subs	r2, r2, r0
 80023ae:	f8d9 0018 	ldr.w	r0, [r9, #24]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	b292      	uxth	r2, r2
 80023b6:	b289      	uxth	r1, r1
 80023b8:	fa0f fa8a 	sxth.w	sl, sl
 80023bc:	47b0      	blx	r6
 80023be:	9825      	ldr	r0, [sp, #148]	; 0x94
 80023c0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80023c2:	6881      	ldr	r1, [r0, #8]
 80023c4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80023c8:	6083      	str	r3, [r0, #8]
 80023ca:	9936      	ldr	r1, [sp, #216]	; 0xd8
 80023cc:	1a61      	subs	r1, r4, r1
 80023ce:	2900      	cmp	r1, #0
 80023d0:	bfc3      	ittte	gt
 80023d2:	9811      	ldrgt	r0, [sp, #68]	; 0x44
 80023d4:	1a24      	subgt	r4, r4, r0
 80023d6:	b224      	sxthgt	r4, r4
 80023d8:	2400      	movle	r4, #0
 80023da:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80023dc:	9820      	ldr	r0, [sp, #128]	; 0x80
 80023de:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80023e0:	1841      	adds	r1, r0, r1
 80023e2:	9117      	str	r1, [sp, #92]	; 0x5c
 80023e4:	9922      	ldr	r1, [sp, #136]	; 0x88
 80023e6:	428a      	cmp	r2, r1
 80023e8:	f4ff aedc 	bcc.w	80021a4 <forward_conv2d_nl_pool+0x29c>
 80023ec:	9925      	ldr	r1, [sp, #148]	; 0x94
 80023ee:	f8d9 0018 	ldr.w	r0, [r9, #24]
 80023f2:	68c2      	ldr	r2, [r0, #12]
 80023f4:	6082      	str	r2, [r0, #8]
 80023f6:	68c8      	ldr	r0, [r1, #12]
 80023f8:	6088      	str	r0, [r1, #8]
 80023fa:	b039      	add	sp, #228	; 0xe4
 80023fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002400 <forward_dense>:
 8002400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002404:	b081      	sub	sp, #4
 8002406:	ed2d 8b02 	vpush	{d8}
 800240a:	b088      	sub	sp, #32
 800240c:	6944      	ldr	r4, [r0, #20]
 800240e:	8820      	ldrh	r0, [r4, #0]
 8002410:	2800      	cmp	r0, #0
 8002412:	bf1a      	itte	ne
 8002414:	6861      	ldrne	r1, [r4, #4]
 8002416:	1d09      	addne	r1, r1, #4
 8002418:	2104      	moveq	r1, #4
 800241a:	6809      	ldr	r1, [r1, #0]
 800241c:	2900      	cmp	r1, #0
 800241e:	bf14      	ite	ne
 8002420:	680a      	ldrne	r2, [r1, #0]
 8002422:	2200      	moveq	r2, #0
 8002424:	2802      	cmp	r0, #2
 8002426:	bfa6      	itte	ge
 8002428:	6861      	ldrge	r1, [r4, #4]
 800242a:	3110      	addge	r1, #16
 800242c:	2104      	movlt	r1, #4
 800242e:	6809      	ldr	r1, [r1, #0]
 8002430:	2900      	cmp	r1, #0
 8002432:	bf14      	ite	ne
 8002434:	680f      	ldrne	r7, [r1, #0]
 8002436:	2700      	moveq	r7, #0
 8002438:	2802      	cmp	r0, #2
 800243a:	bfc6      	itte	gt
 800243c:	6861      	ldrgt	r1, [r4, #4]
 800243e:	311c      	addgt	r1, #28
 8002440:	2104      	movle	r1, #4
 8002442:	6809      	ldr	r1, [r1, #0]
 8002444:	2900      	cmp	r1, #0
 8002446:	bf14      	ite	ne
 8002448:	680b      	ldrne	r3, [r1, #0]
 800244a:	2300      	moveq	r3, #0
 800244c:	2802      	cmp	r0, #2
 800244e:	dd0b      	ble.n	8002468 <forward_dense+0x68>
 8002450:	6861      	ldr	r1, [r4, #4]
 8002452:	f111 0018 	adds.w	r0, r1, #24
 8002456:	d007      	beq.n	8002468 <forward_dense+0x68>
 8002458:	8b0c      	ldrh	r4, [r1, #24]
 800245a:	2c02      	cmp	r4, #2
 800245c:	db04      	blt.n	8002468 <forward_dense+0x68>
 800245e:	69c8      	ldr	r0, [r1, #28]
 8002460:	b110      	cbz	r0, 8002468 <forward_dense+0x68>
 8002462:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8002466:	e001      	b.n	800246c <forward_dense+0x6c>
 8002468:	f04f 0a00 	mov.w	sl, #0
 800246c:	68d0      	ldr	r0, [r2, #12]
 800246e:	699e      	ldr	r6, [r3, #24]
 8002470:	6992      	ldr	r2, [r2, #24]
 8002472:	6844      	ldr	r4, [r0, #4]
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800247a:	f8d6 e000 	ldr.w	lr, [r6]
 800247e:	69bf      	ldr	r7, [r7, #24]
 8002480:	6881      	ldr	r1, [r0, #8]
 8002482:	68c0      	ldr	r0, [r0, #12]
 8002484:	ea4f 19ee 	mov.w	r9, lr, asr #7
 8002488:	ea4f 586e 	mov.w	r8, lr, asr #21
 800248c:	ea4f 4e6e 	mov.w	lr, lr, asr #17
 8002490:	f00e 0e0f 	and.w	lr, lr, #15
 8002494:	4341      	muls	r1, r0
 8002496:	f009 097f 	and.w	r9, r9, #127	; 0x7f
 800249a:	f008 0803 	and.w	r8, r8, #3
 800249e:	fa29 f908 	lsr.w	r9, r9, r8
 80024a2:	2000      	movs	r0, #0
 80024a4:	f1be 0f04 	cmp.w	lr, #4
 80024a8:	68bf      	ldr	r7, [r7, #8]
 80024aa:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80024ae:	bf14      	ite	ne
 80024b0:	f1be 0f08 	cmpne.w	lr, #8
 80024b4:	68f0      	ldreq	r0, [r6, #12]
 80024b6:	695e      	ldr	r6, [r3, #20]
 80024b8:	2900      	cmp	r1, #0
 80024ba:	eb07 028c 	add.w	r2, r7, ip, lsl #2
 80024be:	6876      	ldr	r6, [r6, #4]
 80024c0:	f000 80ee 	beq.w	80026a0 <forward_dense+0x2a0>
 80024c4:	9307      	str	r3, [sp, #28]
 80024c6:	f8cd a014 	str.w	sl, [sp, #20]
 80024ca:	f8cd c018 	str.w	ip, [sp, #24]
 80024ce:	9201      	str	r2, [sp, #4]
 80024d0:	9104      	str	r1, [sp, #16]
 80024d2:	9907      	ldr	r1, [sp, #28]
 80024d4:	698b      	ldr	r3, [r1, #24]
 80024d6:	9905      	ldr	r1, [sp, #20]
 80024d8:	2900      	cmp	r1, #0
 80024da:	bf1a      	itte	ne
 80024dc:	6989      	ldrne	r1, [r1, #24]
 80024de:	688a      	ldrne	r2, [r1, #8]
 80024e0:	2200      	moveq	r2, #0
 80024e2:	2800      	cmp	r0, #0
 80024e4:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80024e8:	9b01      	ldr	r3, [sp, #4]
 80024ea:	f040 80ab 	bne.w	8002644 <forward_dense+0x244>
 80024ee:	429f      	cmp	r7, r3
 80024f0:	f080 80c9 	bcs.w	8002686 <forward_dense+0x286>
 80024f4:	9003      	str	r0, [sp, #12]
 80024f6:	2a00      	cmp	r2, #0
 80024f8:	4620      	mov	r0, r4
 80024fa:	46c6      	mov	lr, r8
 80024fc:	46dc      	mov	ip, fp
 80024fe:	eddf 0a6b 	vldr	s1, [pc, #428]	; 80026ac <.text_12>
 8002502:	bf0e      	itee	eq
 8002504:	ed9f 0a69 	vldreq	s0, [pc, #420]	; 80026ac <.text_12>
 8002508:	ed92 0a00 	vldrne	s0, [r2]
 800250c:	1d12      	addne	r2, r2, #4
 800250e:	2c04      	cmp	r4, #4
 8002510:	d35d      	bcc.n	80025ce <forward_dense+0x1ce>
 8002512:	08a1      	lsrs	r1, r4, #2
 8002514:	07cd      	lsls	r5, r1, #31
 8002516:	d51c      	bpl.n	8002552 <forward_dense+0x152>
 8002518:	ed9c 4a00 	vldr	s8, [ip]
 800251c:	1f00      	subs	r0, r0, #4
 800251e:	edde 4a00 	vldr	s9, [lr]
 8002522:	ed9c 3a01 	vldr	s6, [ip, #4]
 8002526:	edde 3a01 	vldr	s7, [lr, #4]
 800252a:	ee44 0a24 	vmla.f32	s1, s8, s9
 800252e:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002532:	edde 2a02 	vldr	s5, [lr, #8]
 8002536:	ee43 0a23 	vmla.f32	s1, s6, s7
 800253a:	ed9c 1a03 	vldr	s2, [ip, #12]
 800253e:	f10c 0c10 	add.w	ip, ip, #16
 8002542:	edde 1a03 	vldr	s3, [lr, #12]
 8002546:	f10e 0e10 	add.w	lr, lr, #16
 800254a:	ee42 0a22 	vmla.f32	s1, s4, s5
 800254e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8002552:	0849      	lsrs	r1, r1, #1
 8002554:	f000 803b 	beq.w	80025ce <forward_dense+0x1ce>
 8002558:	ed9c 1a03 	vldr	s2, [ip, #12]
 800255c:	3808      	subs	r0, #8
 800255e:	edde 1a03 	vldr	s3, [lr, #12]
 8002562:	1e49      	subs	r1, r1, #1
 8002564:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002568:	edde 2a02 	vldr	s5, [lr, #8]
 800256c:	ed9c 3a01 	vldr	s6, [ip, #4]
 8002570:	edde 3a01 	vldr	s7, [lr, #4]
 8002574:	ed9c 4a00 	vldr	s8, [ip]
 8002578:	f10c 0c10 	add.w	ip, ip, #16
 800257c:	edde 4a00 	vldr	s9, [lr]
 8002580:	f10e 0e10 	add.w	lr, lr, #16
 8002584:	ee44 0a24 	vmla.f32	s1, s8, s9
 8002588:	ee43 0a23 	vmla.f32	s1, s6, s7
 800258c:	ee42 0a22 	vmla.f32	s1, s4, s5
 8002590:	ed9c 8a00 	vldr	s16, [ip]
 8002594:	edde 8a00 	vldr	s17, [lr]
 8002598:	ee41 0a21 	vmla.f32	s1, s2, s3
 800259c:	ed9c 7a01 	vldr	s14, [ip, #4]
 80025a0:	edde 7a01 	vldr	s15, [lr, #4]
 80025a4:	ee48 0a28 	vmla.f32	s1, s16, s17
 80025a8:	ed9c 6a02 	vldr	s12, [ip, #8]
 80025ac:	edde 6a02 	vldr	s13, [lr, #8]
 80025b0:	ee47 0a27 	vmla.f32	s1, s14, s15
 80025b4:	ed9c 5a03 	vldr	s10, [ip, #12]
 80025b8:	f10c 0c10 	add.w	ip, ip, #16
 80025bc:	edde 5a03 	vldr	s11, [lr, #12]
 80025c0:	f10e 0e10 	add.w	lr, lr, #16
 80025c4:	ee46 0a26 	vmla.f32	s1, s12, s13
 80025c8:	ee45 0a25 	vmla.f32	s1, s10, s11
 80025cc:	d1c4      	bne.n	8002558 <forward_dense+0x158>
 80025ce:	b378      	cbz	r0, 8002630 <forward_dense+0x230>
 80025d0:	f010 0103 	ands.w	r1, r0, #3
 80025d4:	d00b      	beq.n	80025ee <forward_dense+0x1ee>
 80025d6:	1e49      	subs	r1, r1, #1
 80025d8:	ed9c 1a00 	vldr	s2, [ip]
 80025dc:	edde 1a00 	vldr	s3, [lr]
 80025e0:	f10e 0e04 	add.w	lr, lr, #4
 80025e4:	ee41 0a21 	vmla.f32	s1, s2, s3
 80025e8:	f10c 0c04 	add.w	ip, ip, #4
 80025ec:	d1f3      	bne.n	80025d6 <forward_dense+0x1d6>
 80025ee:	0880      	lsrs	r0, r0, #2
 80025f0:	f000 801e 	beq.w	8002630 <forward_dense+0x230>
 80025f4:	ed9c 2a00 	vldr	s4, [ip]
 80025f8:	1e40      	subs	r0, r0, #1
 80025fa:	ed9e 1a00 	vldr	s2, [lr]
 80025fe:	eddc 1a01 	vldr	s3, [ip, #4]
 8002602:	edde 2a01 	vldr	s5, [lr, #4]
 8002606:	ee42 0a01 	vmla.f32	s1, s4, s2
 800260a:	ee41 0aa2 	vmla.f32	s1, s3, s5
 800260e:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002612:	ed9e 1a02 	vldr	s2, [lr, #8]
 8002616:	eddc 1a03 	vldr	s3, [ip, #12]
 800261a:	f10c 0c10 	add.w	ip, ip, #16
 800261e:	edde 2a03 	vldr	s5, [lr, #12]
 8002622:	f10e 0e10 	add.w	lr, lr, #16
 8002626:	ee42 0a01 	vmla.f32	s1, s4, s2
 800262a:	ee41 0aa2 	vmla.f32	s1, s3, s5
 800262e:	d1e1      	bne.n	80025f4 <forward_dense+0x1f4>
 8002630:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002634:	44b3      	add	fp, r6
 8002636:	ed87 0a00 	vstr	s0, [r7]
 800263a:	1d3f      	adds	r7, r7, #4
 800263c:	429f      	cmp	r7, r3
 800263e:	f4ff af5a 	bcc.w	80024f6 <forward_dense+0xf6>
 8002642:	e01f      	b.n	8002684 <forward_dense+0x284>
 8002644:	429f      	cmp	r7, r3
 8002646:	d21e      	bcs.n	8002686 <forward_dense+0x286>
 8002648:	469a      	mov	sl, r3
 800264a:	9003      	str	r0, [sp, #12]
 800264c:	4615      	mov	r5, r2
 800264e:	2d00      	cmp	r5, #0
 8002650:	a802      	add	r0, sp, #8
 8002652:	bf19      	ittee	ne
 8002654:	f855 1b04 	ldrne.w	r1, [r5], #4
 8002658:	9102      	strne	r1, [sp, #8]
 800265a:	2300      	moveq	r3, #0
 800265c:	9302      	streq	r3, [sp, #8]
 800265e:	f1b9 0f04 	cmp.w	r9, #4
 8002662:	9400      	str	r4, [sp, #0]
 8002664:	4643      	mov	r3, r8
 8002666:	9a03      	ldr	r2, [sp, #12]
 8002668:	4659      	mov	r1, fp
 800266a:	d103      	bne.n	8002674 <forward_dense+0x274>
 800266c:	f7ff fa36 	bl	8001adc <ai_dict4_dot_array_f32>
 8002670:	e002      	b.n	8002678 <forward_dense+0x278>
 8002672:	bf00      	nop
 8002674:	f7ff f8c4 	bl	8001800 <ai_dict8_dot_array_f32>
 8002678:	9802      	ldr	r0, [sp, #8]
 800267a:	44b3      	add	fp, r6
 800267c:	f847 0b04 	str.w	r0, [r7], #4
 8002680:	4557      	cmp	r7, sl
 8002682:	d3e4      	bcc.n	800264e <forward_dense+0x24e>
 8002684:	9803      	ldr	r0, [sp, #12]
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	9b06      	ldr	r3, [sp, #24]
 800268a:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 800268e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8002692:	9a04      	ldr	r2, [sp, #16]
 8002694:	f8cd e004 	str.w	lr, [sp, #4]
 8002698:	1e52      	subs	r2, r2, #1
 800269a:	9204      	str	r2, [sp, #16]
 800269c:	f47f af19 	bne.w	80024d2 <forward_dense+0xd2>
 80026a0:	b008      	add	sp, #32
 80026a2:	ecbd 8b02 	vpop	{d8}
 80026a6:	b001      	add	sp, #4
 80026a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080026ac <.text_12>:
 80026ac:	00000000 	.word	0x00000000

080026b0 <forward_gemm>:
 80026b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b4:	b091      	sub	sp, #68	; 0x44
 80026b6:	4604      	mov	r4, r0
 80026b8:	6961      	ldr	r1, [r4, #20]
 80026ba:	6963      	ldr	r3, [r4, #20]
 80026bc:	8808      	ldrh	r0, [r1, #0]
 80026be:	2800      	cmp	r0, #0
 80026c0:	bf1a      	itte	ne
 80026c2:	6849      	ldrne	r1, [r1, #4]
 80026c4:	1d0a      	addne	r2, r1, #4
 80026c6:	2204      	moveq	r2, #4
 80026c8:	6810      	ldr	r0, [r2, #0]
 80026ca:	8819      	ldrh	r1, [r3, #0]
 80026cc:	2800      	cmp	r0, #0
 80026ce:	bf14      	ite	ne
 80026d0:	6805      	ldrne	r5, [r0, #0]
 80026d2:	2500      	moveq	r5, #0
 80026d4:	2900      	cmp	r1, #0
 80026d6:	bf1d      	ittte	ne
 80026d8:	6858      	ldrne	r0, [r3, #4]
 80026da:	2800      	cmpne	r0, #0
 80026dc:	f8b0 c000 	ldrhne.w	ip, [r0]
 80026e0:	f04f 0c00 	moveq.w	ip, #0
 80026e4:	2902      	cmp	r1, #2
 80026e6:	bfa6      	itte	ge
 80026e8:	6858      	ldrge	r0, [r3, #4]
 80026ea:	3010      	addge	r0, #16
 80026ec:	2004      	movlt	r0, #4
 80026ee:	6800      	ldr	r0, [r0, #0]
 80026f0:	2800      	cmp	r0, #0
 80026f2:	bf14      	ite	ne
 80026f4:	6801      	ldrne	r1, [r0, #0]
 80026f6:	2100      	moveq	r1, #0
 80026f8:	2600      	movs	r6, #0
 80026fa:	2700      	movs	r7, #0
 80026fc:	f1bc 0f03 	cmp.w	ip, #3
 8002700:	d106      	bne.n	8002710 <forward_gemm+0x60>
 8002702:	6810      	ldr	r0, [r2, #0]
 8002704:	2800      	cmp	r0, #0
 8002706:	d023      	beq.n	8002750 <forward_gemm+0xa0>
 8002708:	6846      	ldr	r6, [r0, #4]
 800270a:	d021      	beq.n	8002750 <forward_gemm+0xa0>
 800270c:	6887      	ldr	r7, [r0, #8]
 800270e:	e01f      	b.n	8002750 <forward_gemm+0xa0>
 8002710:	f1bc 0f02 	cmp.w	ip, #2
 8002714:	d10c      	bne.n	8002730 <forward_gemm+0x80>
 8002716:	6810      	ldr	r0, [r2, #0]
 8002718:	b100      	cbz	r0, 800271c <forward_gemm+0x6c>
 800271a:	6846      	ldr	r6, [r0, #4]
 800271c:	881a      	ldrh	r2, [r3, #0]
 800271e:	2a02      	cmp	r2, #2
 8002720:	bfc6      	itte	gt
 8002722:	6858      	ldrgt	r0, [r3, #4]
 8002724:	301c      	addgt	r0, #28
 8002726:	2004      	movle	r0, #4
 8002728:	6800      	ldr	r0, [r0, #0]
 800272a:	b188      	cbz	r0, 8002750 <forward_gemm+0xa0>
 800272c:	6807      	ldr	r7, [r0, #0]
 800272e:	e00f      	b.n	8002750 <forward_gemm+0xa0>
 8002730:	f1bc 0f01 	cmp.w	ip, #1
 8002734:	d10c      	bne.n	8002750 <forward_gemm+0xa0>
 8002736:	881a      	ldrh	r2, [r3, #0]
 8002738:	2a02      	cmp	r2, #2
 800273a:	bfc6      	itte	gt
 800273c:	6858      	ldrgt	r0, [r3, #4]
 800273e:	f100 021c 	addgt.w	r2, r0, #28
 8002742:	2204      	movle	r2, #4
 8002744:	6810      	ldr	r0, [r2, #0]
 8002746:	2800      	cmp	r0, #0
 8002748:	d002      	beq.n	8002750 <forward_gemm+0xa0>
 800274a:	6806      	ldr	r6, [r0, #0]
 800274c:	bf18      	it	ne
 800274e:	6847      	ldrne	r7, [r0, #4]
 8002750:	68c8      	ldr	r0, [r1, #12]
 8002752:	6989      	ldr	r1, [r1, #24]
 8002754:	688b      	ldr	r3, [r1, #8]
 8002756:	68c1      	ldr	r1, [r0, #12]
 8002758:	6842      	ldr	r2, [r0, #4]
 800275a:	a806      	add	r0, sp, #24
 800275c:	b292      	uxth	r2, r2
 800275e:	b289      	uxth	r1, r1
 8002760:	f008 fe6d 	bl	800b43e <arm_mat_init_f32>
 8002764:	69a9      	ldr	r1, [r5, #24]
 8002766:	68e8      	ldr	r0, [r5, #12]
 8002768:	688b      	ldr	r3, [r1, #8]
 800276a:	6842      	ldr	r2, [r0, #4]
 800276c:	68c1      	ldr	r1, [r0, #12]
 800276e:	a804      	add	r0, sp, #16
 8002770:	b292      	uxth	r2, r2
 8002772:	b289      	uxth	r1, r1
 8002774:	f008 fe63 	bl	800b43e <arm_mat_init_f32>
 8002778:	69b1      	ldr	r1, [r6, #24]
 800277a:	68f0      	ldr	r0, [r6, #12]
 800277c:	688b      	ldr	r3, [r1, #8]
 800277e:	6842      	ldr	r2, [r0, #4]
 8002780:	68c1      	ldr	r1, [r0, #12]
 8002782:	a802      	add	r0, sp, #8
 8002784:	b292      	uxth	r2, r2
 8002786:	b289      	uxth	r1, r1
 8002788:	f008 fe59 	bl	800b43e <arm_mat_init_f32>
 800278c:	69b9      	ldr	r1, [r7, #24]
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	688b      	ldr	r3, [r1, #8]
 8002792:	6842      	ldr	r2, [r0, #4]
 8002794:	68c1      	ldr	r1, [r0, #12]
 8002796:	4668      	mov	r0, sp
 8002798:	b292      	uxth	r2, r2
 800279a:	b289      	uxth	r1, r1
 800279c:	f008 fe4f 	bl	800b43e <arm_mat_init_f32>
 80027a0:	9b01      	ldr	r3, [sp, #4]
 80027a2:	f8bd e010 	ldrh.w	lr, [sp, #16]
 80027a6:	f994 5021 	ldrsb.w	r5, [r4, #33]	; 0x21
 80027aa:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80027ae:	ed94 0a07 	vldr	s0, [r4, #28]
 80027b2:	9a05      	ldr	r2, [sp, #20]
 80027b4:	edd4 0a06 	vldr	s1, [r4, #24]
 80027b8:	9308      	str	r3, [sp, #32]
 80027ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80027bc:	2300      	movs	r3, #0
 80027be:	f8bd 8012 	ldrh.w	r8, [sp, #18]
 80027c2:	f8bd a002 	ldrh.w	sl, [sp, #2]
 80027c6:	0002      	movs	r2, r0
 80027c8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80027cc:	f8bd c000 	ldrh.w	ip, [sp]
 80027d0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80027d4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80027d8:	9c07      	ldr	r4, [sp, #28]
 80027da:	bf0c      	ite	eq
 80027dc:	4672      	moveq	r2, lr
 80027de:	4642      	movne	r2, r8
 80027e0:	f1ba 0f01 	cmp.w	sl, #1
 80027e4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80027e8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80027ec:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 80027f0:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80027f4:	bf0c      	ite	eq
 80027f6:	4699      	moveq	r9, r3
 80027f8:	f04f 0904 	movne.w	r9, #4
 80027fc:	f1bc 0f01 	cmp.w	ip, #1
 8002800:	d105      	bne.n	800280e <forward_gemm+0x15e>
 8002802:	f1ba 0f01 	cmp.w	sl, #1
 8002806:	d005      	beq.n	8002814 <forward_gemm+0x164>
 8002808:	f1cb 0a00 	rsb	sl, fp, #0
 800280c:	e003      	b.n	8002816 <forward_gemm+0x166>
 800280e:	f1ba 0f01 	cmp.w	sl, #1
 8002812:	d000      	beq.n	8002816 <forward_gemm+0x166>
 8002814:	469a      	mov	sl, r3
 8002816:	2800      	cmp	r0, #0
 8002818:	fa0f fa8a 	sxth.w	sl, sl
 800281c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8002820:	bf0c      	ite	eq
 8002822:	46f4      	moveq	ip, lr
 8002824:	46c4      	movne	ip, r8
 8002826:	45b4      	cmp	ip, r6
 8002828:	f040 808d 	bne.w	8002946 <forward_gemm+0x296>
 800282c:	2d00      	cmp	r5, #0
 800282e:	bf0c      	ite	eq
 8002830:	9109      	streq	r1, [sp, #36]	; 0x24
 8002832:	9709      	strne	r7, [sp, #36]	; 0x24
 8002834:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8002838:	45dc      	cmp	ip, fp
 800283a:	f040 8084 	bne.w	8002946 <forward_gemm+0x296>
 800283e:	2800      	cmp	r0, #0
 8002840:	bf0c      	ite	eq
 8002842:	46c4      	moveq	ip, r8
 8002844:	46f4      	movne	ip, lr
 8002846:	2d00      	cmp	r5, #0
 8002848:	bf0c      	ite	eq
 800284a:	46ba      	moveq	sl, r7
 800284c:	468a      	movne	sl, r1
 800284e:	45d4      	cmp	ip, sl
 8002850:	d179      	bne.n	8002946 <forward_gemm+0x296>
 8002852:	9e08      	ldr	r6, [sp, #32]
 8002854:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002858:	9410      	str	r4, [sp, #64]	; 0x40
 800285a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800285e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8002862:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002864:	f8bd 4022 	ldrh.w	r4, [sp, #34]	; 0x22
 8002868:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800286c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800286e:	eb02 0a84 	add.w	sl, r2, r4, lsl #2
 8002872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002874:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8002878:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 800287c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8002880:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8002884:	2800      	cmp	r0, #0
 8002886:	ed9f 1aa2 	vldr	s2, [pc, #648]	; 8002b10 <.text_16>
 800288a:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 800288e:	bf0c      	ite	eq
 8002890:	f8dd 803c 	ldreq.w	r8, [sp, #60]	; 0x3c
 8002894:	f8bd 8028 	ldrhne.w	r8, [sp, #40]	; 0x28
 8002898:	fa1f fb88 	uxth.w	fp, r8
 800289c:	f1bb 0f00 	cmp.w	fp, #0
 80028a0:	d019      	beq.n	80028d6 <forward_gemm+0x226>
 80028a2:	2800      	cmp	r0, #0
 80028a4:	f1a8 0801 	sub.w	r8, r8, #1
 80028a8:	edde 1a00 	vldr	s3, [lr]
 80028ac:	ed93 2a00 	vldr	s4, [r3]
 80028b0:	bf0c      	ite	eq
 80028b2:	f04f 0b04 	moveq.w	fp, #4
 80028b6:	46a3      	movne	fp, r4
 80028b8:	2d00      	cmp	r5, #0
 80028ba:	44de      	add	lr, fp
 80028bc:	ee01 1a82 	vmla.f32	s2, s3, s4
 80028c0:	bf0c      	ite	eq
 80028c2:	ea4f 0b81 	moveq.w	fp, r1, lsl #2
 80028c6:	f04f 0b04 	movne.w	fp, #4
 80028ca:	445b      	add	r3, fp
 80028cc:	fa1f fb88 	uxth.w	fp, r8
 80028d0:	f1bb 0f00 	cmp.w	fp, #0
 80028d4:	d1e5      	bne.n	80028a2 <forward_gemm+0x1f2>
 80028d6:	1e52      	subs	r2, r2, #1
 80028d8:	b292      	uxth	r2, r2
 80028da:	002b      	movs	r3, r5
 80028dc:	ee20 1a81 	vmul.f32	s2, s1, s2
 80028e0:	edd6 1a00 	vldr	s3, [r6]
 80028e4:	444e      	add	r6, r9
 80028e6:	ee00 1a21 	vmla.f32	s2, s0, s3
 80028ea:	ed8a 1a00 	vstr	s2, [sl]
 80028ee:	f10a 0a04 	add.w	sl, sl, #4
 80028f2:	bf0e      	itee	eq
 80028f4:	1a8b      	subeq	r3, r1, r2
 80028f6:	1abb      	subne	r3, r7, r2
 80028f8:	434b      	mulne	r3, r1
 80028fa:	2a00      	cmp	r2, #0
 80028fc:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8002900:	d1c0      	bne.n	8002884 <forward_gemm+0x1d4>
 8002902:	f8bd a022 	ldrh.w	sl, [sp, #34]	; 0x22
 8002906:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800290a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800290c:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
 8002910:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8002914:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8002918:	44da      	add	sl, fp
 800291a:	f8ad a022 	strh.w	sl, [sp, #34]	; 0x22
 800291e:	b100      	cbz	r0, 8002922 <forward_gemm+0x272>
 8002920:	2404      	movs	r4, #4
 8002922:	eb02 0c04 	add.w	ip, r2, r4
 8002926:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002928:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800292c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8002930:	f1a4 0a01 	sub.w	sl, r4, #1
 8002934:	f8ad a020 	strh.w	sl, [sp, #32]
 8002938:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800293c:	2a00      	cmp	r2, #0
 800293e:	d190      	bne.n	8002862 <forward_gemm+0x1b2>
 8002940:	b011      	add	sp, #68	; 0x44
 8002942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002946:	fb0b f606 	mul.w	r6, fp, r6
 800294a:	2e00      	cmp	r6, #0
 800294c:	ddf8      	ble.n	8002940 <forward_gemm+0x290>
 800294e:	f016 0003 	ands.w	r0, r6, #3
 8002952:	d003      	beq.n	800295c <forward_gemm+0x2ac>
 8002954:	1e40      	subs	r0, r0, #1
 8002956:	f844 3b04 	str.w	r3, [r4], #4
 800295a:	d1fb      	bne.n	8002954 <forward_gemm+0x2a4>
 800295c:	08b1      	lsrs	r1, r6, #2
 800295e:	d0ef      	beq.n	8002940 <forward_gemm+0x290>
 8002960:	6023      	str	r3, [r4, #0]
 8002962:	6063      	str	r3, [r4, #4]
 8002964:	60a3      	str	r3, [r4, #8]
 8002966:	60e3      	str	r3, [r4, #12]
 8002968:	3410      	adds	r4, #16
 800296a:	1e49      	subs	r1, r1, #1
 800296c:	d1f8      	bne.n	8002960 <forward_gemm+0x2b0>
 800296e:	b011      	add	sp, #68	; 0x44
 8002970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002974 <forward_matmul>:
 8002974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002978:	b08b      	sub	sp, #44	; 0x2c
 800297a:	6944      	ldr	r4, [r0, #20]
 800297c:	8822      	ldrh	r2, [r4, #0]
 800297e:	2a00      	cmp	r2, #0
 8002980:	bf1a      	itte	ne
 8002982:	6860      	ldrne	r0, [r4, #4]
 8002984:	1d03      	addne	r3, r0, #4
 8002986:	2304      	moveq	r3, #4
 8002988:	6819      	ldr	r1, [r3, #0]
 800298a:	2900      	cmp	r1, #0
 800298c:	bf14      	ite	ne
 800298e:	6808      	ldrne	r0, [r1, #0]
 8002990:	2000      	moveq	r0, #0
 8002992:	2900      	cmp	r1, #0
 8002994:	bf14      	ite	ne
 8002996:	f8d1 b004 	ldrne.w	fp, [r1, #4]
 800299a:	f04f 0b00 	moveq.w	fp, #0
 800299e:	2a02      	cmp	r2, #2
 80029a0:	bfa6      	itte	ge
 80029a2:	6861      	ldrge	r1, [r4, #4]
 80029a4:	3110      	addge	r1, #16
 80029a6:	2104      	movlt	r1, #4
 80029a8:	6809      	ldr	r1, [r1, #0]
 80029aa:	2900      	cmp	r1, #0
 80029ac:	bf14      	ite	ne
 80029ae:	680b      	ldrne	r3, [r1, #0]
 80029b0:	2300      	moveq	r3, #0
 80029b2:	f1bb 0f00 	cmp.w	fp, #0
 80029b6:	d108      	bne.n	80029ca <forward_matmul+0x56>
 80029b8:	2a02      	cmp	r2, #2
 80029ba:	bfc6      	itte	gt
 80029bc:	6861      	ldrgt	r1, [r4, #4]
 80029be:	311c      	addgt	r1, #28
 80029c0:	2104      	movle	r1, #4
 80029c2:	6809      	ldr	r1, [r1, #0]
 80029c4:	b109      	cbz	r1, 80029ca <forward_matmul+0x56>
 80029c6:	f8d1 b000 	ldr.w	fp, [r1]
 80029ca:	68dd      	ldr	r5, [r3, #12]
 80029cc:	68c4      	ldr	r4, [r0, #12]
 80029ce:	f8db 900c 	ldr.w	r9, [fp, #12]
 80029d2:	686e      	ldr	r6, [r5, #4]
 80029d4:	f8d4 e000 	ldr.w	lr, [r4]
 80029d8:	f8d5 a000 	ldr.w	sl, [r5]
 80029dc:	f8d9 2000 	ldr.w	r2, [r9]
 80029e0:	68a1      	ldr	r1, [r4, #8]
 80029e2:	f8d9 8008 	ldr.w	r8, [r9, #8]
 80029e6:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80029ea:	68ef      	ldr	r7, [r5, #12]
 80029ec:	9706      	str	r7, [sp, #24]
 80029ee:	68e7      	ldr	r7, [r4, #12]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	fb01 f50e 	mul.w	r5, r1, lr
 80029f6:	434f      	muls	r7, r1
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	fb0e f707 	mul.w	r7, lr, r7
 80029fe:	970a      	str	r7, [sp, #40]	; 0x28
 8002a00:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8002a04:	fb08 f404 	mul.w	r4, r8, r4
 8002a08:	fb08 f802 	mul.w	r8, r8, r2
 8002a0c:	4354      	muls	r4, r2
 8002a0e:	9409      	str	r4, [sp, #36]	; 0x24
 8002a10:	2e00      	cmp	r6, #0
 8002a12:	d077      	beq.n	8002b04 <forward_matmul+0x190>
 8002a14:	2400      	movs	r4, #0
 8002a16:	46a1      	mov	r9, r4
 8002a18:	9602      	str	r6, [sp, #8]
 8002a1a:	9e06      	ldr	r6, [sp, #24]
 8002a1c:	2e00      	cmp	r6, #0
 8002a1e:	d067      	beq.n	8002af0 <forward_matmul+0x17c>
 8002a20:	9f06      	ldr	r7, [sp, #24]
 8002a22:	2600      	movs	r6, #0
 8002a24:	9701      	str	r7, [sp, #4]
 8002a26:	f8cd c00c 	str.w	ip, [sp, #12]
 8002a2a:	9505      	str	r5, [sp, #20]
 8002a2c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002a30:	f1bc 0f00 	cmp.w	ip, #0
 8002a34:	d051      	beq.n	8002ada <forward_matmul+0x166>
 8002a36:	f8cd a010 	str.w	sl, [sp, #16]
 8002a3a:	f04f 0a00 	mov.w	sl, #0
 8002a3e:	f8cd c000 	str.w	ip, [sp]
 8002a42:	9207      	str	r2, [sp, #28]
 8002a44:	9a04      	ldr	r2, [sp, #16]
 8002a46:	2a00      	cmp	r2, #0
 8002a48:	d03e      	beq.n	8002ac8 <forward_matmul+0x154>
 8002a4a:	f04f 0c00 	mov.w	ip, #0
 8002a4e:	9008      	str	r0, [sp, #32]
 8002a50:	9808      	ldr	r0, [sp, #32]
 8002a52:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8002b10 <.text_16>
 8002a56:	6987      	ldr	r7, [r0, #24]
 8002a58:	f8db 0018 	ldr.w	r0, [fp, #24]
 8002a5c:	68bd      	ldr	r5, [r7, #8]
 8002a5e:	6887      	ldr	r7, [r0, #8]
 8002a60:	192d      	adds	r5, r5, r4
 8002a62:	19ad      	adds	r5, r5, r6
 8002a64:	4465      	add	r5, ip
 8002a66:	444f      	add	r7, r9
 8002a68:	4457      	add	r7, sl
 8002a6a:	4467      	add	r7, ip
 8002a6c:	b321      	cbz	r1, 8002ab8 <forward_matmul+0x144>
 8002a6e:	07c8      	lsls	r0, r1, #31
 8002a70:	d509      	bpl.n	8002a86 <forward_matmul+0x112>
 8002a72:	edd5 0a00 	vldr	s1, [r5]
 8002a76:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002a7a:	ed97 1a00 	vldr	s2, [r7]
 8002a7e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8002a82:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002a86:	0848      	lsrs	r0, r1, #1
 8002a88:	f000 8016 	beq.w	8002ab8 <forward_matmul+0x144>
 8002a8c:	edd5 0a00 	vldr	s1, [r5]
 8002a90:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002a94:	ed97 1a00 	vldr	s2, [r7]
 8002a98:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8002a9c:	1e40      	subs	r0, r0, #1
 8002a9e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002aa2:	edd5 1a00 	vldr	s3, [r5]
 8002aa6:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002aaa:	ed97 2a00 	vldr	s4, [r7]
 8002aae:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8002ab2:	ee01 0a82 	vmla.f32	s0, s3, s4
 8002ab6:	d1e9      	bne.n	8002a8c <forward_matmul+0x118>
 8002ab8:	ed83 0a00 	vstr	s0, [r3]
 8002abc:	1d1b      	adds	r3, r3, #4
 8002abe:	1e52      	subs	r2, r2, #1
 8002ac0:	f10c 0c04 	add.w	ip, ip, #4
 8002ac4:	d1c4      	bne.n	8002a50 <forward_matmul+0xdc>
 8002ac6:	9808      	ldr	r0, [sp, #32]
 8002ac8:	9d00      	ldr	r5, [sp, #0]
 8002aca:	9a07      	ldr	r2, [sp, #28]
 8002acc:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 8002ad0:	1e6d      	subs	r5, r5, #1
 8002ad2:	9500      	str	r5, [sp, #0]
 8002ad4:	d1b6      	bne.n	8002a44 <forward_matmul+0xd0>
 8002ad6:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002ada:	9f01      	ldr	r7, [sp, #4]
 8002adc:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002ae0:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 8002ae4:	1e7f      	subs	r7, r7, #1
 8002ae6:	9701      	str	r7, [sp, #4]
 8002ae8:	d1a0      	bne.n	8002a2c <forward_matmul+0xb8>
 8002aea:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002aee:	9d05      	ldr	r5, [sp, #20]
 8002af0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002af2:	eb09 0986 	add.w	r9, r9, r6, lsl #2
 8002af6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002af8:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8002afc:	9e02      	ldr	r6, [sp, #8]
 8002afe:	1e76      	subs	r6, r6, #1
 8002b00:	9602      	str	r6, [sp, #8]
 8002b02:	d18a      	bne.n	8002a1a <forward_matmul+0xa6>
 8002b04:	b00b      	add	sp, #44	; 0x2c
 8002b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002b0c <.text_15>:
 8002b0c:	080017fd 	.word	0x080017fd

08002b10 <.text_16>:
 8002b10:	00000000 	.word	0x00000000

08002b14 <ai_shape_get_size>:
 8002b14:	b470      	push	{r4, r5, r6}
 8002b16:	4601      	mov	r1, r0
 8002b18:	f04f 0201 	mov.w	r2, #1
 8002b1c:	680b      	ldr	r3, [r1, #0]
 8002b1e:	0a1b      	lsrs	r3, r3, #8
 8002b20:	d01e      	beq.n	8002b60 <ai_shape_get_size+0x4c>
 8002b22:	684c      	ldr	r4, [r1, #4]
 8002b24:	4618      	mov	r0, r3
 8002b26:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8002b2a:	1f0d      	subs	r5, r1, #4
 8002b2c:	f010 0103 	ands.w	r1, r0, #3
 8002b30:	f000 8006 	beq.w	8002b40 <ai_shape_get_size+0x2c>
 8002b34:	f855 6904 	ldr.w	r6, [r5], #-4
 8002b38:	1e5b      	subs	r3, r3, #1
 8002b3a:	4372      	muls	r2, r6
 8002b3c:	1e49      	subs	r1, r1, #1
 8002b3e:	d1f9      	bne.n	8002b34 <ai_shape_get_size+0x20>
 8002b40:	0880      	lsrs	r0, r0, #2
 8002b42:	d00d      	beq.n	8002b60 <ai_shape_get_size+0x4c>
 8002b44:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8002b48:	3910      	subs	r1, #16
 8002b4a:	68cb      	ldr	r3, [r1, #12]
 8002b4c:	688c      	ldr	r4, [r1, #8]
 8002b4e:	684d      	ldr	r5, [r1, #4]
 8002b50:	f851 6910 	ldr.w	r6, [r1], #-16
 8002b54:	4363      	muls	r3, r4
 8002b56:	436b      	muls	r3, r5
 8002b58:	4373      	muls	r3, r6
 8002b5a:	435a      	muls	r2, r3
 8002b5c:	1e40      	subs	r0, r0, #1
 8002b5e:	d1f4      	bne.n	8002b4a <ai_shape_get_size+0x36>
 8002b60:	4610      	mov	r0, r2
 8002b62:	bc70      	pop	{r4, r5, r6}
 8002b64:	4770      	bx	lr
	...

08002b68 <nl_func_acos_array_f32>:
 8002b68:	b570      	push	{r4, r5, r6, lr}
 8002b6a:	688c      	ldr	r4, [r1, #8]
 8002b6c:	6880      	ldr	r0, [r0, #8]
 8002b6e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002b72:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002b76:	1f0d      	subs	r5, r1, #4
 8002b78:	1f16      	subs	r6, r2, #4
 8002b7a:	42a5      	cmp	r5, r4
 8002b7c:	f0c0 800a 	bcc.w	8002b94 <nl_func_acos_array_f32+0x2c>
 8002b80:	ed95 0a00 	vldr	s0, [r5]
 8002b84:	1f2d      	subs	r5, r5, #4
 8002b86:	f010 f875 	bl	8012c74 <acosf>
 8002b8a:	ed86 0a00 	vstr	s0, [r6]
 8002b8e:	1f36      	subs	r6, r6, #4
 8002b90:	42a5      	cmp	r5, r4
 8002b92:	d2f5      	bcs.n	8002b80 <nl_func_acos_array_f32+0x18>
 8002b94:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b98 <forward_acos>:
 8002b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9a:	b081      	sub	sp, #4
 8002b9c:	6942      	ldr	r2, [r0, #20]
 8002b9e:	f04f 0501 	mov.w	r5, #1
 8002ba2:	8811      	ldrh	r1, [r2, #0]
 8002ba4:	2900      	cmp	r1, #0
 8002ba6:	bf1a      	itte	ne
 8002ba8:	6850      	ldrne	r0, [r2, #4]
 8002baa:	1d00      	addne	r0, r0, #4
 8002bac:	2004      	moveq	r0, #4
 8002bae:	6800      	ldr	r0, [r0, #0]
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	bf14      	ite	ne
 8002bb4:	6803      	ldrne	r3, [r0, #0]
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	2902      	cmp	r1, #2
 8002bba:	bfa6      	itte	ge
 8002bbc:	6850      	ldrge	r0, [r2, #4]
 8002bbe:	3010      	addge	r0, #16
 8002bc0:	2004      	movlt	r0, #4
 8002bc2:	6800      	ldr	r0, [r0, #0]
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	bf19      	ittee	ne
 8002bc8:	6800      	ldrne	r0, [r0, #0]
 8002bca:	f100 0418 	addne.w	r4, r0, #24
 8002bce:	2100      	moveq	r1, #0
 8002bd0:	f101 0418 	addeq.w	r4, r1, #24
 8002bd4:	f103 0108 	add.w	r1, r3, #8
 8002bd8:	680a      	ldr	r2, [r1, #0]
 8002bda:	0a12      	lsrs	r2, r2, #8
 8002bdc:	d01f      	beq.n	8002c1e <forward_acos+0x86>
 8002bde:	684e      	ldr	r6, [r1, #4]
 8002be0:	4610      	mov	r0, r2
 8002be2:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002be6:	1f0f      	subs	r7, r1, #4
 8002be8:	f010 0103 	ands.w	r1, r0, #3
 8002bec:	d006      	beq.n	8002bfc <forward_acos+0x64>
 8002bee:	1e52      	subs	r2, r2, #1
 8002bf0:	f857 c904 	ldr.w	ip, [r7], #-4
 8002bf4:	1e49      	subs	r1, r1, #1
 8002bf6:	fb0c f505 	mul.w	r5, ip, r5
 8002bfa:	d1f8      	bne.n	8002bee <forward_acos+0x56>
 8002bfc:	0880      	lsrs	r0, r0, #2
 8002bfe:	d00e      	beq.n	8002c1e <forward_acos+0x86>
 8002c00:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002c04:	3910      	subs	r1, #16
 8002c06:	68ca      	ldr	r2, [r1, #12]
 8002c08:	688e      	ldr	r6, [r1, #8]
 8002c0a:	684f      	ldr	r7, [r1, #4]
 8002c0c:	f851 c910 	ldr.w	ip, [r1], #-16
 8002c10:	4372      	muls	r2, r6
 8002c12:	437a      	muls	r2, r7
 8002c14:	fb0c f202 	mul.w	r2, ip, r2
 8002c18:	4355      	muls	r5, r2
 8002c1a:	1e40      	subs	r0, r0, #1
 8002c1c:	d1f3      	bne.n	8002c06 <forward_acos+0x6e>
 8002c1e:	6998      	ldr	r0, [r3, #24]
 8002c20:	6821      	ldr	r1, [r4, #0]
 8002c22:	6886      	ldr	r6, [r0, #8]
 8002c24:	688a      	ldr	r2, [r1, #8]
 8002c26:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002c2a:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8002c2e:	1f07      	subs	r7, r0, #4
 8002c30:	1f1c      	subs	r4, r3, #4
 8002c32:	42b7      	cmp	r7, r6
 8002c34:	f0c0 800a 	bcc.w	8002c4c <forward_acos+0xb4>
 8002c38:	ed97 0a00 	vldr	s0, [r7]
 8002c3c:	1f3f      	subs	r7, r7, #4
 8002c3e:	f010 f819 	bl	8012c74 <acosf>
 8002c42:	ed84 0a00 	vstr	s0, [r4]
 8002c46:	1f24      	subs	r4, r4, #4
 8002c48:	42b7      	cmp	r7, r6
 8002c4a:	d2f5      	bcs.n	8002c38 <forward_acos+0xa0>
 8002c4c:	b001      	add	sp, #4
 8002c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c50 <nl_func_acosh_array_f32>:
 8002c50:	b570      	push	{r4, r5, r6, lr}
 8002c52:	688c      	ldr	r4, [r1, #8]
 8002c54:	6880      	ldr	r0, [r0, #8]
 8002c56:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002c5a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002c5e:	1f0d      	subs	r5, r1, #4
 8002c60:	1f16      	subs	r6, r2, #4
 8002c62:	42a5      	cmp	r5, r4
 8002c64:	f0c0 800a 	bcc.w	8002c7c <nl_func_acosh_array_f32+0x2c>
 8002c68:	ed95 0a00 	vldr	s0, [r5]
 8002c6c:	1f2d      	subs	r5, r5, #4
 8002c6e:	f010 f859 	bl	8012d24 <acoshf>
 8002c72:	ed86 0a00 	vstr	s0, [r6]
 8002c76:	1f36      	subs	r6, r6, #4
 8002c78:	42a5      	cmp	r5, r4
 8002c7a:	d2f5      	bcs.n	8002c68 <nl_func_acosh_array_f32+0x18>
 8002c7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c80 <forward_acosh>:
 8002c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c82:	b081      	sub	sp, #4
 8002c84:	6942      	ldr	r2, [r0, #20]
 8002c86:	f04f 0501 	mov.w	r5, #1
 8002c8a:	8811      	ldrh	r1, [r2, #0]
 8002c8c:	2900      	cmp	r1, #0
 8002c8e:	bf1a      	itte	ne
 8002c90:	6850      	ldrne	r0, [r2, #4]
 8002c92:	1d00      	addne	r0, r0, #4
 8002c94:	2004      	moveq	r0, #4
 8002c96:	6800      	ldr	r0, [r0, #0]
 8002c98:	2800      	cmp	r0, #0
 8002c9a:	bf14      	ite	ne
 8002c9c:	6803      	ldrne	r3, [r0, #0]
 8002c9e:	2300      	moveq	r3, #0
 8002ca0:	2902      	cmp	r1, #2
 8002ca2:	bfa6      	itte	ge
 8002ca4:	6850      	ldrge	r0, [r2, #4]
 8002ca6:	3010      	addge	r0, #16
 8002ca8:	2004      	movlt	r0, #4
 8002caa:	6800      	ldr	r0, [r0, #0]
 8002cac:	2800      	cmp	r0, #0
 8002cae:	bf19      	ittee	ne
 8002cb0:	6800      	ldrne	r0, [r0, #0]
 8002cb2:	f100 0418 	addne.w	r4, r0, #24
 8002cb6:	2100      	moveq	r1, #0
 8002cb8:	f101 0418 	addeq.w	r4, r1, #24
 8002cbc:	f103 0108 	add.w	r1, r3, #8
 8002cc0:	680a      	ldr	r2, [r1, #0]
 8002cc2:	0a12      	lsrs	r2, r2, #8
 8002cc4:	d01f      	beq.n	8002d06 <forward_acosh+0x86>
 8002cc6:	684e      	ldr	r6, [r1, #4]
 8002cc8:	4610      	mov	r0, r2
 8002cca:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002cce:	1f0f      	subs	r7, r1, #4
 8002cd0:	f010 0103 	ands.w	r1, r0, #3
 8002cd4:	d006      	beq.n	8002ce4 <forward_acosh+0x64>
 8002cd6:	1e52      	subs	r2, r2, #1
 8002cd8:	f857 c904 	ldr.w	ip, [r7], #-4
 8002cdc:	1e49      	subs	r1, r1, #1
 8002cde:	fb0c f505 	mul.w	r5, ip, r5
 8002ce2:	d1f8      	bne.n	8002cd6 <forward_acosh+0x56>
 8002ce4:	0880      	lsrs	r0, r0, #2
 8002ce6:	d00e      	beq.n	8002d06 <forward_acosh+0x86>
 8002ce8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002cec:	3910      	subs	r1, #16
 8002cee:	68ca      	ldr	r2, [r1, #12]
 8002cf0:	688e      	ldr	r6, [r1, #8]
 8002cf2:	684f      	ldr	r7, [r1, #4]
 8002cf4:	f851 c910 	ldr.w	ip, [r1], #-16
 8002cf8:	4372      	muls	r2, r6
 8002cfa:	437a      	muls	r2, r7
 8002cfc:	fb0c f202 	mul.w	r2, ip, r2
 8002d00:	4355      	muls	r5, r2
 8002d02:	1e40      	subs	r0, r0, #1
 8002d04:	d1f3      	bne.n	8002cee <forward_acosh+0x6e>
 8002d06:	6998      	ldr	r0, [r3, #24]
 8002d08:	6821      	ldr	r1, [r4, #0]
 8002d0a:	6886      	ldr	r6, [r0, #8]
 8002d0c:	688a      	ldr	r2, [r1, #8]
 8002d0e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002d12:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8002d16:	1f07      	subs	r7, r0, #4
 8002d18:	1f1c      	subs	r4, r3, #4
 8002d1a:	42b7      	cmp	r7, r6
 8002d1c:	f0c0 800a 	bcc.w	8002d34 <forward_acosh+0xb4>
 8002d20:	ed97 0a00 	vldr	s0, [r7]
 8002d24:	1f3f      	subs	r7, r7, #4
 8002d26:	f00f fffd 	bl	8012d24 <acoshf>
 8002d2a:	ed84 0a00 	vstr	s0, [r4]
 8002d2e:	1f24      	subs	r4, r4, #4
 8002d30:	42b7      	cmp	r7, r6
 8002d32:	d2f5      	bcs.n	8002d20 <forward_acosh+0xa0>
 8002d34:	b001      	add	sp, #4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d38 <nl_func_asin_array_f32>:
 8002d38:	b570      	push	{r4, r5, r6, lr}
 8002d3a:	688c      	ldr	r4, [r1, #8]
 8002d3c:	6880      	ldr	r0, [r0, #8]
 8002d3e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002d42:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002d46:	1f0d      	subs	r5, r1, #4
 8002d48:	1f16      	subs	r6, r2, #4
 8002d4a:	42a5      	cmp	r5, r4
 8002d4c:	f0c0 800a 	bcc.w	8002d64 <nl_func_asin_array_f32+0x2c>
 8002d50:	ed95 0a00 	vldr	s0, [r5]
 8002d54:	1f2d      	subs	r5, r5, #4
 8002d56:	f010 f835 	bl	8012dc4 <asinf>
 8002d5a:	ed86 0a00 	vstr	s0, [r6]
 8002d5e:	1f36      	subs	r6, r6, #4
 8002d60:	42a5      	cmp	r5, r4
 8002d62:	d2f5      	bcs.n	8002d50 <nl_func_asin_array_f32+0x18>
 8002d64:	bd70      	pop	{r4, r5, r6, pc}
	...

08002d68 <forward_asin>:
 8002d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6a:	b081      	sub	sp, #4
 8002d6c:	6942      	ldr	r2, [r0, #20]
 8002d6e:	f04f 0501 	mov.w	r5, #1
 8002d72:	8811      	ldrh	r1, [r2, #0]
 8002d74:	2900      	cmp	r1, #0
 8002d76:	bf1a      	itte	ne
 8002d78:	6850      	ldrne	r0, [r2, #4]
 8002d7a:	1d00      	addne	r0, r0, #4
 8002d7c:	2004      	moveq	r0, #4
 8002d7e:	6800      	ldr	r0, [r0, #0]
 8002d80:	2800      	cmp	r0, #0
 8002d82:	bf14      	ite	ne
 8002d84:	6803      	ldrne	r3, [r0, #0]
 8002d86:	2300      	moveq	r3, #0
 8002d88:	2902      	cmp	r1, #2
 8002d8a:	bfa6      	itte	ge
 8002d8c:	6850      	ldrge	r0, [r2, #4]
 8002d8e:	3010      	addge	r0, #16
 8002d90:	2004      	movlt	r0, #4
 8002d92:	6800      	ldr	r0, [r0, #0]
 8002d94:	2800      	cmp	r0, #0
 8002d96:	bf19      	ittee	ne
 8002d98:	6800      	ldrne	r0, [r0, #0]
 8002d9a:	f100 0418 	addne.w	r4, r0, #24
 8002d9e:	2100      	moveq	r1, #0
 8002da0:	f101 0418 	addeq.w	r4, r1, #24
 8002da4:	f103 0108 	add.w	r1, r3, #8
 8002da8:	680a      	ldr	r2, [r1, #0]
 8002daa:	0a12      	lsrs	r2, r2, #8
 8002dac:	d01f      	beq.n	8002dee <forward_asin+0x86>
 8002dae:	684e      	ldr	r6, [r1, #4]
 8002db0:	4610      	mov	r0, r2
 8002db2:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002db6:	1f0f      	subs	r7, r1, #4
 8002db8:	f010 0103 	ands.w	r1, r0, #3
 8002dbc:	d006      	beq.n	8002dcc <forward_asin+0x64>
 8002dbe:	1e52      	subs	r2, r2, #1
 8002dc0:	f857 c904 	ldr.w	ip, [r7], #-4
 8002dc4:	1e49      	subs	r1, r1, #1
 8002dc6:	fb0c f505 	mul.w	r5, ip, r5
 8002dca:	d1f8      	bne.n	8002dbe <forward_asin+0x56>
 8002dcc:	0880      	lsrs	r0, r0, #2
 8002dce:	d00e      	beq.n	8002dee <forward_asin+0x86>
 8002dd0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002dd4:	3910      	subs	r1, #16
 8002dd6:	68ca      	ldr	r2, [r1, #12]
 8002dd8:	688e      	ldr	r6, [r1, #8]
 8002dda:	684f      	ldr	r7, [r1, #4]
 8002ddc:	f851 c910 	ldr.w	ip, [r1], #-16
 8002de0:	4372      	muls	r2, r6
 8002de2:	437a      	muls	r2, r7
 8002de4:	fb0c f202 	mul.w	r2, ip, r2
 8002de8:	4355      	muls	r5, r2
 8002dea:	1e40      	subs	r0, r0, #1
 8002dec:	d1f3      	bne.n	8002dd6 <forward_asin+0x6e>
 8002dee:	6998      	ldr	r0, [r3, #24]
 8002df0:	6821      	ldr	r1, [r4, #0]
 8002df2:	6886      	ldr	r6, [r0, #8]
 8002df4:	688a      	ldr	r2, [r1, #8]
 8002df6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002dfa:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8002dfe:	1f07      	subs	r7, r0, #4
 8002e00:	1f1c      	subs	r4, r3, #4
 8002e02:	42b7      	cmp	r7, r6
 8002e04:	f0c0 800a 	bcc.w	8002e1c <forward_asin+0xb4>
 8002e08:	ed97 0a00 	vldr	s0, [r7]
 8002e0c:	1f3f      	subs	r7, r7, #4
 8002e0e:	f00f ffd9 	bl	8012dc4 <asinf>
 8002e12:	ed84 0a00 	vstr	s0, [r4]
 8002e16:	1f24      	subs	r4, r4, #4
 8002e18:	42b7      	cmp	r7, r6
 8002e1a:	d2f5      	bcs.n	8002e08 <forward_asin+0xa0>
 8002e1c:	b001      	add	sp, #4
 8002e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e20 <nl_func_asinh_array_f32>:
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	688c      	ldr	r4, [r1, #8]
 8002e24:	6880      	ldr	r0, [r0, #8]
 8002e26:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002e2a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002e2e:	1f0d      	subs	r5, r1, #4
 8002e30:	1f16      	subs	r6, r2, #4
 8002e32:	42a5      	cmp	r5, r4
 8002e34:	f0c0 800a 	bcc.w	8002e4c <nl_func_asinh_array_f32+0x2c>
 8002e38:	ed95 0a00 	vldr	s0, [r5]
 8002e3c:	1f2d      	subs	r5, r5, #4
 8002e3e:	f00f f8ef 	bl	8012020 <asinhf>
 8002e42:	ed86 0a00 	vstr	s0, [r6]
 8002e46:	1f36      	subs	r6, r6, #4
 8002e48:	42a5      	cmp	r5, r4
 8002e4a:	d2f5      	bcs.n	8002e38 <nl_func_asinh_array_f32+0x18>
 8002e4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e50 <forward_asinh>:
 8002e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e52:	b081      	sub	sp, #4
 8002e54:	6942      	ldr	r2, [r0, #20]
 8002e56:	f04f 0501 	mov.w	r5, #1
 8002e5a:	8811      	ldrh	r1, [r2, #0]
 8002e5c:	2900      	cmp	r1, #0
 8002e5e:	bf1a      	itte	ne
 8002e60:	6850      	ldrne	r0, [r2, #4]
 8002e62:	1d00      	addne	r0, r0, #4
 8002e64:	2004      	moveq	r0, #4
 8002e66:	6800      	ldr	r0, [r0, #0]
 8002e68:	2800      	cmp	r0, #0
 8002e6a:	bf14      	ite	ne
 8002e6c:	6803      	ldrne	r3, [r0, #0]
 8002e6e:	2300      	moveq	r3, #0
 8002e70:	2902      	cmp	r1, #2
 8002e72:	bfa6      	itte	ge
 8002e74:	6850      	ldrge	r0, [r2, #4]
 8002e76:	3010      	addge	r0, #16
 8002e78:	2004      	movlt	r0, #4
 8002e7a:	6800      	ldr	r0, [r0, #0]
 8002e7c:	2800      	cmp	r0, #0
 8002e7e:	bf19      	ittee	ne
 8002e80:	6800      	ldrne	r0, [r0, #0]
 8002e82:	f100 0418 	addne.w	r4, r0, #24
 8002e86:	2100      	moveq	r1, #0
 8002e88:	f101 0418 	addeq.w	r4, r1, #24
 8002e8c:	f103 0108 	add.w	r1, r3, #8
 8002e90:	680a      	ldr	r2, [r1, #0]
 8002e92:	0a12      	lsrs	r2, r2, #8
 8002e94:	d01f      	beq.n	8002ed6 <forward_asinh+0x86>
 8002e96:	684e      	ldr	r6, [r1, #4]
 8002e98:	4610      	mov	r0, r2
 8002e9a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002e9e:	1f0f      	subs	r7, r1, #4
 8002ea0:	f010 0103 	ands.w	r1, r0, #3
 8002ea4:	d006      	beq.n	8002eb4 <forward_asinh+0x64>
 8002ea6:	1e52      	subs	r2, r2, #1
 8002ea8:	f857 c904 	ldr.w	ip, [r7], #-4
 8002eac:	1e49      	subs	r1, r1, #1
 8002eae:	fb0c f505 	mul.w	r5, ip, r5
 8002eb2:	d1f8      	bne.n	8002ea6 <forward_asinh+0x56>
 8002eb4:	0880      	lsrs	r0, r0, #2
 8002eb6:	d00e      	beq.n	8002ed6 <forward_asinh+0x86>
 8002eb8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002ebc:	3910      	subs	r1, #16
 8002ebe:	68ca      	ldr	r2, [r1, #12]
 8002ec0:	688e      	ldr	r6, [r1, #8]
 8002ec2:	684f      	ldr	r7, [r1, #4]
 8002ec4:	f851 c910 	ldr.w	ip, [r1], #-16
 8002ec8:	4372      	muls	r2, r6
 8002eca:	437a      	muls	r2, r7
 8002ecc:	fb0c f202 	mul.w	r2, ip, r2
 8002ed0:	4355      	muls	r5, r2
 8002ed2:	1e40      	subs	r0, r0, #1
 8002ed4:	d1f3      	bne.n	8002ebe <forward_asinh+0x6e>
 8002ed6:	6998      	ldr	r0, [r3, #24]
 8002ed8:	6821      	ldr	r1, [r4, #0]
 8002eda:	6886      	ldr	r6, [r0, #8]
 8002edc:	688a      	ldr	r2, [r1, #8]
 8002ede:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002ee2:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8002ee6:	1f07      	subs	r7, r0, #4
 8002ee8:	1f1c      	subs	r4, r3, #4
 8002eea:	42b7      	cmp	r7, r6
 8002eec:	f0c0 800a 	bcc.w	8002f04 <forward_asinh+0xb4>
 8002ef0:	ed97 0a00 	vldr	s0, [r7]
 8002ef4:	1f3f      	subs	r7, r7, #4
 8002ef6:	f00f f893 	bl	8012020 <asinhf>
 8002efa:	ed84 0a00 	vstr	s0, [r4]
 8002efe:	1f24      	subs	r4, r4, #4
 8002f00:	42b7      	cmp	r7, r6
 8002f02:	d2f5      	bcs.n	8002ef0 <forward_asinh+0xa0>
 8002f04:	b001      	add	sp, #4
 8002f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f08 <nl_func_atan_array_f32>:
 8002f08:	b570      	push	{r4, r5, r6, lr}
 8002f0a:	688c      	ldr	r4, [r1, #8]
 8002f0c:	6880      	ldr	r0, [r0, #8]
 8002f0e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002f12:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002f16:	1f0d      	subs	r5, r1, #4
 8002f18:	1f16      	subs	r6, r2, #4
 8002f1a:	42a5      	cmp	r5, r4
 8002f1c:	f0c0 800a 	bcc.w	8002f34 <nl_func_atan_array_f32+0x2c>
 8002f20:	ed95 0a00 	vldr	s0, [r5]
 8002f24:	1f2d      	subs	r5, r5, #4
 8002f26:	f00f f8e3 	bl	80120f0 <atanf>
 8002f2a:	ed86 0a00 	vstr	s0, [r6]
 8002f2e:	1f36      	subs	r6, r6, #4
 8002f30:	42a5      	cmp	r5, r4
 8002f32:	d2f5      	bcs.n	8002f20 <nl_func_atan_array_f32+0x18>
 8002f34:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f38 <forward_atan>:
 8002f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f3a:	b081      	sub	sp, #4
 8002f3c:	6942      	ldr	r2, [r0, #20]
 8002f3e:	f04f 0501 	mov.w	r5, #1
 8002f42:	8811      	ldrh	r1, [r2, #0]
 8002f44:	2900      	cmp	r1, #0
 8002f46:	bf1a      	itte	ne
 8002f48:	6850      	ldrne	r0, [r2, #4]
 8002f4a:	1d00      	addne	r0, r0, #4
 8002f4c:	2004      	moveq	r0, #4
 8002f4e:	6800      	ldr	r0, [r0, #0]
 8002f50:	2800      	cmp	r0, #0
 8002f52:	bf14      	ite	ne
 8002f54:	6803      	ldrne	r3, [r0, #0]
 8002f56:	2300      	moveq	r3, #0
 8002f58:	2902      	cmp	r1, #2
 8002f5a:	bfa6      	itte	ge
 8002f5c:	6850      	ldrge	r0, [r2, #4]
 8002f5e:	3010      	addge	r0, #16
 8002f60:	2004      	movlt	r0, #4
 8002f62:	6800      	ldr	r0, [r0, #0]
 8002f64:	2800      	cmp	r0, #0
 8002f66:	bf19      	ittee	ne
 8002f68:	6800      	ldrne	r0, [r0, #0]
 8002f6a:	f100 0418 	addne.w	r4, r0, #24
 8002f6e:	2100      	moveq	r1, #0
 8002f70:	f101 0418 	addeq.w	r4, r1, #24
 8002f74:	f103 0108 	add.w	r1, r3, #8
 8002f78:	680a      	ldr	r2, [r1, #0]
 8002f7a:	0a12      	lsrs	r2, r2, #8
 8002f7c:	d01f      	beq.n	8002fbe <forward_atan+0x86>
 8002f7e:	684e      	ldr	r6, [r1, #4]
 8002f80:	4610      	mov	r0, r2
 8002f82:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002f86:	1f0f      	subs	r7, r1, #4
 8002f88:	f010 0103 	ands.w	r1, r0, #3
 8002f8c:	d006      	beq.n	8002f9c <forward_atan+0x64>
 8002f8e:	1e52      	subs	r2, r2, #1
 8002f90:	f857 c904 	ldr.w	ip, [r7], #-4
 8002f94:	1e49      	subs	r1, r1, #1
 8002f96:	fb0c f505 	mul.w	r5, ip, r5
 8002f9a:	d1f8      	bne.n	8002f8e <forward_atan+0x56>
 8002f9c:	0880      	lsrs	r0, r0, #2
 8002f9e:	d00e      	beq.n	8002fbe <forward_atan+0x86>
 8002fa0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002fa4:	3910      	subs	r1, #16
 8002fa6:	68ca      	ldr	r2, [r1, #12]
 8002fa8:	688e      	ldr	r6, [r1, #8]
 8002faa:	684f      	ldr	r7, [r1, #4]
 8002fac:	f851 c910 	ldr.w	ip, [r1], #-16
 8002fb0:	4372      	muls	r2, r6
 8002fb2:	437a      	muls	r2, r7
 8002fb4:	fb0c f202 	mul.w	r2, ip, r2
 8002fb8:	4355      	muls	r5, r2
 8002fba:	1e40      	subs	r0, r0, #1
 8002fbc:	d1f3      	bne.n	8002fa6 <forward_atan+0x6e>
 8002fbe:	6998      	ldr	r0, [r3, #24]
 8002fc0:	6821      	ldr	r1, [r4, #0]
 8002fc2:	6886      	ldr	r6, [r0, #8]
 8002fc4:	688a      	ldr	r2, [r1, #8]
 8002fc6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002fca:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8002fce:	1f07      	subs	r7, r0, #4
 8002fd0:	1f1c      	subs	r4, r3, #4
 8002fd2:	42b7      	cmp	r7, r6
 8002fd4:	f0c0 800a 	bcc.w	8002fec <forward_atan+0xb4>
 8002fd8:	ed97 0a00 	vldr	s0, [r7]
 8002fdc:	1f3f      	subs	r7, r7, #4
 8002fde:	f00f f887 	bl	80120f0 <atanf>
 8002fe2:	ed84 0a00 	vstr	s0, [r4]
 8002fe6:	1f24      	subs	r4, r4, #4
 8002fe8:	42b7      	cmp	r7, r6
 8002fea:	d2f5      	bcs.n	8002fd8 <forward_atan+0xa0>
 8002fec:	b001      	add	sp, #4
 8002fee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ff0 <nl_func_atanh_array_f32>:
 8002ff0:	b570      	push	{r4, r5, r6, lr}
 8002ff2:	688c      	ldr	r4, [r1, #8]
 8002ff4:	6880      	ldr	r0, [r0, #8]
 8002ff6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002ffa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002ffe:	1f0d      	subs	r5, r1, #4
 8003000:	1f16      	subs	r6, r2, #4
 8003002:	42a5      	cmp	r5, r4
 8003004:	f0c0 800a 	bcc.w	800301c <nl_func_atanh_array_f32+0x2c>
 8003008:	ed95 0a00 	vldr	s0, [r5]
 800300c:	1f2d      	subs	r5, r5, #4
 800300e:	f00f ff31 	bl	8012e74 <atanhf>
 8003012:	ed86 0a00 	vstr	s0, [r6]
 8003016:	1f36      	subs	r6, r6, #4
 8003018:	42a5      	cmp	r5, r4
 800301a:	d2f5      	bcs.n	8003008 <nl_func_atanh_array_f32+0x18>
 800301c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003020 <forward_atanh>:
 8003020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003022:	b081      	sub	sp, #4
 8003024:	6942      	ldr	r2, [r0, #20]
 8003026:	f04f 0501 	mov.w	r5, #1
 800302a:	8811      	ldrh	r1, [r2, #0]
 800302c:	2900      	cmp	r1, #0
 800302e:	bf1a      	itte	ne
 8003030:	6850      	ldrne	r0, [r2, #4]
 8003032:	1d00      	addne	r0, r0, #4
 8003034:	2004      	moveq	r0, #4
 8003036:	6800      	ldr	r0, [r0, #0]
 8003038:	2800      	cmp	r0, #0
 800303a:	bf14      	ite	ne
 800303c:	6803      	ldrne	r3, [r0, #0]
 800303e:	2300      	moveq	r3, #0
 8003040:	2902      	cmp	r1, #2
 8003042:	bfa6      	itte	ge
 8003044:	6850      	ldrge	r0, [r2, #4]
 8003046:	3010      	addge	r0, #16
 8003048:	2004      	movlt	r0, #4
 800304a:	6800      	ldr	r0, [r0, #0]
 800304c:	2800      	cmp	r0, #0
 800304e:	bf19      	ittee	ne
 8003050:	6800      	ldrne	r0, [r0, #0]
 8003052:	f100 0418 	addne.w	r4, r0, #24
 8003056:	2100      	moveq	r1, #0
 8003058:	f101 0418 	addeq.w	r4, r1, #24
 800305c:	f103 0108 	add.w	r1, r3, #8
 8003060:	680a      	ldr	r2, [r1, #0]
 8003062:	0a12      	lsrs	r2, r2, #8
 8003064:	d01f      	beq.n	80030a6 <forward_atanh+0x86>
 8003066:	684e      	ldr	r6, [r1, #4]
 8003068:	4610      	mov	r0, r2
 800306a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800306e:	1f0f      	subs	r7, r1, #4
 8003070:	f010 0103 	ands.w	r1, r0, #3
 8003074:	d006      	beq.n	8003084 <forward_atanh+0x64>
 8003076:	1e52      	subs	r2, r2, #1
 8003078:	f857 c904 	ldr.w	ip, [r7], #-4
 800307c:	1e49      	subs	r1, r1, #1
 800307e:	fb0c f505 	mul.w	r5, ip, r5
 8003082:	d1f8      	bne.n	8003076 <forward_atanh+0x56>
 8003084:	0880      	lsrs	r0, r0, #2
 8003086:	d00e      	beq.n	80030a6 <forward_atanh+0x86>
 8003088:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800308c:	3910      	subs	r1, #16
 800308e:	68ca      	ldr	r2, [r1, #12]
 8003090:	688e      	ldr	r6, [r1, #8]
 8003092:	684f      	ldr	r7, [r1, #4]
 8003094:	f851 c910 	ldr.w	ip, [r1], #-16
 8003098:	4372      	muls	r2, r6
 800309a:	437a      	muls	r2, r7
 800309c:	fb0c f202 	mul.w	r2, ip, r2
 80030a0:	4355      	muls	r5, r2
 80030a2:	1e40      	subs	r0, r0, #1
 80030a4:	d1f3      	bne.n	800308e <forward_atanh+0x6e>
 80030a6:	6998      	ldr	r0, [r3, #24]
 80030a8:	6821      	ldr	r1, [r4, #0]
 80030aa:	6886      	ldr	r6, [r0, #8]
 80030ac:	688a      	ldr	r2, [r1, #8]
 80030ae:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80030b2:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 80030b6:	1f07      	subs	r7, r0, #4
 80030b8:	1f1c      	subs	r4, r3, #4
 80030ba:	42b7      	cmp	r7, r6
 80030bc:	f0c0 800a 	bcc.w	80030d4 <forward_atanh+0xb4>
 80030c0:	ed97 0a00 	vldr	s0, [r7]
 80030c4:	1f3f      	subs	r7, r7, #4
 80030c6:	f00f fed5 	bl	8012e74 <atanhf>
 80030ca:	ed84 0a00 	vstr	s0, [r4]
 80030ce:	1f24      	subs	r4, r4, #4
 80030d0:	42b7      	cmp	r7, r6
 80030d2:	d2f5      	bcs.n	80030c0 <forward_atanh+0xa0>
 80030d4:	b001      	add	sp, #4
 80030d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030d8 <nl_func_cos_array_f32>:
 80030d8:	b570      	push	{r4, r5, r6, lr}
 80030da:	688c      	ldr	r4, [r1, #8]
 80030dc:	6880      	ldr	r0, [r0, #8]
 80030de:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80030e2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80030e6:	1f0d      	subs	r5, r1, #4
 80030e8:	1f16      	subs	r6, r2, #4
 80030ea:	42a5      	cmp	r5, r4
 80030ec:	f0c0 800a 	bcc.w	8003104 <nl_func_cos_array_f32+0x2c>
 80030f0:	ed95 0a00 	vldr	s0, [r5]
 80030f4:	1f2d      	subs	r5, r5, #4
 80030f6:	f00f f90f 	bl	8012318 <cosf>
 80030fa:	ed86 0a00 	vstr	s0, [r6]
 80030fe:	1f36      	subs	r6, r6, #4
 8003100:	42a5      	cmp	r5, r4
 8003102:	d2f5      	bcs.n	80030f0 <nl_func_cos_array_f32+0x18>
 8003104:	bd70      	pop	{r4, r5, r6, pc}
	...

08003108 <forward_cos>:
 8003108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310a:	b081      	sub	sp, #4
 800310c:	6942      	ldr	r2, [r0, #20]
 800310e:	f04f 0501 	mov.w	r5, #1
 8003112:	8811      	ldrh	r1, [r2, #0]
 8003114:	2900      	cmp	r1, #0
 8003116:	bf1a      	itte	ne
 8003118:	6850      	ldrne	r0, [r2, #4]
 800311a:	1d00      	addne	r0, r0, #4
 800311c:	2004      	moveq	r0, #4
 800311e:	6800      	ldr	r0, [r0, #0]
 8003120:	2800      	cmp	r0, #0
 8003122:	bf14      	ite	ne
 8003124:	6803      	ldrne	r3, [r0, #0]
 8003126:	2300      	moveq	r3, #0
 8003128:	2902      	cmp	r1, #2
 800312a:	bfa6      	itte	ge
 800312c:	6850      	ldrge	r0, [r2, #4]
 800312e:	3010      	addge	r0, #16
 8003130:	2004      	movlt	r0, #4
 8003132:	6800      	ldr	r0, [r0, #0]
 8003134:	2800      	cmp	r0, #0
 8003136:	bf19      	ittee	ne
 8003138:	6800      	ldrne	r0, [r0, #0]
 800313a:	f100 0418 	addne.w	r4, r0, #24
 800313e:	2100      	moveq	r1, #0
 8003140:	f101 0418 	addeq.w	r4, r1, #24
 8003144:	f103 0108 	add.w	r1, r3, #8
 8003148:	680a      	ldr	r2, [r1, #0]
 800314a:	0a12      	lsrs	r2, r2, #8
 800314c:	d01f      	beq.n	800318e <forward_cos+0x86>
 800314e:	684e      	ldr	r6, [r1, #4]
 8003150:	4610      	mov	r0, r2
 8003152:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003156:	1f0f      	subs	r7, r1, #4
 8003158:	f010 0103 	ands.w	r1, r0, #3
 800315c:	d006      	beq.n	800316c <forward_cos+0x64>
 800315e:	1e52      	subs	r2, r2, #1
 8003160:	f857 c904 	ldr.w	ip, [r7], #-4
 8003164:	1e49      	subs	r1, r1, #1
 8003166:	fb0c f505 	mul.w	r5, ip, r5
 800316a:	d1f8      	bne.n	800315e <forward_cos+0x56>
 800316c:	0880      	lsrs	r0, r0, #2
 800316e:	d00e      	beq.n	800318e <forward_cos+0x86>
 8003170:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003174:	3910      	subs	r1, #16
 8003176:	68ca      	ldr	r2, [r1, #12]
 8003178:	688e      	ldr	r6, [r1, #8]
 800317a:	684f      	ldr	r7, [r1, #4]
 800317c:	f851 c910 	ldr.w	ip, [r1], #-16
 8003180:	4372      	muls	r2, r6
 8003182:	437a      	muls	r2, r7
 8003184:	fb0c f202 	mul.w	r2, ip, r2
 8003188:	4355      	muls	r5, r2
 800318a:	1e40      	subs	r0, r0, #1
 800318c:	d1f3      	bne.n	8003176 <forward_cos+0x6e>
 800318e:	6998      	ldr	r0, [r3, #24]
 8003190:	6821      	ldr	r1, [r4, #0]
 8003192:	6886      	ldr	r6, [r0, #8]
 8003194:	688a      	ldr	r2, [r1, #8]
 8003196:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800319a:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800319e:	1f07      	subs	r7, r0, #4
 80031a0:	1f1c      	subs	r4, r3, #4
 80031a2:	42b7      	cmp	r7, r6
 80031a4:	f0c0 800a 	bcc.w	80031bc <forward_cos+0xb4>
 80031a8:	ed97 0a00 	vldr	s0, [r7]
 80031ac:	1f3f      	subs	r7, r7, #4
 80031ae:	f00f f8b3 	bl	8012318 <cosf>
 80031b2:	ed84 0a00 	vstr	s0, [r4]
 80031b6:	1f24      	subs	r4, r4, #4
 80031b8:	42b7      	cmp	r7, r6
 80031ba:	d2f5      	bcs.n	80031a8 <forward_cos+0xa0>
 80031bc:	b001      	add	sp, #4
 80031be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031c0 <nl_func_cosh_array_f32>:
 80031c0:	b570      	push	{r4, r5, r6, lr}
 80031c2:	688c      	ldr	r4, [r1, #8]
 80031c4:	6880      	ldr	r0, [r0, #8]
 80031c6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80031ca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80031ce:	1f0d      	subs	r5, r1, #4
 80031d0:	1f16      	subs	r6, r2, #4
 80031d2:	42a5      	cmp	r5, r4
 80031d4:	f0c0 800a 	bcc.w	80031ec <nl_func_cosh_array_f32+0x2c>
 80031d8:	ed95 0a00 	vldr	s0, [r5]
 80031dc:	1f2d      	subs	r5, r5, #4
 80031de:	f00f febd 	bl	8012f5c <coshf>
 80031e2:	ed86 0a00 	vstr	s0, [r6]
 80031e6:	1f36      	subs	r6, r6, #4
 80031e8:	42a5      	cmp	r5, r4
 80031ea:	d2f5      	bcs.n	80031d8 <nl_func_cosh_array_f32+0x18>
 80031ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080031f0 <forward_cosh>:
 80031f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f2:	b081      	sub	sp, #4
 80031f4:	6942      	ldr	r2, [r0, #20]
 80031f6:	f04f 0501 	mov.w	r5, #1
 80031fa:	8811      	ldrh	r1, [r2, #0]
 80031fc:	2900      	cmp	r1, #0
 80031fe:	bf1a      	itte	ne
 8003200:	6850      	ldrne	r0, [r2, #4]
 8003202:	1d00      	addne	r0, r0, #4
 8003204:	2004      	moveq	r0, #4
 8003206:	6800      	ldr	r0, [r0, #0]
 8003208:	2800      	cmp	r0, #0
 800320a:	bf14      	ite	ne
 800320c:	6803      	ldrne	r3, [r0, #0]
 800320e:	2300      	moveq	r3, #0
 8003210:	2902      	cmp	r1, #2
 8003212:	bfa6      	itte	ge
 8003214:	6850      	ldrge	r0, [r2, #4]
 8003216:	3010      	addge	r0, #16
 8003218:	2004      	movlt	r0, #4
 800321a:	6800      	ldr	r0, [r0, #0]
 800321c:	2800      	cmp	r0, #0
 800321e:	bf19      	ittee	ne
 8003220:	6800      	ldrne	r0, [r0, #0]
 8003222:	f100 0418 	addne.w	r4, r0, #24
 8003226:	2100      	moveq	r1, #0
 8003228:	f101 0418 	addeq.w	r4, r1, #24
 800322c:	f103 0108 	add.w	r1, r3, #8
 8003230:	680a      	ldr	r2, [r1, #0]
 8003232:	0a12      	lsrs	r2, r2, #8
 8003234:	d01f      	beq.n	8003276 <forward_cosh+0x86>
 8003236:	684e      	ldr	r6, [r1, #4]
 8003238:	4610      	mov	r0, r2
 800323a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800323e:	1f0f      	subs	r7, r1, #4
 8003240:	f010 0103 	ands.w	r1, r0, #3
 8003244:	d006      	beq.n	8003254 <forward_cosh+0x64>
 8003246:	1e52      	subs	r2, r2, #1
 8003248:	f857 c904 	ldr.w	ip, [r7], #-4
 800324c:	1e49      	subs	r1, r1, #1
 800324e:	fb0c f505 	mul.w	r5, ip, r5
 8003252:	d1f8      	bne.n	8003246 <forward_cosh+0x56>
 8003254:	0880      	lsrs	r0, r0, #2
 8003256:	d00e      	beq.n	8003276 <forward_cosh+0x86>
 8003258:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800325c:	3910      	subs	r1, #16
 800325e:	68ca      	ldr	r2, [r1, #12]
 8003260:	688e      	ldr	r6, [r1, #8]
 8003262:	684f      	ldr	r7, [r1, #4]
 8003264:	f851 c910 	ldr.w	ip, [r1], #-16
 8003268:	4372      	muls	r2, r6
 800326a:	437a      	muls	r2, r7
 800326c:	fb0c f202 	mul.w	r2, ip, r2
 8003270:	4355      	muls	r5, r2
 8003272:	1e40      	subs	r0, r0, #1
 8003274:	d1f3      	bne.n	800325e <forward_cosh+0x6e>
 8003276:	6998      	ldr	r0, [r3, #24]
 8003278:	6821      	ldr	r1, [r4, #0]
 800327a:	6886      	ldr	r6, [r0, #8]
 800327c:	688a      	ldr	r2, [r1, #8]
 800327e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003282:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003286:	1f07      	subs	r7, r0, #4
 8003288:	1f1c      	subs	r4, r3, #4
 800328a:	42b7      	cmp	r7, r6
 800328c:	f0c0 800a 	bcc.w	80032a4 <forward_cosh+0xb4>
 8003290:	ed97 0a00 	vldr	s0, [r7]
 8003294:	1f3f      	subs	r7, r7, #4
 8003296:	f00f fe61 	bl	8012f5c <coshf>
 800329a:	ed84 0a00 	vstr	s0, [r4]
 800329e:	1f24      	subs	r4, r4, #4
 80032a0:	42b7      	cmp	r7, r6
 80032a2:	d2f5      	bcs.n	8003290 <forward_cosh+0xa0>
 80032a4:	b001      	add	sp, #4
 80032a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032a8 <nl_func_erf_array_f32>:
 80032a8:	b570      	push	{r4, r5, r6, lr}
 80032aa:	688c      	ldr	r4, [r1, #8]
 80032ac:	6880      	ldr	r0, [r0, #8]
 80032ae:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80032b2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80032b6:	1f0d      	subs	r5, r1, #4
 80032b8:	1f16      	subs	r6, r2, #4
 80032ba:	42a5      	cmp	r5, r4
 80032bc:	f0c0 800a 	bcc.w	80032d4 <nl_func_erf_array_f32+0x2c>
 80032c0:	ed95 0a00 	vldr	s0, [r5]
 80032c4:	1f2d      	subs	r5, r5, #4
 80032c6:	f00f f867 	bl	8012398 <erff>
 80032ca:	ed86 0a00 	vstr	s0, [r6]
 80032ce:	1f36      	subs	r6, r6, #4
 80032d0:	42a5      	cmp	r5, r4
 80032d2:	d2f5      	bcs.n	80032c0 <nl_func_erf_array_f32+0x18>
 80032d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080032d8 <forward_erf>:
 80032d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032da:	b081      	sub	sp, #4
 80032dc:	6942      	ldr	r2, [r0, #20]
 80032de:	f04f 0501 	mov.w	r5, #1
 80032e2:	8811      	ldrh	r1, [r2, #0]
 80032e4:	2900      	cmp	r1, #0
 80032e6:	bf1a      	itte	ne
 80032e8:	6850      	ldrne	r0, [r2, #4]
 80032ea:	1d00      	addne	r0, r0, #4
 80032ec:	2004      	moveq	r0, #4
 80032ee:	6800      	ldr	r0, [r0, #0]
 80032f0:	2800      	cmp	r0, #0
 80032f2:	bf14      	ite	ne
 80032f4:	6803      	ldrne	r3, [r0, #0]
 80032f6:	2300      	moveq	r3, #0
 80032f8:	2902      	cmp	r1, #2
 80032fa:	bfa6      	itte	ge
 80032fc:	6850      	ldrge	r0, [r2, #4]
 80032fe:	3010      	addge	r0, #16
 8003300:	2004      	movlt	r0, #4
 8003302:	6800      	ldr	r0, [r0, #0]
 8003304:	2800      	cmp	r0, #0
 8003306:	bf19      	ittee	ne
 8003308:	6800      	ldrne	r0, [r0, #0]
 800330a:	f100 0418 	addne.w	r4, r0, #24
 800330e:	2100      	moveq	r1, #0
 8003310:	f101 0418 	addeq.w	r4, r1, #24
 8003314:	f103 0108 	add.w	r1, r3, #8
 8003318:	680a      	ldr	r2, [r1, #0]
 800331a:	0a12      	lsrs	r2, r2, #8
 800331c:	d01f      	beq.n	800335e <forward_erf+0x86>
 800331e:	684e      	ldr	r6, [r1, #4]
 8003320:	4610      	mov	r0, r2
 8003322:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003326:	1f0f      	subs	r7, r1, #4
 8003328:	f010 0103 	ands.w	r1, r0, #3
 800332c:	d006      	beq.n	800333c <forward_erf+0x64>
 800332e:	1e52      	subs	r2, r2, #1
 8003330:	f857 c904 	ldr.w	ip, [r7], #-4
 8003334:	1e49      	subs	r1, r1, #1
 8003336:	fb0c f505 	mul.w	r5, ip, r5
 800333a:	d1f8      	bne.n	800332e <forward_erf+0x56>
 800333c:	0880      	lsrs	r0, r0, #2
 800333e:	d00e      	beq.n	800335e <forward_erf+0x86>
 8003340:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003344:	3910      	subs	r1, #16
 8003346:	68ca      	ldr	r2, [r1, #12]
 8003348:	688e      	ldr	r6, [r1, #8]
 800334a:	684f      	ldr	r7, [r1, #4]
 800334c:	f851 c910 	ldr.w	ip, [r1], #-16
 8003350:	4372      	muls	r2, r6
 8003352:	437a      	muls	r2, r7
 8003354:	fb0c f202 	mul.w	r2, ip, r2
 8003358:	4355      	muls	r5, r2
 800335a:	1e40      	subs	r0, r0, #1
 800335c:	d1f3      	bne.n	8003346 <forward_erf+0x6e>
 800335e:	6998      	ldr	r0, [r3, #24]
 8003360:	6821      	ldr	r1, [r4, #0]
 8003362:	6886      	ldr	r6, [r0, #8]
 8003364:	688a      	ldr	r2, [r1, #8]
 8003366:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800336a:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800336e:	1f07      	subs	r7, r0, #4
 8003370:	1f1c      	subs	r4, r3, #4
 8003372:	42b7      	cmp	r7, r6
 8003374:	f0c0 800a 	bcc.w	800338c <forward_erf+0xb4>
 8003378:	ed97 0a00 	vldr	s0, [r7]
 800337c:	1f3f      	subs	r7, r7, #4
 800337e:	f00f f80b 	bl	8012398 <erff>
 8003382:	ed84 0a00 	vstr	s0, [r4]
 8003386:	1f24      	subs	r4, r4, #4
 8003388:	42b7      	cmp	r7, r6
 800338a:	d2f5      	bcs.n	8003378 <forward_erf+0xa0>
 800338c:	b001      	add	sp, #4
 800338e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003390 <nl_func_log_array_f32>:
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	688c      	ldr	r4, [r1, #8]
 8003394:	6880      	ldr	r0, [r0, #8]
 8003396:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800339a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800339e:	1f0d      	subs	r5, r1, #4
 80033a0:	1f16      	subs	r6, r2, #4
 80033a2:	42a5      	cmp	r5, r4
 80033a4:	f0c0 800a 	bcc.w	80033bc <nl_func_log_array_f32+0x2c>
 80033a8:	ed95 0a00 	vldr	s0, [r5]
 80033ac:	1f2d      	subs	r5, r5, #4
 80033ae:	f00f ff0b 	bl	80131c8 <logf>
 80033b2:	ed86 0a00 	vstr	s0, [r6]
 80033b6:	1f36      	subs	r6, r6, #4
 80033b8:	42a5      	cmp	r5, r4
 80033ba:	d2f5      	bcs.n	80033a8 <nl_func_log_array_f32+0x18>
 80033bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080033c0 <forward_log>:
 80033c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033c2:	b081      	sub	sp, #4
 80033c4:	6942      	ldr	r2, [r0, #20]
 80033c6:	f04f 0501 	mov.w	r5, #1
 80033ca:	8811      	ldrh	r1, [r2, #0]
 80033cc:	2900      	cmp	r1, #0
 80033ce:	bf1a      	itte	ne
 80033d0:	6850      	ldrne	r0, [r2, #4]
 80033d2:	1d00      	addne	r0, r0, #4
 80033d4:	2004      	moveq	r0, #4
 80033d6:	6800      	ldr	r0, [r0, #0]
 80033d8:	2800      	cmp	r0, #0
 80033da:	bf14      	ite	ne
 80033dc:	6803      	ldrne	r3, [r0, #0]
 80033de:	2300      	moveq	r3, #0
 80033e0:	2902      	cmp	r1, #2
 80033e2:	bfa6      	itte	ge
 80033e4:	6850      	ldrge	r0, [r2, #4]
 80033e6:	3010      	addge	r0, #16
 80033e8:	2004      	movlt	r0, #4
 80033ea:	6800      	ldr	r0, [r0, #0]
 80033ec:	2800      	cmp	r0, #0
 80033ee:	bf19      	ittee	ne
 80033f0:	6800      	ldrne	r0, [r0, #0]
 80033f2:	f100 0418 	addne.w	r4, r0, #24
 80033f6:	2100      	moveq	r1, #0
 80033f8:	f101 0418 	addeq.w	r4, r1, #24
 80033fc:	f103 0108 	add.w	r1, r3, #8
 8003400:	680a      	ldr	r2, [r1, #0]
 8003402:	0a12      	lsrs	r2, r2, #8
 8003404:	d01f      	beq.n	8003446 <forward_log+0x86>
 8003406:	684e      	ldr	r6, [r1, #4]
 8003408:	4610      	mov	r0, r2
 800340a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800340e:	1f0f      	subs	r7, r1, #4
 8003410:	f010 0103 	ands.w	r1, r0, #3
 8003414:	d006      	beq.n	8003424 <forward_log+0x64>
 8003416:	1e52      	subs	r2, r2, #1
 8003418:	f857 c904 	ldr.w	ip, [r7], #-4
 800341c:	1e49      	subs	r1, r1, #1
 800341e:	fb0c f505 	mul.w	r5, ip, r5
 8003422:	d1f8      	bne.n	8003416 <forward_log+0x56>
 8003424:	0880      	lsrs	r0, r0, #2
 8003426:	d00e      	beq.n	8003446 <forward_log+0x86>
 8003428:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800342c:	3910      	subs	r1, #16
 800342e:	68ca      	ldr	r2, [r1, #12]
 8003430:	688e      	ldr	r6, [r1, #8]
 8003432:	684f      	ldr	r7, [r1, #4]
 8003434:	f851 c910 	ldr.w	ip, [r1], #-16
 8003438:	4372      	muls	r2, r6
 800343a:	437a      	muls	r2, r7
 800343c:	fb0c f202 	mul.w	r2, ip, r2
 8003440:	4355      	muls	r5, r2
 8003442:	1e40      	subs	r0, r0, #1
 8003444:	d1f3      	bne.n	800342e <forward_log+0x6e>
 8003446:	6998      	ldr	r0, [r3, #24]
 8003448:	6821      	ldr	r1, [r4, #0]
 800344a:	6886      	ldr	r6, [r0, #8]
 800344c:	688a      	ldr	r2, [r1, #8]
 800344e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003452:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003456:	1f07      	subs	r7, r0, #4
 8003458:	1f1c      	subs	r4, r3, #4
 800345a:	42b7      	cmp	r7, r6
 800345c:	f0c0 800a 	bcc.w	8003474 <forward_log+0xb4>
 8003460:	ed97 0a00 	vldr	s0, [r7]
 8003464:	1f3f      	subs	r7, r7, #4
 8003466:	f00f feaf 	bl	80131c8 <logf>
 800346a:	ed84 0a00 	vstr	s0, [r4]
 800346e:	1f24      	subs	r4, r4, #4
 8003470:	42b7      	cmp	r7, r6
 8003472:	d2f5      	bcs.n	8003460 <forward_log+0xa0>
 8003474:	b001      	add	sp, #4
 8003476:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003478 <nl_func_rsqrt_array_f32>:
 8003478:	b570      	push	{r4, r5, r6, lr}
 800347a:	460c      	mov	r4, r1
 800347c:	6880      	ldr	r0, [r0, #8]
 800347e:	68a1      	ldr	r1, [r4, #8]
 8003480:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003484:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003488:	1f1d      	subs	r5, r3, #4
 800348a:	1f16      	subs	r6, r2, #4
 800348c:	428d      	cmp	r5, r1
 800348e:	d30e      	bcc.n	80034ae <nl_func_rsqrt_array_f32+0x36>
 8003490:	ed95 0a00 	vldr	s0, [r5]
 8003494:	1f2d      	subs	r5, r5, #4
 8003496:	f003 f9b9 	bl	800680c <ai_math_sqrt>
 800349a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800349e:	eec0 0a80 	vdiv.f32	s1, s1, s0
 80034a2:	edc6 0a00 	vstr	s1, [r6]
 80034a6:	68a0      	ldr	r0, [r4, #8]
 80034a8:	1f36      	subs	r6, r6, #4
 80034aa:	4285      	cmp	r5, r0
 80034ac:	d2f0      	bcs.n	8003490 <nl_func_rsqrt_array_f32+0x18>
 80034ae:	bd70      	pop	{r4, r5, r6, pc}

080034b0 <forward_rsqrt>:
 80034b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b2:	b081      	sub	sp, #4
 80034b4:	6942      	ldr	r2, [r0, #20]
 80034b6:	f04f 0501 	mov.w	r5, #1
 80034ba:	8811      	ldrh	r1, [r2, #0]
 80034bc:	2900      	cmp	r1, #0
 80034be:	bf1a      	itte	ne
 80034c0:	6850      	ldrne	r0, [r2, #4]
 80034c2:	1d00      	addne	r0, r0, #4
 80034c4:	2004      	moveq	r0, #4
 80034c6:	6800      	ldr	r0, [r0, #0]
 80034c8:	2800      	cmp	r0, #0
 80034ca:	bf14      	ite	ne
 80034cc:	6803      	ldrne	r3, [r0, #0]
 80034ce:	2300      	moveq	r3, #0
 80034d0:	2902      	cmp	r1, #2
 80034d2:	bfa6      	itte	ge
 80034d4:	6850      	ldrge	r0, [r2, #4]
 80034d6:	3010      	addge	r0, #16
 80034d8:	2004      	movlt	r0, #4
 80034da:	6800      	ldr	r0, [r0, #0]
 80034dc:	2800      	cmp	r0, #0
 80034de:	bf19      	ittee	ne
 80034e0:	6800      	ldrne	r0, [r0, #0]
 80034e2:	f100 0418 	addne.w	r4, r0, #24
 80034e6:	2100      	moveq	r1, #0
 80034e8:	f101 0418 	addeq.w	r4, r1, #24
 80034ec:	f103 0108 	add.w	r1, r3, #8
 80034f0:	680a      	ldr	r2, [r1, #0]
 80034f2:	0a12      	lsrs	r2, r2, #8
 80034f4:	d01f      	beq.n	8003536 <forward_rsqrt+0x86>
 80034f6:	684e      	ldr	r6, [r1, #4]
 80034f8:	4610      	mov	r0, r2
 80034fa:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80034fe:	1f0f      	subs	r7, r1, #4
 8003500:	f010 0103 	ands.w	r1, r0, #3
 8003504:	d006      	beq.n	8003514 <forward_rsqrt+0x64>
 8003506:	1e52      	subs	r2, r2, #1
 8003508:	f857 c904 	ldr.w	ip, [r7], #-4
 800350c:	1e49      	subs	r1, r1, #1
 800350e:	fb0c f505 	mul.w	r5, ip, r5
 8003512:	d1f8      	bne.n	8003506 <forward_rsqrt+0x56>
 8003514:	0880      	lsrs	r0, r0, #2
 8003516:	d00e      	beq.n	8003536 <forward_rsqrt+0x86>
 8003518:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800351c:	3910      	subs	r1, #16
 800351e:	68ca      	ldr	r2, [r1, #12]
 8003520:	688e      	ldr	r6, [r1, #8]
 8003522:	684f      	ldr	r7, [r1, #4]
 8003524:	f851 c910 	ldr.w	ip, [r1], #-16
 8003528:	4372      	muls	r2, r6
 800352a:	437a      	muls	r2, r7
 800352c:	fb0c f202 	mul.w	r2, ip, r2
 8003530:	4355      	muls	r5, r2
 8003532:	1e40      	subs	r0, r0, #1
 8003534:	d1f3      	bne.n	800351e <forward_rsqrt+0x6e>
 8003536:	699e      	ldr	r6, [r3, #24]
 8003538:	6822      	ldr	r2, [r4, #0]
 800353a:	68b0      	ldr	r0, [r6, #8]
 800353c:	6893      	ldr	r3, [r2, #8]
 800353e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003542:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003546:	1f0f      	subs	r7, r1, #4
 8003548:	1f24      	subs	r4, r4, #4
 800354a:	4287      	cmp	r7, r0
 800354c:	f0c0 800f 	bcc.w	800356e <forward_rsqrt+0xbe>
 8003550:	ed97 0a00 	vldr	s0, [r7]
 8003554:	1f3f      	subs	r7, r7, #4
 8003556:	f003 f959 	bl	800680c <ai_math_sqrt>
 800355a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800355e:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8003562:	edc4 0a00 	vstr	s1, [r4]
 8003566:	68b0      	ldr	r0, [r6, #8]
 8003568:	1f24      	subs	r4, r4, #4
 800356a:	4287      	cmp	r7, r0
 800356c:	d2f0      	bcs.n	8003550 <forward_rsqrt+0xa0>
 800356e:	b001      	add	sp, #4
 8003570:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003574 <nl_func_sin_array_f32>:
 8003574:	b570      	push	{r4, r5, r6, lr}
 8003576:	688c      	ldr	r4, [r1, #8]
 8003578:	6880      	ldr	r0, [r0, #8]
 800357a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800357e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003582:	1f0d      	subs	r5, r1, #4
 8003584:	1f16      	subs	r6, r2, #4
 8003586:	42a5      	cmp	r5, r4
 8003588:	f0c0 800a 	bcc.w	80035a0 <nl_func_sin_array_f32+0x2c>
 800358c:	ed95 0a00 	vldr	s0, [r5]
 8003590:	1f2d      	subs	r5, r5, #4
 8003592:	f00f fa59 	bl	8012a48 <sinf>
 8003596:	ed86 0a00 	vstr	s0, [r6]
 800359a:	1f36      	subs	r6, r6, #4
 800359c:	42a5      	cmp	r5, r4
 800359e:	d2f5      	bcs.n	800358c <nl_func_sin_array_f32+0x18>
 80035a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080035a4 <forward_sin>:
 80035a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035a6:	b081      	sub	sp, #4
 80035a8:	6942      	ldr	r2, [r0, #20]
 80035aa:	f04f 0501 	mov.w	r5, #1
 80035ae:	8811      	ldrh	r1, [r2, #0]
 80035b0:	2900      	cmp	r1, #0
 80035b2:	bf1a      	itte	ne
 80035b4:	6850      	ldrne	r0, [r2, #4]
 80035b6:	1d00      	addne	r0, r0, #4
 80035b8:	2004      	moveq	r0, #4
 80035ba:	6800      	ldr	r0, [r0, #0]
 80035bc:	2800      	cmp	r0, #0
 80035be:	bf14      	ite	ne
 80035c0:	6803      	ldrne	r3, [r0, #0]
 80035c2:	2300      	moveq	r3, #0
 80035c4:	2902      	cmp	r1, #2
 80035c6:	bfa6      	itte	ge
 80035c8:	6850      	ldrge	r0, [r2, #4]
 80035ca:	3010      	addge	r0, #16
 80035cc:	2004      	movlt	r0, #4
 80035ce:	6800      	ldr	r0, [r0, #0]
 80035d0:	2800      	cmp	r0, #0
 80035d2:	bf19      	ittee	ne
 80035d4:	6800      	ldrne	r0, [r0, #0]
 80035d6:	f100 0418 	addne.w	r4, r0, #24
 80035da:	2100      	moveq	r1, #0
 80035dc:	f101 0418 	addeq.w	r4, r1, #24
 80035e0:	f103 0108 	add.w	r1, r3, #8
 80035e4:	680a      	ldr	r2, [r1, #0]
 80035e6:	0a12      	lsrs	r2, r2, #8
 80035e8:	d01f      	beq.n	800362a <forward_sin+0x86>
 80035ea:	684e      	ldr	r6, [r1, #4]
 80035ec:	4610      	mov	r0, r2
 80035ee:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80035f2:	1f0f      	subs	r7, r1, #4
 80035f4:	f010 0103 	ands.w	r1, r0, #3
 80035f8:	d006      	beq.n	8003608 <forward_sin+0x64>
 80035fa:	1e52      	subs	r2, r2, #1
 80035fc:	f857 c904 	ldr.w	ip, [r7], #-4
 8003600:	1e49      	subs	r1, r1, #1
 8003602:	fb0c f505 	mul.w	r5, ip, r5
 8003606:	d1f8      	bne.n	80035fa <forward_sin+0x56>
 8003608:	0880      	lsrs	r0, r0, #2
 800360a:	d00e      	beq.n	800362a <forward_sin+0x86>
 800360c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003610:	3910      	subs	r1, #16
 8003612:	68ca      	ldr	r2, [r1, #12]
 8003614:	688e      	ldr	r6, [r1, #8]
 8003616:	684f      	ldr	r7, [r1, #4]
 8003618:	f851 c910 	ldr.w	ip, [r1], #-16
 800361c:	4372      	muls	r2, r6
 800361e:	437a      	muls	r2, r7
 8003620:	fb0c f202 	mul.w	r2, ip, r2
 8003624:	4355      	muls	r5, r2
 8003626:	1e40      	subs	r0, r0, #1
 8003628:	d1f3      	bne.n	8003612 <forward_sin+0x6e>
 800362a:	6998      	ldr	r0, [r3, #24]
 800362c:	6821      	ldr	r1, [r4, #0]
 800362e:	6886      	ldr	r6, [r0, #8]
 8003630:	688a      	ldr	r2, [r1, #8]
 8003632:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003636:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800363a:	1f07      	subs	r7, r0, #4
 800363c:	1f1c      	subs	r4, r3, #4
 800363e:	42b7      	cmp	r7, r6
 8003640:	f0c0 800a 	bcc.w	8003658 <forward_sin+0xb4>
 8003644:	ed97 0a00 	vldr	s0, [r7]
 8003648:	1f3f      	subs	r7, r7, #4
 800364a:	f00f f9fd 	bl	8012a48 <sinf>
 800364e:	ed84 0a00 	vstr	s0, [r4]
 8003652:	1f24      	subs	r4, r4, #4
 8003654:	42b7      	cmp	r7, r6
 8003656:	d2f5      	bcs.n	8003644 <forward_sin+0xa0>
 8003658:	b001      	add	sp, #4
 800365a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800365c <nl_func_sinh_array_f32>:
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	688c      	ldr	r4, [r1, #8]
 8003660:	6880      	ldr	r0, [r0, #8]
 8003662:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003666:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800366a:	1f0d      	subs	r5, r1, #4
 800366c:	1f16      	subs	r6, r2, #4
 800366e:	42a5      	cmp	r5, r4
 8003670:	f0c0 800a 	bcc.w	8003688 <nl_func_sinh_array_f32+0x2c>
 8003674:	ed95 0a00 	vldr	s0, [r5]
 8003678:	1f2d      	subs	r5, r5, #4
 800367a:	f00f fff5 	bl	8013668 <sinhf>
 800367e:	ed86 0a00 	vstr	s0, [r6]
 8003682:	1f36      	subs	r6, r6, #4
 8003684:	42a5      	cmp	r5, r4
 8003686:	d2f5      	bcs.n	8003674 <nl_func_sinh_array_f32+0x18>
 8003688:	bd70      	pop	{r4, r5, r6, pc}
	...

0800368c <forward_sinh>:
 800368c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800368e:	b081      	sub	sp, #4
 8003690:	6942      	ldr	r2, [r0, #20]
 8003692:	f04f 0501 	mov.w	r5, #1
 8003696:	8811      	ldrh	r1, [r2, #0]
 8003698:	2900      	cmp	r1, #0
 800369a:	bf1a      	itte	ne
 800369c:	6850      	ldrne	r0, [r2, #4]
 800369e:	1d00      	addne	r0, r0, #4
 80036a0:	2004      	moveq	r0, #4
 80036a2:	6800      	ldr	r0, [r0, #0]
 80036a4:	2800      	cmp	r0, #0
 80036a6:	bf14      	ite	ne
 80036a8:	6803      	ldrne	r3, [r0, #0]
 80036aa:	2300      	moveq	r3, #0
 80036ac:	2902      	cmp	r1, #2
 80036ae:	bfa6      	itte	ge
 80036b0:	6850      	ldrge	r0, [r2, #4]
 80036b2:	3010      	addge	r0, #16
 80036b4:	2004      	movlt	r0, #4
 80036b6:	6800      	ldr	r0, [r0, #0]
 80036b8:	2800      	cmp	r0, #0
 80036ba:	bf19      	ittee	ne
 80036bc:	6800      	ldrne	r0, [r0, #0]
 80036be:	f100 0418 	addne.w	r4, r0, #24
 80036c2:	2100      	moveq	r1, #0
 80036c4:	f101 0418 	addeq.w	r4, r1, #24
 80036c8:	f103 0108 	add.w	r1, r3, #8
 80036cc:	680a      	ldr	r2, [r1, #0]
 80036ce:	0a12      	lsrs	r2, r2, #8
 80036d0:	d01f      	beq.n	8003712 <forward_sinh+0x86>
 80036d2:	684e      	ldr	r6, [r1, #4]
 80036d4:	4610      	mov	r0, r2
 80036d6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80036da:	1f0f      	subs	r7, r1, #4
 80036dc:	f010 0103 	ands.w	r1, r0, #3
 80036e0:	d006      	beq.n	80036f0 <forward_sinh+0x64>
 80036e2:	1e52      	subs	r2, r2, #1
 80036e4:	f857 c904 	ldr.w	ip, [r7], #-4
 80036e8:	1e49      	subs	r1, r1, #1
 80036ea:	fb0c f505 	mul.w	r5, ip, r5
 80036ee:	d1f8      	bne.n	80036e2 <forward_sinh+0x56>
 80036f0:	0880      	lsrs	r0, r0, #2
 80036f2:	d00e      	beq.n	8003712 <forward_sinh+0x86>
 80036f4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80036f8:	3910      	subs	r1, #16
 80036fa:	68ca      	ldr	r2, [r1, #12]
 80036fc:	688e      	ldr	r6, [r1, #8]
 80036fe:	684f      	ldr	r7, [r1, #4]
 8003700:	f851 c910 	ldr.w	ip, [r1], #-16
 8003704:	4372      	muls	r2, r6
 8003706:	437a      	muls	r2, r7
 8003708:	fb0c f202 	mul.w	r2, ip, r2
 800370c:	4355      	muls	r5, r2
 800370e:	1e40      	subs	r0, r0, #1
 8003710:	d1f3      	bne.n	80036fa <forward_sinh+0x6e>
 8003712:	6998      	ldr	r0, [r3, #24]
 8003714:	6821      	ldr	r1, [r4, #0]
 8003716:	6886      	ldr	r6, [r0, #8]
 8003718:	688a      	ldr	r2, [r1, #8]
 800371a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800371e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003722:	1f07      	subs	r7, r0, #4
 8003724:	1f1c      	subs	r4, r3, #4
 8003726:	42b7      	cmp	r7, r6
 8003728:	f0c0 800a 	bcc.w	8003740 <forward_sinh+0xb4>
 800372c:	ed97 0a00 	vldr	s0, [r7]
 8003730:	1f3f      	subs	r7, r7, #4
 8003732:	f00f ff99 	bl	8013668 <sinhf>
 8003736:	ed84 0a00 	vstr	s0, [r4]
 800373a:	1f24      	subs	r4, r4, #4
 800373c:	42b7      	cmp	r7, r6
 800373e:	d2f5      	bcs.n	800372c <forward_sinh+0xa0>
 8003740:	b001      	add	sp, #4
 8003742:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003744 <nl_func_tan_array_f32>:
 8003744:	b570      	push	{r4, r5, r6, lr}
 8003746:	688c      	ldr	r4, [r1, #8]
 8003748:	6880      	ldr	r0, [r0, #8]
 800374a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800374e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003752:	1f0d      	subs	r5, r1, #4
 8003754:	1f16      	subs	r6, r2, #4
 8003756:	42a5      	cmp	r5, r4
 8003758:	f0c0 800a 	bcc.w	8003770 <nl_func_tan_array_f32+0x2c>
 800375c:	ed95 0a00 	vldr	s0, [r5]
 8003760:	1f2d      	subs	r5, r5, #4
 8003762:	f00f f9b3 	bl	8012acc <tanf>
 8003766:	ed86 0a00 	vstr	s0, [r6]
 800376a:	1f36      	subs	r6, r6, #4
 800376c:	42a5      	cmp	r5, r4
 800376e:	d2f5      	bcs.n	800375c <nl_func_tan_array_f32+0x18>
 8003770:	bd70      	pop	{r4, r5, r6, pc}
	...

08003774 <forward_tan>:
 8003774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003776:	b081      	sub	sp, #4
 8003778:	6942      	ldr	r2, [r0, #20]
 800377a:	f04f 0501 	mov.w	r5, #1
 800377e:	8811      	ldrh	r1, [r2, #0]
 8003780:	2900      	cmp	r1, #0
 8003782:	bf1a      	itte	ne
 8003784:	6850      	ldrne	r0, [r2, #4]
 8003786:	1d00      	addne	r0, r0, #4
 8003788:	2004      	moveq	r0, #4
 800378a:	6800      	ldr	r0, [r0, #0]
 800378c:	2800      	cmp	r0, #0
 800378e:	bf14      	ite	ne
 8003790:	6803      	ldrne	r3, [r0, #0]
 8003792:	2300      	moveq	r3, #0
 8003794:	2902      	cmp	r1, #2
 8003796:	bfa6      	itte	ge
 8003798:	6850      	ldrge	r0, [r2, #4]
 800379a:	3010      	addge	r0, #16
 800379c:	2004      	movlt	r0, #4
 800379e:	6800      	ldr	r0, [r0, #0]
 80037a0:	2800      	cmp	r0, #0
 80037a2:	bf19      	ittee	ne
 80037a4:	6800      	ldrne	r0, [r0, #0]
 80037a6:	f100 0418 	addne.w	r4, r0, #24
 80037aa:	2100      	moveq	r1, #0
 80037ac:	f101 0418 	addeq.w	r4, r1, #24
 80037b0:	f103 0108 	add.w	r1, r3, #8
 80037b4:	680a      	ldr	r2, [r1, #0]
 80037b6:	0a12      	lsrs	r2, r2, #8
 80037b8:	d01f      	beq.n	80037fa <forward_tan+0x86>
 80037ba:	684e      	ldr	r6, [r1, #4]
 80037bc:	4610      	mov	r0, r2
 80037be:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037c2:	1f0f      	subs	r7, r1, #4
 80037c4:	f010 0103 	ands.w	r1, r0, #3
 80037c8:	d006      	beq.n	80037d8 <forward_tan+0x64>
 80037ca:	1e52      	subs	r2, r2, #1
 80037cc:	f857 c904 	ldr.w	ip, [r7], #-4
 80037d0:	1e49      	subs	r1, r1, #1
 80037d2:	fb0c f505 	mul.w	r5, ip, r5
 80037d6:	d1f8      	bne.n	80037ca <forward_tan+0x56>
 80037d8:	0880      	lsrs	r0, r0, #2
 80037da:	d00e      	beq.n	80037fa <forward_tan+0x86>
 80037dc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037e0:	3910      	subs	r1, #16
 80037e2:	68ca      	ldr	r2, [r1, #12]
 80037e4:	688e      	ldr	r6, [r1, #8]
 80037e6:	684f      	ldr	r7, [r1, #4]
 80037e8:	f851 c910 	ldr.w	ip, [r1], #-16
 80037ec:	4372      	muls	r2, r6
 80037ee:	437a      	muls	r2, r7
 80037f0:	fb0c f202 	mul.w	r2, ip, r2
 80037f4:	4355      	muls	r5, r2
 80037f6:	1e40      	subs	r0, r0, #1
 80037f8:	d1f3      	bne.n	80037e2 <forward_tan+0x6e>
 80037fa:	6998      	ldr	r0, [r3, #24]
 80037fc:	6821      	ldr	r1, [r4, #0]
 80037fe:	6886      	ldr	r6, [r0, #8]
 8003800:	688a      	ldr	r2, [r1, #8]
 8003802:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003806:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800380a:	1f07      	subs	r7, r0, #4
 800380c:	1f1c      	subs	r4, r3, #4
 800380e:	42b7      	cmp	r7, r6
 8003810:	f0c0 800a 	bcc.w	8003828 <forward_tan+0xb4>
 8003814:	ed97 0a00 	vldr	s0, [r7]
 8003818:	1f3f      	subs	r7, r7, #4
 800381a:	f00f f957 	bl	8012acc <tanf>
 800381e:	ed84 0a00 	vstr	s0, [r4]
 8003822:	1f24      	subs	r4, r4, #4
 8003824:	42b7      	cmp	r7, r6
 8003826:	d2f5      	bcs.n	8003814 <forward_tan+0xa0>
 8003828:	b001      	add	sp, #4
 800382a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800382c <nl_func_abs_array_f32>:
 800382c:	6889      	ldr	r1, [r1, #8]
 800382e:	6880      	ldr	r0, [r0, #8]
 8003830:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003834:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003838:	1f1b      	subs	r3, r3, #4
 800383a:	1f10      	subs	r0, r2, #4
 800383c:	428b      	cmp	r3, r1
 800383e:	d307      	bcc.n	8003850 <nl_func_abs_array_f32+0x24>
 8003840:	f853 c904 	ldr.w	ip, [r3], #-4
 8003844:	428b      	cmp	r3, r1
 8003846:	f02c 4200 	bic.w	r2, ip, #2147483648	; 0x80000000
 800384a:	f840 2904 	str.w	r2, [r0], #-4
 800384e:	d2f7      	bcs.n	8003840 <nl_func_abs_array_f32+0x14>
 8003850:	4770      	bx	lr
	...

08003854 <forward_abs>:
 8003854:	b4f0      	push	{r4, r5, r6, r7}
 8003856:	6942      	ldr	r2, [r0, #20]
 8003858:	f04f 0501 	mov.w	r5, #1
 800385c:	8811      	ldrh	r1, [r2, #0]
 800385e:	2900      	cmp	r1, #0
 8003860:	bf1a      	itte	ne
 8003862:	6850      	ldrne	r0, [r2, #4]
 8003864:	1d00      	addne	r0, r0, #4
 8003866:	2004      	moveq	r0, #4
 8003868:	6800      	ldr	r0, [r0, #0]
 800386a:	2800      	cmp	r0, #0
 800386c:	bf14      	ite	ne
 800386e:	6803      	ldrne	r3, [r0, #0]
 8003870:	2300      	moveq	r3, #0
 8003872:	2902      	cmp	r1, #2
 8003874:	bfa6      	itte	ge
 8003876:	6850      	ldrge	r0, [r2, #4]
 8003878:	3010      	addge	r0, #16
 800387a:	2004      	movlt	r0, #4
 800387c:	6800      	ldr	r0, [r0, #0]
 800387e:	2800      	cmp	r0, #0
 8003880:	bf19      	ittee	ne
 8003882:	6800      	ldrne	r0, [r0, #0]
 8003884:	f100 0418 	addne.w	r4, r0, #24
 8003888:	2100      	moveq	r1, #0
 800388a:	f101 0418 	addeq.w	r4, r1, #24
 800388e:	f103 0108 	add.w	r1, r3, #8
 8003892:	680a      	ldr	r2, [r1, #0]
 8003894:	0a12      	lsrs	r2, r2, #8
 8003896:	d01f      	beq.n	80038d8 <forward_abs+0x84>
 8003898:	684e      	ldr	r6, [r1, #4]
 800389a:	4610      	mov	r0, r2
 800389c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80038a0:	1f0f      	subs	r7, r1, #4
 80038a2:	f010 0103 	ands.w	r1, r0, #3
 80038a6:	d006      	beq.n	80038b6 <forward_abs+0x62>
 80038a8:	1e52      	subs	r2, r2, #1
 80038aa:	f857 c904 	ldr.w	ip, [r7], #-4
 80038ae:	1e49      	subs	r1, r1, #1
 80038b0:	fb0c f505 	mul.w	r5, ip, r5
 80038b4:	d1f8      	bne.n	80038a8 <forward_abs+0x54>
 80038b6:	0880      	lsrs	r0, r0, #2
 80038b8:	d00e      	beq.n	80038d8 <forward_abs+0x84>
 80038ba:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80038be:	3910      	subs	r1, #16
 80038c0:	68ca      	ldr	r2, [r1, #12]
 80038c2:	688e      	ldr	r6, [r1, #8]
 80038c4:	684f      	ldr	r7, [r1, #4]
 80038c6:	f851 c910 	ldr.w	ip, [r1], #-16
 80038ca:	4372      	muls	r2, r6
 80038cc:	437a      	muls	r2, r7
 80038ce:	fb0c f202 	mul.w	r2, ip, r2
 80038d2:	4355      	muls	r5, r2
 80038d4:	1e40      	subs	r0, r0, #1
 80038d6:	d1f3      	bne.n	80038c0 <forward_abs+0x6c>
 80038d8:	6998      	ldr	r0, [r3, #24]
 80038da:	6822      	ldr	r2, [r4, #0]
 80038dc:	6880      	ldr	r0, [r0, #8]
 80038de:	6893      	ldr	r3, [r2, #8]
 80038e0:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80038e4:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80038e8:	1f09      	subs	r1, r1, #4
 80038ea:	1f22      	subs	r2, r4, #4
 80038ec:	4281      	cmp	r1, r0
 80038ee:	d307      	bcc.n	8003900 <forward_abs+0xac>
 80038f0:	f851 5904 	ldr.w	r5, [r1], #-4
 80038f4:	4281      	cmp	r1, r0
 80038f6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80038fa:	f842 3904 	str.w	r3, [r2], #-4
 80038fe:	d2f7      	bcs.n	80038f0 <forward_abs+0x9c>
 8003900:	bcf0      	pop	{r4, r5, r6, r7}
 8003902:	4770      	bx	lr

08003904 <nl_func_ceil_array_f32>:
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	688c      	ldr	r4, [r1, #8]
 8003908:	6880      	ldr	r0, [r0, #8]
 800390a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800390e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003912:	1f0d      	subs	r5, r1, #4
 8003914:	1f16      	subs	r6, r2, #4
 8003916:	42a5      	cmp	r5, r4
 8003918:	f0c0 800a 	bcc.w	8003930 <nl_func_ceil_array_f32+0x2c>
 800391c:	ed95 0a00 	vldr	s0, [r5]
 8003920:	1f2d      	subs	r5, r5, #4
 8003922:	f00e fcb9 	bl	8012298 <ceilf>
 8003926:	ed86 0a00 	vstr	s0, [r6]
 800392a:	1f36      	subs	r6, r6, #4
 800392c:	42a5      	cmp	r5, r4
 800392e:	d2f5      	bcs.n	800391c <nl_func_ceil_array_f32+0x18>
 8003930:	bd70      	pop	{r4, r5, r6, pc}
	...

08003934 <forward_ceil>:
 8003934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003936:	b081      	sub	sp, #4
 8003938:	6942      	ldr	r2, [r0, #20]
 800393a:	f04f 0501 	mov.w	r5, #1
 800393e:	8811      	ldrh	r1, [r2, #0]
 8003940:	2900      	cmp	r1, #0
 8003942:	bf1a      	itte	ne
 8003944:	6850      	ldrne	r0, [r2, #4]
 8003946:	1d00      	addne	r0, r0, #4
 8003948:	2004      	moveq	r0, #4
 800394a:	6800      	ldr	r0, [r0, #0]
 800394c:	2800      	cmp	r0, #0
 800394e:	bf14      	ite	ne
 8003950:	6803      	ldrne	r3, [r0, #0]
 8003952:	2300      	moveq	r3, #0
 8003954:	2902      	cmp	r1, #2
 8003956:	bfa6      	itte	ge
 8003958:	6850      	ldrge	r0, [r2, #4]
 800395a:	3010      	addge	r0, #16
 800395c:	2004      	movlt	r0, #4
 800395e:	6800      	ldr	r0, [r0, #0]
 8003960:	2800      	cmp	r0, #0
 8003962:	bf19      	ittee	ne
 8003964:	6800      	ldrne	r0, [r0, #0]
 8003966:	f100 0418 	addne.w	r4, r0, #24
 800396a:	2100      	moveq	r1, #0
 800396c:	f101 0418 	addeq.w	r4, r1, #24
 8003970:	f103 0108 	add.w	r1, r3, #8
 8003974:	680a      	ldr	r2, [r1, #0]
 8003976:	0a12      	lsrs	r2, r2, #8
 8003978:	d01f      	beq.n	80039ba <forward_ceil+0x86>
 800397a:	684e      	ldr	r6, [r1, #4]
 800397c:	4610      	mov	r0, r2
 800397e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003982:	1f0f      	subs	r7, r1, #4
 8003984:	f010 0103 	ands.w	r1, r0, #3
 8003988:	d006      	beq.n	8003998 <forward_ceil+0x64>
 800398a:	1e52      	subs	r2, r2, #1
 800398c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003990:	1e49      	subs	r1, r1, #1
 8003992:	fb0c f505 	mul.w	r5, ip, r5
 8003996:	d1f8      	bne.n	800398a <forward_ceil+0x56>
 8003998:	0880      	lsrs	r0, r0, #2
 800399a:	d00e      	beq.n	80039ba <forward_ceil+0x86>
 800399c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80039a0:	3910      	subs	r1, #16
 80039a2:	68ca      	ldr	r2, [r1, #12]
 80039a4:	688e      	ldr	r6, [r1, #8]
 80039a6:	684f      	ldr	r7, [r1, #4]
 80039a8:	f851 c910 	ldr.w	ip, [r1], #-16
 80039ac:	4372      	muls	r2, r6
 80039ae:	437a      	muls	r2, r7
 80039b0:	fb0c f202 	mul.w	r2, ip, r2
 80039b4:	4355      	muls	r5, r2
 80039b6:	1e40      	subs	r0, r0, #1
 80039b8:	d1f3      	bne.n	80039a2 <forward_ceil+0x6e>
 80039ba:	6998      	ldr	r0, [r3, #24]
 80039bc:	6821      	ldr	r1, [r4, #0]
 80039be:	6886      	ldr	r6, [r0, #8]
 80039c0:	688a      	ldr	r2, [r1, #8]
 80039c2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80039c6:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 80039ca:	1f07      	subs	r7, r0, #4
 80039cc:	1f1c      	subs	r4, r3, #4
 80039ce:	42b7      	cmp	r7, r6
 80039d0:	f0c0 800a 	bcc.w	80039e8 <forward_ceil+0xb4>
 80039d4:	ed97 0a00 	vldr	s0, [r7]
 80039d8:	1f3f      	subs	r7, r7, #4
 80039da:	f00e fc5d 	bl	8012298 <ceilf>
 80039de:	ed84 0a00 	vstr	s0, [r4]
 80039e2:	1f24      	subs	r4, r4, #4
 80039e4:	42b7      	cmp	r7, r6
 80039e6:	d2f5      	bcs.n	80039d4 <forward_ceil+0xa0>
 80039e8:	b001      	add	sp, #4
 80039ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039ec <nl_func_floor_array_f32>:
 80039ec:	b570      	push	{r4, r5, r6, lr}
 80039ee:	688c      	ldr	r4, [r1, #8]
 80039f0:	6880      	ldr	r0, [r0, #8]
 80039f2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80039f6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80039fa:	1f0d      	subs	r5, r1, #4
 80039fc:	1f16      	subs	r6, r2, #4
 80039fe:	42a5      	cmp	r5, r4
 8003a00:	f0c0 800a 	bcc.w	8003a18 <nl_func_floor_array_f32+0x2c>
 8003a04:	ed95 0a00 	vldr	s0, [r5]
 8003a08:	1f2d      	subs	r5, r5, #4
 8003a0a:	f00e fead 	bl	8012768 <floorf>
 8003a0e:	ed86 0a00 	vstr	s0, [r6]
 8003a12:	1f36      	subs	r6, r6, #4
 8003a14:	42a5      	cmp	r5, r4
 8003a16:	d2f5      	bcs.n	8003a04 <nl_func_floor_array_f32+0x18>
 8003a18:	bd70      	pop	{r4, r5, r6, pc}
	...

08003a1c <forward_floor>:
 8003a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a1e:	b081      	sub	sp, #4
 8003a20:	6942      	ldr	r2, [r0, #20]
 8003a22:	f04f 0501 	mov.w	r5, #1
 8003a26:	8811      	ldrh	r1, [r2, #0]
 8003a28:	2900      	cmp	r1, #0
 8003a2a:	bf1a      	itte	ne
 8003a2c:	6850      	ldrne	r0, [r2, #4]
 8003a2e:	1d00      	addne	r0, r0, #4
 8003a30:	2004      	moveq	r0, #4
 8003a32:	6800      	ldr	r0, [r0, #0]
 8003a34:	2800      	cmp	r0, #0
 8003a36:	bf14      	ite	ne
 8003a38:	6803      	ldrne	r3, [r0, #0]
 8003a3a:	2300      	moveq	r3, #0
 8003a3c:	2902      	cmp	r1, #2
 8003a3e:	bfa6      	itte	ge
 8003a40:	6850      	ldrge	r0, [r2, #4]
 8003a42:	3010      	addge	r0, #16
 8003a44:	2004      	movlt	r0, #4
 8003a46:	6800      	ldr	r0, [r0, #0]
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	bf19      	ittee	ne
 8003a4c:	6800      	ldrne	r0, [r0, #0]
 8003a4e:	f100 0418 	addne.w	r4, r0, #24
 8003a52:	2100      	moveq	r1, #0
 8003a54:	f101 0418 	addeq.w	r4, r1, #24
 8003a58:	f103 0108 	add.w	r1, r3, #8
 8003a5c:	680a      	ldr	r2, [r1, #0]
 8003a5e:	0a12      	lsrs	r2, r2, #8
 8003a60:	d01f      	beq.n	8003aa2 <forward_floor+0x86>
 8003a62:	684e      	ldr	r6, [r1, #4]
 8003a64:	4610      	mov	r0, r2
 8003a66:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a6a:	1f0f      	subs	r7, r1, #4
 8003a6c:	f010 0103 	ands.w	r1, r0, #3
 8003a70:	d006      	beq.n	8003a80 <forward_floor+0x64>
 8003a72:	1e52      	subs	r2, r2, #1
 8003a74:	f857 c904 	ldr.w	ip, [r7], #-4
 8003a78:	1e49      	subs	r1, r1, #1
 8003a7a:	fb0c f505 	mul.w	r5, ip, r5
 8003a7e:	d1f8      	bne.n	8003a72 <forward_floor+0x56>
 8003a80:	0880      	lsrs	r0, r0, #2
 8003a82:	d00e      	beq.n	8003aa2 <forward_floor+0x86>
 8003a84:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a88:	3910      	subs	r1, #16
 8003a8a:	68ca      	ldr	r2, [r1, #12]
 8003a8c:	688e      	ldr	r6, [r1, #8]
 8003a8e:	684f      	ldr	r7, [r1, #4]
 8003a90:	f851 c910 	ldr.w	ip, [r1], #-16
 8003a94:	4372      	muls	r2, r6
 8003a96:	437a      	muls	r2, r7
 8003a98:	fb0c f202 	mul.w	r2, ip, r2
 8003a9c:	4355      	muls	r5, r2
 8003a9e:	1e40      	subs	r0, r0, #1
 8003aa0:	d1f3      	bne.n	8003a8a <forward_floor+0x6e>
 8003aa2:	6998      	ldr	r0, [r3, #24]
 8003aa4:	6821      	ldr	r1, [r4, #0]
 8003aa6:	6886      	ldr	r6, [r0, #8]
 8003aa8:	688a      	ldr	r2, [r1, #8]
 8003aaa:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003aae:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003ab2:	1f07      	subs	r7, r0, #4
 8003ab4:	1f1c      	subs	r4, r3, #4
 8003ab6:	42b7      	cmp	r7, r6
 8003ab8:	f0c0 800a 	bcc.w	8003ad0 <forward_floor+0xb4>
 8003abc:	ed97 0a00 	vldr	s0, [r7]
 8003ac0:	1f3f      	subs	r7, r7, #4
 8003ac2:	f00e fe51 	bl	8012768 <floorf>
 8003ac6:	ed84 0a00 	vstr	s0, [r4]
 8003aca:	1f24      	subs	r4, r4, #4
 8003acc:	42b7      	cmp	r7, r6
 8003ace:	d2f5      	bcs.n	8003abc <forward_floor+0xa0>
 8003ad0:	b001      	add	sp, #4
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ad4 <nl_func_round_array_f32>:
 8003ad4:	b570      	push	{r4, r5, r6, lr}
 8003ad6:	688c      	ldr	r4, [r1, #8]
 8003ad8:	6880      	ldr	r0, [r0, #8]
 8003ada:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003ade:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003ae2:	1f0d      	subs	r5, r1, #4
 8003ae4:	1f16      	subs	r6, r2, #4
 8003ae6:	42a5      	cmp	r5, r4
 8003ae8:	f0c0 800a 	bcc.w	8003b00 <nl_func_round_array_f32+0x2c>
 8003aec:	ed95 0a00 	vldr	s0, [r5]
 8003af0:	1f2d      	subs	r5, r5, #4
 8003af2:	f00e ff83 	bl	80129fc <roundf>
 8003af6:	ed86 0a00 	vstr	s0, [r6]
 8003afa:	1f36      	subs	r6, r6, #4
 8003afc:	42a5      	cmp	r5, r4
 8003afe:	d2f5      	bcs.n	8003aec <nl_func_round_array_f32+0x18>
 8003b00:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b04 <forward_round>:
 8003b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b06:	b081      	sub	sp, #4
 8003b08:	6942      	ldr	r2, [r0, #20]
 8003b0a:	f04f 0501 	mov.w	r5, #1
 8003b0e:	8811      	ldrh	r1, [r2, #0]
 8003b10:	2900      	cmp	r1, #0
 8003b12:	bf1a      	itte	ne
 8003b14:	6850      	ldrne	r0, [r2, #4]
 8003b16:	1d00      	addne	r0, r0, #4
 8003b18:	2004      	moveq	r0, #4
 8003b1a:	6800      	ldr	r0, [r0, #0]
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	bf14      	ite	ne
 8003b20:	6803      	ldrne	r3, [r0, #0]
 8003b22:	2300      	moveq	r3, #0
 8003b24:	2902      	cmp	r1, #2
 8003b26:	bfa6      	itte	ge
 8003b28:	6850      	ldrge	r0, [r2, #4]
 8003b2a:	3010      	addge	r0, #16
 8003b2c:	2004      	movlt	r0, #4
 8003b2e:	6800      	ldr	r0, [r0, #0]
 8003b30:	2800      	cmp	r0, #0
 8003b32:	bf19      	ittee	ne
 8003b34:	6800      	ldrne	r0, [r0, #0]
 8003b36:	f100 0418 	addne.w	r4, r0, #24
 8003b3a:	2100      	moveq	r1, #0
 8003b3c:	f101 0418 	addeq.w	r4, r1, #24
 8003b40:	f103 0108 	add.w	r1, r3, #8
 8003b44:	680a      	ldr	r2, [r1, #0]
 8003b46:	0a12      	lsrs	r2, r2, #8
 8003b48:	d01f      	beq.n	8003b8a <forward_round+0x86>
 8003b4a:	684e      	ldr	r6, [r1, #4]
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b52:	1f0f      	subs	r7, r1, #4
 8003b54:	f010 0103 	ands.w	r1, r0, #3
 8003b58:	d006      	beq.n	8003b68 <forward_round+0x64>
 8003b5a:	1e52      	subs	r2, r2, #1
 8003b5c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003b60:	1e49      	subs	r1, r1, #1
 8003b62:	fb0c f505 	mul.w	r5, ip, r5
 8003b66:	d1f8      	bne.n	8003b5a <forward_round+0x56>
 8003b68:	0880      	lsrs	r0, r0, #2
 8003b6a:	d00e      	beq.n	8003b8a <forward_round+0x86>
 8003b6c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b70:	3910      	subs	r1, #16
 8003b72:	68ca      	ldr	r2, [r1, #12]
 8003b74:	688e      	ldr	r6, [r1, #8]
 8003b76:	684f      	ldr	r7, [r1, #4]
 8003b78:	f851 c910 	ldr.w	ip, [r1], #-16
 8003b7c:	4372      	muls	r2, r6
 8003b7e:	437a      	muls	r2, r7
 8003b80:	fb0c f202 	mul.w	r2, ip, r2
 8003b84:	4355      	muls	r5, r2
 8003b86:	1e40      	subs	r0, r0, #1
 8003b88:	d1f3      	bne.n	8003b72 <forward_round+0x6e>
 8003b8a:	6998      	ldr	r0, [r3, #24]
 8003b8c:	6821      	ldr	r1, [r4, #0]
 8003b8e:	6886      	ldr	r6, [r0, #8]
 8003b90:	688a      	ldr	r2, [r1, #8]
 8003b92:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003b96:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003b9a:	1f07      	subs	r7, r0, #4
 8003b9c:	1f1c      	subs	r4, r3, #4
 8003b9e:	42b7      	cmp	r7, r6
 8003ba0:	f0c0 800a 	bcc.w	8003bb8 <forward_round+0xb4>
 8003ba4:	ed97 0a00 	vldr	s0, [r7]
 8003ba8:	1f3f      	subs	r7, r7, #4
 8003baa:	f00e ff27 	bl	80129fc <roundf>
 8003bae:	ed84 0a00 	vstr	s0, [r4]
 8003bb2:	1f24      	subs	r4, r4, #4
 8003bb4:	42b7      	cmp	r7, r6
 8003bb6:	d2f5      	bcs.n	8003ba4 <forward_round+0xa0>
 8003bb8:	b001      	add	sp, #4
 8003bba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bbc <nl_func_neg_array_f32>:
 8003bbc:	6889      	ldr	r1, [r1, #8]
 8003bbe:	6880      	ldr	r0, [r0, #8]
 8003bc0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003bc4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003bc8:	1f1b      	subs	r3, r3, #4
 8003bca:	1f12      	subs	r2, r2, #4
 8003bcc:	428b      	cmp	r3, r1
 8003bce:	d32b      	bcc.n	8003c28 <nl_func_neg_array_f32+0x6c>
 8003bd0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003bd4:	1f18      	subs	r0, r3, #4
 8003bd6:	edd3 0a00 	vldr	s1, [r3]
 8003bda:	4288      	cmp	r0, r1
 8003bdc:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003be0:	edc2 0a00 	vstr	s1, [r2]
 8003be4:	d320      	bcc.n	8003c28 <nl_func_neg_array_f32+0x6c>
 8003be6:	ed90 1a00 	vldr	s2, [r0]
 8003bea:	1f00      	subs	r0, r0, #4
 8003bec:	1f13      	subs	r3, r2, #4
 8003bee:	ee21 1a00 	vmul.f32	s2, s2, s0
 8003bf2:	4288      	cmp	r0, r1
 8003bf4:	ed83 1a00 	vstr	s2, [r3]
 8003bf8:	d316      	bcc.n	8003c28 <nl_func_neg_array_f32+0x6c>
 8003bfa:	edd0 0a00 	vldr	s1, [r0]
 8003bfe:	1f00      	subs	r0, r0, #4
 8003c00:	f1a2 0c08 	sub.w	ip, r2, #8
 8003c04:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003c08:	4288      	cmp	r0, r1
 8003c0a:	edcc 0a00 	vstr	s1, [ip]
 8003c0e:	d30b      	bcc.n	8003c28 <nl_func_neg_array_f32+0x6c>
 8003c10:	ed90 1a00 	vldr	s2, [r0]
 8003c14:	f1a2 030c 	sub.w	r3, r2, #12
 8003c18:	ee21 1a00 	vmul.f32	s2, s2, s0
 8003c1c:	3a10      	subs	r2, #16
 8003c1e:	ed83 1a00 	vstr	s2, [r3]
 8003c22:	1f03      	subs	r3, r0, #4
 8003c24:	428b      	cmp	r3, r1
 8003c26:	d2d5      	bcs.n	8003bd4 <nl_func_neg_array_f32+0x18>
 8003c28:	4770      	bx	lr
	...

08003c2c <forward_neg>:
 8003c2c:	b4f0      	push	{r4, r5, r6, r7}
 8003c2e:	6942      	ldr	r2, [r0, #20]
 8003c30:	f04f 0501 	mov.w	r5, #1
 8003c34:	8811      	ldrh	r1, [r2, #0]
 8003c36:	2900      	cmp	r1, #0
 8003c38:	bf1a      	itte	ne
 8003c3a:	6850      	ldrne	r0, [r2, #4]
 8003c3c:	1d00      	addne	r0, r0, #4
 8003c3e:	2004      	moveq	r0, #4
 8003c40:	6800      	ldr	r0, [r0, #0]
 8003c42:	2800      	cmp	r0, #0
 8003c44:	bf14      	ite	ne
 8003c46:	6803      	ldrne	r3, [r0, #0]
 8003c48:	2300      	moveq	r3, #0
 8003c4a:	2902      	cmp	r1, #2
 8003c4c:	bfa6      	itte	ge
 8003c4e:	6850      	ldrge	r0, [r2, #4]
 8003c50:	3010      	addge	r0, #16
 8003c52:	2004      	movlt	r0, #4
 8003c54:	6800      	ldr	r0, [r0, #0]
 8003c56:	2800      	cmp	r0, #0
 8003c58:	bf19      	ittee	ne
 8003c5a:	6800      	ldrne	r0, [r0, #0]
 8003c5c:	f100 0418 	addne.w	r4, r0, #24
 8003c60:	2100      	moveq	r1, #0
 8003c62:	f101 0418 	addeq.w	r4, r1, #24
 8003c66:	f103 0108 	add.w	r1, r3, #8
 8003c6a:	680a      	ldr	r2, [r1, #0]
 8003c6c:	0a12      	lsrs	r2, r2, #8
 8003c6e:	d01f      	beq.n	8003cb0 <forward_neg+0x84>
 8003c70:	684e      	ldr	r6, [r1, #4]
 8003c72:	4610      	mov	r0, r2
 8003c74:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c78:	1f0f      	subs	r7, r1, #4
 8003c7a:	f010 0103 	ands.w	r1, r0, #3
 8003c7e:	d006      	beq.n	8003c8e <forward_neg+0x62>
 8003c80:	1e52      	subs	r2, r2, #1
 8003c82:	f857 c904 	ldr.w	ip, [r7], #-4
 8003c86:	1e49      	subs	r1, r1, #1
 8003c88:	fb0c f505 	mul.w	r5, ip, r5
 8003c8c:	d1f8      	bne.n	8003c80 <forward_neg+0x54>
 8003c8e:	0880      	lsrs	r0, r0, #2
 8003c90:	d00e      	beq.n	8003cb0 <forward_neg+0x84>
 8003c92:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c96:	3910      	subs	r1, #16
 8003c98:	68ca      	ldr	r2, [r1, #12]
 8003c9a:	688e      	ldr	r6, [r1, #8]
 8003c9c:	684f      	ldr	r7, [r1, #4]
 8003c9e:	f851 c910 	ldr.w	ip, [r1], #-16
 8003ca2:	4372      	muls	r2, r6
 8003ca4:	437a      	muls	r2, r7
 8003ca6:	fb0c f202 	mul.w	r2, ip, r2
 8003caa:	4355      	muls	r5, r2
 8003cac:	1e40      	subs	r0, r0, #1
 8003cae:	d1f3      	bne.n	8003c98 <forward_neg+0x6c>
 8003cb0:	6998      	ldr	r0, [r3, #24]
 8003cb2:	6822      	ldr	r2, [r4, #0]
 8003cb4:	6880      	ldr	r0, [r0, #8]
 8003cb6:	6893      	ldr	r3, [r2, #8]
 8003cb8:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003cbc:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003cc0:	1f09      	subs	r1, r1, #4
 8003cc2:	1f22      	subs	r2, r4, #4
 8003cc4:	4281      	cmp	r1, r0
 8003cc6:	d32b      	bcc.n	8003d20 <forward_neg+0xf4>
 8003cc8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003ccc:	edd1 0a00 	vldr	s1, [r1]
 8003cd0:	1f09      	subs	r1, r1, #4
 8003cd2:	4281      	cmp	r1, r0
 8003cd4:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003cd8:	edc2 0a00 	vstr	s1, [r2]
 8003cdc:	d320      	bcc.n	8003d20 <forward_neg+0xf4>
 8003cde:	ed91 1a00 	vldr	s2, [r1]
 8003ce2:	1f09      	subs	r1, r1, #4
 8003ce4:	1f13      	subs	r3, r2, #4
 8003ce6:	ee21 1a00 	vmul.f32	s2, s2, s0
 8003cea:	4281      	cmp	r1, r0
 8003cec:	ed83 1a00 	vstr	s2, [r3]
 8003cf0:	d316      	bcc.n	8003d20 <forward_neg+0xf4>
 8003cf2:	edd1 0a00 	vldr	s1, [r1]
 8003cf6:	1f09      	subs	r1, r1, #4
 8003cf8:	f1a2 0408 	sub.w	r4, r2, #8
 8003cfc:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003d00:	4281      	cmp	r1, r0
 8003d02:	edc4 0a00 	vstr	s1, [r4]
 8003d06:	d30b      	bcc.n	8003d20 <forward_neg+0xf4>
 8003d08:	ed91 1a00 	vldr	s2, [r1]
 8003d0c:	f1a2 030c 	sub.w	r3, r2, #12
 8003d10:	1f09      	subs	r1, r1, #4
 8003d12:	3a10      	subs	r2, #16
 8003d14:	4281      	cmp	r1, r0
 8003d16:	ee21 1a00 	vmul.f32	s2, s2, s0
 8003d1a:	ed83 1a00 	vstr	s2, [r3]
 8003d1e:	d2d5      	bcs.n	8003ccc <forward_neg+0xa0>
 8003d20:	bcf0      	pop	{r4, r5, r6, r7}
 8003d22:	4770      	bx	lr

08003d24 <nl_func_reciprocal_array_f32>:
 8003d24:	6889      	ldr	r1, [r1, #8]
 8003d26:	6880      	ldr	r0, [r0, #8]
 8003d28:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003d2c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003d30:	1f1b      	subs	r3, r3, #4
 8003d32:	1f12      	subs	r2, r2, #4
 8003d34:	428b      	cmp	r3, r1
 8003d36:	d331      	bcc.n	8003d9c <nl_func_reciprocal_array_f32+0x78>
 8003d38:	1f18      	subs	r0, r3, #4
 8003d3a:	ed93 0a00 	vldr	s0, [r3]
 8003d3e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003d42:	4288      	cmp	r0, r1
 8003d44:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003d48:	ed82 0a00 	vstr	s0, [r2]
 8003d4c:	d326      	bcc.n	8003d9c <nl_func_reciprocal_array_f32+0x78>
 8003d4e:	edd0 0a00 	vldr	s1, [r0]
 8003d52:	1f00      	subs	r0, r0, #4
 8003d54:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003d58:	1f13      	subs	r3, r2, #4
 8003d5a:	4288      	cmp	r0, r1
 8003d5c:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8003d60:	ed83 1a00 	vstr	s2, [r3]
 8003d64:	d31a      	bcc.n	8003d9c <nl_func_reciprocal_array_f32+0x78>
 8003d66:	ed90 0a00 	vldr	s0, [r0]
 8003d6a:	1f00      	subs	r0, r0, #4
 8003d6c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003d70:	f1a2 0c08 	sub.w	ip, r2, #8
 8003d74:	4288      	cmp	r0, r1
 8003d76:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003d7a:	ed8c 0a00 	vstr	s0, [ip]
 8003d7e:	d30d      	bcc.n	8003d9c <nl_func_reciprocal_array_f32+0x78>
 8003d80:	edd0 0a00 	vldr	s1, [r0]
 8003d84:	f1a2 030c 	sub.w	r3, r2, #12
 8003d88:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003d8c:	3a10      	subs	r2, #16
 8003d8e:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8003d92:	ed83 1a00 	vstr	s2, [r3]
 8003d96:	1f03      	subs	r3, r0, #4
 8003d98:	428b      	cmp	r3, r1
 8003d9a:	d2cd      	bcs.n	8003d38 <nl_func_reciprocal_array_f32+0x14>
 8003d9c:	4770      	bx	lr
	...

08003da0 <forward_reciprocal>:
 8003da0:	b4f0      	push	{r4, r5, r6, r7}
 8003da2:	6942      	ldr	r2, [r0, #20]
 8003da4:	f04f 0501 	mov.w	r5, #1
 8003da8:	8811      	ldrh	r1, [r2, #0]
 8003daa:	2900      	cmp	r1, #0
 8003dac:	bf1a      	itte	ne
 8003dae:	6850      	ldrne	r0, [r2, #4]
 8003db0:	1d00      	addne	r0, r0, #4
 8003db2:	2004      	moveq	r0, #4
 8003db4:	6800      	ldr	r0, [r0, #0]
 8003db6:	2800      	cmp	r0, #0
 8003db8:	bf14      	ite	ne
 8003dba:	6803      	ldrne	r3, [r0, #0]
 8003dbc:	2300      	moveq	r3, #0
 8003dbe:	2902      	cmp	r1, #2
 8003dc0:	bfa6      	itte	ge
 8003dc2:	6850      	ldrge	r0, [r2, #4]
 8003dc4:	3010      	addge	r0, #16
 8003dc6:	2004      	movlt	r0, #4
 8003dc8:	6800      	ldr	r0, [r0, #0]
 8003dca:	2800      	cmp	r0, #0
 8003dcc:	bf19      	ittee	ne
 8003dce:	6800      	ldrne	r0, [r0, #0]
 8003dd0:	f100 0418 	addne.w	r4, r0, #24
 8003dd4:	2100      	moveq	r1, #0
 8003dd6:	f101 0418 	addeq.w	r4, r1, #24
 8003dda:	f103 0108 	add.w	r1, r3, #8
 8003dde:	680a      	ldr	r2, [r1, #0]
 8003de0:	0a12      	lsrs	r2, r2, #8
 8003de2:	d01f      	beq.n	8003e24 <forward_reciprocal+0x84>
 8003de4:	684e      	ldr	r6, [r1, #4]
 8003de6:	4610      	mov	r0, r2
 8003de8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003dec:	1f0f      	subs	r7, r1, #4
 8003dee:	f010 0103 	ands.w	r1, r0, #3
 8003df2:	d006      	beq.n	8003e02 <forward_reciprocal+0x62>
 8003df4:	1e52      	subs	r2, r2, #1
 8003df6:	f857 c904 	ldr.w	ip, [r7], #-4
 8003dfa:	1e49      	subs	r1, r1, #1
 8003dfc:	fb0c f505 	mul.w	r5, ip, r5
 8003e00:	d1f8      	bne.n	8003df4 <forward_reciprocal+0x54>
 8003e02:	0880      	lsrs	r0, r0, #2
 8003e04:	d00e      	beq.n	8003e24 <forward_reciprocal+0x84>
 8003e06:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003e0a:	3910      	subs	r1, #16
 8003e0c:	68ca      	ldr	r2, [r1, #12]
 8003e0e:	688e      	ldr	r6, [r1, #8]
 8003e10:	684f      	ldr	r7, [r1, #4]
 8003e12:	f851 c910 	ldr.w	ip, [r1], #-16
 8003e16:	4372      	muls	r2, r6
 8003e18:	437a      	muls	r2, r7
 8003e1a:	fb0c f202 	mul.w	r2, ip, r2
 8003e1e:	4355      	muls	r5, r2
 8003e20:	1e40      	subs	r0, r0, #1
 8003e22:	d1f3      	bne.n	8003e0c <forward_reciprocal+0x6c>
 8003e24:	6998      	ldr	r0, [r3, #24]
 8003e26:	6822      	ldr	r2, [r4, #0]
 8003e28:	6880      	ldr	r0, [r0, #8]
 8003e2a:	6893      	ldr	r3, [r2, #8]
 8003e2c:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003e30:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003e34:	1f09      	subs	r1, r1, #4
 8003e36:	1f22      	subs	r2, r4, #4
 8003e38:	4281      	cmp	r1, r0
 8003e3a:	d331      	bcc.n	8003ea0 <forward_reciprocal+0x100>
 8003e3c:	ed91 0a00 	vldr	s0, [r1]
 8003e40:	1f09      	subs	r1, r1, #4
 8003e42:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003e46:	4281      	cmp	r1, r0
 8003e48:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003e4c:	ed82 0a00 	vstr	s0, [r2]
 8003e50:	d326      	bcc.n	8003ea0 <forward_reciprocal+0x100>
 8003e52:	edd1 0a00 	vldr	s1, [r1]
 8003e56:	1f09      	subs	r1, r1, #4
 8003e58:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003e5c:	1f13      	subs	r3, r2, #4
 8003e5e:	4281      	cmp	r1, r0
 8003e60:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8003e64:	ed83 1a00 	vstr	s2, [r3]
 8003e68:	d31a      	bcc.n	8003ea0 <forward_reciprocal+0x100>
 8003e6a:	ed91 0a00 	vldr	s0, [r1]
 8003e6e:	1f09      	subs	r1, r1, #4
 8003e70:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003e74:	f1a2 0408 	sub.w	r4, r2, #8
 8003e78:	4281      	cmp	r1, r0
 8003e7a:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003e7e:	ed84 0a00 	vstr	s0, [r4]
 8003e82:	d30d      	bcc.n	8003ea0 <forward_reciprocal+0x100>
 8003e84:	edd1 0a00 	vldr	s1, [r1]
 8003e88:	f1a2 030c 	sub.w	r3, r2, #12
 8003e8c:	1f09      	subs	r1, r1, #4
 8003e8e:	3a10      	subs	r2, #16
 8003e90:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003e94:	4281      	cmp	r1, r0
 8003e96:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8003e9a:	ed83 1a00 	vstr	s2, [r3]
 8003e9e:	d2cd      	bcs.n	8003e3c <forward_reciprocal+0x9c>
 8003ea0:	bcf0      	pop	{r4, r5, r6, r7}
 8003ea2:	4770      	bx	lr

08003ea4 <nl_func_exp_array_f32>:
 8003ea4:	b570      	push	{r4, r5, r6, lr}
 8003ea6:	688c      	ldr	r4, [r1, #8]
 8003ea8:	6880      	ldr	r0, [r0, #8]
 8003eaa:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003eae:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003eb2:	1f0d      	subs	r5, r1, #4
 8003eb4:	1f16      	subs	r6, r2, #4
 8003eb6:	42a5      	cmp	r5, r4
 8003eb8:	f0c0 800a 	bcc.w	8003ed0 <nl_func_exp_array_f32+0x2c>
 8003ebc:	ed95 0a00 	vldr	s0, [r5]
 8003ec0:	1f2d      	subs	r5, r5, #4
 8003ec2:	f00f f8ab 	bl	801301c <expf>
 8003ec6:	ed86 0a00 	vstr	s0, [r6]
 8003eca:	1f36      	subs	r6, r6, #4
 8003ecc:	42a5      	cmp	r5, r4
 8003ece:	d2f5      	bcs.n	8003ebc <nl_func_exp_array_f32+0x18>
 8003ed0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ed4 <forward_exp>:
 8003ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ed6:	b081      	sub	sp, #4
 8003ed8:	6942      	ldr	r2, [r0, #20]
 8003eda:	f04f 0501 	mov.w	r5, #1
 8003ede:	8811      	ldrh	r1, [r2, #0]
 8003ee0:	2900      	cmp	r1, #0
 8003ee2:	bf1a      	itte	ne
 8003ee4:	6850      	ldrne	r0, [r2, #4]
 8003ee6:	1d00      	addne	r0, r0, #4
 8003ee8:	2004      	moveq	r0, #4
 8003eea:	6800      	ldr	r0, [r0, #0]
 8003eec:	2800      	cmp	r0, #0
 8003eee:	bf14      	ite	ne
 8003ef0:	6803      	ldrne	r3, [r0, #0]
 8003ef2:	2300      	moveq	r3, #0
 8003ef4:	2902      	cmp	r1, #2
 8003ef6:	bfa6      	itte	ge
 8003ef8:	6850      	ldrge	r0, [r2, #4]
 8003efa:	3010      	addge	r0, #16
 8003efc:	2004      	movlt	r0, #4
 8003efe:	6800      	ldr	r0, [r0, #0]
 8003f00:	2800      	cmp	r0, #0
 8003f02:	bf19      	ittee	ne
 8003f04:	6800      	ldrne	r0, [r0, #0]
 8003f06:	f100 0418 	addne.w	r4, r0, #24
 8003f0a:	2100      	moveq	r1, #0
 8003f0c:	f101 0418 	addeq.w	r4, r1, #24
 8003f10:	f103 0108 	add.w	r1, r3, #8
 8003f14:	680a      	ldr	r2, [r1, #0]
 8003f16:	0a12      	lsrs	r2, r2, #8
 8003f18:	d01f      	beq.n	8003f5a <forward_exp+0x86>
 8003f1a:	684e      	ldr	r6, [r1, #4]
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003f22:	1f0f      	subs	r7, r1, #4
 8003f24:	f010 0103 	ands.w	r1, r0, #3
 8003f28:	d006      	beq.n	8003f38 <forward_exp+0x64>
 8003f2a:	1e52      	subs	r2, r2, #1
 8003f2c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003f30:	1e49      	subs	r1, r1, #1
 8003f32:	fb0c f505 	mul.w	r5, ip, r5
 8003f36:	d1f8      	bne.n	8003f2a <forward_exp+0x56>
 8003f38:	0880      	lsrs	r0, r0, #2
 8003f3a:	d00e      	beq.n	8003f5a <forward_exp+0x86>
 8003f3c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003f40:	3910      	subs	r1, #16
 8003f42:	68ca      	ldr	r2, [r1, #12]
 8003f44:	688e      	ldr	r6, [r1, #8]
 8003f46:	684f      	ldr	r7, [r1, #4]
 8003f48:	f851 c910 	ldr.w	ip, [r1], #-16
 8003f4c:	4372      	muls	r2, r6
 8003f4e:	437a      	muls	r2, r7
 8003f50:	fb0c f202 	mul.w	r2, ip, r2
 8003f54:	4355      	muls	r5, r2
 8003f56:	1e40      	subs	r0, r0, #1
 8003f58:	d1f3      	bne.n	8003f42 <forward_exp+0x6e>
 8003f5a:	6998      	ldr	r0, [r3, #24]
 8003f5c:	6821      	ldr	r1, [r4, #0]
 8003f5e:	6886      	ldr	r6, [r0, #8]
 8003f60:	688a      	ldr	r2, [r1, #8]
 8003f62:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003f66:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003f6a:	1f07      	subs	r7, r0, #4
 8003f6c:	1f1c      	subs	r4, r3, #4
 8003f6e:	42b7      	cmp	r7, r6
 8003f70:	f0c0 800a 	bcc.w	8003f88 <forward_exp+0xb4>
 8003f74:	ed97 0a00 	vldr	s0, [r7]
 8003f78:	1f3f      	subs	r7, r7, #4
 8003f7a:	f00f f84f 	bl	801301c <expf>
 8003f7e:	ed84 0a00 	vstr	s0, [r4]
 8003f82:	1f24      	subs	r4, r4, #4
 8003f84:	42b7      	cmp	r7, r6
 8003f86:	d2f5      	bcs.n	8003f74 <forward_exp+0xa0>
 8003f88:	b001      	add	sp, #4
 8003f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f8c <nl_func_sigmoid_array_f32>:
 8003f8c:	b570      	push	{r4, r5, r6, lr}
 8003f8e:	688c      	ldr	r4, [r1, #8]
 8003f90:	6880      	ldr	r0, [r0, #8]
 8003f92:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003f96:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003f9a:	1f0d      	subs	r5, r1, #4
 8003f9c:	1f16      	subs	r6, r2, #4
 8003f9e:	42a5      	cmp	r5, r4
 8003fa0:	f0c0 8014 	bcc.w	8003fcc <nl_func_sigmoid_array_f32+0x40>
 8003fa4:	ed95 0a00 	vldr	s0, [r5]
 8003fa8:	1f2d      	subs	r5, r5, #4
 8003faa:	eeb1 0a40 	vneg.f32	s0, s0
 8003fae:	f00f f835 	bl	801301c <expf>
 8003fb2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003fb6:	ee70 0a20 	vadd.f32	s1, s0, s1
 8003fba:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003fbe:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8003fc2:	ed86 1a00 	vstr	s2, [r6]
 8003fc6:	1f36      	subs	r6, r6, #4
 8003fc8:	42a5      	cmp	r5, r4
 8003fca:	d2eb      	bcs.n	8003fa4 <nl_func_sigmoid_array_f32+0x18>
 8003fcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08003fd0 <forward_sigmoid>:
 8003fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fd2:	b081      	sub	sp, #4
 8003fd4:	6942      	ldr	r2, [r0, #20]
 8003fd6:	f04f 0501 	mov.w	r5, #1
 8003fda:	8811      	ldrh	r1, [r2, #0]
 8003fdc:	2900      	cmp	r1, #0
 8003fde:	bf1a      	itte	ne
 8003fe0:	6850      	ldrne	r0, [r2, #4]
 8003fe2:	1d00      	addne	r0, r0, #4
 8003fe4:	2004      	moveq	r0, #4
 8003fe6:	6800      	ldr	r0, [r0, #0]
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	bf14      	ite	ne
 8003fec:	6803      	ldrne	r3, [r0, #0]
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	2902      	cmp	r1, #2
 8003ff2:	bfa6      	itte	ge
 8003ff4:	6850      	ldrge	r0, [r2, #4]
 8003ff6:	3010      	addge	r0, #16
 8003ff8:	2004      	movlt	r0, #4
 8003ffa:	6800      	ldr	r0, [r0, #0]
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	bf19      	ittee	ne
 8004000:	6800      	ldrne	r0, [r0, #0]
 8004002:	f100 0418 	addne.w	r4, r0, #24
 8004006:	2100      	moveq	r1, #0
 8004008:	f101 0418 	addeq.w	r4, r1, #24
 800400c:	f103 0108 	add.w	r1, r3, #8
 8004010:	680a      	ldr	r2, [r1, #0]
 8004012:	0a12      	lsrs	r2, r2, #8
 8004014:	d01f      	beq.n	8004056 <forward_sigmoid+0x86>
 8004016:	684e      	ldr	r6, [r1, #4]
 8004018:	4610      	mov	r0, r2
 800401a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800401e:	1f0f      	subs	r7, r1, #4
 8004020:	f010 0103 	ands.w	r1, r0, #3
 8004024:	d006      	beq.n	8004034 <forward_sigmoid+0x64>
 8004026:	1e52      	subs	r2, r2, #1
 8004028:	f857 c904 	ldr.w	ip, [r7], #-4
 800402c:	1e49      	subs	r1, r1, #1
 800402e:	fb0c f505 	mul.w	r5, ip, r5
 8004032:	d1f8      	bne.n	8004026 <forward_sigmoid+0x56>
 8004034:	0880      	lsrs	r0, r0, #2
 8004036:	d00e      	beq.n	8004056 <forward_sigmoid+0x86>
 8004038:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800403c:	3910      	subs	r1, #16
 800403e:	68ca      	ldr	r2, [r1, #12]
 8004040:	688e      	ldr	r6, [r1, #8]
 8004042:	684f      	ldr	r7, [r1, #4]
 8004044:	f851 c910 	ldr.w	ip, [r1], #-16
 8004048:	4372      	muls	r2, r6
 800404a:	437a      	muls	r2, r7
 800404c:	fb0c f202 	mul.w	r2, ip, r2
 8004050:	4355      	muls	r5, r2
 8004052:	1e40      	subs	r0, r0, #1
 8004054:	d1f3      	bne.n	800403e <forward_sigmoid+0x6e>
 8004056:	6998      	ldr	r0, [r3, #24]
 8004058:	6821      	ldr	r1, [r4, #0]
 800405a:	6886      	ldr	r6, [r0, #8]
 800405c:	688a      	ldr	r2, [r1, #8]
 800405e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004062:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004066:	1f07      	subs	r7, r0, #4
 8004068:	1f1c      	subs	r4, r3, #4
 800406a:	42b7      	cmp	r7, r6
 800406c:	f0c0 8014 	bcc.w	8004098 <forward_sigmoid+0xc8>
 8004070:	ed97 0a00 	vldr	s0, [r7]
 8004074:	1f3f      	subs	r7, r7, #4
 8004076:	eeb1 0a40 	vneg.f32	s0, s0
 800407a:	f00e ffcf 	bl	801301c <expf>
 800407e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004082:	ee70 0a20 	vadd.f32	s1, s0, s1
 8004086:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800408a:	ee81 1a20 	vdiv.f32	s2, s2, s1
 800408e:	ed84 1a00 	vstr	s2, [r4]
 8004092:	1f24      	subs	r4, r4, #4
 8004094:	42b7      	cmp	r7, r6
 8004096:	d2eb      	bcs.n	8004070 <forward_sigmoid+0xa0>
 8004098:	b001      	add	sp, #4
 800409a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800409c <nl_func_sign_array_f32>:
 800409c:	6889      	ldr	r1, [r1, #8]
 800409e:	6880      	ldr	r0, [r0, #8]
 80040a0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80040a4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80040a8:	1f1b      	subs	r3, r3, #4
 80040aa:	1f10      	subs	r0, r2, #4
 80040ac:	428b      	cmp	r3, r1
 80040ae:	d314      	bcc.n	80040da <nl_func_sign_array_f32+0x3e>
 80040b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040b4:	ed93 0a00 	vldr	s0, [r3]
 80040b8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80040bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c0:	bfcc      	ite	gt
 80040c2:	ed9f 0a39 	vldrgt	s0, [pc, #228]	; 80041a8 <.text_49>
 80040c6:	ee00 2a10 	vmovle	s0, r2
 80040ca:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80040ce:	1f1b      	subs	r3, r3, #4
 80040d0:	ed80 0a00 	vstr	s0, [r0]
 80040d4:	1f00      	subs	r0, r0, #4
 80040d6:	428b      	cmp	r3, r1
 80040d8:	d2ec      	bcs.n	80040b4 <nl_func_sign_array_f32+0x18>
 80040da:	4770      	bx	lr

080040dc <forward_sign>:
 80040dc:	b4f0      	push	{r4, r5, r6, r7}
 80040de:	6942      	ldr	r2, [r0, #20]
 80040e0:	f04f 0501 	mov.w	r5, #1
 80040e4:	8811      	ldrh	r1, [r2, #0]
 80040e6:	2900      	cmp	r1, #0
 80040e8:	bf1a      	itte	ne
 80040ea:	6850      	ldrne	r0, [r2, #4]
 80040ec:	1d00      	addne	r0, r0, #4
 80040ee:	2004      	moveq	r0, #4
 80040f0:	6800      	ldr	r0, [r0, #0]
 80040f2:	2800      	cmp	r0, #0
 80040f4:	bf14      	ite	ne
 80040f6:	6803      	ldrne	r3, [r0, #0]
 80040f8:	2300      	moveq	r3, #0
 80040fa:	2901      	cmp	r1, #1
 80040fc:	bfc6      	itte	gt
 80040fe:	6850      	ldrgt	r0, [r2, #4]
 8004100:	3010      	addgt	r0, #16
 8004102:	2004      	movle	r0, #4
 8004104:	6800      	ldr	r0, [r0, #0]
 8004106:	2800      	cmp	r0, #0
 8004108:	bf19      	ittee	ne
 800410a:	6800      	ldrne	r0, [r0, #0]
 800410c:	f100 0418 	addne.w	r4, r0, #24
 8004110:	2100      	moveq	r1, #0
 8004112:	f101 0418 	addeq.w	r4, r1, #24
 8004116:	f103 0108 	add.w	r1, r3, #8
 800411a:	680a      	ldr	r2, [r1, #0]
 800411c:	0a12      	lsrs	r2, r2, #8
 800411e:	d01f      	beq.n	8004160 <forward_sign+0x84>
 8004120:	684e      	ldr	r6, [r1, #4]
 8004122:	4610      	mov	r0, r2
 8004124:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004128:	1f0f      	subs	r7, r1, #4
 800412a:	f010 0103 	ands.w	r1, r0, #3
 800412e:	d006      	beq.n	800413e <forward_sign+0x62>
 8004130:	1e52      	subs	r2, r2, #1
 8004132:	f857 c904 	ldr.w	ip, [r7], #-4
 8004136:	1e49      	subs	r1, r1, #1
 8004138:	fb0c f505 	mul.w	r5, ip, r5
 800413c:	d1f8      	bne.n	8004130 <forward_sign+0x54>
 800413e:	0880      	lsrs	r0, r0, #2
 8004140:	d00e      	beq.n	8004160 <forward_sign+0x84>
 8004142:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004146:	3910      	subs	r1, #16
 8004148:	68ca      	ldr	r2, [r1, #12]
 800414a:	688e      	ldr	r6, [r1, #8]
 800414c:	684f      	ldr	r7, [r1, #4]
 800414e:	f851 c910 	ldr.w	ip, [r1], #-16
 8004152:	4372      	muls	r2, r6
 8004154:	437a      	muls	r2, r7
 8004156:	fb0c f202 	mul.w	r2, ip, r2
 800415a:	4355      	muls	r5, r2
 800415c:	1e40      	subs	r0, r0, #1
 800415e:	d1f3      	bne.n	8004148 <forward_sign+0x6c>
 8004160:	6998      	ldr	r0, [r3, #24]
 8004162:	6822      	ldr	r2, [r4, #0]
 8004164:	6880      	ldr	r0, [r0, #8]
 8004166:	6893      	ldr	r3, [r2, #8]
 8004168:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800416c:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004170:	1f09      	subs	r1, r1, #4
 8004172:	1f22      	subs	r2, r4, #4
 8004174:	4281      	cmp	r1, r0
 8004176:	d314      	bcc.n	80041a2 <forward_sign+0xc6>
 8004178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800417c:	ed91 0a00 	vldr	s0, [r1]
 8004180:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004188:	bfcc      	ite	gt
 800418a:	ed9f 0a07 	vldrgt	s0, [pc, #28]	; 80041a8 <.text_49>
 800418e:	ee00 3a10 	vmovle	s0, r3
 8004192:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8004196:	1f09      	subs	r1, r1, #4
 8004198:	ed82 0a00 	vstr	s0, [r2]
 800419c:	1f12      	subs	r2, r2, #4
 800419e:	4281      	cmp	r1, r0
 80041a0:	d2ec      	bcs.n	800417c <forward_sign+0xa0>
 80041a2:	bcf0      	pop	{r4, r5, r6, r7}
 80041a4:	4770      	bx	lr
	...

080041a8 <.text_49>:
 80041a8:	00000001 	.word	0x00000001

080041ac <nl_func_sqrt_array_f32>:
 80041ac:	b570      	push	{r4, r5, r6, lr}
 80041ae:	460c      	mov	r4, r1
 80041b0:	6880      	ldr	r0, [r0, #8]
 80041b2:	68a1      	ldr	r1, [r4, #8]
 80041b4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80041b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80041bc:	1f1d      	subs	r5, r3, #4
 80041be:	1f16      	subs	r6, r2, #4
 80041c0:	428d      	cmp	r5, r1
 80041c2:	d30a      	bcc.n	80041da <nl_func_sqrt_array_f32+0x2e>
 80041c4:	ed95 0a00 	vldr	s0, [r5]
 80041c8:	1f2d      	subs	r5, r5, #4
 80041ca:	f002 fb1f 	bl	800680c <ai_math_sqrt>
 80041ce:	ed86 0a00 	vstr	s0, [r6]
 80041d2:	68a0      	ldr	r0, [r4, #8]
 80041d4:	1f36      	subs	r6, r6, #4
 80041d6:	4285      	cmp	r5, r0
 80041d8:	d2f4      	bcs.n	80041c4 <nl_func_sqrt_array_f32+0x18>
 80041da:	bd70      	pop	{r4, r5, r6, pc}

080041dc <forward_sqrt>:
 80041dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041de:	b081      	sub	sp, #4
 80041e0:	6942      	ldr	r2, [r0, #20]
 80041e2:	f04f 0501 	mov.w	r5, #1
 80041e6:	8811      	ldrh	r1, [r2, #0]
 80041e8:	2900      	cmp	r1, #0
 80041ea:	bf1a      	itte	ne
 80041ec:	6850      	ldrne	r0, [r2, #4]
 80041ee:	1d00      	addne	r0, r0, #4
 80041f0:	2004      	moveq	r0, #4
 80041f2:	6800      	ldr	r0, [r0, #0]
 80041f4:	2800      	cmp	r0, #0
 80041f6:	bf14      	ite	ne
 80041f8:	6803      	ldrne	r3, [r0, #0]
 80041fa:	2300      	moveq	r3, #0
 80041fc:	2902      	cmp	r1, #2
 80041fe:	bfa6      	itte	ge
 8004200:	6850      	ldrge	r0, [r2, #4]
 8004202:	3010      	addge	r0, #16
 8004204:	2004      	movlt	r0, #4
 8004206:	6800      	ldr	r0, [r0, #0]
 8004208:	2800      	cmp	r0, #0
 800420a:	bf19      	ittee	ne
 800420c:	6800      	ldrne	r0, [r0, #0]
 800420e:	f100 0418 	addne.w	r4, r0, #24
 8004212:	2100      	moveq	r1, #0
 8004214:	f101 0418 	addeq.w	r4, r1, #24
 8004218:	f103 0108 	add.w	r1, r3, #8
 800421c:	680a      	ldr	r2, [r1, #0]
 800421e:	0a12      	lsrs	r2, r2, #8
 8004220:	d01f      	beq.n	8004262 <forward_sqrt+0x86>
 8004222:	684e      	ldr	r6, [r1, #4]
 8004224:	4610      	mov	r0, r2
 8004226:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800422a:	1f0f      	subs	r7, r1, #4
 800422c:	f010 0103 	ands.w	r1, r0, #3
 8004230:	d006      	beq.n	8004240 <forward_sqrt+0x64>
 8004232:	1e52      	subs	r2, r2, #1
 8004234:	f857 c904 	ldr.w	ip, [r7], #-4
 8004238:	1e49      	subs	r1, r1, #1
 800423a:	fb0c f505 	mul.w	r5, ip, r5
 800423e:	d1f8      	bne.n	8004232 <forward_sqrt+0x56>
 8004240:	0880      	lsrs	r0, r0, #2
 8004242:	d00e      	beq.n	8004262 <forward_sqrt+0x86>
 8004244:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004248:	3910      	subs	r1, #16
 800424a:	68ca      	ldr	r2, [r1, #12]
 800424c:	688e      	ldr	r6, [r1, #8]
 800424e:	684f      	ldr	r7, [r1, #4]
 8004250:	f851 c910 	ldr.w	ip, [r1], #-16
 8004254:	4372      	muls	r2, r6
 8004256:	437a      	muls	r2, r7
 8004258:	fb0c f202 	mul.w	r2, ip, r2
 800425c:	4355      	muls	r5, r2
 800425e:	1e40      	subs	r0, r0, #1
 8004260:	d1f3      	bne.n	800424a <forward_sqrt+0x6e>
 8004262:	699e      	ldr	r6, [r3, #24]
 8004264:	6822      	ldr	r2, [r4, #0]
 8004266:	68b0      	ldr	r0, [r6, #8]
 8004268:	6893      	ldr	r3, [r2, #8]
 800426a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800426e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004272:	1f0f      	subs	r7, r1, #4
 8004274:	1f24      	subs	r4, r4, #4
 8004276:	4287      	cmp	r7, r0
 8004278:	f0c0 800b 	bcc.w	8004292 <forward_sqrt+0xb6>
 800427c:	ed97 0a00 	vldr	s0, [r7]
 8004280:	1f3f      	subs	r7, r7, #4
 8004282:	f002 fac3 	bl	800680c <ai_math_sqrt>
 8004286:	ed84 0a00 	vstr	s0, [r4]
 800428a:	68b0      	ldr	r0, [r6, #8]
 800428c:	1f24      	subs	r4, r4, #4
 800428e:	4287      	cmp	r7, r0
 8004290:	d2f4      	bcs.n	800427c <forward_sqrt+0xa0>
 8004292:	b001      	add	sp, #4
 8004294:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004298 <nl_func_soft_plus_array_f32>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	688c      	ldr	r4, [r1, #8]
 800429c:	6880      	ldr	r0, [r0, #8]
 800429e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80042a2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80042a6:	1f0d      	subs	r5, r1, #4
 80042a8:	1f16      	subs	r6, r2, #4
 80042aa:	42a5      	cmp	r5, r4
 80042ac:	f0c0 8010 	bcc.w	80042d0 <nl_func_soft_plus_array_f32+0x38>
 80042b0:	ed95 0a00 	vldr	s0, [r5]
 80042b4:	1f2d      	subs	r5, r5, #4
 80042b6:	f00e feb1 	bl	801301c <expf>
 80042ba:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80042be:	ee30 0a20 	vadd.f32	s0, s0, s1
 80042c2:	f00e ff81 	bl	80131c8 <logf>
 80042c6:	ed86 0a00 	vstr	s0, [r6]
 80042ca:	1f36      	subs	r6, r6, #4
 80042cc:	42a5      	cmp	r5, r4
 80042ce:	d2ef      	bcs.n	80042b0 <nl_func_soft_plus_array_f32+0x18>
 80042d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080042d4 <forward_soft_plus>:
 80042d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042d6:	b081      	sub	sp, #4
 80042d8:	6942      	ldr	r2, [r0, #20]
 80042da:	f04f 0501 	mov.w	r5, #1
 80042de:	8811      	ldrh	r1, [r2, #0]
 80042e0:	2900      	cmp	r1, #0
 80042e2:	bf1a      	itte	ne
 80042e4:	6850      	ldrne	r0, [r2, #4]
 80042e6:	1d00      	addne	r0, r0, #4
 80042e8:	2004      	moveq	r0, #4
 80042ea:	6800      	ldr	r0, [r0, #0]
 80042ec:	2800      	cmp	r0, #0
 80042ee:	bf14      	ite	ne
 80042f0:	6803      	ldrne	r3, [r0, #0]
 80042f2:	2300      	moveq	r3, #0
 80042f4:	2902      	cmp	r1, #2
 80042f6:	bfa6      	itte	ge
 80042f8:	6850      	ldrge	r0, [r2, #4]
 80042fa:	3010      	addge	r0, #16
 80042fc:	2004      	movlt	r0, #4
 80042fe:	6800      	ldr	r0, [r0, #0]
 8004300:	2800      	cmp	r0, #0
 8004302:	bf19      	ittee	ne
 8004304:	6800      	ldrne	r0, [r0, #0]
 8004306:	f100 0418 	addne.w	r4, r0, #24
 800430a:	2100      	moveq	r1, #0
 800430c:	f101 0418 	addeq.w	r4, r1, #24
 8004310:	f103 0108 	add.w	r1, r3, #8
 8004314:	680a      	ldr	r2, [r1, #0]
 8004316:	0a12      	lsrs	r2, r2, #8
 8004318:	d01f      	beq.n	800435a <forward_soft_plus+0x86>
 800431a:	684e      	ldr	r6, [r1, #4]
 800431c:	4610      	mov	r0, r2
 800431e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004322:	1f0f      	subs	r7, r1, #4
 8004324:	f010 0103 	ands.w	r1, r0, #3
 8004328:	d006      	beq.n	8004338 <forward_soft_plus+0x64>
 800432a:	1e52      	subs	r2, r2, #1
 800432c:	f857 c904 	ldr.w	ip, [r7], #-4
 8004330:	1e49      	subs	r1, r1, #1
 8004332:	fb0c f505 	mul.w	r5, ip, r5
 8004336:	d1f8      	bne.n	800432a <forward_soft_plus+0x56>
 8004338:	0880      	lsrs	r0, r0, #2
 800433a:	d00e      	beq.n	800435a <forward_soft_plus+0x86>
 800433c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004340:	3910      	subs	r1, #16
 8004342:	68ca      	ldr	r2, [r1, #12]
 8004344:	688e      	ldr	r6, [r1, #8]
 8004346:	684f      	ldr	r7, [r1, #4]
 8004348:	f851 c910 	ldr.w	ip, [r1], #-16
 800434c:	4372      	muls	r2, r6
 800434e:	437a      	muls	r2, r7
 8004350:	fb0c f202 	mul.w	r2, ip, r2
 8004354:	4355      	muls	r5, r2
 8004356:	1e40      	subs	r0, r0, #1
 8004358:	d1f3      	bne.n	8004342 <forward_soft_plus+0x6e>
 800435a:	6998      	ldr	r0, [r3, #24]
 800435c:	6821      	ldr	r1, [r4, #0]
 800435e:	6886      	ldr	r6, [r0, #8]
 8004360:	688a      	ldr	r2, [r1, #8]
 8004362:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004366:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800436a:	1f07      	subs	r7, r0, #4
 800436c:	1f1c      	subs	r4, r3, #4
 800436e:	42b7      	cmp	r7, r6
 8004370:	f0c0 8010 	bcc.w	8004394 <forward_soft_plus+0xc0>
 8004374:	ed97 0a00 	vldr	s0, [r7]
 8004378:	1f3f      	subs	r7, r7, #4
 800437a:	f00e fe4f 	bl	801301c <expf>
 800437e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004382:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004386:	f00e ff1f 	bl	80131c8 <logf>
 800438a:	ed84 0a00 	vstr	s0, [r4]
 800438e:	1f24      	subs	r4, r4, #4
 8004390:	42b7      	cmp	r7, r6
 8004392:	d2ef      	bcs.n	8004374 <forward_soft_plus+0xa0>
 8004394:	b001      	add	sp, #4
 8004396:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004398 <nl_func_soft_sign_array_f32>:
 8004398:	6889      	ldr	r1, [r1, #8]
 800439a:	6880      	ldr	r0, [r0, #8]
 800439c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80043a0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80043a4:	1f1b      	subs	r3, r3, #4
 80043a6:	1f10      	subs	r0, r2, #4
 80043a8:	428b      	cmp	r3, r1
 80043aa:	d30f      	bcc.n	80043cc <nl_func_soft_sign_array_f32+0x34>
 80043ac:	ed93 0a00 	vldr	s0, [r3]
 80043b0:	1f1b      	subs	r3, r3, #4
 80043b2:	eef0 0ac0 	vabs.f32	s1, s0
 80043b6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80043ba:	ee70 0a81 	vadd.f32	s1, s1, s2
 80043be:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80043c2:	ed80 0a00 	vstr	s0, [r0]
 80043c6:	1f00      	subs	r0, r0, #4
 80043c8:	428b      	cmp	r3, r1
 80043ca:	d2ef      	bcs.n	80043ac <nl_func_soft_sign_array_f32+0x14>
 80043cc:	4770      	bx	lr
	...

080043d0 <forward_soft_sign>:
 80043d0:	b4f0      	push	{r4, r5, r6, r7}
 80043d2:	6942      	ldr	r2, [r0, #20]
 80043d4:	f04f 0501 	mov.w	r5, #1
 80043d8:	8811      	ldrh	r1, [r2, #0]
 80043da:	2900      	cmp	r1, #0
 80043dc:	bf1a      	itte	ne
 80043de:	6850      	ldrne	r0, [r2, #4]
 80043e0:	1d00      	addne	r0, r0, #4
 80043e2:	2004      	moveq	r0, #4
 80043e4:	6800      	ldr	r0, [r0, #0]
 80043e6:	2800      	cmp	r0, #0
 80043e8:	bf14      	ite	ne
 80043ea:	6803      	ldrne	r3, [r0, #0]
 80043ec:	2300      	moveq	r3, #0
 80043ee:	2902      	cmp	r1, #2
 80043f0:	bfa6      	itte	ge
 80043f2:	6850      	ldrge	r0, [r2, #4]
 80043f4:	3010      	addge	r0, #16
 80043f6:	2004      	movlt	r0, #4
 80043f8:	6800      	ldr	r0, [r0, #0]
 80043fa:	2800      	cmp	r0, #0
 80043fc:	bf19      	ittee	ne
 80043fe:	6800      	ldrne	r0, [r0, #0]
 8004400:	f100 0418 	addne.w	r4, r0, #24
 8004404:	2100      	moveq	r1, #0
 8004406:	f101 0418 	addeq.w	r4, r1, #24
 800440a:	f103 0108 	add.w	r1, r3, #8
 800440e:	680a      	ldr	r2, [r1, #0]
 8004410:	0a12      	lsrs	r2, r2, #8
 8004412:	d01f      	beq.n	8004454 <forward_soft_sign+0x84>
 8004414:	684e      	ldr	r6, [r1, #4]
 8004416:	4610      	mov	r0, r2
 8004418:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800441c:	1f0f      	subs	r7, r1, #4
 800441e:	f010 0103 	ands.w	r1, r0, #3
 8004422:	d006      	beq.n	8004432 <forward_soft_sign+0x62>
 8004424:	1e52      	subs	r2, r2, #1
 8004426:	f857 c904 	ldr.w	ip, [r7], #-4
 800442a:	1e49      	subs	r1, r1, #1
 800442c:	fb0c f505 	mul.w	r5, ip, r5
 8004430:	d1f8      	bne.n	8004424 <forward_soft_sign+0x54>
 8004432:	0880      	lsrs	r0, r0, #2
 8004434:	d00e      	beq.n	8004454 <forward_soft_sign+0x84>
 8004436:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800443a:	3910      	subs	r1, #16
 800443c:	68ca      	ldr	r2, [r1, #12]
 800443e:	688e      	ldr	r6, [r1, #8]
 8004440:	684f      	ldr	r7, [r1, #4]
 8004442:	f851 c910 	ldr.w	ip, [r1], #-16
 8004446:	4372      	muls	r2, r6
 8004448:	437a      	muls	r2, r7
 800444a:	fb0c f202 	mul.w	r2, ip, r2
 800444e:	4355      	muls	r5, r2
 8004450:	1e40      	subs	r0, r0, #1
 8004452:	d1f3      	bne.n	800443c <forward_soft_sign+0x6c>
 8004454:	6998      	ldr	r0, [r3, #24]
 8004456:	6822      	ldr	r2, [r4, #0]
 8004458:	6880      	ldr	r0, [r0, #8]
 800445a:	6893      	ldr	r3, [r2, #8]
 800445c:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8004460:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004464:	1f09      	subs	r1, r1, #4
 8004466:	1f22      	subs	r2, r4, #4
 8004468:	4281      	cmp	r1, r0
 800446a:	d30f      	bcc.n	800448c <forward_soft_sign+0xbc>
 800446c:	ed91 0a00 	vldr	s0, [r1]
 8004470:	1f09      	subs	r1, r1, #4
 8004472:	eef0 0ac0 	vabs.f32	s1, s0
 8004476:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800447a:	ee70 0a81 	vadd.f32	s1, s1, s2
 800447e:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004482:	ed82 0a00 	vstr	s0, [r2]
 8004486:	1f12      	subs	r2, r2, #4
 8004488:	4281      	cmp	r1, r0
 800448a:	d2ef      	bcs.n	800446c <forward_soft_sign+0x9c>
 800448c:	bcf0      	pop	{r4, r5, r6, r7}
 800448e:	4770      	bx	lr

08004490 <nl_func_tanh_array_f32>:
 8004490:	b570      	push	{r4, r5, r6, lr}
 8004492:	688c      	ldr	r4, [r1, #8]
 8004494:	6880      	ldr	r0, [r0, #8]
 8004496:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800449a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800449e:	1f0d      	subs	r5, r1, #4
 80044a0:	1f16      	subs	r6, r2, #4
 80044a2:	42a5      	cmp	r5, r4
 80044a4:	f0c0 800a 	bcc.w	80044bc <nl_func_tanh_array_f32+0x2c>
 80044a8:	ed95 0a00 	vldr	s0, [r5]
 80044ac:	1f2d      	subs	r5, r5, #4
 80044ae:	f00e fb35 	bl	8012b1c <tanhf>
 80044b2:	ed86 0a00 	vstr	s0, [r6]
 80044b6:	1f36      	subs	r6, r6, #4
 80044b8:	42a5      	cmp	r5, r4
 80044ba:	d2f5      	bcs.n	80044a8 <nl_func_tanh_array_f32+0x18>
 80044bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080044c0 <forward_tanh>:
 80044c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044c2:	b081      	sub	sp, #4
 80044c4:	6942      	ldr	r2, [r0, #20]
 80044c6:	f04f 0501 	mov.w	r5, #1
 80044ca:	8811      	ldrh	r1, [r2, #0]
 80044cc:	2900      	cmp	r1, #0
 80044ce:	bf1a      	itte	ne
 80044d0:	6850      	ldrne	r0, [r2, #4]
 80044d2:	1d00      	addne	r0, r0, #4
 80044d4:	2004      	moveq	r0, #4
 80044d6:	6800      	ldr	r0, [r0, #0]
 80044d8:	2800      	cmp	r0, #0
 80044da:	bf14      	ite	ne
 80044dc:	6803      	ldrne	r3, [r0, #0]
 80044de:	2300      	moveq	r3, #0
 80044e0:	2902      	cmp	r1, #2
 80044e2:	bfa6      	itte	ge
 80044e4:	6850      	ldrge	r0, [r2, #4]
 80044e6:	3010      	addge	r0, #16
 80044e8:	2004      	movlt	r0, #4
 80044ea:	6800      	ldr	r0, [r0, #0]
 80044ec:	2800      	cmp	r0, #0
 80044ee:	bf19      	ittee	ne
 80044f0:	6800      	ldrne	r0, [r0, #0]
 80044f2:	f100 0418 	addne.w	r4, r0, #24
 80044f6:	2100      	moveq	r1, #0
 80044f8:	f101 0418 	addeq.w	r4, r1, #24
 80044fc:	f103 0108 	add.w	r1, r3, #8
 8004500:	680a      	ldr	r2, [r1, #0]
 8004502:	0a12      	lsrs	r2, r2, #8
 8004504:	d01f      	beq.n	8004546 <forward_tanh+0x86>
 8004506:	684e      	ldr	r6, [r1, #4]
 8004508:	4610      	mov	r0, r2
 800450a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800450e:	1f0f      	subs	r7, r1, #4
 8004510:	f010 0103 	ands.w	r1, r0, #3
 8004514:	d006      	beq.n	8004524 <forward_tanh+0x64>
 8004516:	1e52      	subs	r2, r2, #1
 8004518:	f857 c904 	ldr.w	ip, [r7], #-4
 800451c:	1e49      	subs	r1, r1, #1
 800451e:	fb0c f505 	mul.w	r5, ip, r5
 8004522:	d1f8      	bne.n	8004516 <forward_tanh+0x56>
 8004524:	0880      	lsrs	r0, r0, #2
 8004526:	d00e      	beq.n	8004546 <forward_tanh+0x86>
 8004528:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800452c:	3910      	subs	r1, #16
 800452e:	68ca      	ldr	r2, [r1, #12]
 8004530:	688e      	ldr	r6, [r1, #8]
 8004532:	684f      	ldr	r7, [r1, #4]
 8004534:	f851 c910 	ldr.w	ip, [r1], #-16
 8004538:	4372      	muls	r2, r6
 800453a:	437a      	muls	r2, r7
 800453c:	fb0c f202 	mul.w	r2, ip, r2
 8004540:	4355      	muls	r5, r2
 8004542:	1e40      	subs	r0, r0, #1
 8004544:	d1f3      	bne.n	800452e <forward_tanh+0x6e>
 8004546:	6998      	ldr	r0, [r3, #24]
 8004548:	6821      	ldr	r1, [r4, #0]
 800454a:	6886      	ldr	r6, [r0, #8]
 800454c:	688a      	ldr	r2, [r1, #8]
 800454e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004552:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004556:	1f07      	subs	r7, r0, #4
 8004558:	1f1c      	subs	r4, r3, #4
 800455a:	42b7      	cmp	r7, r6
 800455c:	f0c0 800a 	bcc.w	8004574 <forward_tanh+0xb4>
 8004560:	ed97 0a00 	vldr	s0, [r7]
 8004564:	1f3f      	subs	r7, r7, #4
 8004566:	f00e fad9 	bl	8012b1c <tanhf>
 800456a:	ed84 0a00 	vstr	s0, [r4]
 800456e:	1f24      	subs	r4, r4, #4
 8004570:	42b7      	cmp	r7, r6
 8004572:	d2f5      	bcs.n	8004560 <forward_tanh+0xa0>
 8004574:	b001      	add	sp, #4
 8004576:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004578 <nl_func_relu_array_f32>:
 8004578:	6889      	ldr	r1, [r1, #8]
 800457a:	6880      	ldr	r0, [r0, #8]
 800457c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004580:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004584:	1f1b      	subs	r3, r3, #4
 8004586:	1f10      	subs	r0, r2, #4
 8004588:	428b      	cmp	r3, r1
 800458a:	d30e      	bcc.n	80045aa <nl_func_relu_array_f32+0x32>
 800458c:	ed93 0a00 	vldr	s0, [r3]
 8004590:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004598:	bf48      	it	mi
 800459a:	ed9f 0a7c 	vldrmi	s0, [pc, #496]	; 800478c <.text_62>
 800459e:	ed80 0a00 	vstr	s0, [r0]
 80045a2:	1f1b      	subs	r3, r3, #4
 80045a4:	1f00      	subs	r0, r0, #4
 80045a6:	428b      	cmp	r3, r1
 80045a8:	d2f0      	bcs.n	800458c <nl_func_relu_array_f32+0x14>
 80045aa:	4770      	bx	lr

080045ac <nl_func_sm_channel_f32>:
 80045ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045b0:	4614      	mov	r4, r2
 80045b2:	2c02      	cmp	r4, #2
 80045b4:	ed2d 8b02 	vpush	{d8}
 80045b8:	688f      	ldr	r7, [r1, #8]
 80045ba:	6886      	ldr	r6, [r0, #8]
 80045bc:	eddf 8a73 	vldr	s17, [pc, #460]	; 800478c <.text_62>
 80045c0:	ed97 8a00 	vldr	s16, [r7]
 80045c4:	d33d      	bcc.n	8004642 <nl_func_sm_channel_f32+0x96>
 80045c6:	1e61      	subs	r1, r4, #1
 80045c8:	1d3a      	adds	r2, r7, #4
 80045ca:	f011 0003 	ands.w	r0, r1, #3
 80045ce:	d00c      	beq.n	80045ea <nl_func_sm_channel_f32+0x3e>
 80045d0:	ed92 0a00 	vldr	s0, [r2]
 80045d4:	f102 0204 	add.w	r2, r2, #4
 80045d8:	eeb4 0a48 	vcmp.f32	s0, s16
 80045dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e0:	bf58      	it	pl
 80045e2:	eeb0 8a40 	vmovpl.f32	s16, s0
 80045e6:	1e40      	subs	r0, r0, #1
 80045e8:	d1f2      	bne.n	80045d0 <nl_func_sm_channel_f32+0x24>
 80045ea:	0889      	lsrs	r1, r1, #2
 80045ec:	f000 802b 	beq.w	8004646 <nl_func_sm_channel_f32+0x9a>
 80045f0:	ed92 0a00 	vldr	s0, [r2]
 80045f4:	eeb4 0a48 	vcmp.f32	s0, s16
 80045f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045fc:	bf58      	it	pl
 80045fe:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004602:	ed92 0a01 	vldr	s0, [r2, #4]
 8004606:	eeb4 0a48 	vcmp.f32	s0, s16
 800460a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800460e:	bf58      	it	pl
 8004610:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004614:	ed92 0a02 	vldr	s0, [r2, #8]
 8004618:	eeb4 0a48 	vcmp.f32	s0, s16
 800461c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004620:	bf58      	it	pl
 8004622:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004626:	ed92 0a03 	vldr	s0, [r2, #12]
 800462a:	f102 0210 	add.w	r2, r2, #16
 800462e:	eeb4 0a48 	vcmp.f32	s0, s16
 8004632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004636:	bf58      	it	pl
 8004638:	eeb0 8a40 	vmovpl.f32	s16, s0
 800463c:	1e49      	subs	r1, r1, #1
 800463e:	d1d7      	bne.n	80045f0 <nl_func_sm_channel_f32+0x44>
 8004640:	e001      	b.n	8004646 <nl_func_sm_channel_f32+0x9a>
 8004642:	2c00      	cmp	r4, #0
 8004644:	d040      	beq.n	80046c8 <nl_func_sm_channel_f32+0x11c>
 8004646:	46b0      	mov	r8, r6
 8004648:	ea4f 0504 	mov.w	r5, r4
 800464c:	ed97 0a00 	vldr	s0, [r7]
 8004650:	1d3f      	adds	r7, r7, #4
 8004652:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004656:	f00e fce1 	bl	801301c <expf>
 800465a:	1e6d      	subs	r5, r5, #1
 800465c:	ed88 0a00 	vstr	s0, [r8]
 8004660:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004664:	f108 0804 	add.w	r8, r8, #4
 8004668:	d1f0      	bne.n	800464c <nl_func_sm_channel_f32+0xa0>
 800466a:	f014 0003 	ands.w	r0, r4, #3
 800466e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004672:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8004676:	d009      	beq.n	800468c <nl_func_sm_channel_f32+0xe0>
 8004678:	edd6 0a00 	vldr	s1, [r6]
 800467c:	1e40      	subs	r0, r0, #1
 800467e:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004682:	edc6 0a00 	vstr	s1, [r6]
 8004686:	f106 0604 	add.w	r6, r6, #4
 800468a:	d1f5      	bne.n	8004678 <nl_func_sm_channel_f32+0xcc>
 800468c:	08a4      	lsrs	r4, r4, #2
 800468e:	d01b      	beq.n	80046c8 <nl_func_sm_channel_f32+0x11c>
 8004690:	edd6 0a00 	vldr	s1, [r6]
 8004694:	1e64      	subs	r4, r4, #1
 8004696:	ee60 0a80 	vmul.f32	s1, s1, s0
 800469a:	edc6 0a00 	vstr	s1, [r6]
 800469e:	ed96 1a01 	vldr	s2, [r6, #4]
 80046a2:	ee21 1a00 	vmul.f32	s2, s2, s0
 80046a6:	ed86 1a01 	vstr	s2, [r6, #4]
 80046aa:	edd6 0a02 	vldr	s1, [r6, #8]
 80046ae:	ed96 1a03 	vldr	s2, [r6, #12]
 80046b2:	ee60 1a80 	vmul.f32	s3, s1, s0
 80046b6:	ee61 0a00 	vmul.f32	s1, s2, s0
 80046ba:	edc6 1a02 	vstr	s3, [r6, #8]
 80046be:	edc6 0a03 	vstr	s1, [r6, #12]
 80046c2:	f106 0610 	add.w	r6, r6, #16
 80046c6:	d1e3      	bne.n	8004690 <nl_func_sm_channel_f32+0xe4>
 80046c8:	ecbd 8b02 	vpop	{d8}
 80046cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080046d0 <nl_func_sm_array_f32>:
 80046d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046d4:	4604      	mov	r4, r0
 80046d6:	460d      	mov	r5, r1
 80046d8:	9f08      	ldr	r7, [sp, #32]
 80046da:	68a8      	ldr	r0, [r5, #8]
 80046dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80046de:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80046e2:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80046e6:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80046ea:	00bf      	lsls	r7, r7, #2
 80046ec:	427f      	negs	r7, r7
 80046ee:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 80046f2:	00b6      	lsls	r6, r6, #2
 80046f4:	eb01 0a07 	add.w	sl, r1, r7
 80046f8:	4276      	negs	r6, r6
 80046fa:	45e2      	cmp	sl, ip
 80046fc:	eb02 0906 	add.w	r9, r2, r6
 8004700:	d310      	bcc.n	8004724 <nl_func_sm_array_f32+0x54>
 8004702:	4698      	mov	r8, r3
 8004704:	f8c5 a008 	str.w	sl, [r5, #8]
 8004708:	2300      	movs	r3, #0
 800470a:	f8c4 9008 	str.w	r9, [r4, #8]
 800470e:	4642      	mov	r2, r8
 8004710:	4629      	mov	r1, r5
 8004712:	4620      	mov	r0, r4
 8004714:	f7ff ff4a 	bl	80045ac <nl_func_sm_channel_f32>
 8004718:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800471c:	44ba      	add	sl, r7
 800471e:	44b1      	add	r9, r6
 8004720:	45e2      	cmp	sl, ip
 8004722:	d2ef      	bcs.n	8004704 <nl_func_sm_array_f32+0x34>
 8004724:	68e8      	ldr	r0, [r5, #12]
 8004726:	60a8      	str	r0, [r5, #8]
 8004728:	68e1      	ldr	r1, [r4, #12]
 800472a:	60a1      	str	r1, [r4, #8]
 800472c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004730 <nl_func_hard_sigmoid_array_f32>:
 8004730:	6889      	ldr	r1, [r1, #8]
 8004732:	6880      	ldr	r0, [r0, #8]
 8004734:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004738:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800473c:	1f1b      	subs	r3, r3, #4
 800473e:	1f10      	subs	r0, r2, #4
 8004740:	428b      	cmp	r3, r1
 8004742:	d321      	bcc.n	8004788 <nl_func_hard_sigmoid_array_f32+0x58>
 8004744:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004748:	eddf 0aba 	vldr	s1, [pc, #744]	; 8004a34 <.text_68>
 800474c:	edd3 1a00 	vldr	s3, [r3]
 8004750:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8004a38 <.text_69>
 8004754:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004758:	ee01 1a82 	vmla.f32	s2, s3, s4
 800475c:	eeb4 1a60 	vcmp.f32	s2, s1
 8004760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004764:	da08      	bge.n	8004778 <nl_func_hard_sigmoid_array_f32+0x48>
 8004766:	eeb5 1a40 	vcmp.f32	s2, #0.0
 800476a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476e:	d505      	bpl.n	800477c <nl_func_hard_sigmoid_array_f32+0x4c>
 8004770:	ed9f 1a06 	vldr	s2, [pc, #24]	; 800478c <.text_62>
 8004774:	e002      	b.n	800477c <nl_func_hard_sigmoid_array_f32+0x4c>
 8004776:	bf00      	nop
 8004778:	eeb0 1a40 	vmov.f32	s2, s0
 800477c:	ed80 1a00 	vstr	s2, [r0]
 8004780:	1f1b      	subs	r3, r3, #4
 8004782:	1f00      	subs	r0, r0, #4
 8004784:	428b      	cmp	r3, r1
 8004786:	d2e1      	bcs.n	800474c <nl_func_hard_sigmoid_array_f32+0x1c>
 8004788:	4770      	bx	lr
	...

0800478c <.text_62>:
 800478c:	00000000 	.word	0x00000000

08004790 <nl_func_clip_array_f32>:
 8004790:	6889      	ldr	r1, [r1, #8]
 8004792:	6880      	ldr	r0, [r0, #8]
 8004794:	ed93 0a00 	vldr	s0, [r3]
 8004798:	edd3 0a01 	vldr	s1, [r3, #4]
 800479c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80047a0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80047a4:	1f1b      	subs	r3, r3, #4
 80047a6:	1f10      	subs	r0, r2, #4
 80047a8:	428b      	cmp	r3, r1
 80047aa:	d315      	bcc.n	80047d8 <nl_func_clip_array_f32+0x48>
 80047ac:	ed93 1a00 	vldr	s2, [r3]
 80047b0:	eeb4 0a41 	vcmp.f32	s0, s2
 80047b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b8:	bf58      	it	pl
 80047ba:	eeb0 1a40 	vmovpl.f32	s2, s0
 80047be:	eeb4 1a60 	vcmp.f32	s2, s1
 80047c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c6:	bf58      	it	pl
 80047c8:	eeb0 1a60 	vmovpl.f32	s2, s1
 80047cc:	ed80 1a00 	vstr	s2, [r0]
 80047d0:	1f1b      	subs	r3, r3, #4
 80047d2:	1f00      	subs	r0, r0, #4
 80047d4:	428b      	cmp	r3, r1
 80047d6:	d2e9      	bcs.n	80047ac <nl_func_clip_array_f32+0x1c>
 80047d8:	4770      	bx	lr
	...

080047dc <nl_func_hardmax_array_f32>:
 80047dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047e0:	6852      	ldr	r2, [r2, #4]
 80047e2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80047e6:	6855      	ldr	r5, [r2, #4]
 80047e8:	688e      	ldr	r6, [r1, #8]
 80047ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80047ee:	68d4      	ldr	r4, [r2, #12]
 80047f0:	4640      	mov	r0, r8
 80047f2:	436c      	muls	r4, r5
 80047f4:	00a1      	lsls	r1, r4, #2
 80047f6:	f00a fe67 	bl	800f4c8 <__aeabi_memclr>
 80047fa:	2200      	movs	r2, #0
 80047fc:	2c00      	cmp	r4, #0
 80047fe:	4633      	mov	r3, r6
 8004800:	f000 805d 	beq.w	80048be <nl_func_hardmax_array_f32+0xe2>
 8004804:	f102 0c01 	add.w	ip, r2, #1
 8004808:	eb05 0e02 	add.w	lr, r5, r2
 800480c:	45f4      	cmp	ip, lr
 800480e:	edd3 0a00 	vldr	s1, [r3]
 8004812:	d24b      	bcs.n	80048ac <nl_func_hardmax_array_f32+0xd0>
 8004814:	1e69      	subs	r1, r5, #1
 8004816:	f011 0003 	ands.w	r0, r1, #3
 800481a:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 800481e:	d00f      	beq.n	8004840 <nl_func_hardmax_array_f32+0x64>
 8004820:	ed97 1a00 	vldr	s2, [r7]
 8004824:	f107 0704 	add.w	r7, r7, #4
 8004828:	eef4 0a41 	vcmp.f32	s1, s2
 800482c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004830:	bf44      	itt	mi
 8004832:	eef0 0a41 	vmovmi.f32	s1, s2
 8004836:	4662      	movmi	r2, ip
 8004838:	1e40      	subs	r0, r0, #1
 800483a:	f10c 0c01 	add.w	ip, ip, #1
 800483e:	d1ef      	bne.n	8004820 <nl_func_hardmax_array_f32+0x44>
 8004840:	0889      	lsrs	r1, r1, #2
 8004842:	d033      	beq.n	80048ac <nl_func_hardmax_array_f32+0xd0>
 8004844:	ed97 1a00 	vldr	s2, [r7]
 8004848:	eef4 0a41 	vcmp.f32	s1, s2
 800484c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004850:	bf44      	itt	mi
 8004852:	eef0 0a41 	vmovmi.f32	s1, s2
 8004856:	4662      	movmi	r2, ip
 8004858:	ed97 1a01 	vldr	s2, [r7, #4]
 800485c:	f10c 0c01 	add.w	ip, ip, #1
 8004860:	eef4 0a41 	vcmp.f32	s1, s2
 8004864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004868:	bf44      	itt	mi
 800486a:	eef0 0a41 	vmovmi.f32	s1, s2
 800486e:	4662      	movmi	r2, ip
 8004870:	ed97 1a02 	vldr	s2, [r7, #8]
 8004874:	f10c 0c01 	add.w	ip, ip, #1
 8004878:	eef4 0a41 	vcmp.f32	s1, s2
 800487c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004880:	bf44      	itt	mi
 8004882:	eef0 0a41 	vmovmi.f32	s1, s2
 8004886:	4662      	movmi	r2, ip
 8004888:	ed97 1a03 	vldr	s2, [r7, #12]
 800488c:	f10c 0c01 	add.w	ip, ip, #1
 8004890:	eef4 0a41 	vcmp.f32	s1, s2
 8004894:	f107 0710 	add.w	r7, r7, #16
 8004898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489c:	bf44      	itt	mi
 800489e:	eef0 0a41 	vmovmi.f32	s1, s2
 80048a2:	4662      	movmi	r2, ip
 80048a4:	1e49      	subs	r1, r1, #1
 80048a6:	f10c 0c01 	add.w	ip, ip, #1
 80048aa:	d1cb      	bne.n	8004844 <nl_func_hardmax_array_f32+0x68>
 80048ac:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 80048b0:	4672      	mov	r2, lr
 80048b2:	42a2      	cmp	r2, r4
 80048b4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80048b8:	ed80 0a00 	vstr	s0, [r0]
 80048bc:	d3a2      	bcc.n	8004804 <nl_func_hardmax_array_f32+0x28>
 80048be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080048c4 <nl_func_relu_generic_array_f32>:
 80048c4:	6880      	ldr	r0, [r0, #8]
 80048c6:	6889      	ldr	r1, [r1, #8]
 80048c8:	ed93 0a00 	vldr	s0, [r3]
 80048cc:	edd3 0a01 	vldr	s1, [r3, #4]
 80048d0:	ed93 1a02 	vldr	s2, [r3, #8]
 80048d4:	1f03      	subs	r3, r0, #4
 80048d6:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80048da:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80048de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e2:	f1a1 0c04 	sub.w	ip, r1, #4
 80048e6:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 80048ea:	d52b      	bpl.n	8004944 <nl_func_relu_generic_array_f32+0x80>
 80048ec:	eef5 0a40 	vcmp.f32	s1, #0.0
 80048f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f4:	d014      	beq.n	8004920 <nl_func_relu_generic_array_f32+0x5c>
 80048f6:	428a      	cmp	r2, r1
 80048f8:	f0c0 8011 	bcc.w	800491e <nl_func_relu_generic_array_f32+0x5a>
 80048fc:	ed92 1a00 	vldr	s2, [r2]
 8004900:	eeb4 1a40 	vcmp.f32	s2, s0
 8004904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004908:	bf44      	itt	mi
 800490a:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 800490e:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 8004912:	ed80 1a00 	vstr	s2, [r0]
 8004916:	1f12      	subs	r2, r2, #4
 8004918:	1f00      	subs	r0, r0, #4
 800491a:	428a      	cmp	r2, r1
 800491c:	d2ee      	bcs.n	80048fc <nl_func_relu_generic_array_f32+0x38>
 800491e:	4770      	bx	lr
 8004920:	428a      	cmp	r2, r1
 8004922:	d3fc      	bcc.n	800491e <nl_func_relu_generic_array_f32+0x5a>
 8004924:	edd2 0a00 	vldr	s1, [r2]
 8004928:	eef4 0a40 	vcmp.f32	s1, s0
 800492c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004930:	bf48      	it	mi
 8004932:	eddf 0aa7 	vldrmi	s1, [pc, #668]	; 8004bd0 <.text_73>
 8004936:	edc0 0a00 	vstr	s1, [r0]
 800493a:	1f12      	subs	r2, r2, #4
 800493c:	1f00      	subs	r0, r0, #4
 800493e:	428a      	cmp	r2, r1
 8004940:	d2f0      	bcs.n	8004924 <nl_func_relu_generic_array_f32+0x60>
 8004942:	4770      	bx	lr
 8004944:	428a      	cmp	r2, r1
 8004946:	d3ea      	bcc.n	800491e <nl_func_relu_generic_array_f32+0x5a>
 8004948:	edd2 1a00 	vldr	s3, [r2]
 800494c:	eef4 1a41 	vcmp.f32	s3, s2
 8004950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004954:	d50a      	bpl.n	800496c <nl_func_relu_generic_array_f32+0xa8>
 8004956:	eef4 1a40 	vcmp.f32	s3, s0
 800495a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800495e:	d507      	bpl.n	8004970 <nl_func_relu_generic_array_f32+0xac>
 8004960:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8004964:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8004968:	e002      	b.n	8004970 <nl_func_relu_generic_array_f32+0xac>
 800496a:	bf00      	nop
 800496c:	eef0 1a41 	vmov.f32	s3, s2
 8004970:	edc0 1a00 	vstr	s3, [r0]
 8004974:	1f12      	subs	r2, r2, #4
 8004976:	1f00      	subs	r0, r0, #4
 8004978:	428a      	cmp	r2, r1
 800497a:	d2e5      	bcs.n	8004948 <nl_func_relu_generic_array_f32+0x84>
 800497c:	4770      	bx	lr
	...

08004980 <nl_func_relu_thresholded_array_f32>:
 8004980:	6889      	ldr	r1, [r1, #8]
 8004982:	ed93 0a00 	vldr	s0, [r3]
 8004986:	6880      	ldr	r0, [r0, #8]
 8004988:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800498c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004990:	1f1b      	subs	r3, r3, #4
 8004992:	1f10      	subs	r0, r2, #4
 8004994:	428b      	cmp	r3, r1
 8004996:	d30e      	bcc.n	80049b6 <nl_func_relu_thresholded_array_f32+0x36>
 8004998:	edd3 0a00 	vldr	s1, [r3]
 800499c:	eef4 0a40 	vcmp.f32	s1, s0
 80049a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a4:	bf48      	it	mi
 80049a6:	eddf 0a8a 	vldrmi	s1, [pc, #552]	; 8004bd0 <.text_73>
 80049aa:	edc0 0a00 	vstr	s1, [r0]
 80049ae:	1f1b      	subs	r3, r3, #4
 80049b0:	1f00      	subs	r0, r0, #4
 80049b2:	428b      	cmp	r3, r1
 80049b4:	d2f0      	bcs.n	8004998 <nl_func_relu_thresholded_array_f32+0x18>
 80049b6:	4770      	bx	lr

080049b8 <nl_func_elu_array_f32>:
 80049b8:	b570      	push	{r4, r5, r6, lr}
 80049ba:	ed2d 8b04 	vpush	{d8-d9}
 80049be:	688c      	ldr	r4, [r1, #8]
 80049c0:	6880      	ldr	r0, [r0, #8]
 80049c2:	ed93 8a00 	vldr	s16, [r3]
 80049c6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80049ca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80049ce:	1f0d      	subs	r5, r1, #4
 80049d0:	1f16      	subs	r6, r2, #4
 80049d2:	42a5      	cmp	r5, r4
 80049d4:	f0c0 802a 	bcc.w	8004a2c <nl_func_elu_array_f32+0x74>
 80049d8:	edd5 8a00 	vldr	s17, [r5]
 80049dc:	eef5 8a40 	vcmp.f32	s17, #0.0
 80049e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e4:	eeb0 0a68 	vmov.f32	s0, s17
 80049e8:	bf4c      	ite	mi
 80049ea:	ed9f 9a79 	vldrmi	s18, [pc, #484]	; 8004bd0 <.text_73>
 80049ee:	eeb0 9a68 	vmovpl.f32	s18, s17
 80049f2:	f00e fb13 	bl	801301c <expf>
 80049f6:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80049fa:	ee30 0a20 	vadd.f32	s0, s0, s1
 80049fe:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004a02:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0a:	dc09      	bgt.n	8004a20 <nl_func_elu_array_f32+0x68>
 8004a0c:	eeb0 0a68 	vmov.f32	s0, s17
 8004a10:	f00e fb04 	bl	801301c <expf>
 8004a14:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8004a18:	ee30 1a01 	vadd.f32	s2, s0, s2
 8004a1c:	ee01 9a08 	vmla.f32	s18, s2, s16
 8004a20:	ed86 9a00 	vstr	s18, [r6]
 8004a24:	1f2d      	subs	r5, r5, #4
 8004a26:	1f36      	subs	r6, r6, #4
 8004a28:	42a5      	cmp	r5, r4
 8004a2a:	d2d5      	bcs.n	80049d8 <nl_func_elu_array_f32+0x20>
 8004a2c:	ecbd 8b04 	vpop	{d8-d9}
 8004a30:	bd70      	pop	{r4, r5, r6, pc}
	...

08004a34 <.text_68>:
 8004a34:	3f800001 	.word	0x3f800001

08004a38 <.text_69>:
 8004a38:	3e4ccccd 	.word	0x3e4ccccd

08004a3c <nl_func_selu_array_f32>:
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	ed2d 8b04 	vpush	{d8-d9}
 8004a42:	688c      	ldr	r4, [r1, #8]
 8004a44:	6880      	ldr	r0, [r0, #8]
 8004a46:	ed93 8a00 	vldr	s16, [r3]
 8004a4a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004a4e:	edd3 8a01 	vldr	s17, [r3, #4]
 8004a52:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004a56:	1f0d      	subs	r5, r1, #4
 8004a58:	1f16      	subs	r6, r2, #4
 8004a5a:	42a5      	cmp	r5, r4
 8004a5c:	f0c0 802c 	bcc.w	8004ab8 <nl_func_selu_array_f32+0x7c>
 8004a60:	ed95 9a00 	vldr	s18, [r5]
 8004a64:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6c:	eeb0 0a49 	vmov.f32	s0, s18
 8004a70:	bf4c      	ite	mi
 8004a72:	eddf 9a57 	vldrmi	s19, [pc, #348]	; 8004bd0 <.text_73>
 8004a76:	eef0 9a49 	vmovpl.f32	s19, s18
 8004a7a:	f00e facf 	bl	801301c <expf>
 8004a7e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004a82:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004a86:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004a8a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a92:	dc09      	bgt.n	8004aa8 <nl_func_selu_array_f32+0x6c>
 8004a94:	eeb0 0a49 	vmov.f32	s0, s18
 8004a98:	f00e fac0 	bl	801301c <expf>
 8004a9c:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8004aa0:	ee30 1a01 	vadd.f32	s2, s0, s2
 8004aa4:	ee41 9a08 	vmla.f32	s19, s2, s16
 8004aa8:	ee28 0aa9 	vmul.f32	s0, s17, s19
 8004aac:	1f2d      	subs	r5, r5, #4
 8004aae:	ed86 0a00 	vstr	s0, [r6]
 8004ab2:	1f36      	subs	r6, r6, #4
 8004ab4:	42a5      	cmp	r5, r4
 8004ab6:	d2d3      	bcs.n	8004a60 <nl_func_selu_array_f32+0x24>
 8004ab8:	ecbd 8b04 	vpop	{d8-d9}
 8004abc:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ac0 <nl_func_prelu_array_f32>:
 8004ac0:	6889      	ldr	r1, [r1, #8]
 8004ac2:	6880      	ldr	r0, [r0, #8]
 8004ac4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004ac8:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8004acc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004ad0:	1f1b      	subs	r3, r3, #4
 8004ad2:	f1ac 0c04 	sub.w	ip, ip, #4
 8004ad6:	1f10      	subs	r0, r2, #4
 8004ad8:	458c      	cmp	ip, r1
 8004ada:	d320      	bcc.n	8004b1e <nl_func_prelu_array_f32+0x5e>
 8004adc:	ed9c 0a00 	vldr	s0, [ip]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004ae6:	f1ac 0c04 	sub.w	ip, ip, #4
 8004aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aee:	ed92 1a00 	vldr	s2, [r2]
 8004af2:	bf4c      	ite	mi
 8004af4:	eddf 0a36 	vldrmi	s1, [pc, #216]	; 8004bd0 <.text_73>
 8004af8:	eef0 0a40 	vmovpl.f32	s1, s0
 8004afc:	eeb1 0a40 	vneg.f32	s0, s0
 8004b00:	1f13      	subs	r3, r2, #4
 8004b02:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b0a:	bf48      	it	mi
 8004b0c:	ed9f 0a30 	vldrmi	s0, [pc, #192]	; 8004bd0 <.text_73>
 8004b10:	ee41 0a40 	vmls.f32	s1, s2, s0
 8004b14:	edc0 0a00 	vstr	s1, [r0]
 8004b18:	1f00      	subs	r0, r0, #4
 8004b1a:	458c      	cmp	ip, r1
 8004b1c:	d2de      	bcs.n	8004adc <nl_func_prelu_array_f32+0x1c>
 8004b1e:	4770      	bx	lr

08004b20 <forward_relu>:
 8004b20:	b570      	push	{r4, r5, r6, lr}
 8004b22:	4604      	mov	r4, r0
 8004b24:	6962      	ldr	r2, [r4, #20]
 8004b26:	8811      	ldrh	r1, [r2, #0]
 8004b28:	2900      	cmp	r1, #0
 8004b2a:	bf1a      	itte	ne
 8004b2c:	6850      	ldrne	r0, [r2, #4]
 8004b2e:	1d00      	addne	r0, r0, #4
 8004b30:	2004      	moveq	r0, #4
 8004b32:	6800      	ldr	r0, [r0, #0]
 8004b34:	2800      	cmp	r0, #0
 8004b36:	bf14      	ite	ne
 8004b38:	6805      	ldrne	r5, [r0, #0]
 8004b3a:	2500      	moveq	r5, #0
 8004b3c:	2902      	cmp	r1, #2
 8004b3e:	bfa6      	itte	ge
 8004b40:	6850      	ldrge	r0, [r2, #4]
 8004b42:	3010      	addge	r0, #16
 8004b44:	2004      	movlt	r0, #4
 8004b46:	6800      	ldr	r0, [r0, #0]
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	bf19      	ittee	ne
 8004b4c:	6800      	ldrne	r0, [r0, #0]
 8004b4e:	f100 0618 	addne.w	r6, r0, #24
 8004b52:	2100      	moveq	r1, #0
 8004b54:	f101 0618 	addeq.w	r6, r1, #24
 8004b58:	69a0      	ldr	r0, [r4, #24]
 8004b5a:	b9f8      	cbnz	r0, 8004b9c <forward_relu+0x7c>
 8004b5c:	f105 0008 	add.w	r0, r5, #8
 8004b60:	f7fd ffd8 	bl	8002b14 <ai_shape_get_size>
 8004b64:	69a9      	ldr	r1, [r5, #24]
 8004b66:	6833      	ldr	r3, [r6, #0]
 8004b68:	6889      	ldr	r1, [r1, #8]
 8004b6a:	689c      	ldr	r4, [r3, #8]
 8004b6c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8004b70:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004b74:	1f12      	subs	r2, r2, #4
 8004b76:	1f00      	subs	r0, r0, #4
 8004b78:	428a      	cmp	r2, r1
 8004b7a:	d328      	bcc.n	8004bce <forward_relu+0xae>
 8004b7c:	ed92 0a00 	vldr	s0, [r2]
 8004b80:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b88:	bf48      	it	mi
 8004b8a:	ed9f 0a11 	vldrmi	s0, [pc, #68]	; 8004bd0 <.text_73>
 8004b8e:	ed80 0a00 	vstr	s0, [r0]
 8004b92:	1f12      	subs	r2, r2, #4
 8004b94:	1f00      	subs	r0, r0, #4
 8004b96:	428a      	cmp	r2, r1
 8004b98:	d2f0      	bcs.n	8004b7c <forward_relu+0x5c>
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	6840      	ldr	r0, [r0, #4]
 8004b9e:	2801      	cmp	r0, #1
 8004ba0:	f105 0008 	add.w	r0, r5, #8
 8004ba4:	d109      	bne.n	8004bba <forward_relu+0x9a>
 8004ba6:	f7fd ffb5 	bl	8002b14 <ai_shape_get_size>
 8004baa:	4602      	mov	r2, r0
 8004bac:	69a0      	ldr	r0, [r4, #24]
 8004bae:	69a9      	ldr	r1, [r5, #24]
 8004bb0:	6883      	ldr	r3, [r0, #8]
 8004bb2:	6830      	ldr	r0, [r6, #0]
 8004bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004bb8:	e6e2      	b.n	8004980 <nl_func_relu_thresholded_array_f32>
 8004bba:	f7fd ffab 	bl	8002b14 <ai_shape_get_size>
 8004bbe:	69a1      	ldr	r1, [r4, #24]
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6830      	ldr	r0, [r6, #0]
 8004bc4:	688b      	ldr	r3, [r1, #8]
 8004bc6:	69a9      	ldr	r1, [r5, #24]
 8004bc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004bcc:	e67a      	b.n	80048c4 <nl_func_relu_generic_array_f32>
 8004bce:	bd70      	pop	{r4, r5, r6, pc}

08004bd0 <.text_73>:
 8004bd0:	00000000 	.word	0x00000000

08004bd4 <forward_relu_thresholded>:
 8004bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	f04f 0601 	mov.w	r6, #1
 8004bdc:	6953      	ldr	r3, [r2, #20]
 8004bde:	8819      	ldrh	r1, [r3, #0]
 8004be0:	2900      	cmp	r1, #0
 8004be2:	bf1a      	itte	ne
 8004be4:	6858      	ldrne	r0, [r3, #4]
 8004be6:	1d00      	addne	r0, r0, #4
 8004be8:	2004      	moveq	r0, #4
 8004bea:	6800      	ldr	r0, [r0, #0]
 8004bec:	2800      	cmp	r0, #0
 8004bee:	bf14      	ite	ne
 8004bf0:	6804      	ldrne	r4, [r0, #0]
 8004bf2:	2400      	moveq	r4, #0
 8004bf4:	2902      	cmp	r1, #2
 8004bf6:	bfa6      	itte	ge
 8004bf8:	6858      	ldrge	r0, [r3, #4]
 8004bfa:	3010      	addge	r0, #16
 8004bfc:	2004      	movlt	r0, #4
 8004bfe:	6800      	ldr	r0, [r0, #0]
 8004c00:	2800      	cmp	r0, #0
 8004c02:	bf19      	ittee	ne
 8004c04:	6800      	ldrne	r0, [r0, #0]
 8004c06:	f100 0518 	addne.w	r5, r0, #24
 8004c0a:	2100      	moveq	r1, #0
 8004c0c:	f101 0518 	addeq.w	r5, r1, #24
 8004c10:	f104 0108 	add.w	r1, r4, #8
 8004c14:	680b      	ldr	r3, [r1, #0]
 8004c16:	0a1b      	lsrs	r3, r3, #8
 8004c18:	d022      	beq.n	8004c60 <forward_relu_thresholded+0x8c>
 8004c1a:	684f      	ldr	r7, [r1, #4]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8004c22:	f1a1 0c04 	sub.w	ip, r1, #4
 8004c26:	f010 0103 	ands.w	r1, r0, #3
 8004c2a:	d006      	beq.n	8004c3a <forward_relu_thresholded+0x66>
 8004c2c:	1e5b      	subs	r3, r3, #1
 8004c2e:	f85c e904 	ldr.w	lr, [ip], #-4
 8004c32:	1e49      	subs	r1, r1, #1
 8004c34:	fb0e f606 	mul.w	r6, lr, r6
 8004c38:	d1f8      	bne.n	8004c2c <forward_relu_thresholded+0x58>
 8004c3a:	0880      	lsrs	r0, r0, #2
 8004c3c:	d010      	beq.n	8004c60 <forward_relu_thresholded+0x8c>
 8004c3e:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8004c42:	3910      	subs	r1, #16
 8004c44:	68cb      	ldr	r3, [r1, #12]
 8004c46:	688f      	ldr	r7, [r1, #8]
 8004c48:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004c4c:	f851 e910 	ldr.w	lr, [r1], #-16
 8004c50:	437b      	muls	r3, r7
 8004c52:	fb0c f303 	mul.w	r3, ip, r3
 8004c56:	fb0e f303 	mul.w	r3, lr, r3
 8004c5a:	435e      	muls	r6, r3
 8004c5c:	1e40      	subs	r0, r0, #1
 8004c5e:	d1f1      	bne.n	8004c44 <forward_relu_thresholded+0x70>
 8004c60:	6990      	ldr	r0, [r2, #24]
 8004c62:	682a      	ldr	r2, [r5, #0]
 8004c64:	6881      	ldr	r1, [r0, #8]
 8004c66:	69a0      	ldr	r0, [r4, #24]
 8004c68:	6880      	ldr	r0, [r0, #8]
 8004c6a:	6893      	ldr	r3, [r2, #8]
 8004c6c:	ed91 0a00 	vldr	s0, [r1]
 8004c70:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 8004c74:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8004c78:	1f09      	subs	r1, r1, #4
 8004c7a:	1f22      	subs	r2, r4, #4
 8004c7c:	4281      	cmp	r1, r0
 8004c7e:	d30e      	bcc.n	8004c9e <forward_relu_thresholded+0xca>
 8004c80:	edd1 0a00 	vldr	s1, [r1]
 8004c84:	eef4 0a40 	vcmp.f32	s1, s0
 8004c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8c:	bf48      	it	mi
 8004c8e:	eddf 0ac1 	vldrmi	s1, [pc, #772]	; 8004f94 <.text_80>
 8004c92:	edc2 0a00 	vstr	s1, [r2]
 8004c96:	1f09      	subs	r1, r1, #4
 8004c98:	1f12      	subs	r2, r2, #4
 8004c9a:	4281      	cmp	r1, r0
 8004c9c:	d2f0      	bcs.n	8004c80 <forward_relu_thresholded+0xac>
 8004c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ca0 <forward_elu>:
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	6962      	ldr	r2, [r4, #20]
 8004ca6:	8811      	ldrh	r1, [r2, #0]
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	bf1a      	itte	ne
 8004cac:	6850      	ldrne	r0, [r2, #4]
 8004cae:	1d00      	addne	r0, r0, #4
 8004cb0:	2004      	moveq	r0, #4
 8004cb2:	6800      	ldr	r0, [r0, #0]
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	bf14      	ite	ne
 8004cb8:	6805      	ldrne	r5, [r0, #0]
 8004cba:	2500      	moveq	r5, #0
 8004cbc:	2902      	cmp	r1, #2
 8004cbe:	bfa6      	itte	ge
 8004cc0:	6850      	ldrge	r0, [r2, #4]
 8004cc2:	3010      	addge	r0, #16
 8004cc4:	2004      	movlt	r0, #4
 8004cc6:	6800      	ldr	r0, [r0, #0]
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	bf19      	ittee	ne
 8004ccc:	6800      	ldrne	r0, [r0, #0]
 8004cce:	f100 0618 	addne.w	r6, r0, #24
 8004cd2:	2100      	moveq	r1, #0
 8004cd4:	f101 0618 	addeq.w	r6, r1, #24
 8004cd8:	f105 0008 	add.w	r0, r5, #8
 8004cdc:	f7fd ff1a 	bl	8002b14 <ai_shape_get_size>
 8004ce0:	69a1      	ldr	r1, [r4, #24]
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	6830      	ldr	r0, [r6, #0]
 8004ce6:	688b      	ldr	r3, [r1, #8]
 8004ce8:	69a9      	ldr	r1, [r5, #24]
 8004cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004cee:	e663      	b.n	80049b8 <nl_func_elu_array_f32>

08004cf0 <forward_selu>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	6962      	ldr	r2, [r4, #20]
 8004cf6:	8811      	ldrh	r1, [r2, #0]
 8004cf8:	2900      	cmp	r1, #0
 8004cfa:	bf1a      	itte	ne
 8004cfc:	6850      	ldrne	r0, [r2, #4]
 8004cfe:	1d00      	addne	r0, r0, #4
 8004d00:	2004      	moveq	r0, #4
 8004d02:	6800      	ldr	r0, [r0, #0]
 8004d04:	2800      	cmp	r0, #0
 8004d06:	bf14      	ite	ne
 8004d08:	6805      	ldrne	r5, [r0, #0]
 8004d0a:	2500      	moveq	r5, #0
 8004d0c:	2902      	cmp	r1, #2
 8004d0e:	bfa6      	itte	ge
 8004d10:	6850      	ldrge	r0, [r2, #4]
 8004d12:	3010      	addge	r0, #16
 8004d14:	2004      	movlt	r0, #4
 8004d16:	6800      	ldr	r0, [r0, #0]
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	bf19      	ittee	ne
 8004d1c:	6800      	ldrne	r0, [r0, #0]
 8004d1e:	f100 0618 	addne.w	r6, r0, #24
 8004d22:	2100      	moveq	r1, #0
 8004d24:	f101 0618 	addeq.w	r6, r1, #24
 8004d28:	f105 0008 	add.w	r0, r5, #8
 8004d2c:	f7fd fef2 	bl	8002b14 <ai_shape_get_size>
 8004d30:	69a1      	ldr	r1, [r4, #24]
 8004d32:	4602      	mov	r2, r0
 8004d34:	6830      	ldr	r0, [r6, #0]
 8004d36:	688b      	ldr	r3, [r1, #8]
 8004d38:	69a9      	ldr	r1, [r5, #24]
 8004d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d3e:	e67d      	b.n	8004a3c <nl_func_selu_array_f32>

08004d40 <forward_prelu>:
 8004d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d44:	b083      	sub	sp, #12
 8004d46:	6942      	ldr	r2, [r0, #20]
 8004d48:	8810      	ldrh	r0, [r2, #0]
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	bf1a      	itte	ne
 8004d4e:	6851      	ldrne	r1, [r2, #4]
 8004d50:	1d09      	addne	r1, r1, #4
 8004d52:	2104      	moveq	r1, #4
 8004d54:	6809      	ldr	r1, [r1, #0]
 8004d56:	2900      	cmp	r1, #0
 8004d58:	bf19      	ittee	ne
 8004d5a:	6809      	ldrne	r1, [r1, #0]
 8004d5c:	f101 0518 	addne.w	r5, r1, #24
 8004d60:	2300      	moveq	r3, #0
 8004d62:	f103 0518 	addeq.w	r5, r3, #24
 8004d66:	2801      	cmp	r0, #1
 8004d68:	bfc6      	itte	gt
 8004d6a:	6851      	ldrgt	r1, [r2, #4]
 8004d6c:	3110      	addgt	r1, #16
 8004d6e:	2104      	movle	r1, #4
 8004d70:	6809      	ldr	r1, [r1, #0]
 8004d72:	2900      	cmp	r1, #0
 8004d74:	bf19      	ittee	ne
 8004d76:	6809      	ldrne	r1, [r1, #0]
 8004d78:	f101 0618 	addne.w	r6, r1, #24
 8004d7c:	2300      	moveq	r3, #0
 8004d7e:	f103 0618 	addeq.w	r6, r3, #24
 8004d82:	2802      	cmp	r0, #2
 8004d84:	bfc6      	itte	gt
 8004d86:	6850      	ldrgt	r0, [r2, #4]
 8004d88:	301c      	addgt	r0, #28
 8004d8a:	2004      	movle	r0, #4
 8004d8c:	6800      	ldr	r0, [r0, #0]
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	bf14      	ite	ne
 8004d92:	6804      	ldrne	r4, [r0, #0]
 8004d94:	2400      	moveq	r4, #0
 8004d96:	69a0      	ldr	r0, [r4, #24]
 8004d98:	6887      	ldr	r7, [r0, #8]
 8004d9a:	b12c      	cbz	r4, 8004da8 <forward_prelu+0x68>
 8004d9c:	6841      	ldr	r1, [r0, #4]
 8004d9e:	6800      	ldr	r0, [r0, #0]
 8004da0:	f001 fbde 	bl	8006560 <ai_array_get_byte_size>
 8004da4:	4680      	mov	r8, r0
 8004da6:	e001      	b.n	8004dac <forward_prelu+0x6c>
 8004da8:	f04f 0801 	mov.w	r8, #1
 8004dac:	6828      	ldr	r0, [r5, #0]
 8004dae:	3408      	adds	r4, #8
 8004db0:	6841      	ldr	r1, [r0, #4]
 8004db2:	6800      	ldr	r0, [r0, #0]
 8004db4:	f001 fbd4 	bl	8006560 <ai_array_get_byte_size>
 8004db8:	4601      	mov	r1, r0
 8004dba:	6828      	ldr	r0, [r5, #0]
 8004dbc:	6833      	ldr	r3, [r6, #0]
 8004dbe:	6880      	ldr	r0, [r0, #8]
 8004dc0:	4401      	add	r1, r0
 8004dc2:	4288      	cmp	r0, r1
 8004dc4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8004dc8:	9400      	str	r4, [sp, #0]
 8004dca:	d240      	bcs.n	8004e4e <forward_prelu+0x10e>
 8004dcc:	9702      	str	r7, [sp, #8]
 8004dce:	4607      	mov	r7, r0
 8004dd0:	9101      	str	r1, [sp, #4]
 8004dd2:	6829      	ldr	r1, [r5, #0]
 8004dd4:	f04f 0201 	mov.w	r2, #1
 8004dd8:	608f      	str	r7, [r1, #8]
 8004dda:	6834      	ldr	r4, [r6, #0]
 8004ddc:	f8c4 9008 	str.w	r9, [r4, #8]
 8004de0:	9b00      	ldr	r3, [sp, #0]
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	0a00      	lsrs	r0, r0, #8
 8004de6:	d029      	beq.n	8004e3c <forward_prelu+0xfc>
 8004de8:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8004dec:	4684      	mov	ip, r0
 8004dee:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
 8004df2:	f1a3 0a04 	sub.w	sl, r3, #4
 8004df6:	f01c 0303 	ands.w	r3, ip, #3
 8004dfa:	d006      	beq.n	8004e0a <forward_prelu+0xca>
 8004dfc:	1e40      	subs	r0, r0, #1
 8004dfe:	f85a b904 	ldr.w	fp, [sl], #-4
 8004e02:	1e5b      	subs	r3, r3, #1
 8004e04:	fb0b f202 	mul.w	r2, fp, r2
 8004e08:	d1f8      	bne.n	8004dfc <forward_prelu+0xbc>
 8004e0a:	ea5f 0c9c 	movs.w	ip, ip, lsr #2
 8004e0e:	4663      	mov	r3, ip
 8004e10:	d014      	beq.n	8004e3c <forward_prelu+0xfc>
 8004e12:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 8004e16:	3810      	subs	r0, #16
 8004e18:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8004e1c:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8004e20:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8004e24:	f850 b910 	ldr.w	fp, [r0], #-16
 8004e28:	1e5b      	subs	r3, r3, #1
 8004e2a:	fb0e fc0c 	mul.w	ip, lr, ip
 8004e2e:	fb0a fc0c 	mul.w	ip, sl, ip
 8004e32:	fb0b fc0c 	mul.w	ip, fp, ip
 8004e36:	fb0c f202 	mul.w	r2, ip, r2
 8004e3a:	d1ed      	bne.n	8004e18 <forward_prelu+0xd8>
 8004e3c:	9b02      	ldr	r3, [sp, #8]
 8004e3e:	4620      	mov	r0, r4
 8004e40:	4447      	add	r7, r8
 8004e42:	44c1      	add	r9, r8
 8004e44:	f7ff fe3c 	bl	8004ac0 <nl_func_prelu_array_f32>
 8004e48:	9801      	ldr	r0, [sp, #4]
 8004e4a:	4287      	cmp	r7, r0
 8004e4c:	d3c1      	bcc.n	8004dd2 <forward_prelu+0x92>
 8004e4e:	6828      	ldr	r0, [r5, #0]
 8004e50:	68c1      	ldr	r1, [r0, #12]
 8004e52:	6081      	str	r1, [r0, #8]
 8004e54:	6830      	ldr	r0, [r6, #0]
 8004e56:	68c2      	ldr	r2, [r0, #12]
 8004e58:	6082      	str	r2, [r0, #8]
 8004e5a:	b003      	add	sp, #12
 8004e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004e60 <forward_clip>:
 8004e60:	b570      	push	{r4, r5, r6, lr}
 8004e62:	4604      	mov	r4, r0
 8004e64:	6962      	ldr	r2, [r4, #20]
 8004e66:	8811      	ldrh	r1, [r2, #0]
 8004e68:	2900      	cmp	r1, #0
 8004e6a:	bf1a      	itte	ne
 8004e6c:	6850      	ldrne	r0, [r2, #4]
 8004e6e:	1d00      	addne	r0, r0, #4
 8004e70:	2004      	moveq	r0, #4
 8004e72:	6800      	ldr	r0, [r0, #0]
 8004e74:	2800      	cmp	r0, #0
 8004e76:	bf14      	ite	ne
 8004e78:	6805      	ldrne	r5, [r0, #0]
 8004e7a:	2500      	moveq	r5, #0
 8004e7c:	2902      	cmp	r1, #2
 8004e7e:	bfa6      	itte	ge
 8004e80:	6850      	ldrge	r0, [r2, #4]
 8004e82:	3010      	addge	r0, #16
 8004e84:	2004      	movlt	r0, #4
 8004e86:	6800      	ldr	r0, [r0, #0]
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	bf19      	ittee	ne
 8004e8c:	6800      	ldrne	r0, [r0, #0]
 8004e8e:	f100 0618 	addne.w	r6, r0, #24
 8004e92:	2100      	moveq	r1, #0
 8004e94:	f101 0618 	addeq.w	r6, r1, #24
 8004e98:	f105 0008 	add.w	r0, r5, #8
 8004e9c:	f7fd fe3a 	bl	8002b14 <ai_shape_get_size>
 8004ea0:	69a1      	ldr	r1, [r4, #24]
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	6830      	ldr	r0, [r6, #0]
 8004ea6:	688b      	ldr	r3, [r1, #8]
 8004ea8:	69a9      	ldr	r1, [r5, #24]
 8004eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004eae:	e46f      	b.n	8004790 <nl_func_clip_array_f32>

08004eb0 <forward_hard_sigmoid>:
 8004eb0:	b4f0      	push	{r4, r5, r6, r7}
 8004eb2:	6942      	ldr	r2, [r0, #20]
 8004eb4:	f04f 0501 	mov.w	r5, #1
 8004eb8:	8811      	ldrh	r1, [r2, #0]
 8004eba:	2900      	cmp	r1, #0
 8004ebc:	bf1a      	itte	ne
 8004ebe:	6850      	ldrne	r0, [r2, #4]
 8004ec0:	1d00      	addne	r0, r0, #4
 8004ec2:	2004      	moveq	r0, #4
 8004ec4:	6800      	ldr	r0, [r0, #0]
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	bf14      	ite	ne
 8004eca:	6803      	ldrne	r3, [r0, #0]
 8004ecc:	2300      	moveq	r3, #0
 8004ece:	2902      	cmp	r1, #2
 8004ed0:	bfa6      	itte	ge
 8004ed2:	6850      	ldrge	r0, [r2, #4]
 8004ed4:	3010      	addge	r0, #16
 8004ed6:	2004      	movlt	r0, #4
 8004ed8:	6800      	ldr	r0, [r0, #0]
 8004eda:	2800      	cmp	r0, #0
 8004edc:	bf19      	ittee	ne
 8004ede:	6800      	ldrne	r0, [r0, #0]
 8004ee0:	f100 0418 	addne.w	r4, r0, #24
 8004ee4:	2100      	moveq	r1, #0
 8004ee6:	f101 0418 	addeq.w	r4, r1, #24
 8004eea:	f103 0108 	add.w	r1, r3, #8
 8004eee:	680a      	ldr	r2, [r1, #0]
 8004ef0:	0a12      	lsrs	r2, r2, #8
 8004ef2:	d01f      	beq.n	8004f34 <forward_hard_sigmoid+0x84>
 8004ef4:	684e      	ldr	r6, [r1, #4]
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004efc:	1f0f      	subs	r7, r1, #4
 8004efe:	f010 0103 	ands.w	r1, r0, #3
 8004f02:	d006      	beq.n	8004f12 <forward_hard_sigmoid+0x62>
 8004f04:	1e52      	subs	r2, r2, #1
 8004f06:	f857 c904 	ldr.w	ip, [r7], #-4
 8004f0a:	1e49      	subs	r1, r1, #1
 8004f0c:	fb0c f505 	mul.w	r5, ip, r5
 8004f10:	d1f8      	bne.n	8004f04 <forward_hard_sigmoid+0x54>
 8004f12:	0880      	lsrs	r0, r0, #2
 8004f14:	d00e      	beq.n	8004f34 <forward_hard_sigmoid+0x84>
 8004f16:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004f1a:	3910      	subs	r1, #16
 8004f1c:	68ca      	ldr	r2, [r1, #12]
 8004f1e:	688e      	ldr	r6, [r1, #8]
 8004f20:	684f      	ldr	r7, [r1, #4]
 8004f22:	f851 c910 	ldr.w	ip, [r1], #-16
 8004f26:	4372      	muls	r2, r6
 8004f28:	437a      	muls	r2, r7
 8004f2a:	fb0c f202 	mul.w	r2, ip, r2
 8004f2e:	4355      	muls	r5, r2
 8004f30:	1e40      	subs	r0, r0, #1
 8004f32:	d1f3      	bne.n	8004f1c <forward_hard_sigmoid+0x6c>
 8004f34:	6998      	ldr	r0, [r3, #24]
 8004f36:	6822      	ldr	r2, [r4, #0]
 8004f38:	6880      	ldr	r0, [r0, #8]
 8004f3a:	6893      	ldr	r3, [r2, #8]
 8004f3c:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8004f40:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004f44:	1f09      	subs	r1, r1, #4
 8004f46:	1f22      	subs	r2, r4, #4
 8004f48:	4281      	cmp	r1, r0
 8004f4a:	d321      	bcc.n	8004f90 <forward_hard_sigmoid+0xe0>
 8004f4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004f50:	eddf 0a11 	vldr	s1, [pc, #68]	; 8004f98 <.text_81>
 8004f54:	edd1 1a00 	vldr	s3, [r1]
 8004f58:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8004f9c <.text_82>
 8004f5c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004f60:	ee01 1a82 	vmla.f32	s2, s3, s4
 8004f64:	eeb4 1a60 	vcmp.f32	s2, s1
 8004f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6c:	da08      	bge.n	8004f80 <forward_hard_sigmoid+0xd0>
 8004f6e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8004f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f76:	d505      	bpl.n	8004f84 <forward_hard_sigmoid+0xd4>
 8004f78:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8004f94 <.text_80>
 8004f7c:	e002      	b.n	8004f84 <forward_hard_sigmoid+0xd4>
 8004f7e:	bf00      	nop
 8004f80:	eeb0 1a40 	vmov.f32	s2, s0
 8004f84:	ed82 1a00 	vstr	s2, [r2]
 8004f88:	1f09      	subs	r1, r1, #4
 8004f8a:	1f12      	subs	r2, r2, #4
 8004f8c:	4281      	cmp	r1, r0
 8004f8e:	d2e1      	bcs.n	8004f54 <forward_hard_sigmoid+0xa4>
 8004f90:	bcf0      	pop	{r4, r5, r6, r7}
 8004f92:	4770      	bx	lr

08004f94 <.text_80>:
 8004f94:	00000000 	.word	0x00000000

08004f98 <.text_81>:
 8004f98:	3f800001 	.word	0x3f800001

08004f9c <.text_82>:
 8004f9c:	3e4ccccd 	.word	0x3e4ccccd

08004fa0 <forward_sm>:
 8004fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	6942      	ldr	r2, [r0, #20]
 8004fa6:	8811      	ldrh	r1, [r2, #0]
 8004fa8:	2900      	cmp	r1, #0
 8004faa:	bf1a      	itte	ne
 8004fac:	6850      	ldrne	r0, [r2, #4]
 8004fae:	1d00      	addne	r0, r0, #4
 8004fb0:	2004      	moveq	r0, #4
 8004fb2:	6800      	ldr	r0, [r0, #0]
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	bf14      	ite	ne
 8004fb8:	6804      	ldrne	r4, [r0, #0]
 8004fba:	2400      	moveq	r4, #0
 8004fbc:	2902      	cmp	r1, #2
 8004fbe:	bfa6      	itte	ge
 8004fc0:	6850      	ldrge	r0, [r2, #4]
 8004fc2:	3010      	addge	r0, #16
 8004fc4:	2004      	movlt	r0, #4
 8004fc6:	6800      	ldr	r0, [r0, #0]
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	bf14      	ite	ne
 8004fcc:	6805      	ldrne	r5, [r0, #0]
 8004fce:	2500      	moveq	r5, #0
 8004fd0:	68e0      	ldr	r0, [r4, #12]
 8004fd2:	68e9      	ldr	r1, [r5, #12]
 8004fd4:	6846      	ldr	r6, [r0, #4]
 8004fd6:	f104 0008 	add.w	r0, r4, #8
 8004fda:	684f      	ldr	r7, [r1, #4]
 8004fdc:	f7fd fd9a 	bl	8002b14 <ai_shape_get_size>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	9701      	str	r7, [sp, #4]
 8004fe4:	9600      	str	r6, [sp, #0]
 8004fe6:	69a1      	ldr	r1, [r4, #24]
 8004fe8:	69a8      	ldr	r0, [r5, #24]
 8004fea:	4633      	mov	r3, r6
 8004fec:	f7ff fb70 	bl	80046d0 <nl_func_sm_array_f32>
 8004ff0:	b003      	add	sp, #12
 8004ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ff4 <forward_hardmax>:
 8004ff4:	b430      	push	{r4, r5}
 8004ff6:	6943      	ldr	r3, [r0, #20]
 8004ff8:	6980      	ldr	r0, [r0, #24]
 8004ffa:	881a      	ldrh	r2, [r3, #0]
 8004ffc:	2a00      	cmp	r2, #0
 8004ffe:	bf1a      	itte	ne
 8005000:	6859      	ldrne	r1, [r3, #4]
 8005002:	1d09      	addne	r1, r1, #4
 8005004:	2104      	moveq	r1, #4
 8005006:	6809      	ldr	r1, [r1, #0]
 8005008:	2900      	cmp	r1, #0
 800500a:	bf14      	ite	ne
 800500c:	680c      	ldrne	r4, [r1, #0]
 800500e:	2400      	moveq	r4, #0
 8005010:	2a02      	cmp	r2, #2
 8005012:	bfa6      	itte	ge
 8005014:	6859      	ldrge	r1, [r3, #4]
 8005016:	3110      	addge	r1, #16
 8005018:	2104      	movlt	r1, #4
 800501a:	6809      	ldr	r1, [r1, #0]
 800501c:	6883      	ldr	r3, [r0, #8]
 800501e:	2900      	cmp	r1, #0
 8005020:	bf19      	ittee	ne
 8005022:	6809      	ldrne	r1, [r1, #0]
 8005024:	f101 0518 	addne.w	r5, r1, #24
 8005028:	2200      	moveq	r2, #0
 800502a:	f102 0518 	addeq.w	r5, r2, #24
 800502e:	f104 0208 	add.w	r2, r4, #8
 8005032:	69a1      	ldr	r1, [r4, #24]
 8005034:	6828      	ldr	r0, [r5, #0]
 8005036:	bc30      	pop	{r4, r5}
 8005038:	f7ff bbd0 	b.w	80047dc <nl_func_hardmax_array_f32>

0800503c <pool_func_mp_array_f32>:
 800503c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005040:	b08c      	sub	sp, #48	; 0x30
 8005042:	4688      	mov	r8, r1
 8005044:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005046:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 800504a:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800504c:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8005050:	f8bd 005c 	ldrh.w	r0, [sp, #92]	; 0x5c
 8005054:	991d      	ldr	r1, [sp, #116]	; 0x74
 8005056:	1e66      	subs	r6, r4, #1
 8005058:	4615      	mov	r5, r2
 800505a:	f8cd e014 	str.w	lr, [sp, #20]
 800505e:	f9bd e068 	ldrsh.w	lr, [sp, #104]	; 0x68
 8005062:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005064:	6889      	ldr	r1, [r1, #8]
 8005066:	fb16 fe0e 	smulbb	lr, r6, lr
 800506a:	ebae 0e0c 	sub.w	lr, lr, ip
 800506e:	44be      	add	lr, r7
 8005070:	f1ae 0601 	sub.w	r6, lr, #1
 8005074:	1b76      	subs	r6, r6, r5
 8005076:	ea50 000c 	orrs.w	r0, r0, ip
 800507a:	f040 80ea 	bne.w	8005252 <pool_func_mp_array_f32+0x216>
 800507e:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 8005082:	f9bd e05c 	ldrsh.w	lr, [sp, #92]	; 0x5c
 8005086:	f9bd 0054 	ldrsh.w	r0, [sp, #84]	; 0x54
 800508a:	f1a9 0a01 	sub.w	sl, r9, #1
 800508e:	fb1a fa02 	smulbb	sl, sl, r2
 8005092:	ebaa 0a0e 	sub.w	sl, sl, lr
 8005096:	4482      	add	sl, r0
 8005098:	f1aa 0901 	sub.w	r9, sl, #1
 800509c:	eba9 0908 	sub.w	r9, r9, r8
 80050a0:	fa0f f989 	sxth.w	r9, r9
 80050a4:	f1b9 0f00 	cmp.w	r9, #0
 80050a8:	bf44      	itt	mi
 80050aa:	b236      	sxthmi	r6, r6
 80050ac:	2e00      	cmpmi	r6, #0
 80050ae:	f140 80d0 	bpl.w	8005252 <pool_func_mp_array_f32+0x216>
 80050b2:	2500      	movs	r5, #0
 80050b4:	0020      	movs	r0, r4
 80050b6:	9509      	str	r5, [sp, #36]	; 0x24
 80050b8:	f000 8188 	beq.w	80053cc <pool_func_mp_array_f32+0x390>
 80050bc:	b23f      	sxth	r7, r7
 80050be:	ed9f 0ac5 	vldr	s0, [pc, #788]	; 80053d4 <.text_3>
 80050c2:	f8ad 7006 	strh.w	r7, [sp, #6]
 80050c6:	9502      	str	r5, [sp, #8]
 80050c8:	9508      	str	r5, [sp, #32]
 80050ca:	9407      	str	r4, [sp, #28]
 80050cc:	ea4f 0403 	mov.w	r4, r3
 80050d0:	f8bd 006c 	ldrh.w	r0, [sp, #108]	; 0x6c
 80050d4:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80050d8:	2800      	cmp	r0, #0
 80050da:	f000 809c 	beq.w	8005216 <pool_func_mp_array_f32+0x1da>
 80050de:	f8bd 6068 	ldrh.w	r6, [sp, #104]	; 0x68
 80050e2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80050e6:	f9bd 0054 	ldrsh.w	r0, [sp, #84]	; 0x54
 80050ea:	f8bd c06c 	ldrh.w	ip, [sp, #108]	; 0x6c
 80050ee:	9d08      	ldr	r5, [sp, #32]
 80050f0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80050f4:	f04f 0a00 	mov.w	sl, #0
 80050f8:	9503      	str	r5, [sp, #12]
 80050fa:	fb06 f909 	mul.w	r9, r6, r9
 80050fe:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8005102:	9104      	str	r1, [sp, #16]
 8005104:	f8ad 0000 	strh.w	r0, [sp]
 8005108:	fa0f f989 	sxth.w	r9, r9
 800510c:	f8cd c018 	str.w	ip, [sp, #24]
 8005110:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8005114:	f8ad 8004 	strh.w	r8, [sp, #4]
 8005118:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800511c:	2100      	movs	r1, #0
 800511e:	f9bd e000 	ldrsh.w	lr, [sp]
 8005122:	2800      	cmp	r0, #0
 8005124:	d05f      	beq.n	80051e6 <pool_func_mp_array_f32+0x1aa>
 8005126:	9b03      	ldr	r3, [sp, #12]
 8005128:	f10d 0808 	add.w	r8, sp, #8
 800512c:	f9b8 6000 	ldrsh.w	r6, [r8]
 8005130:	9a04      	ldr	r2, [sp, #16]
 8005132:	4363      	muls	r3, r4
 8005134:	fa0f f58a 	sxth.w	r5, sl
 8005138:	960a      	str	r6, [sp, #40]	; 0x28
 800513a:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 800513e:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8005142:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005144:	eef0 0a40 	vmov.f32	s1, s0
 8005148:	42ba      	cmp	r2, r7
 800514a:	da45      	bge.n	80051d8 <pool_func_mp_array_f32+0x19c>
 800514c:	fb08 f902 	mul.w	r9, r8, r2
 8005150:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005152:	9805      	ldr	r0, [sp, #20]
 8005154:	1aba      	subs	r2, r7, r2
 8005156:	4575      	cmp	r5, lr
 8005158:	462e      	mov	r6, r5
 800515a:	da39      	bge.n	80051d0 <pool_func_mp_array_f32+0x194>
 800515c:	ebae 0305 	sub.w	r3, lr, r5
 8005160:	ea5f 7bc3 	movs.w	fp, r3, lsl #31
 8005164:	d50f      	bpl.n	8005186 <pool_func_mp_array_f32+0x14a>
 8005166:	eb09 0b06 	add.w	fp, r9, r6
 800516a:	fb0b 1b04 	mla	fp, fp, r4, r1
 800516e:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8005172:	ed9b 1a00 	vldr	s2, [fp]
 8005176:	eeb4 1a60 	vcmp.f32	s2, s1
 800517a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517e:	bf58      	it	pl
 8005180:	eef0 0a41 	vmovpl.f32	s1, s2
 8005184:	1c76      	adds	r6, r6, #1
 8005186:	085b      	lsrs	r3, r3, #1
 8005188:	f000 8022 	beq.w	80051d0 <pool_func_mp_array_f32+0x194>
 800518c:	eb09 0b06 	add.w	fp, r9, r6
 8005190:	fb0b 1b04 	mla	fp, fp, r4, r1
 8005194:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8005198:	ed9b 1a00 	vldr	s2, [fp]
 800519c:	eeb4 1a60 	vcmp.f32	s2, s1
 80051a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a4:	bf58      	it	pl
 80051a6:	eef0 0a41 	vmovpl.f32	s1, s2
 80051aa:	1c76      	adds	r6, r6, #1
 80051ac:	eb09 0b06 	add.w	fp, r9, r6
 80051b0:	fb0b 1b04 	mla	fp, fp, r4, r1
 80051b4:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 80051b8:	ed9b 1a00 	vldr	s2, [fp]
 80051bc:	eeb4 1a60 	vcmp.f32	s2, s1
 80051c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c4:	bf58      	it	pl
 80051c6:	eef0 0a41 	vmovpl.f32	s1, s2
 80051ca:	1c76      	adds	r6, r6, #1
 80051cc:	1e5b      	subs	r3, r3, #1
 80051ce:	d1dd      	bne.n	800518c <pool_func_mp_array_f32+0x150>
 80051d0:	1e52      	subs	r2, r2, #1
 80051d2:	44c1      	add	r9, r8
 80051d4:	d1bf      	bne.n	8005156 <pool_func_mp_array_f32+0x11a>
 80051d6:	9005      	str	r0, [sp, #20]
 80051d8:	1c49      	adds	r1, r1, #1
 80051da:	edcc 0a00 	vstr	s1, [ip]
 80051de:	42a1      	cmp	r1, r4
 80051e0:	f10c 0c04 	add.w	ip, ip, #4
 80051e4:	dbad      	blt.n	8005142 <pool_func_mp_array_f32+0x106>
 80051e6:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80051ea:	f8bd 2000 	ldrh.w	r2, [sp]
 80051ee:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 80051f2:	9803      	ldr	r0, [sp, #12]
 80051f4:	448a      	add	sl, r1
 80051f6:	9906      	ldr	r1, [sp, #24]
 80051f8:	1c40      	adds	r0, r0, #1
 80051fa:	9003      	str	r0, [sp, #12]
 80051fc:	189a      	adds	r2, r3, r2
 80051fe:	1e49      	subs	r1, r1, #1
 8005200:	f8ad 2000 	strh.w	r2, [sp]
 8005204:	9106      	str	r1, [sp, #24]
 8005206:	d187      	bne.n	8005118 <pool_func_mp_array_f32+0xdc>
 8005208:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800520c:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 8005210:	9904      	ldr	r1, [sp, #16]
 8005212:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8005216:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 800521a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800521c:	9d08      	ldr	r5, [sp, #32]
 800521e:	f8bd 6068 	ldrh.w	r6, [sp, #104]	; 0x68
 8005222:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005226:	1c40      	adds	r0, r0, #1
 8005228:	19ef      	adds	r7, r5, r7
 800522a:	9009      	str	r0, [sp, #36]	; 0x24
 800522c:	9708      	str	r7, [sp, #32]
 800522e:	4476      	add	r6, lr
 8005230:	9602      	str	r6, [sp, #8]
 8005232:	f8bd 7006 	ldrh.w	r7, [sp, #6]
 8005236:	f9bd 5068 	ldrsh.w	r5, [sp, #104]	; 0x68
 800523a:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800523e:	19ef      	adds	r7, r5, r7
 8005240:	f8ad 7006 	strh.w	r7, [sp, #6]
 8005244:	f1be 0e01 	subs.w	lr, lr, #1
 8005248:	f8cd e01c 	str.w	lr, [sp, #28]
 800524c:	f000 80be 	beq.w	80053cc <pool_func_mp_array_f32+0x390>
 8005250:	e73e      	b.n	80050d0 <pool_func_mp_array_f32+0x94>
 8005252:	0020      	movs	r0, r4
 8005254:	f000 80ba 	beq.w	80053cc <pool_func_mp_array_f32+0x390>
 8005258:	f1cc 0c00 	rsb	ip, ip, #0
 800525c:	4467      	add	r7, ip
 800525e:	f8ad c000 	strh.w	ip, [sp]
 8005262:	2600      	movs	r6, #0
 8005264:	f8ad 700a 	strh.w	r7, [sp, #10]
 8005268:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 80053d4 <.text_3>
 800526c:	9609      	str	r6, [sp, #36]	; 0x24
 800526e:	9408      	str	r4, [sp, #32]
 8005270:	f8bd 006c 	ldrh.w	r0, [sp, #108]	; 0x6c
 8005274:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8005278:	2800      	cmp	r0, #0
 800527a:	f000 808e 	beq.w	800539a <pool_func_mp_array_f32+0x35e>
 800527e:	f9bd 605c 	ldrsh.w	r6, [sp, #92]	; 0x5c
 8005282:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
 8005286:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 800528a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800528e:	f8cd e00c 	str.w	lr, [sp, #12]
 8005292:	f8bd e06c 	ldrh.w	lr, [sp, #108]	; 0x6c
 8005296:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 800529a:	4276      	negs	r6, r6
 800529c:	19bf      	adds	r7, r7, r6
 800529e:	9104      	str	r1, [sp, #16]
 80052a0:	f8ad 6006 	strh.w	r6, [sp, #6]
 80052a4:	f8ad 7008 	strh.w	r7, [sp, #8]
 80052a8:	f8cd e01c 	str.w	lr, [sp, #28]
 80052ac:	f8ad 8004 	strh.w	r8, [sp, #4]
 80052b0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80052b4:	2600      	movs	r6, #0
 80052b6:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80052ba:	2900      	cmp	r1, #0
 80052bc:	d051      	beq.n	8005362 <pool_func_mp_array_f32+0x326>
 80052be:	9b03      	ldr	r3, [sp, #12]
 80052c0:	9a04      	ldr	r2, [sp, #16]
 80052c2:	f9bd 4006 	ldrsh.w	r4, [sp, #6]
 80052c6:	4359      	muls	r1, r3
 80052c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80052cc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80052d0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80052d4:	f8cd 1018 	str.w	r1, [sp, #24]
 80052d8:	f9bd 1000 	ldrsh.w	r1, [sp]
 80052dc:	eef0 0a40 	vmov.f32	s1, s0
 80052e0:	4551      	cmp	r1, sl
 80052e2:	da2c      	bge.n	800533e <pool_func_mp_array_f32+0x302>
 80052e4:	fb03 f901 	mul.w	r9, r3, r1
 80052e8:	f8ad 5002 	strh.w	r5, [sp, #2]
 80052ec:	4284      	cmp	r4, r0
 80052ee:	4625      	mov	r5, r4
 80052f0:	da1f      	bge.n	8005332 <pool_func_mp_array_f32+0x2f6>
 80052f2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80052f6:	f8dd e014 	ldr.w	lr, [sp, #20]
 80052fa:	2900      	cmp	r1, #0
 80052fc:	bf58      	it	pl
 80052fe:	2d00      	cmppl	r5, #0
 8005300:	d412      	bmi.n	8005328 <pool_func_mp_array_f32+0x2ec>
 8005302:	42b9      	cmp	r1, r7
 8005304:	bfb8      	it	lt
 8005306:	429d      	cmplt	r5, r3
 8005308:	da0e      	bge.n	8005328 <pool_func_mp_array_f32+0x2ec>
 800530a:	eb09 0b05 	add.w	fp, r9, r5
 800530e:	fb0b 6b02 	mla	fp, fp, r2, r6
 8005312:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 8005316:	ed9b 1a00 	vldr	s2, [fp]
 800531a:	eeb4 1a60 	vcmp.f32	s2, s1
 800531e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005322:	bf58      	it	pl
 8005324:	eef0 0a41 	vmovpl.f32	s1, s2
 8005328:	1c6d      	adds	r5, r5, #1
 800532a:	4285      	cmp	r5, r0
 800532c:	dbe5      	blt.n	80052fa <pool_func_mp_array_f32+0x2be>
 800532e:	f8cd e014 	str.w	lr, [sp, #20]
 8005332:	1c49      	adds	r1, r1, #1
 8005334:	4551      	cmp	r1, sl
 8005336:	4499      	add	r9, r3
 8005338:	dbd8      	blt.n	80052ec <pool_func_mp_array_f32+0x2b0>
 800533a:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 800533e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005342:	1c76      	adds	r6, r6, #1
 8005344:	4296      	cmp	r6, r2
 8005346:	edc8 0a00 	vstr	s1, [r8]
 800534a:	9f06      	ldr	r7, [sp, #24]
 800534c:	f107 0e04 	add.w	lr, r7, #4
 8005350:	f8cd e018 	str.w	lr, [sp, #24]
 8005354:	dbc0      	blt.n	80052d8 <pool_func_mp_array_f32+0x29c>
 8005356:	f8ad 2002 	strh.w	r2, [sp, #2]
 800535a:	f8ad 4006 	strh.w	r4, [sp, #6]
 800535e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005362:	9903      	ldr	r1, [sp, #12]
 8005364:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8005368:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800536c:	1c49      	adds	r1, r1, #1
 800536e:	9103      	str	r1, [sp, #12]
 8005370:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8005374:	188a      	adds	r2, r1, r2
 8005376:	9907      	ldr	r1, [sp, #28]
 8005378:	f8ad 2008 	strh.w	r2, [sp, #8]
 800537c:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8005380:	18d3      	adds	r3, r2, r3
 8005382:	1e49      	subs	r1, r1, #1
 8005384:	f8ad 3006 	strh.w	r3, [sp, #6]
 8005388:	9107      	str	r1, [sp, #28]
 800538a:	d191      	bne.n	80052b0 <pool_func_mp_array_f32+0x274>
 800538c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005390:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 8005394:	9904      	ldr	r1, [sp, #16]
 8005396:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 800539a:	f8bd c06c 	ldrh.w	ip, [sp, #108]	; 0x6c
 800539e:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 80053a2:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	; 0x68
 80053a6:	f8bd 6000 	ldrh.w	r6, [sp]
 80053aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80053ac:	44a4      	add	ip, r4
 80053ae:	f9bd 4068 	ldrsh.w	r4, [sp, #104]	; 0x68
 80053b2:	44be      	add	lr, r7
 80053b4:	9f08      	ldr	r7, [sp, #32]
 80053b6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80053ba:	f8ad e00a 	strh.w	lr, [sp, #10]
 80053be:	19a6      	adds	r6, r4, r6
 80053c0:	1e7f      	subs	r7, r7, #1
 80053c2:	f8ad 6000 	strh.w	r6, [sp]
 80053c6:	9708      	str	r7, [sp, #32]
 80053c8:	f47f af52 	bne.w	8005270 <pool_func_mp_array_f32+0x234>
 80053cc:	b00c      	add	sp, #48	; 0x30
 80053ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080053d4 <.text_3>:
 80053d4:	cf000000 	.word	0xcf000000

080053d8 <pool_func_ap_array_f32>:
 80053d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053dc:	468b      	mov	fp, r1
 80053de:	4699      	mov	r9, r3
 80053e0:	b08c      	sub	sp, #48	; 0x30
 80053e2:	4614      	mov	r4, r2
 80053e4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80053e6:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 80053ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80053ec:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80053f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80053f2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80053f4:	1e4f      	subs	r7, r1, #1
 80053f6:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 80053fa:	fb17 fc0c 	smulbb	ip, r7, ip
 80053fe:	6880      	ldr	r0, [r0, #8]
 8005400:	ea5a 0a03 	orrs.w	sl, sl, r3
 8005404:	68ad      	ldr	r5, [r5, #8]
 8005406:	ebac 0c03 	sub.w	ip, ip, r3
 800540a:	4494      	add	ip, r2
 800540c:	f1ac 0e01 	sub.w	lr, ip, #1
 8005410:	ebae 0e04 	sub.w	lr, lr, r4
 8005414:	f040 80e4 	bne.w	80055e0 <pool_func_ap_array_f32+0x208>
 8005418:	f9bd 606c 	ldrsh.w	r6, [sp, #108]	; 0x6c
 800541c:	f9bd c05c 	ldrsh.w	ip, [sp, #92]	; 0x5c
 8005420:	1e77      	subs	r7, r6, #1
 8005422:	fb17 fa08 	smulbb	sl, r7, r8
 8005426:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
 800542a:	ebaa 0a0c 	sub.w	sl, sl, ip
 800542e:	44ba      	add	sl, r7
 8005430:	f1aa 0601 	sub.w	r6, sl, #1
 8005434:	eba6 060b 	sub.w	r6, r6, fp
 8005438:	b236      	sxth	r6, r6
 800543a:	2e00      	cmp	r6, #0
 800543c:	bf44      	itt	mi
 800543e:	fa0f fe8e 	sxthmi.w	lr, lr
 8005442:	f1be 0f00 	cmpmi.w	lr, #0
 8005446:	f140 80cb 	bpl.w	80055e0 <pool_func_ap_array_f32+0x208>
 800544a:	2400      	movs	r4, #0
 800544c:	000b      	movs	r3, r1
 800544e:	9409      	str	r4, [sp, #36]	; 0x24
 8005450:	f000 81b9 	beq.w	80057c6 <pool_func_ap_array_f32+0x3ee>
 8005454:	b212      	sxth	r2, r2
 8005456:	9408      	str	r4, [sp, #32]
 8005458:	f8ad 2004 	strh.w	r2, [sp, #4]
 800545c:	9407      	str	r4, [sp, #28]
 800545e:	9106      	str	r1, [sp, #24]
 8005460:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8005464:	f9bd e004 	ldrsh.w	lr, [sp, #4]
 8005468:	2900      	cmp	r1, #0
 800546a:	f000 809f 	beq.w	80055ac <pool_func_ap_array_f32+0x1d4>
 800546e:	9907      	ldr	r1, [sp, #28]
 8005470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005472:	9102      	str	r1, [sp, #8]
 8005474:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8005478:	2700      	movs	r7, #0
 800547a:	ae08      	add	r6, sp, #32
 800547c:	f9bd a054 	ldrsh.w	sl, [sp, #84]	; 0x54
 8005480:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8005484:	464c      	mov	r4, r9
 8005486:	434a      	muls	r2, r1
 8005488:	b212      	sxth	r2, r2
 800548a:	920b      	str	r2, [sp, #44]	; 0x2c
 800548c:	5ff1      	ldrsh	r1, [r6, r7]
 800548e:	f8ad 9002 	strh.w	r9, [sp, #2]
 8005492:	910a      	str	r1, [sp, #40]	; 0x28
 8005494:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8005498:	9505      	str	r5, [sp, #20]
 800549a:	f8ad a000 	strh.w	sl, [sp]
 800549e:	9303      	str	r3, [sp, #12]
 80054a0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f9bd c000 	ldrsh.w	ip, [sp]
 80054aa:	2900      	cmp	r1, #0
 80054ac:	d067      	beq.n	800557e <pool_func_ap_array_f32+0x1a6>
 80054ae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80054b2:	9d05      	ldr	r5, [sp, #20]
 80054b4:	f8cd e010 	str.w	lr, [sp, #16]
 80054b8:	f8ad b006 	strh.w	fp, [sp, #6]
 80054bc:	fb08 f804 	mul.w	r8, r8, r4
 80054c0:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 80054c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054c6:	9904      	ldr	r1, [sp, #16]
 80054c8:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 80057cc <.text_5>
 80054cc:	eddf 0abf 	vldr	s1, [pc, #764]	; 80057cc <.text_5>
 80054d0:	428b      	cmp	r3, r1
 80054d2:	da46      	bge.n	8005562 <pool_func_ap_array_f32+0x18a>
 80054d4:	f8bd b006 	ldrh.w	fp, [sp, #6]
 80054d8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80054dc:	ee10 ea90 	vmov	lr, s1
 80054e0:	fb0b f103 	mul.w	r1, fp, r3
 80054e4:	9b04      	ldr	r3, [sp, #16]
 80054e6:	eba3 0808 	sub.w	r8, r3, r8
 80054ea:	4603      	mov	r3, r0
 80054ec:	fa0f fa87 	sxth.w	sl, r7
 80054f0:	45e2      	cmp	sl, ip
 80054f2:	46b9      	mov	r9, r7
 80054f4:	da2e      	bge.n	8005554 <pool_func_ap_array_f32+0x17c>
 80054f6:	ebac 000a 	sub.w	r0, ip, sl
 80054fa:	44e6      	add	lr, ip
 80054fc:	07c6      	lsls	r6, r0, #31
 80054fe:	ebae 0e0a 	sub.w	lr, lr, sl
 8005502:	d50a      	bpl.n	800551a <pool_func_ap_array_f32+0x142>
 8005504:	448a      	add	sl, r1
 8005506:	f109 0901 	add.w	r9, r9, #1
 800550a:	fb0a 2a04 	mla	sl, sl, r4, r2
 800550e:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 8005512:	edda 0a00 	vldr	s1, [sl]
 8005516:	ee30 0a20 	vadd.f32	s0, s0, s1
 800551a:	0840      	lsrs	r0, r0, #1
 800551c:	f000 801a 	beq.w	8005554 <pool_func_ap_array_f32+0x17c>
 8005520:	fa01 fa89 	sxtah	sl, r1, r9
 8005524:	f109 0901 	add.w	r9, r9, #1
 8005528:	fb0a 2a04 	mla	sl, sl, r4, r2
 800552c:	fa01 f689 	sxtah	r6, r1, r9
 8005530:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 8005534:	fb06 2604 	mla	r6, r6, r4, r2
 8005538:	1e40      	subs	r0, r0, #1
 800553a:	f109 0901 	add.w	r9, r9, #1
 800553e:	edda 0a00 	vldr	s1, [sl]
 8005542:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
 8005546:	ee30 0a20 	vadd.f32	s0, s0, s1
 800554a:	ed9a 1a00 	vldr	s2, [sl]
 800554e:	ee30 0a01 	vadd.f32	s0, s0, s2
 8005552:	d1e5      	bne.n	8005520 <pool_func_ap_array_f32+0x148>
 8005554:	f1b8 0801 	subs.w	r8, r8, #1
 8005558:	4459      	add	r1, fp
 800555a:	d1c7      	bne.n	80054ec <pool_func_ap_array_f32+0x114>
 800555c:	4618      	mov	r0, r3
 800555e:	ee00 ea90 	vmov	s1, lr
 8005562:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8005566:	1c52      	adds	r2, r2, #1
 8005568:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800556c:	ed85 0a00 	vstr	s0, [r5]
 8005570:	1d2d      	adds	r5, r5, #4
 8005572:	42a2      	cmp	r2, r4
 8005574:	dba6      	blt.n	80054c4 <pool_func_ap_array_f32+0xec>
 8005576:	f8dd e010 	ldr.w	lr, [sp, #16]
 800557a:	f8bd b006 	ldrh.w	fp, [sp, #6]
 800557e:	9a02      	ldr	r2, [sp, #8]
 8005580:	f8bd 3000 	ldrh.w	r3, [sp]
 8005584:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8005588:	1c52      	adds	r2, r2, #1
 800558a:	9202      	str	r2, [sp, #8]
 800558c:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8005590:	18d3      	adds	r3, r2, r3
 8005592:	f8ad 3000 	strh.w	r3, [sp]
 8005596:	9b03      	ldr	r3, [sp, #12]
 8005598:	19cf      	adds	r7, r1, r7
 800559a:	1e5b      	subs	r3, r3, #1
 800559c:	9303      	str	r3, [sp, #12]
 800559e:	f47f af7f 	bne.w	80054a0 <pool_func_ap_array_f32+0xc8>
 80055a2:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 80055a6:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 80055aa:	9d05      	ldr	r5, [sp, #20]
 80055ac:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 80055b0:	9a07      	ldr	r2, [sp, #28]
 80055b2:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 80055b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055b8:	9c08      	ldr	r4, [sp, #32]
 80055ba:	18d3      	adds	r3, r2, r3
 80055bc:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
 80055c0:	9307      	str	r3, [sp, #28]
 80055c2:	1c49      	adds	r1, r1, #1
 80055c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80055c8:	19e7      	adds	r7, r4, r7
 80055ca:	9c06      	ldr	r4, [sp, #24]
 80055cc:	9109      	str	r1, [sp, #36]	; 0x24
 80055ce:	9708      	str	r7, [sp, #32]
 80055d0:	18d3      	adds	r3, r2, r3
 80055d2:	1e64      	subs	r4, r4, #1
 80055d4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80055d8:	9406      	str	r4, [sp, #24]
 80055da:	f000 80f4 	beq.w	80057c6 <pool_func_ap_array_f32+0x3ee>
 80055de:	e73f      	b.n	8005460 <pool_func_ap_array_f32+0x88>
 80055e0:	000f      	movs	r7, r1
 80055e2:	f000 80f0 	beq.w	80057c6 <pool_func_ap_array_f32+0x3ee>
 80055e6:	425b      	negs	r3, r3
 80055e8:	18d2      	adds	r2, r2, r3
 80055ea:	f04f 0e00 	mov.w	lr, #0
 80055ee:	f8ad 3000 	strh.w	r3, [sp]
 80055f2:	f8ad 200a 	strh.w	r2, [sp, #10]
 80055f6:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 80055fa:	9108      	str	r1, [sp, #32]
 80055fc:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8005600:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8005604:	2900      	cmp	r1, #0
 8005606:	f000 80c6 	beq.w	8005796 <pool_func_ap_array_f32+0x3be>
 800560a:	f9bd 705c 	ldrsh.w	r7, [sp, #92]	; 0x5c
 800560e:	f9bd 6054 	ldrsh.w	r6, [sp, #84]	; 0x54
 8005612:	f8bd a06c 	ldrh.w	sl, [sp, #108]	; 0x6c
 8005616:	f8ad 9002 	strh.w	r9, [sp, #2]
 800561a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800561c:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8005620:	9204      	str	r2, [sp, #16]
 8005622:	427f      	negs	r7, r7
 8005624:	19f6      	adds	r6, r6, r7
 8005626:	9505      	str	r5, [sp, #20]
 8005628:	f8ad 7004 	strh.w	r7, [sp, #4]
 800562c:	f8ad 6008 	strh.w	r6, [sp, #8]
 8005630:	f8cd a01c 	str.w	sl, [sp, #28]
 8005634:	f8ad b006 	strh.w	fp, [sp, #6]
 8005638:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800563c:	2100      	movs	r1, #0
 800563e:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
 8005642:	2a00      	cmp	r2, #0
 8005644:	f000 808a 	beq.w	800575c <pool_func_ap_array_f32+0x384>
 8005648:	9f04      	ldr	r7, [sp, #16]
 800564a:	9d05      	ldr	r5, [sp, #20]
 800564c:	f8ad 400c 	strh.w	r4, [sp, #12]
 8005650:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8005654:	fb07 fb02 	mul.w	fp, r7, r2
 8005658:	eb05 058b 	add.w	r5, r5, fp, lsl #2
 800565c:	f8cd 5018 	str.w	r5, [sp, #24]
 8005660:	f9bd 5000 	ldrsh.w	r5, [sp]
 8005664:	ed9f 0a59 	vldr	s0, [pc, #356]	; 80057cc <.text_5>
 8005668:	eddf 0a58 	vldr	s1, [pc, #352]	; 80057cc <.text_5>
 800566c:	f8bd 4002 	ldrh.w	r4, [sp, #2]
 8005670:	429d      	cmp	r5, r3
 8005672:	da60      	bge.n	8005736 <pool_func_ap_array_f32+0x35e>
 8005674:	930a      	str	r3, [sp, #40]	; 0x28
 8005676:	fb09 fe05 	mul.w	lr, r9, r5
 800567a:	462b      	mov	r3, r5
 800567c:	ee10 2a90 	vmov	r2, s1
 8005680:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8005684:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8005688:	4545      	cmp	r5, r8
 800568a:	462f      	mov	r7, r5
 800568c:	da47      	bge.n	800571e <pool_func_ap_array_f32+0x346>
 800568e:	eba8 0a05 	sub.w	sl, r8, r5
 8005692:	ea5f 76ca 	movs.w	r6, sl, lsl #31
 8005696:	d513      	bpl.n	80056c0 <pool_func_ap_array_f32+0x2e8>
 8005698:	2b00      	cmp	r3, #0
 800569a:	bf58      	it	pl
 800569c:	2f00      	cmppl	r7, #0
 800569e:	d40e      	bmi.n	80056be <pool_func_ap_array_f32+0x2e6>
 80056a0:	455b      	cmp	r3, fp
 80056a2:	bfb8      	it	lt
 80056a4:	454f      	cmplt	r7, r9
 80056a6:	da0a      	bge.n	80056be <pool_func_ap_array_f32+0x2e6>
 80056a8:	eb0e 0607 	add.w	r6, lr, r7
 80056ac:	1c52      	adds	r2, r2, #1
 80056ae:	fb06 1604 	mla	r6, r6, r4, r1
 80056b2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80056b6:	edd6 0a00 	vldr	s1, [r6]
 80056ba:	ee30 0a20 	vadd.f32	s0, s0, s1
 80056be:	1c7f      	adds	r7, r7, #1
 80056c0:	ea5f 0a5a 	movs.w	sl, sl, lsr #1
 80056c4:	d02b      	beq.n	800571e <pool_func_ap_array_f32+0x346>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d405      	bmi.n	80056d6 <pool_func_ap_array_f32+0x2fe>
 80056ca:	2f00      	cmp	r7, #0
 80056cc:	bf48      	it	mi
 80056ce:	1c7e      	addmi	r6, r7, #1
 80056d0:	d410      	bmi.n	80056f4 <pool_func_ap_array_f32+0x31c>
 80056d2:	455b      	cmp	r3, fp
 80056d4:	db01      	blt.n	80056da <pool_func_ap_array_f32+0x302>
 80056d6:	1c7e      	adds	r6, r7, #1
 80056d8:	e01d      	b.n	8005716 <pool_func_ap_array_f32+0x33e>
 80056da:	1c7e      	adds	r6, r7, #1
 80056dc:	454f      	cmp	r7, r9
 80056de:	da09      	bge.n	80056f4 <pool_func_ap_array_f32+0x31c>
 80056e0:	4477      	add	r7, lr
 80056e2:	1c52      	adds	r2, r2, #1
 80056e4:	fb07 1704 	mla	r7, r7, r4, r1
 80056e8:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80056ec:	edd7 0a00 	vldr	s1, [r7]
 80056f0:	ee30 0a20 	vadd.f32	s0, s0, s1
 80056f4:	2e00      	cmp	r6, #0
 80056f6:	d40e      	bmi.n	8005716 <pool_func_ap_array_f32+0x33e>
 80056f8:	455b      	cmp	r3, fp
 80056fa:	bfb8      	it	lt
 80056fc:	454e      	cmplt	r6, r9
 80056fe:	da0a      	bge.n	8005716 <pool_func_ap_array_f32+0x33e>
 8005700:	eb0e 0706 	add.w	r7, lr, r6
 8005704:	1c52      	adds	r2, r2, #1
 8005706:	fb07 1704 	mla	r7, r7, r4, r1
 800570a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800570e:	edd7 0a00 	vldr	s1, [r7]
 8005712:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005716:	1c77      	adds	r7, r6, #1
 8005718:	f1ba 0a01 	subs.w	sl, sl, #1
 800571c:	d1d3      	bne.n	80056c6 <pool_func_ap_array_f32+0x2ee>
 800571e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005720:	1c5b      	adds	r3, r3, #1
 8005722:	44ce      	add	lr, r9
 8005724:	42bb      	cmp	r3, r7
 8005726:	dbaf      	blt.n	8005688 <pool_func_ap_array_f32+0x2b0>
 8005728:	463b      	mov	r3, r7
 800572a:	ee00 2a90 	vmov	s1, r2
 800572e:	f8ad 5004 	strh.w	r5, [sp, #4]
 8005732:	f8ad b00c 	strh.w	fp, [sp, #12]
 8005736:	9d06      	ldr	r5, [sp, #24]
 8005738:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800573c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8005740:	1c49      	adds	r1, r1, #1
 8005742:	42a1      	cmp	r1, r4
 8005744:	ed85 0a00 	vstr	s0, [r5]
 8005748:	9a06      	ldr	r2, [sp, #24]
 800574a:	f102 0b04 	add.w	fp, r2, #4
 800574e:	f8cd b018 	str.w	fp, [sp, #24]
 8005752:	db85      	blt.n	8005660 <pool_func_ap_array_f32+0x288>
 8005754:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8005758:	f8ad 9006 	strh.w	r9, [sp, #6]
 800575c:	9d04      	ldr	r5, [sp, #16]
 800575e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8005762:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8005766:	f9bd b064 	ldrsh.w	fp, [sp, #100]	; 0x64
 800576a:	1c6d      	adds	r5, r5, #1
 800576c:	9504      	str	r5, [sp, #16]
 800576e:	f9bd 5064 	ldrsh.w	r5, [sp, #100]	; 0x64
 8005772:	1869      	adds	r1, r5, r1
 8005774:	9d07      	ldr	r5, [sp, #28]
 8005776:	445a      	add	r2, fp
 8005778:	f8ad 1008 	strh.w	r1, [sp, #8]
 800577c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005780:	1e6d      	subs	r5, r5, #1
 8005782:	9507      	str	r5, [sp, #28]
 8005784:	f47f af58 	bne.w	8005638 <pool_func_ap_array_f32+0x260>
 8005788:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 800578c:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8005790:	9d05      	ldr	r5, [sp, #20]
 8005792:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8005796:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 800579a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800579c:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 80057a0:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 80057a4:	19d7      	adds	r7, r2, r7
 80057a6:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
 80057aa:	9709      	str	r7, [sp, #36]	; 0x24
 80057ac:	f8bd 7000 	ldrh.w	r7, [sp]
 80057b0:	449e      	add	lr, r3
 80057b2:	9b08      	ldr	r3, [sp, #32]
 80057b4:	f8ad e00a 	strh.w	lr, [sp, #10]
 80057b8:	19d7      	adds	r7, r2, r7
 80057ba:	1e5b      	subs	r3, r3, #1
 80057bc:	f8ad 7000 	strh.w	r7, [sp]
 80057c0:	9308      	str	r3, [sp, #32]
 80057c2:	f47f af1b 	bne.w	80055fc <pool_func_ap_array_f32+0x224>
 80057c6:	b00c      	add	sp, #48	; 0x30
 80057c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080057cc <.text_5>:
 80057cc:	00000000 	.word	0x00000000

080057d0 <pool_func_mp_kernel_array_f32>:
 80057d0:	b470      	push	{r4, r5, r6}
 80057d2:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 80057d6:	42a1      	cmp	r1, r4
 80057d8:	d257      	bcs.n	800588a <pool_func_mp_kernel_array_f32+0xba>
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d051      	beq.n	8005882 <pool_func_mp_kernel_array_f32+0xb2>
 80057de:	f013 0203 	ands.w	r2, r3, #3
 80057e2:	460d      	mov	r5, r1
 80057e4:	4606      	mov	r6, r0
 80057e6:	d011      	beq.n	800580c <pool_func_mp_kernel_array_f32+0x3c>
 80057e8:	ed96 0a00 	vldr	s0, [r6]
 80057ec:	edd5 0a00 	vldr	s1, [r5]
 80057f0:	eef4 0a40 	vcmp.f32	s1, s0
 80057f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057f8:	bf58      	it	pl
 80057fa:	eeb0 0a60 	vmovpl.f32	s0, s1
 80057fe:	ed86 0a00 	vstr	s0, [r6]
 8005802:	1e52      	subs	r2, r2, #1
 8005804:	1d36      	adds	r6, r6, #4
 8005806:	1d2d      	adds	r5, r5, #4
 8005808:	2a00      	cmp	r2, #0
 800580a:	d1ed      	bne.n	80057e8 <pool_func_mp_kernel_array_f32+0x18>
 800580c:	089a      	lsrs	r2, r3, #2
 800580e:	d038      	beq.n	8005882 <pool_func_mp_kernel_array_f32+0xb2>
 8005810:	edd5 0a00 	vldr	s1, [r5]
 8005814:	edd6 1a00 	vldr	s3, [r6]
 8005818:	eef4 0a61 	vcmp.f32	s1, s3
 800581c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005820:	bf48      	it	mi
 8005822:	eef0 0a61 	vmovmi.f32	s1, s3
 8005826:	edc6 0a00 	vstr	s1, [r6]
 800582a:	edd5 0a01 	vldr	s1, [r5, #4]
 800582e:	edd6 1a01 	vldr	s3, [r6, #4]
 8005832:	eef4 0a61 	vcmp.f32	s1, s3
 8005836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800583a:	ed96 0a02 	vldr	s0, [r6, #8]
 800583e:	bf48      	it	mi
 8005840:	eef0 0a61 	vmovmi.f32	s1, s3
 8005844:	edc6 0a01 	vstr	s1, [r6, #4]
 8005848:	ed95 1a02 	vldr	s2, [r5, #8]
 800584c:	eeb4 1a40 	vcmp.f32	s2, s0
 8005850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005854:	edd6 1a03 	vldr	s3, [r6, #12]
 8005858:	bf48      	it	mi
 800585a:	eeb0 1a40 	vmovmi.f32	s2, s0
 800585e:	ed86 1a02 	vstr	s2, [r6, #8]
 8005862:	edd5 0a03 	vldr	s1, [r5, #12]
 8005866:	eef4 0a61 	vcmp.f32	s1, s3
 800586a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800586e:	bf58      	it	pl
 8005870:	eef0 1a60 	vmovpl.f32	s3, s1
 8005874:	edc6 1a03 	vstr	s3, [r6, #12]
 8005878:	1e52      	subs	r2, r2, #1
 800587a:	3610      	adds	r6, #16
 800587c:	3510      	adds	r5, #16
 800587e:	2a00      	cmp	r2, #0
 8005880:	d1c6      	bne.n	8005810 <pool_func_mp_kernel_array_f32+0x40>
 8005882:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005886:	42a1      	cmp	r1, r4
 8005888:	d3a7      	bcc.n	80057da <pool_func_mp_kernel_array_f32+0xa>
 800588a:	bc70      	pop	{r4, r5, r6}
 800588c:	4770      	bx	lr
	...

08005890 <pool_func_ap_kernel_array_f32>:
 8005890:	b470      	push	{r4, r5, r6}
 8005892:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 8005896:	42a1      	cmp	r1, r4
 8005898:	d24f      	bcs.n	800593a <pool_func_ap_kernel_array_f32+0xaa>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d049      	beq.n	8005932 <pool_func_ap_kernel_array_f32+0xa2>
 800589e:	f013 0203 	ands.w	r2, r3, #3
 80058a2:	460d      	mov	r5, r1
 80058a4:	4606      	mov	r6, r0
 80058a6:	d00e      	beq.n	80058c6 <pool_func_ap_kernel_array_f32+0x36>
 80058a8:	4288      	cmp	r0, r1
 80058aa:	ed95 0a00 	vldr	s0, [r5]
 80058ae:	bf1c      	itt	ne
 80058b0:	edd6 0a00 	vldrne	s1, [r6]
 80058b4:	ee30 0a80 	vaddne.f32	s0, s1, s0
 80058b8:	ed86 0a00 	vstr	s0, [r6]
 80058bc:	1e52      	subs	r2, r2, #1
 80058be:	1d36      	adds	r6, r6, #4
 80058c0:	1d2d      	adds	r5, r5, #4
 80058c2:	2a00      	cmp	r2, #0
 80058c4:	d1f0      	bne.n	80058a8 <pool_func_ap_kernel_array_f32+0x18>
 80058c6:	089a      	lsrs	r2, r3, #2
 80058c8:	d033      	beq.n	8005932 <pool_func_ap_kernel_array_f32+0xa2>
 80058ca:	4288      	cmp	r0, r1
 80058cc:	edd5 1a00 	vldr	s3, [r5]
 80058d0:	d10c      	bne.n	80058ec <pool_func_ap_kernel_array_f32+0x5c>
 80058d2:	edc6 1a00 	vstr	s3, [r6]
 80058d6:	ed95 0a01 	vldr	s0, [r5, #4]
 80058da:	ed86 0a01 	vstr	s0, [r6, #4]
 80058de:	edd5 1a02 	vldr	s3, [r5, #8]
 80058e2:	edc6 1a02 	vstr	s3, [r6, #8]
 80058e6:	edd5 1a03 	vldr	s3, [r5, #12]
 80058ea:	e01b      	b.n	8005924 <pool_func_ap_kernel_array_f32+0x94>
 80058ec:	edd6 0a00 	vldr	s1, [r6]
 80058f0:	ee30 0aa1 	vadd.f32	s0, s1, s3
 80058f4:	ed86 0a00 	vstr	s0, [r6]
 80058f8:	ed96 1a01 	vldr	s2, [r6, #4]
 80058fc:	ed95 0a01 	vldr	s0, [r5, #4]
 8005900:	ee71 0a00 	vadd.f32	s1, s2, s0
 8005904:	edc6 0a01 	vstr	s1, [r6, #4]
 8005908:	edd6 1a02 	vldr	s3, [r6, #8]
 800590c:	edd5 0a02 	vldr	s1, [r5, #8]
 8005910:	ee31 0aa0 	vadd.f32	s0, s3, s1
 8005914:	ed86 0a02 	vstr	s0, [r6, #8]
 8005918:	ed96 0a03 	vldr	s0, [r6, #12]
 800591c:	ed95 1a03 	vldr	s2, [r5, #12]
 8005920:	ee70 1a01 	vadd.f32	s3, s0, s2
 8005924:	edc6 1a03 	vstr	s3, [r6, #12]
 8005928:	1e52      	subs	r2, r2, #1
 800592a:	3610      	adds	r6, #16
 800592c:	3510      	adds	r5, #16
 800592e:	2a00      	cmp	r2, #0
 8005930:	d1cb      	bne.n	80058ca <pool_func_ap_kernel_array_f32+0x3a>
 8005932:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005936:	42a1      	cmp	r1, r4
 8005938:	d3af      	bcc.n	800589a <pool_func_ap_kernel_array_f32+0xa>
 800593a:	9903      	ldr	r1, [sp, #12]
 800593c:	b3a1      	cbz	r1, 80059a8 <pool_func_ap_kernel_array_f32+0x118>
 800593e:	ee00 1a10 	vmov	s0, r1
 8005942:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8005946:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800594a:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800594e:	b35b      	cbz	r3, 80059a8 <pool_func_ap_kernel_array_f32+0x118>
 8005950:	f013 0103 	ands.w	r1, r3, #3
 8005954:	f000 800a 	beq.w	800596c <pool_func_ap_kernel_array_f32+0xdc>
 8005958:	edd0 0a00 	vldr	s1, [r0]
 800595c:	1e49      	subs	r1, r1, #1
 800595e:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005962:	edc0 0a00 	vstr	s1, [r0]
 8005966:	f100 0004 	add.w	r0, r0, #4
 800596a:	d1f5      	bne.n	8005958 <pool_func_ap_kernel_array_f32+0xc8>
 800596c:	089b      	lsrs	r3, r3, #2
 800596e:	d01b      	beq.n	80059a8 <pool_func_ap_kernel_array_f32+0x118>
 8005970:	edd0 0a00 	vldr	s1, [r0]
 8005974:	1e5b      	subs	r3, r3, #1
 8005976:	ee60 0a80 	vmul.f32	s1, s1, s0
 800597a:	edc0 0a00 	vstr	s1, [r0]
 800597e:	ed90 1a01 	vldr	s2, [r0, #4]
 8005982:	ee21 1a00 	vmul.f32	s2, s2, s0
 8005986:	ed80 1a01 	vstr	s2, [r0, #4]
 800598a:	edd0 0a02 	vldr	s1, [r0, #8]
 800598e:	ed90 1a03 	vldr	s2, [r0, #12]
 8005992:	ee60 1a80 	vmul.f32	s3, s1, s0
 8005996:	ee61 0a00 	vmul.f32	s1, s2, s0
 800599a:	edc0 1a02 	vstr	s3, [r0, #8]
 800599e:	edc0 0a03 	vstr	s1, [r0, #12]
 80059a2:	f100 0010 	add.w	r0, r0, #16
 80059a6:	d1e3      	bne.n	8005970 <pool_func_ap_kernel_array_f32+0xe0>
 80059a8:	bc70      	pop	{r4, r5, r6}
 80059aa:	4770      	bx	lr

080059ac <forward_mp>:
 80059ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b0:	b08e      	sub	sp, #56	; 0x38
 80059b2:	4680      	mov	r8, r0
 80059b4:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80059b8:	8811      	ldrh	r1, [r2, #0]
 80059ba:	2900      	cmp	r1, #0
 80059bc:	bf1a      	itte	ne
 80059be:	6850      	ldrne	r0, [r2, #4]
 80059c0:	1d00      	addne	r0, r0, #4
 80059c2:	2004      	moveq	r0, #4
 80059c4:	6800      	ldr	r0, [r0, #0]
 80059c6:	2800      	cmp	r0, #0
 80059c8:	bf14      	ite	ne
 80059ca:	6805      	ldrne	r5, [r0, #0]
 80059cc:	2500      	moveq	r5, #0
 80059ce:	2901      	cmp	r1, #1
 80059d0:	bfc6      	itte	gt
 80059d2:	6850      	ldrgt	r0, [r2, #4]
 80059d4:	3010      	addgt	r0, #16
 80059d6:	2004      	movle	r0, #4
 80059d8:	6800      	ldr	r0, [r0, #0]
 80059da:	68ea      	ldr	r2, [r5, #12]
 80059dc:	2800      	cmp	r0, #0
 80059de:	bf14      	ite	ne
 80059e0:	6807      	ldrne	r7, [r0, #0]
 80059e2:	2700      	moveq	r7, #0
 80059e4:	68f9      	ldr	r1, [r7, #12]
 80059e6:	68d6      	ldr	r6, [r2, #12]
 80059e8:	68cb      	ldr	r3, [r1, #12]
 80059ea:	9609      	str	r6, [sp, #36]	; 0x24
 80059ec:	6889      	ldr	r1, [r1, #8]
 80059ee:	9108      	str	r1, [sp, #32]
 80059f0:	6896      	ldr	r6, [r2, #8]
 80059f2:	6851      	ldr	r1, [r2, #4]
 80059f4:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80059f8:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f8cd c01c 	str.w	ip, [sp, #28]
 8005a02:	f8d8 0020 	ldr.w	r0, [r8, #32]
 8005a06:	f8d8 e024 	ldr.w	lr, [r8, #36]	; 0x24
 8005a0a:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8005a0e:	f8d8 c02c 	ldr.w	ip, [r8, #44]	; 0x2c
 8005a12:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8005a16:	69bf      	ldr	r7, [r7, #24]
 8005a18:	f8dc 9000 	ldr.w	r9, [ip]
 8005a1c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8005a20:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8005a24:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8005a28:	f1c9 0900 	rsb	r9, r9, #0
 8005a2c:	f8cd 9000 	str.w	r9, [sp]
 8005a30:	f000 80d8 	beq.w	8005be4 <forward_mp+0x238>
 8005a34:	9301      	str	r3, [sp, #4]
 8005a36:	4264      	negs	r4, r4
 8005a38:	940c      	str	r4, [sp, #48]	; 0x30
 8005a3a:	fb01 f706 	mul.w	r7, r1, r6
 8005a3e:	970b      	str	r7, [sp, #44]	; 0x2c
 8005a40:	9d00      	ldr	r5, [sp, #0]
 8005a42:	9b00      	ldr	r3, [sp, #0]
 8005a44:	9f07      	ldr	r7, [sp, #28]
 8005a46:	9c00      	ldr	r4, [sp, #0]
 8005a48:	426d      	negs	r5, r5
 8005a4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005a4c:	bfcc      	ite	gt
 8005a4e:	f04f 0c00 	movgt.w	ip, #0
 8005a52:	f8dd c000 	ldrle.w	ip, [sp]
 8005a56:	1aeb      	subs	r3, r5, r3
 8005a58:	42bb      	cmp	r3, r7
 8005a5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a5c:	bf88      	it	hi
 8005a5e:	463b      	movhi	r3, r7
 8005a60:	191c      	adds	r4, r3, r4
 8005a62:	9b08      	ldr	r3, [sp, #32]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 80b4 	beq.w	8005bd2 <forward_mp+0x226>
 8005a6a:	fb06 fa0c 	mul.w	sl, r6, ip
 8005a6e:	9603      	str	r6, [sp, #12]
 8005a70:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005a74:	9202      	str	r2, [sp, #8]
 8005a76:	9006      	str	r0, [sp, #24]
 8005a78:	f8cd c014 	str.w	ip, [sp, #20]
 8005a7c:	9404      	str	r4, [sp, #16]
 8005a7e:	4268      	negs	r0, r5
 8005a80:	9f03      	ldr	r7, [sp, #12]
 8005a82:	9a02      	ldr	r2, [sp, #8]
 8005a84:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8005a88:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005a8a:	bfcc      	ite	gt
 8005a8c:	2000      	movgt	r0, #0
 8005a8e:	4628      	movle	r0, r5
 8005a90:	1b7f      	subs	r7, r7, r5
 8005a92:	4297      	cmp	r7, r2
 8005a94:	bf88      	it	hi
 8005a96:	4617      	movhi	r7, r2
 8005a98:	197f      	adds	r7, r7, r5
 8005a9a:	1a3f      	subs	r7, r7, r0
 8005a9c:	4460      	add	r0, ip
 8005a9e:	434f      	muls	r7, r1
 8005aa0:	4348      	muls	r0, r1
 8005aa2:	eb08 0c80 	add.w	ip, r8, r0, lsl #2
 8005aa6:	b311      	cbz	r1, 8005aee <forward_mp+0x142>
 8005aa8:	f011 0003 	ands.w	r0, r1, #3
 8005aac:	4672      	mov	r2, lr
 8005aae:	4664      	mov	r4, ip
 8005ab0:	d005      	beq.n	8005abe <forward_mp+0x112>
 8005ab2:	1e40      	subs	r0, r0, #1
 8005ab4:	f854 9b04 	ldr.w	r9, [r4], #4
 8005ab8:	f842 9b04 	str.w	r9, [r2], #4
 8005abc:	d1f9      	bne.n	8005ab2 <forward_mp+0x106>
 8005abe:	0888      	lsrs	r0, r1, #2
 8005ac0:	f000 8015 	beq.w	8005aee <forward_mp+0x142>
 8005ac4:	ed94 0a00 	vldr	s0, [r4]
 8005ac8:	1e40      	subs	r0, r0, #1
 8005aca:	ed82 0a00 	vstr	s0, [r2]
 8005ace:	edd4 0a01 	vldr	s1, [r4, #4]
 8005ad2:	edc2 0a01 	vstr	s1, [r2, #4]
 8005ad6:	ed94 0a02 	vldr	s0, [r4, #8]
 8005ada:	ed82 0a02 	vstr	s0, [r2, #8]
 8005ade:	edd4 0a03 	vldr	s1, [r4, #12]
 8005ae2:	3410      	adds	r4, #16
 8005ae4:	edc2 0a03 	vstr	s1, [r2, #12]
 8005ae8:	3210      	adds	r2, #16
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d1ea      	bne.n	8005ac4 <forward_mp+0x118>
 8005aee:	9805      	ldr	r0, [sp, #20]
 8005af0:	9a04      	ldr	r2, [sp, #16]
 8005af2:	4290      	cmp	r0, r2
 8005af4:	da64      	bge.n	8005bc0 <forward_mp+0x214>
 8005af6:	1a12      	subs	r2, r2, r0
 8005af8:	46e2      	mov	sl, ip
 8005afa:	eb0a 0b87 	add.w	fp, sl, r7, lsl #2
 8005afe:	45da      	cmp	sl, fp
 8005b00:	d25a      	bcs.n	8005bb8 <forward_mp+0x20c>
 8005b02:	2900      	cmp	r1, #0
 8005b04:	d054      	beq.n	8005bb0 <forward_mp+0x204>
 8005b06:	f011 0003 	ands.w	r0, r1, #3
 8005b0a:	4654      	mov	r4, sl
 8005b0c:	46f1      	mov	r9, lr
 8005b0e:	d012      	beq.n	8005b36 <forward_mp+0x18a>
 8005b10:	ed99 0a00 	vldr	s0, [r9]
 8005b14:	edd4 0a00 	vldr	s1, [r4]
 8005b18:	eef4 0a40 	vcmp.f32	s1, s0
 8005b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b20:	bf58      	it	pl
 8005b22:	eeb0 0a60 	vmovpl.f32	s0, s1
 8005b26:	1e40      	subs	r0, r0, #1
 8005b28:	1d24      	adds	r4, r4, #4
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	ed89 0a00 	vstr	s0, [r9]
 8005b30:	f109 0904 	add.w	r9, r9, #4
 8005b34:	d1ec      	bne.n	8005b10 <forward_mp+0x164>
 8005b36:	0888      	lsrs	r0, r1, #2
 8005b38:	f000 803a 	beq.w	8005bb0 <forward_mp+0x204>
 8005b3c:	edd4 0a00 	vldr	s1, [r4]
 8005b40:	edd9 1a00 	vldr	s3, [r9]
 8005b44:	eef4 0a61 	vcmp.f32	s1, s3
 8005b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b4c:	bf48      	it	mi
 8005b4e:	eef0 0a61 	vmovmi.f32	s1, s3
 8005b52:	edc9 0a00 	vstr	s1, [r9]
 8005b56:	edd4 0a01 	vldr	s1, [r4, #4]
 8005b5a:	edd9 1a01 	vldr	s3, [r9, #4]
 8005b5e:	eef4 0a61 	vcmp.f32	s1, s3
 8005b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b66:	ed99 0a02 	vldr	s0, [r9, #8]
 8005b6a:	bf48      	it	mi
 8005b6c:	eef0 0a61 	vmovmi.f32	s1, s3
 8005b70:	edc9 0a01 	vstr	s1, [r9, #4]
 8005b74:	ed94 1a02 	vldr	s2, [r4, #8]
 8005b78:	eeb4 1a40 	vcmp.f32	s2, s0
 8005b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b80:	edd9 1a03 	vldr	s3, [r9, #12]
 8005b84:	bf48      	it	mi
 8005b86:	eeb0 1a40 	vmovmi.f32	s2, s0
 8005b8a:	ed89 1a02 	vstr	s2, [r9, #8]
 8005b8e:	edd4 0a03 	vldr	s1, [r4, #12]
 8005b92:	eef4 0a61 	vcmp.f32	s1, s3
 8005b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9a:	bf58      	it	pl
 8005b9c:	eef0 1a60 	vmovpl.f32	s3, s1
 8005ba0:	1e40      	subs	r0, r0, #1
 8005ba2:	3410      	adds	r4, #16
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	edc9 1a03 	vstr	s3, [r9, #12]
 8005baa:	f109 0910 	add.w	r9, r9, #16
 8005bae:	d1c5      	bne.n	8005b3c <forward_mp+0x190>
 8005bb0:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 8005bb4:	45da      	cmp	sl, fp
 8005bb6:	d3a4      	bcc.n	8005b02 <forward_mp+0x156>
 8005bb8:	1e52      	subs	r2, r2, #1
 8005bba:	eb0c 0c86 	add.w	ip, ip, r6, lsl #2
 8005bbe:	d19b      	bne.n	8005af8 <forward_mp+0x14c>
 8005bc0:	9806      	ldr	r0, [sp, #24]
 8005bc2:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 8005bc6:	1945      	adds	r5, r0, r5
 8005bc8:	1e5b      	subs	r3, r3, #1
 8005bca:	f47f af58 	bne.w	8005a7e <forward_mp+0xd2>
 8005bce:	9e03      	ldr	r6, [sp, #12]
 8005bd0:	9a02      	ldr	r2, [sp, #8]
 8005bd2:	9f00      	ldr	r7, [sp, #0]
 8005bd4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005bd6:	19ef      	adds	r7, r5, r7
 8005bd8:	9700      	str	r7, [sp, #0]
 8005bda:	9c01      	ldr	r4, [sp, #4]
 8005bdc:	1e64      	subs	r4, r4, #1
 8005bde:	9401      	str	r4, [sp, #4]
 8005be0:	f47f af2e 	bne.w	8005a40 <forward_mp+0x94>
 8005be4:	b00e      	add	sp, #56	; 0x38
 8005be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005bec <forward_ap>:
 8005bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf0:	b097      	sub	sp, #92	; 0x5c
 8005bf2:	4680      	mov	r8, r0
 8005bf4:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8005bf8:	8811      	ldrh	r1, [r2, #0]
 8005bfa:	2900      	cmp	r1, #0
 8005bfc:	bf1a      	itte	ne
 8005bfe:	6850      	ldrne	r0, [r2, #4]
 8005c00:	1d00      	addne	r0, r0, #4
 8005c02:	2004      	moveq	r0, #4
 8005c04:	6800      	ldr	r0, [r0, #0]
 8005c06:	2800      	cmp	r0, #0
 8005c08:	bf14      	ite	ne
 8005c0a:	6806      	ldrne	r6, [r0, #0]
 8005c0c:	2600      	moveq	r6, #0
 8005c0e:	2901      	cmp	r1, #1
 8005c10:	68f3      	ldr	r3, [r6, #12]
 8005c12:	bfc6      	itte	gt
 8005c14:	6850      	ldrgt	r0, [r2, #4]
 8005c16:	3010      	addgt	r0, #16
 8005c18:	2004      	movle	r0, #4
 8005c1a:	6800      	ldr	r0, [r0, #0]
 8005c1c:	68dc      	ldr	r4, [r3, #12]
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	bf14      	ite	ne
 8005c22:	f8d0 e000 	ldrne.w	lr, [r0]
 8005c26:	f04f 0e00 	moveq.w	lr, #0
 8005c2a:	f8de 200c 	ldr.w	r2, [lr, #12]
 8005c2e:	68d0      	ldr	r0, [r2, #12]
 8005c30:	940d      	str	r4, [sp, #52]	; 0x34
 8005c32:	6892      	ldr	r2, [r2, #8]
 8005c34:	920c      	str	r2, [sp, #48]	; 0x30
 8005c36:	689c      	ldr	r4, [r3, #8]
 8005c38:	6859      	ldr	r1, [r3, #4]
 8005c3a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8005c3e:	f8d8 a01c 	ldr.w	sl, [r8, #28]
 8005c42:	f8cd a014 	str.w	sl, [sp, #20]
 8005c46:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8005c4a:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 8005c4e:	9516      	str	r5, [sp, #88]	; 0x58
 8005c50:	f8d8 c02c 	ldr.w	ip, [r8, #44]	; 0x2c
 8005c54:	69b6      	ldr	r6, [r6, #24]
 8005c56:	f8de e018 	ldr.w	lr, [lr, #24]
 8005c5a:	f8dc 7000 	ldr.w	r7, [ip]
 8005c5e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8005c62:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8005c66:	f8de 9008 	ldr.w	r9, [lr, #8]
 8005c6a:	427f      	negs	r7, r7
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	9701      	str	r7, [sp, #4]
 8005c70:	f000 813a 	beq.w	8005ee8 <forward_ap+0x2fc>
 8005c74:	9004      	str	r0, [sp, #16]
 8005c76:	426d      	negs	r5, r5
 8005c78:	9515      	str	r5, [sp, #84]	; 0x54
 8005c7a:	9d05      	ldr	r5, [sp, #20]
 8005c7c:	fb01 f604 	mul.w	r6, r1, r4
 8005c80:	435d      	muls	r5, r3
 8005c82:	9514      	str	r5, [sp, #80]	; 0x50
 8005c84:	f8cd 604c 	str.w	r6, [sp, #76]	; 0x4c
 8005c88:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005c8c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8005c8e:	9801      	ldr	r0, [sp, #4]
 8005c90:	9d05      	ldr	r5, [sp, #20]
 8005c92:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8005c94:	f1dc 0c00 	rsbs	ip, ip, #0
 8005c98:	bfcc      	ite	gt
 8005c9a:	f04f 0e00 	movgt.w	lr, #0
 8005c9e:	f8dd e004 	ldrle.w	lr, [sp, #4]
 8005ca2:	1a30      	subs	r0, r6, r0
 8005ca4:	42a8      	cmp	r0, r5
 8005ca6:	9e01      	ldr	r6, [sp, #4]
 8005ca8:	9700      	str	r7, [sp, #0]
 8005caa:	bf88      	it	hi
 8005cac:	4628      	movhi	r0, r5
 8005cae:	1986      	adds	r6, r0, r6
 8005cb0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	f000 810a 	beq.w	8005ecc <forward_ap+0x2e0>
 8005cb8:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8005cbc:	fb04 f70e 	mul.w	r7, r4, lr
 8005cc0:	f8cd b008 	str.w	fp, [sp, #8]
 8005cc4:	ebae 0506 	sub.w	r5, lr, r6
 8005cc8:	9712      	str	r7, [sp, #72]	; 0x48
 8005cca:	9511      	str	r5, [sp, #68]	; 0x44
 8005ccc:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005cd0:	9407      	str	r4, [sp, #28]
 8005cd2:	9306      	str	r3, [sp, #24]
 8005cd4:	920b      	str	r2, [sp, #44]	; 0x2c
 8005cd6:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005cda:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8005cde:	9608      	str	r6, [sp, #32]
 8005ce0:	9b00      	ldr	r3, [sp, #0]
 8005ce2:	9a07      	ldr	r2, [sp, #28]
 8005ce4:	9800      	ldr	r0, [sp, #0]
 8005ce6:	9d00      	ldr	r5, [sp, #0]
 8005ce8:	425b      	negs	r3, r3
 8005cea:	9b06      	ldr	r3, [sp, #24]
 8005cec:	bfcc      	ite	gt
 8005cee:	f04f 0e00 	movgt.w	lr, #0
 8005cf2:	f8dd e000 	ldrle.w	lr, [sp]
 8005cf6:	1a10      	subs	r0, r2, r0
 8005cf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005cfa:	4298      	cmp	r0, r3
 8005cfc:	9203      	str	r2, [sp, #12]
 8005cfe:	bf88      	it	hi
 8005d00:	4618      	movhi	r0, r3
 8005d02:	1945      	adds	r5, r0, r5
 8005d04:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005d06:	ebae 0405 	sub.w	r4, lr, r5
 8005d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	eba5 080e 	sub.w	r8, r5, lr
 8005d12:	4344      	muls	r4, r0
 8005d14:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005d16:	fb08 f801 	mul.w	r8, r8, r1
 8005d1a:	4470      	add	r0, lr
 8005d1c:	4348      	muls	r0, r1
 8005d1e:	eb03 0680 	add.w	r6, r3, r0, lsl #2
 8005d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d24:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	bf14      	ite	ne
 8005d2c:	f8dd a050 	ldrne.w	sl, [sp, #80]	; 0x50
 8005d30:	46a2      	moveq	sl, r4
 8005d32:	b189      	cbz	r1, 8005d58 <forward_ap+0x16c>
 8005d34:	f011 0003 	ands.w	r0, r1, #3
 8005d38:	464b      	mov	r3, r9
 8005d3a:	d003      	beq.n	8005d44 <forward_ap+0x158>
 8005d3c:	1e40      	subs	r0, r0, #1
 8005d3e:	f843 2b04 	str.w	r2, [r3], #4
 8005d42:	d1fb      	bne.n	8005d3c <forward_ap+0x150>
 8005d44:	0888      	lsrs	r0, r1, #2
 8005d46:	d007      	beq.n	8005d58 <forward_ap+0x16c>
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	1e40      	subs	r0, r0, #1
 8005d4c:	605a      	str	r2, [r3, #4]
 8005d4e:	609a      	str	r2, [r3, #8]
 8005d50:	60da      	str	r2, [r3, #12]
 8005d52:	f103 0310 	add.w	r3, r3, #16
 8005d56:	d1f7      	bne.n	8005d48 <forward_ap+0x15c>
 8005d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d5a:	9b08      	ldr	r3, [sp, #32]
 8005d5c:	4298      	cmp	r0, r3
 8005d5e:	f280 80a3 	bge.w	8005ea8 <forward_ap+0x2bc>
 8005d62:	eba5 0e0e 	sub.w	lr, r5, lr
 8005d66:	1a1b      	subs	r3, r3, r0
 8005d68:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 8005d6c:	4694      	mov	ip, r2
 8005d6e:	9410      	str	r4, [sp, #64]	; 0x40
 8005d70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d72:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005d74:	46b6      	mov	lr, r6
 8005d76:	eb0e 0588 	add.w	r5, lr, r8, lsl #2
 8005d7a:	4494      	add	ip, r2
 8005d7c:	4560      	cmp	r0, ip
 8005d7e:	bf0c      	ite	eq
 8005d80:	4654      	moveq	r4, sl
 8005d82:	2400      	movne	r4, #0
 8005d84:	45ae      	cmp	lr, r5
 8005d86:	d24c      	bcs.n	8005e22 <forward_ap+0x236>
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2900      	cmp	r1, #0
 8005d8c:	d045      	beq.n	8005e1a <forward_ap+0x22e>
 8005d8e:	f011 0003 	ands.w	r0, r1, #3
 8005d92:	4677      	mov	r7, lr
 8005d94:	46cb      	mov	fp, r9
 8005d96:	d010      	beq.n	8005dba <forward_ap+0x1ce>
 8005d98:	45f1      	cmp	r9, lr
 8005d9a:	ed97 0a00 	vldr	s0, [r7]
 8005d9e:	bf1c      	itt	ne
 8005da0:	eddb 0a00 	vldrne	s1, [fp]
 8005da4:	ee30 0a80 	vaddne.f32	s0, s1, s0
 8005da8:	1c52      	adds	r2, r2, #1
 8005daa:	1e40      	subs	r0, r0, #1
 8005dac:	1d3f      	adds	r7, r7, #4
 8005dae:	ed8b 0a00 	vstr	s0, [fp]
 8005db2:	2800      	cmp	r0, #0
 8005db4:	f10b 0b04 	add.w	fp, fp, #4
 8005db8:	d1ee      	bne.n	8005d98 <forward_ap+0x1ac>
 8005dba:	0888      	lsrs	r0, r1, #2
 8005dbc:	d02d      	beq.n	8005e1a <forward_ap+0x22e>
 8005dbe:	eb0e 0782 	add.w	r7, lr, r2, lsl #2
 8005dc2:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8005dc6:	45f1      	cmp	r9, lr
 8005dc8:	edd7 1a00 	vldr	s3, [r7]
 8005dcc:	bf1c      	itt	ne
 8005dce:	ed92 0a00 	vldrne	s0, [r2]
 8005dd2:	ee70 1a21 	vaddne.f32	s3, s0, s3
 8005dd6:	edc2 1a00 	vstr	s3, [r2]
 8005dda:	edd7 1a01 	vldr	s3, [r7, #4]
 8005dde:	bf1c      	itt	ne
 8005de0:	edd2 0a01 	vldrne	s1, [r2, #4]
 8005de4:	ee70 1aa1 	vaddne.f32	s3, s1, s3
 8005de8:	edc2 1a01 	vstr	s3, [r2, #4]
 8005dec:	ed97 1a02 	vldr	s2, [r7, #8]
 8005df0:	bf1c      	itt	ne
 8005df2:	ed92 0a02 	vldrne	s0, [r2, #8]
 8005df6:	ee30 1a01 	vaddne.f32	s2, s0, s2
 8005dfa:	ed82 1a02 	vstr	s2, [r2, #8]
 8005dfe:	edd7 1a03 	vldr	s3, [r7, #12]
 8005e02:	bf1c      	itt	ne
 8005e04:	edd2 0a03 	vldrne	s1, [r2, #12]
 8005e08:	ee70 1aa1 	vaddne.f32	s3, s1, s3
 8005e0c:	edc2 1a03 	vstr	s3, [r2, #12]
 8005e10:	1e40      	subs	r0, r0, #1
 8005e12:	3210      	adds	r2, #16
 8005e14:	3710      	adds	r7, #16
 8005e16:	2800      	cmp	r0, #0
 8005e18:	d1d5      	bne.n	8005dc6 <forward_ap+0x1da>
 8005e1a:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 8005e1e:	45ae      	cmp	lr, r5
 8005e20:	d3b2      	bcc.n	8005d88 <forward_ap+0x19c>
 8005e22:	2c00      	cmp	r4, #0
 8005e24:	d03a      	beq.n	8005e9c <forward_ap+0x2b0>
 8005e26:	ee00 4a10 	vmov	s0, r4
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8005e30:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005e34:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8005e38:	b381      	cbz	r1, 8005e9c <forward_ap+0x2b0>
 8005e3a:	f011 0003 	ands.w	r0, r1, #3
 8005e3e:	464c      	mov	r4, r9
 8005e40:	f000 800b 	beq.w	8005e5a <forward_ap+0x26e>
 8005e44:	edd4 0a00 	vldr	s1, [r4]
 8005e48:	1c52      	adds	r2, r2, #1
 8005e4a:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005e4e:	1e40      	subs	r0, r0, #1
 8005e50:	edc4 0a00 	vstr	s1, [r4]
 8005e54:	f104 0404 	add.w	r4, r4, #4
 8005e58:	d1f4      	bne.n	8005e44 <forward_ap+0x258>
 8005e5a:	0888      	lsrs	r0, r1, #2
 8005e5c:	f000 801e 	beq.w	8005e9c <forward_ap+0x2b0>
 8005e60:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8005e64:	edd2 0a00 	vldr	s1, [r2]
 8005e68:	1e40      	subs	r0, r0, #1
 8005e6a:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005e6e:	edc2 0a00 	vstr	s1, [r2]
 8005e72:	ed92 1a01 	vldr	s2, [r2, #4]
 8005e76:	ee21 1a00 	vmul.f32	s2, s2, s0
 8005e7a:	ed82 1a01 	vstr	s2, [r2, #4]
 8005e7e:	edd2 0a02 	vldr	s1, [r2, #8]
 8005e82:	ed92 1a03 	vldr	s2, [r2, #12]
 8005e86:	ee60 1a80 	vmul.f32	s3, s1, s0
 8005e8a:	ee61 0a00 	vmul.f32	s1, s2, s0
 8005e8e:	edc2 1a02 	vstr	s3, [r2, #8]
 8005e92:	edc2 0a03 	vstr	s1, [r2, #12]
 8005e96:	f102 0210 	add.w	r2, r2, #16
 8005e9a:	d1e3      	bne.n	8005e64 <forward_ap+0x278>
 8005e9c:	1e5b      	subs	r3, r3, #1
 8005e9e:	9803      	ldr	r0, [sp, #12]
 8005ea0:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8005ea4:	f47f af64 	bne.w	8005d70 <forward_ap+0x184>
 8005ea8:	9a00      	ldr	r2, [sp, #0]
 8005eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eac:	9c02      	ldr	r4, [sp, #8]
 8005eae:	eb09 0981 	add.w	r9, r9, r1, lsl #2
 8005eb2:	189a      	adds	r2, r3, r2
 8005eb4:	9200      	str	r2, [sp, #0]
 8005eb6:	1e64      	subs	r4, r4, #1
 8005eb8:	9402      	str	r4, [sp, #8]
 8005eba:	f47f af11 	bne.w	8005ce0 <forward_ap+0xf4>
 8005ebe:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8005ec2:	9c07      	ldr	r4, [sp, #28]
 8005ec4:	9b06      	ldr	r3, [sp, #24]
 8005ec6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ec8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005ecc:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005ed0:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8005ed2:	f8dd e010 	ldr.w	lr, [sp, #16]
 8005ed6:	44b4      	add	ip, r6
 8005ed8:	f8cd c004 	str.w	ip, [sp, #4]
 8005edc:	f1be 0e01 	subs.w	lr, lr, #1
 8005ee0:	f8cd e010 	str.w	lr, [sp, #16]
 8005ee4:	f47f aed0 	bne.w	8005c88 <forward_ap+0x9c>
 8005ee8:	b017      	add	sp, #92	; 0x5c
 8005eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005ef0 <ai_array_fmt_name>:
 8005ef0:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005ef4:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005ef8:	d062      	beq.n	8005fc0 <ai_array_fmt_name+0xd0>
 8005efa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005efe:	1a89      	subs	r1, r1, r2
 8005f00:	f000 8094 	beq.w	800602c <ai_array_fmt_name+0x13c>
 8005f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f08:	1a89      	subs	r1, r1, r2
 8005f0a:	d071      	beq.n	8005ff0 <ai_array_fmt_name+0x100>
 8005f0c:	1a89      	subs	r1, r1, r2
 8005f0e:	d063      	beq.n	8005fd8 <ai_array_fmt_name+0xe8>
 8005f10:	1fc9      	subs	r1, r1, #7
 8005f12:	f000 808e 	beq.w	8006032 <ai_array_fmt_name+0x142>
 8005f16:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005f1a:	1a89      	subs	r1, r1, r2
 8005f1c:	d05f      	beq.n	8005fde <ai_array_fmt_name+0xee>
 8005f1e:	390f      	subs	r1, #15
 8005f20:	f000 808a 	beq.w	8006038 <ai_array_fmt_name+0x148>
 8005f24:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005f28:	1a89      	subs	r1, r1, r2
 8005f2a:	d05b      	beq.n	8005fe4 <ai_array_fmt_name+0xf4>
 8005f2c:	391f      	subs	r1, #31
 8005f2e:	f000 8086 	beq.w	800603e <ai_array_fmt_name+0x14e>
 8005f32:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005f36:	1a89      	subs	r1, r1, r2
 8005f38:	d057      	beq.n	8005fea <ai_array_fmt_name+0xfa>
 8005f3a:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 8006510 <.text_15>
 8005f3e:	1a89      	subs	r1, r1, r2
 8005f40:	f000 808f 	beq.w	8006062 <ai_array_fmt_name+0x172>
 8005f44:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005f48:	1a89      	subs	r1, r1, r2
 8005f4a:	f000 8087 	beq.w	800605c <ai_array_fmt_name+0x16c>
 8005f4e:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 8006514 <.text_16>
 8005f52:	1a89      	subs	r1, r1, r2
 8005f54:	d05e      	beq.n	8006014 <ai_array_fmt_name+0x124>
 8005f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f5a:	1a89      	subs	r1, r1, r2
 8005f5c:	d057      	beq.n	800600e <ai_array_fmt_name+0x11e>
 8005f5e:	1a89      	subs	r1, r1, r2
 8005f60:	d049      	beq.n	8005ff6 <ai_array_fmt_name+0x106>
 8005f62:	1fc9      	subs	r1, r1, #7
 8005f64:	d059      	beq.n	800601a <ai_array_fmt_name+0x12a>
 8005f66:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005f6a:	1a89      	subs	r1, r1, r2
 8005f6c:	d046      	beq.n	8005ffc <ai_array_fmt_name+0x10c>
 8005f6e:	390f      	subs	r1, #15
 8005f70:	d056      	beq.n	8006020 <ai_array_fmt_name+0x130>
 8005f72:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005f76:	1a89      	subs	r1, r1, r2
 8005f78:	d043      	beq.n	8006002 <ai_array_fmt_name+0x112>
 8005f7a:	391f      	subs	r1, #31
 8005f7c:	d053      	beq.n	8006026 <ai_array_fmt_name+0x136>
 8005f7e:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005f82:	1a89      	subs	r1, r1, r2
 8005f84:	d040      	beq.n	8006008 <ai_array_fmt_name+0x118>
 8005f86:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 8006510 <.text_15>
 8005f8a:	1a89      	subs	r1, r1, r2
 8005f8c:	d063      	beq.n	8006056 <ai_array_fmt_name+0x166>
 8005f8e:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005f92:	1a89      	subs	r1, r1, r2
 8005f94:	d05c      	beq.n	8006050 <ai_array_fmt_name+0x160>
 8005f96:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8006518 <.text_17>
 8005f9a:	1a89      	subs	r1, r1, r2
 8005f9c:	d019      	beq.n	8005fd2 <ai_array_fmt_name+0xe2>
 8005f9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fa2:	1a89      	subs	r1, r1, r2
 8005fa4:	d00f      	beq.n	8005fc6 <ai_array_fmt_name+0xd6>
 8005fa6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005faa:	1a89      	subs	r1, r1, r2
 8005fac:	d00e      	beq.n	8005fcc <ai_array_fmt_name+0xdc>
 8005fae:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 800651c <.text_18>
 8005fb2:	1a89      	subs	r1, r1, r2
 8005fb4:	d049      	beq.n	800604a <ai_array_fmt_name+0x15a>
 8005fb6:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005fba:	1a89      	subs	r1, r1, r2
 8005fbc:	d042      	beq.n	8006044 <ai_array_fmt_name+0x154>
 8005fbe:	e053      	b.n	8006068 <ai_array_fmt_name+0x178>
 8005fc0:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 8005fc4:	4770      	bx	lr
 8005fc6:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 8005fca:	4770      	bx	lr
 8005fcc:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 8005fd0:	4770      	bx	lr
 8005fd2:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 8005fd6:	4770      	bx	lr
 8005fd8:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 8005fdc:	4770      	bx	lr
 8005fde:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8005fe2:	4770      	bx	lr
 8005fe4:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8005fe8:	4770      	bx	lr
 8005fea:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8005fee:	4770      	bx	lr
 8005ff0:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8005ff4:	4770      	bx	lr
 8005ff6:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 8005ffa:	4770      	bx	lr
 8005ffc:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 8006000:	4770      	bx	lr
 8006002:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 8006006:	4770      	bx	lr
 8006008:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 800600c:	4770      	bx	lr
 800600e:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8006012:	4770      	bx	lr
 8006014:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8006018:	4770      	bx	lr
 800601a:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 800601e:	4770      	bx	lr
 8006020:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8006024:	4770      	bx	lr
 8006026:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 800602a:	4770      	bx	lr
 800602c:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8006030:	4770      	bx	lr
 8006032:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8006036:	4770      	bx	lr
 8006038:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 800603c:	4770      	bx	lr
 800603e:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 8006042:	4770      	bx	lr
 8006044:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 8006048:	4770      	bx	lr
 800604a:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 800604e:	4770      	bx	lr
 8006050:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 8006054:	4770      	bx	lr
 8006056:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 800605a:	4770      	bx	lr
 800605c:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8006060:	4770      	bx	lr
 8006062:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 8006066:	4770      	bx	lr
 8006068:	f36f 000d 	bfc	r0, #0, #14
 800606c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006070:	2840      	cmp	r0, #64	; 0x40
 8006072:	d009      	beq.n	8006088 <ai_array_fmt_name+0x198>
 8006074:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 8006520 <.text_19>
 8006078:	4288      	cmp	r0, r1
 800607a:	d00b      	beq.n	8006094 <ai_array_fmt_name+0x1a4>
 800607c:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 8006524 <.text_20>
 8006080:	4288      	cmp	r0, r1
 8006082:	d004      	beq.n	800608e <ai_array_fmt_name+0x19e>
 8006084:	a07a      	add	r0, pc, #488	; (adr r0, 8006270 <.text_8>)
 8006086:	4770      	bx	lr
 8006088:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 800608c:	4770      	bx	lr
 800608e:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 8006092:	4770      	bx	lr
 8006094:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 8006098:	4770      	bx	lr

0800609a <ai_array_fmt_exported>:
 800609a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800609e:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80060a2:	d068      	beq.n	8006176 <ai_array_fmt_exported+0xdc>
 80060a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80060a8:	1a89      	subs	r1, r1, r2
 80060aa:	d064      	beq.n	8006176 <ai_array_fmt_exported+0xdc>
 80060ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060b0:	1a89      	subs	r1, r1, r2
 80060b2:	d062      	beq.n	800617a <ai_array_fmt_exported+0xe0>
 80060b4:	1a89      	subs	r1, r1, r2
 80060b6:	d05e      	beq.n	8006176 <ai_array_fmt_exported+0xdc>
 80060b8:	1fc9      	subs	r1, r1, #7
 80060ba:	d05c      	beq.n	8006176 <ai_array_fmt_exported+0xdc>
 80060bc:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80060c0:	1a89      	subs	r1, r1, r2
 80060c2:	d058      	beq.n	8006176 <ai_array_fmt_exported+0xdc>
 80060c4:	390f      	subs	r1, #15
 80060c6:	d056      	beq.n	8006176 <ai_array_fmt_exported+0xdc>
 80060c8:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80060cc:	1a89      	subs	r1, r1, r2
 80060ce:	d054      	beq.n	800617a <ai_array_fmt_exported+0xe0>
 80060d0:	391f      	subs	r1, #31
 80060d2:	d052      	beq.n	800617a <ai_array_fmt_exported+0xe0>
 80060d4:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80060d8:	1a89      	subs	r1, r1, r2
 80060da:	d04e      	beq.n	800617a <ai_array_fmt_exported+0xe0>
 80060dc:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 8006510 <.text_15>
 80060e0:	1a89      	subs	r1, r1, r2
 80060e2:	d04a      	beq.n	800617a <ai_array_fmt_exported+0xe0>
 80060e4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80060e8:	1a89      	subs	r1, r1, r2
 80060ea:	d046      	beq.n	800617a <ai_array_fmt_exported+0xe0>
 80060ec:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 8006514 <.text_16>
 80060f0:	1a89      	subs	r1, r1, r2
 80060f2:	d040      	beq.n	8006176 <ai_array_fmt_exported+0xdc>
 80060f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060f8:	1a89      	subs	r1, r1, r2
 80060fa:	d03e      	beq.n	800617a <ai_array_fmt_exported+0xe0>
 80060fc:	1a89      	subs	r1, r1, r2
 80060fe:	d03a      	beq.n	8006176 <ai_array_fmt_exported+0xdc>
 8006100:	1fc9      	subs	r1, r1, #7
 8006102:	d038      	beq.n	8006176 <ai_array_fmt_exported+0xdc>
 8006104:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006108:	1a89      	subs	r1, r1, r2
 800610a:	d034      	beq.n	8006176 <ai_array_fmt_exported+0xdc>
 800610c:	390f      	subs	r1, #15
 800610e:	d032      	beq.n	8006176 <ai_array_fmt_exported+0xdc>
 8006110:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8006114:	1a89      	subs	r1, r1, r2
 8006116:	d030      	beq.n	800617a <ai_array_fmt_exported+0xe0>
 8006118:	391f      	subs	r1, #31
 800611a:	d02e      	beq.n	800617a <ai_array_fmt_exported+0xe0>
 800611c:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8006120:	1a89      	subs	r1, r1, r2
 8006122:	d02a      	beq.n	800617a <ai_array_fmt_exported+0xe0>
 8006124:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8006510 <.text_15>
 8006128:	1a89      	subs	r1, r1, r2
 800612a:	d026      	beq.n	800617a <ai_array_fmt_exported+0xe0>
 800612c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006130:	1a89      	subs	r1, r1, r2
 8006132:	d022      	beq.n	800617a <ai_array_fmt_exported+0xe0>
 8006134:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 8006518 <.text_17>
 8006138:	1a89      	subs	r1, r1, r2
 800613a:	d01e      	beq.n	800617a <ai_array_fmt_exported+0xe0>
 800613c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006140:	1a89      	subs	r1, r1, r2
 8006142:	d018      	beq.n	8006176 <ai_array_fmt_exported+0xdc>
 8006144:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006148:	1a89      	subs	r1, r1, r2
 800614a:	d016      	beq.n	800617a <ai_array_fmt_exported+0xe0>
 800614c:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 800651c <.text_18>
 8006150:	1a89      	subs	r1, r1, r2
 8006152:	d012      	beq.n	800617a <ai_array_fmt_exported+0xe0>
 8006154:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006158:	1a89      	subs	r1, r1, r2
 800615a:	d00e      	beq.n	800617a <ai_array_fmt_exported+0xe0>
 800615c:	f36f 000d 	bfc	r0, #0, #14
 8006160:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006164:	2840      	cmp	r0, #64	; 0x40
 8006166:	bf1f      	itttt	ne
 8006168:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8006520 <.text_19>
 800616c:	4298      	cmpne	r0, r3
 800616e:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8006524 <.text_20>
 8006172:	4298      	cmpne	r0, r3
 8006174:	d101      	bne.n	800617a <ai_array_fmt_exported+0xe0>
 8006176:	2001      	movs	r0, #1
 8006178:	4770      	bx	lr
 800617a:	2000      	movs	r0, #0
 800617c:	4770      	bx	lr

0800617e <ai_array_fmt_valid>:
 800617e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8006182:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8006186:	d069      	beq.n	800625c <ai_array_fmt_valid+0xde>
 8006188:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800618c:	1a89      	subs	r1, r1, r2
 800618e:	d065      	beq.n	800625c <ai_array_fmt_valid+0xde>
 8006190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006194:	1a89      	subs	r1, r1, r2
 8006196:	d061      	beq.n	800625c <ai_array_fmt_valid+0xde>
 8006198:	1a89      	subs	r1, r1, r2
 800619a:	d05f      	beq.n	800625c <ai_array_fmt_valid+0xde>
 800619c:	1fc9      	subs	r1, r1, #7
 800619e:	d05d      	beq.n	800625c <ai_array_fmt_valid+0xde>
 80061a0:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80061a4:	1a89      	subs	r1, r1, r2
 80061a6:	d059      	beq.n	800625c <ai_array_fmt_valid+0xde>
 80061a8:	390f      	subs	r1, #15
 80061aa:	d057      	beq.n	800625c <ai_array_fmt_valid+0xde>
 80061ac:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80061b0:	1a89      	subs	r1, r1, r2
 80061b2:	d053      	beq.n	800625c <ai_array_fmt_valid+0xde>
 80061b4:	391f      	subs	r1, #31
 80061b6:	d051      	beq.n	800625c <ai_array_fmt_valid+0xde>
 80061b8:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80061bc:	1a89      	subs	r1, r1, r2
 80061be:	d04d      	beq.n	800625c <ai_array_fmt_valid+0xde>
 80061c0:	f8df 234c 	ldr.w	r2, [pc, #844]	; 8006510 <.text_15>
 80061c4:	1a89      	subs	r1, r1, r2
 80061c6:	d049      	beq.n	800625c <ai_array_fmt_valid+0xde>
 80061c8:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80061cc:	1a89      	subs	r1, r1, r2
 80061ce:	d045      	beq.n	800625c <ai_array_fmt_valid+0xde>
 80061d0:	f8df 2340 	ldr.w	r2, [pc, #832]	; 8006514 <.text_16>
 80061d4:	1a89      	subs	r1, r1, r2
 80061d6:	d041      	beq.n	800625c <ai_array_fmt_valid+0xde>
 80061d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061dc:	1a89      	subs	r1, r1, r2
 80061de:	d03d      	beq.n	800625c <ai_array_fmt_valid+0xde>
 80061e0:	1a89      	subs	r1, r1, r2
 80061e2:	d03b      	beq.n	800625c <ai_array_fmt_valid+0xde>
 80061e4:	1fc9      	subs	r1, r1, #7
 80061e6:	d039      	beq.n	800625c <ai_array_fmt_valid+0xde>
 80061e8:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80061ec:	1a89      	subs	r1, r1, r2
 80061ee:	d035      	beq.n	800625c <ai_array_fmt_valid+0xde>
 80061f0:	390f      	subs	r1, #15
 80061f2:	d033      	beq.n	800625c <ai_array_fmt_valid+0xde>
 80061f4:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80061f8:	1a89      	subs	r1, r1, r2
 80061fa:	d02f      	beq.n	800625c <ai_array_fmt_valid+0xde>
 80061fc:	391f      	subs	r1, #31
 80061fe:	d02d      	beq.n	800625c <ai_array_fmt_valid+0xde>
 8006200:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8006204:	1a89      	subs	r1, r1, r2
 8006206:	d029      	beq.n	800625c <ai_array_fmt_valid+0xde>
 8006208:	f8df 2304 	ldr.w	r2, [pc, #772]	; 8006510 <.text_15>
 800620c:	1a89      	subs	r1, r1, r2
 800620e:	d025      	beq.n	800625c <ai_array_fmt_valid+0xde>
 8006210:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006214:	1a89      	subs	r1, r1, r2
 8006216:	d021      	beq.n	800625c <ai_array_fmt_valid+0xde>
 8006218:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 8006518 <.text_17>
 800621c:	1a89      	subs	r1, r1, r2
 800621e:	d01d      	beq.n	800625c <ai_array_fmt_valid+0xde>
 8006220:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006224:	1a89      	subs	r1, r1, r2
 8006226:	d019      	beq.n	800625c <ai_array_fmt_valid+0xde>
 8006228:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800622c:	1a89      	subs	r1, r1, r2
 800622e:	d015      	beq.n	800625c <ai_array_fmt_valid+0xde>
 8006230:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 800651c <.text_18>
 8006234:	1a89      	subs	r1, r1, r2
 8006236:	d011      	beq.n	800625c <ai_array_fmt_valid+0xde>
 8006238:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800623c:	1a89      	subs	r1, r1, r2
 800623e:	bf1e      	ittt	ne
 8006240:	f36f 000d 	bfcne	r0, #0, #14
 8006244:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8006248:	2840      	cmpne	r0, #64	; 0x40
 800624a:	d007      	beq.n	800625c <ai_array_fmt_valid+0xde>
 800624c:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 8006520 <.text_19>
 8006250:	4298      	cmp	r0, r3
 8006252:	bf1c      	itt	ne
 8006254:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 8006524 <.text_20>
 8006258:	4298      	cmpne	r0, r3
 800625a:	d101      	bne.n	8006260 <ai_array_fmt_valid+0xe2>
 800625c:	2001      	movs	r0, #1
 800625e:	4770      	bx	lr
 8006260:	2000      	movs	r0, #0
 8006262:	4770      	bx	lr

08006264 <ai_array_fmt_get_formats>:
 8006264:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 8006528 <.text_21>
 8006268:	6001      	str	r1, [r0, #0]
 800626a:	201c      	movs	r0, #28
 800626c:	4770      	bx	lr
	...

08006270 <.text_8>:
 8006270:	00000000 	.word	0x00000000

08006274 <ai_buffer_fmt_name>:
 8006274:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8006278:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800627c:	d022      	beq.n	80062c4 <ai_buffer_fmt_name+0x50>
 800627e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006282:	1a89      	subs	r1, r1, r2
 8006284:	d039      	beq.n	80062fa <ai_buffer_fmt_name+0x86>
 8006286:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800628a:	1a89      	subs	r1, r1, r2
 800628c:	d020      	beq.n	80062d0 <ai_buffer_fmt_name+0x5c>
 800628e:	1fc9      	subs	r1, r1, #7
 8006290:	d036      	beq.n	8006300 <ai_buffer_fmt_name+0x8c>
 8006292:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006296:	1a89      	subs	r1, r1, r2
 8006298:	d01d      	beq.n	80062d6 <ai_buffer_fmt_name+0x62>
 800629a:	390f      	subs	r1, #15
 800629c:	d033      	beq.n	8006306 <ai_buffer_fmt_name+0x92>
 800629e:	4aa3      	ldr	r2, [pc, #652]	; (800652c <.text_22>)
 80062a0:	1a89      	subs	r1, r1, r2
 80062a2:	d021      	beq.n	80062e8 <ai_buffer_fmt_name+0x74>
 80062a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062a8:	1a89      	subs	r1, r1, r2
 80062aa:	d017      	beq.n	80062dc <ai_buffer_fmt_name+0x68>
 80062ac:	1fc9      	subs	r1, r1, #7
 80062ae:	d01e      	beq.n	80062ee <ai_buffer_fmt_name+0x7a>
 80062b0:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80062b4:	1a89      	subs	r1, r1, r2
 80062b6:	d014      	beq.n	80062e2 <ai_buffer_fmt_name+0x6e>
 80062b8:	390f      	subs	r1, #15
 80062ba:	d01b      	beq.n	80062f4 <ai_buffer_fmt_name+0x80>
 80062bc:	4a9c      	ldr	r2, [pc, #624]	; (8006530 <.text_23>)
 80062be:	1a89      	subs	r1, r1, r2
 80062c0:	d003      	beq.n	80062ca <ai_buffer_fmt_name+0x56>
 80062c2:	e023      	b.n	800630c <ai_buffer_fmt_name+0x98>
 80062c4:	f20f 3070 	addw	r0, pc, #880	; 0x370
 80062c8:	4770      	bx	lr
 80062ca:	f20f 3078 	addw	r0, pc, #888	; 0x378
 80062ce:	4770      	bx	lr
 80062d0:	f20f 3094 	addw	r0, pc, #916	; 0x394
 80062d4:	4770      	bx	lr
 80062d6:	f20f 3098 	addw	r0, pc, #920	; 0x398
 80062da:	4770      	bx	lr
 80062dc:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 80062e0:	4770      	bx	lr
 80062e2:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 80062e6:	4770      	bx	lr
 80062e8:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 80062ec:	4770      	bx	lr
 80062ee:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 80062f2:	4770      	bx	lr
 80062f4:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 80062f8:	4770      	bx	lr
 80062fa:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80062fe:	4770      	bx	lr
 8006300:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8006304:	4770      	bx	lr
 8006306:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 800630a:	4770      	bx	lr
 800630c:	0b80      	lsrs	r0, r0, #14
 800630e:	0380      	lsls	r0, r0, #14
 8006310:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006314:	2840      	cmp	r0, #64	; 0x40
 8006316:	d007      	beq.n	8006328 <ai_buffer_fmt_name+0xb4>
 8006318:	4981      	ldr	r1, [pc, #516]	; (8006520 <.text_19>)
 800631a:	4288      	cmp	r0, r1
 800631c:	d00a      	beq.n	8006334 <ai_buffer_fmt_name+0xc0>
 800631e:	4981      	ldr	r1, [pc, #516]	; (8006524 <.text_20>)
 8006320:	4288      	cmp	r0, r1
 8006322:	d004      	beq.n	800632e <ai_buffer_fmt_name+0xba>
 8006324:	a079      	add	r0, pc, #484	; (adr r0, 800650c <.text_14>)
 8006326:	4770      	bx	lr
 8006328:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 800632c:	4770      	bx	lr
 800632e:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 8006332:	4770      	bx	lr
 8006334:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 8006338:	4770      	bx	lr

0800633a <ai_buffer_fmt_valid>:
 800633a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800633e:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8006342:	d02d      	beq.n	80063a0 <ai_buffer_fmt_valid+0x66>
 8006344:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006348:	1a89      	subs	r1, r1, r2
 800634a:	d029      	beq.n	80063a0 <ai_buffer_fmt_valid+0x66>
 800634c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006350:	1a89      	subs	r1, r1, r2
 8006352:	d025      	beq.n	80063a0 <ai_buffer_fmt_valid+0x66>
 8006354:	1fc9      	subs	r1, r1, #7
 8006356:	d023      	beq.n	80063a0 <ai_buffer_fmt_valid+0x66>
 8006358:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800635c:	1a89      	subs	r1, r1, r2
 800635e:	d01f      	beq.n	80063a0 <ai_buffer_fmt_valid+0x66>
 8006360:	390f      	subs	r1, #15
 8006362:	d01d      	beq.n	80063a0 <ai_buffer_fmt_valid+0x66>
 8006364:	4a71      	ldr	r2, [pc, #452]	; (800652c <.text_22>)
 8006366:	1a89      	subs	r1, r1, r2
 8006368:	d01a      	beq.n	80063a0 <ai_buffer_fmt_valid+0x66>
 800636a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800636e:	1a89      	subs	r1, r1, r2
 8006370:	d016      	beq.n	80063a0 <ai_buffer_fmt_valid+0x66>
 8006372:	1fc9      	subs	r1, r1, #7
 8006374:	d014      	beq.n	80063a0 <ai_buffer_fmt_valid+0x66>
 8006376:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800637a:	1a89      	subs	r1, r1, r2
 800637c:	d010      	beq.n	80063a0 <ai_buffer_fmt_valid+0x66>
 800637e:	390f      	subs	r1, #15
 8006380:	d00e      	beq.n	80063a0 <ai_buffer_fmt_valid+0x66>
 8006382:	4a6b      	ldr	r2, [pc, #428]	; (8006530 <.text_23>)
 8006384:	1a89      	subs	r1, r1, r2
 8006386:	bf1f      	itttt	ne
 8006388:	0b80      	lsrne	r0, r0, #14
 800638a:	0380      	lslne	r0, r0, #14
 800638c:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8006390:	2840      	cmpne	r0, #64	; 0x40
 8006392:	d005      	beq.n	80063a0 <ai_buffer_fmt_valid+0x66>
 8006394:	4b62      	ldr	r3, [pc, #392]	; (8006520 <.text_19>)
 8006396:	4298      	cmp	r0, r3
 8006398:	bf1c      	itt	ne
 800639a:	4b62      	ldrne	r3, [pc, #392]	; (8006524 <.text_20>)
 800639c:	4298      	cmpne	r0, r3
 800639e:	d101      	bne.n	80063a4 <ai_buffer_fmt_valid+0x6a>
 80063a0:	2001      	movs	r0, #1
 80063a2:	4770      	bx	lr
 80063a4:	2000      	movs	r0, #0
 80063a6:	4770      	bx	lr

080063a8 <ai_buffer_fmt_get_formats>:
 80063a8:	4962      	ldr	r1, [pc, #392]	; (8006534 <.text_24>)
 80063aa:	6001      	str	r1, [r0, #0]
 80063ac:	200c      	movs	r0, #12
 80063ae:	4770      	bx	lr

080063b0 <ai_array_to_buffer_fmt>:
 80063b0:	4601      	mov	r1, r0
 80063b2:	2040      	movs	r0, #64	; 0x40
 80063b4:	f3c1 4243 	ubfx	r2, r1, #17, #4
 80063b8:	2a02      	cmp	r2, #2
 80063ba:	d104      	bne.n	80063c6 <ai_array_to_buffer_fmt+0x16>
 80063bc:	485e      	ldr	r0, [pc, #376]	; (8006538 <.text_25>)
 80063be:	4008      	ands	r0, r1
 80063c0:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 80063c4:	e037      	b.n	8006436 <ai_array_to_buffer_fmt+0x86>
 80063c6:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 80063ca:	4b55      	ldr	r3, [pc, #340]	; (8006520 <.text_19>)
 80063cc:	1ad2      	subs	r2, r2, r3
 80063ce:	d02d      	beq.n	800642c <ai_array_to_buffer_fmt+0x7c>
 80063d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063d4:	1ad2      	subs	r2, r2, r3
 80063d6:	d01b      	beq.n	8006410 <ai_array_to_buffer_fmt+0x60>
 80063d8:	1fd2      	subs	r2, r2, #7
 80063da:	d029      	beq.n	8006430 <ai_array_to_buffer_fmt+0x80>
 80063dc:	f240 33f9 	movw	r3, #1017	; 0x3f9
 80063e0:	1ad2      	subs	r2, r2, r3
 80063e2:	d017      	beq.n	8006414 <ai_array_to_buffer_fmt+0x64>
 80063e4:	3a0f      	subs	r2, #15
 80063e6:	d025      	beq.n	8006434 <ai_array_to_buffer_fmt+0x84>
 80063e8:	4b50      	ldr	r3, [pc, #320]	; (800652c <.text_22>)
 80063ea:	1ad2      	subs	r2, r2, r3
 80063ec:	d018      	beq.n	8006420 <ai_array_to_buffer_fmt+0x70>
 80063ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063f2:	1ad2      	subs	r2, r2, r3
 80063f4:	d010      	beq.n	8006418 <ai_array_to_buffer_fmt+0x68>
 80063f6:	1fd2      	subs	r2, r2, #7
 80063f8:	d014      	beq.n	8006424 <ai_array_to_buffer_fmt+0x74>
 80063fa:	f240 33f9 	movw	r3, #1017	; 0x3f9
 80063fe:	1ad2      	subs	r2, r2, r3
 8006400:	d00c      	beq.n	800641c <ai_array_to_buffer_fmt+0x6c>
 8006402:	3a0f      	subs	r2, #15
 8006404:	d010      	beq.n	8006428 <ai_array_to_buffer_fmt+0x78>
 8006406:	4b4a      	ldr	r3, [pc, #296]	; (8006530 <.text_23>)
 8006408:	1ad2      	subs	r2, r2, r3
 800640a:	d114      	bne.n	8006436 <ai_array_to_buffer_fmt+0x86>
 800640c:	484b      	ldr	r0, [pc, #300]	; (800653c <.text_26>)
 800640e:	e012      	b.n	8006436 <ai_array_to_buffer_fmt+0x86>
 8006410:	484b      	ldr	r0, [pc, #300]	; (8006540 <.text_27>)
 8006412:	e010      	b.n	8006436 <ai_array_to_buffer_fmt+0x86>
 8006414:	484b      	ldr	r0, [pc, #300]	; (8006544 <.text_28>)
 8006416:	e00e      	b.n	8006436 <ai_array_to_buffer_fmt+0x86>
 8006418:	484b      	ldr	r0, [pc, #300]	; (8006548 <.text_29>)
 800641a:	e00c      	b.n	8006436 <ai_array_to_buffer_fmt+0x86>
 800641c:	484b      	ldr	r0, [pc, #300]	; (800654c <.text_30>)
 800641e:	e00a      	b.n	8006436 <ai_array_to_buffer_fmt+0x86>
 8006420:	4840      	ldr	r0, [pc, #256]	; (8006524 <.text_20>)
 8006422:	e008      	b.n	8006436 <ai_array_to_buffer_fmt+0x86>
 8006424:	484a      	ldr	r0, [pc, #296]	; (8006550 <.text_31>)
 8006426:	e006      	b.n	8006436 <ai_array_to_buffer_fmt+0x86>
 8006428:	484a      	ldr	r0, [pc, #296]	; (8006554 <.text_32>)
 800642a:	e004      	b.n	8006436 <ai_array_to_buffer_fmt+0x86>
 800642c:	4618      	mov	r0, r3
 800642e:	e002      	b.n	8006436 <ai_array_to_buffer_fmt+0x86>
 8006430:	4849      	ldr	r0, [pc, #292]	; (8006558 <.text_33>)
 8006432:	e000      	b.n	8006436 <ai_array_to_buffer_fmt+0x86>
 8006434:	4849      	ldr	r0, [pc, #292]	; (800655c <.text_34>)
 8006436:	004a      	lsls	r2, r1, #1
 8006438:	bf4c      	ite	mi
 800643a:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 800643e:	2200      	movpl	r2, #0
 8006440:	4310      	orrs	r0, r2
 8006442:	008a      	lsls	r2, r1, #2
 8006444:	bf4c      	ite	mi
 8006446:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 800644a:	2200      	movpl	r2, #0
 800644c:	4310      	orrs	r0, r2
 800644e:	0109      	lsls	r1, r1, #4
 8006450:	bf4c      	ite	mi
 8006452:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 8006456:	2100      	movpl	r1, #0
 8006458:	4308      	orrs	r0, r1
 800645a:	4770      	bx	lr

0800645c <ai_buffer_to_array_fmt>:
 800645c:	4602      	mov	r2, r0
 800645e:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 8006462:	3840      	subs	r0, #64	; 0x40
 8006464:	d022      	beq.n	80064ac <ai_buffer_to_array_fmt+0x50>
 8006466:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800646a:	1a40      	subs	r0, r0, r1
 800646c:	d030      	beq.n	80064d0 <ai_buffer_to_array_fmt+0x74>
 800646e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006472:	1a40      	subs	r0, r0, r1
 8006474:	d01e      	beq.n	80064b4 <ai_buffer_to_array_fmt+0x58>
 8006476:	1fc0      	subs	r0, r0, #7
 8006478:	d02c      	beq.n	80064d4 <ai_buffer_to_array_fmt+0x78>
 800647a:	f240 31f9 	movw	r1, #1017	; 0x3f9
 800647e:	1a40      	subs	r0, r0, r1
 8006480:	d01a      	beq.n	80064b8 <ai_buffer_to_array_fmt+0x5c>
 8006482:	380f      	subs	r0, #15
 8006484:	d028      	beq.n	80064d8 <ai_buffer_to_array_fmt+0x7c>
 8006486:	4929      	ldr	r1, [pc, #164]	; (800652c <.text_22>)
 8006488:	1a40      	subs	r0, r0, r1
 800648a:	d01b      	beq.n	80064c4 <ai_buffer_to_array_fmt+0x68>
 800648c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006490:	1a40      	subs	r0, r0, r1
 8006492:	d013      	beq.n	80064bc <ai_buffer_to_array_fmt+0x60>
 8006494:	1fc0      	subs	r0, r0, #7
 8006496:	d017      	beq.n	80064c8 <ai_buffer_to_array_fmt+0x6c>
 8006498:	f240 31f9 	movw	r1, #1017	; 0x3f9
 800649c:	1a40      	subs	r0, r0, r1
 800649e:	d00f      	beq.n	80064c0 <ai_buffer_to_array_fmt+0x64>
 80064a0:	380f      	subs	r0, #15
 80064a2:	d013      	beq.n	80064cc <ai_buffer_to_array_fmt+0x70>
 80064a4:	4922      	ldr	r1, [pc, #136]	; (8006530 <.text_23>)
 80064a6:	1a40      	subs	r0, r0, r1
 80064a8:	d002      	beq.n	80064b0 <ai_buffer_to_array_fmt+0x54>
 80064aa:	e017      	b.n	80064dc <ai_buffer_to_array_fmt+0x80>
 80064ac:	2040      	movs	r0, #64	; 0x40
 80064ae:	e01f      	b.n	80064f0 <ai_buffer_to_array_fmt+0x94>
 80064b0:	4822      	ldr	r0, [pc, #136]	; (800653c <.text_26>)
 80064b2:	e01d      	b.n	80064f0 <ai_buffer_to_array_fmt+0x94>
 80064b4:	4822      	ldr	r0, [pc, #136]	; (8006540 <.text_27>)
 80064b6:	e01b      	b.n	80064f0 <ai_buffer_to_array_fmt+0x94>
 80064b8:	4822      	ldr	r0, [pc, #136]	; (8006544 <.text_28>)
 80064ba:	e019      	b.n	80064f0 <ai_buffer_to_array_fmt+0x94>
 80064bc:	4822      	ldr	r0, [pc, #136]	; (8006548 <.text_29>)
 80064be:	e017      	b.n	80064f0 <ai_buffer_to_array_fmt+0x94>
 80064c0:	4822      	ldr	r0, [pc, #136]	; (800654c <.text_30>)
 80064c2:	e015      	b.n	80064f0 <ai_buffer_to_array_fmt+0x94>
 80064c4:	4817      	ldr	r0, [pc, #92]	; (8006524 <.text_20>)
 80064c6:	e013      	b.n	80064f0 <ai_buffer_to_array_fmt+0x94>
 80064c8:	4821      	ldr	r0, [pc, #132]	; (8006550 <.text_31>)
 80064ca:	e011      	b.n	80064f0 <ai_buffer_to_array_fmt+0x94>
 80064cc:	4821      	ldr	r0, [pc, #132]	; (8006554 <.text_32>)
 80064ce:	e00f      	b.n	80064f0 <ai_buffer_to_array_fmt+0x94>
 80064d0:	4813      	ldr	r0, [pc, #76]	; (8006520 <.text_19>)
 80064d2:	e00d      	b.n	80064f0 <ai_buffer_to_array_fmt+0x94>
 80064d4:	4820      	ldr	r0, [pc, #128]	; (8006558 <.text_33>)
 80064d6:	e00b      	b.n	80064f0 <ai_buffer_to_array_fmt+0x94>
 80064d8:	4820      	ldr	r0, [pc, #128]	; (800655c <.text_34>)
 80064da:	e009      	b.n	80064f0 <ai_buffer_to_array_fmt+0x94>
 80064dc:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 80064e0:	f3c2 000d 	ubfx	r0, r2, #0, #14
 80064e4:	2900      	cmp	r1, #0
 80064e6:	bf14      	ite	ne
 80064e8:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 80064ec:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 80064f0:	0051      	lsls	r1, r2, #1
 80064f2:	bf48      	it	mi
 80064f4:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 80064f8:	0093      	lsls	r3, r2, #2
 80064fa:	bf48      	it	mi
 80064fc:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 8006500:	0111      	lsls	r1, r2, #4
 8006502:	bf48      	it	mi
 8006504:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 8006508:	4770      	bx	lr
	...

0800650c <.text_14>:
 800650c:	00000000 	.word	0x00000000

08006510 <.text_15>:
 8006510:	002be80f 	.word	0x002be80f

08006514 <.text_16>:
 8006514:	003bf7f1 	.word	0x003bf7f1

08006518 <.text_17>:
 8006518:	00b9fff1 	.word	0x00b9fff1

0800651c <.text_18>:
 800651c:	004df000 	.word	0x004df000

08006520 <.text_19>:
 8006520:	00040040 	.word	0x00040040

08006524 <.text_20>:
 8006524:	00840040 	.word	0x00840040

08006528 <.text_21>:
 8006528:	080169b8 	.word	0x080169b8

0800652c <.text_22>:
 800652c:	007ff7f1 	.word	0x007ff7f1

08006530 <.text_23>:
 8006530:	00fe07f1 	.word	0x00fe07f1

08006534 <.text_24>:
 8006534:	08016a28 	.word	0x08016a28

08006538 <.text_25>:
 8006538:	00803fff 	.word	0x00803fff

0800653c <.text_26>:
 800653c:	01821040 	.word	0x01821040

08006540 <.text_27>:
 8006540:	00040440 	.word	0x00040440

08006544 <.text_28>:
 8006544:	00040840 	.word	0x00040840

08006548 <.text_29>:
 8006548:	00840440 	.word	0x00840440

0800654c <.text_30>:
 800654c:	00840840 	.word	0x00840840

08006550 <.text_31>:
 8006550:	00840447 	.word	0x00840447

08006554 <.text_32>:
 8006554:	0084084f 	.word	0x0084084f

08006558 <.text_33>:
 8006558:	00040447 	.word	0x00040447

0800655c <.text_34>:
 800655c:	0004084f 	.word	0x0004084f

08006560 <ai_array_get_byte_size>:
 8006560:	b909      	cbnz	r1, 8006566 <ai_array_get_byte_size+0x6>
 8006562:	2000      	movs	r0, #0
 8006564:	4770      	bx	lr
 8006566:	11c2      	asrs	r2, r0, #7
 8006568:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800656c:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8006570:	189b      	adds	r3, r3, r2
 8006572:	4359      	muls	r1, r3
 8006574:	ea4f 4c60 	mov.w	ip, r0, asr #17
 8006578:	f00c 0c0f 	and.w	ip, ip, #15
 800657c:	1543      	asrs	r3, r0, #21
 800657e:	f003 0303 	and.w	r3, r3, #3
 8006582:	1dc9      	adds	r1, r1, #7
 8006584:	08c9      	lsrs	r1, r1, #3
 8006586:	00c9      	lsls	r1, r1, #3
 8006588:	40d9      	lsrs	r1, r3
 800658a:	f1bc 0f04 	cmp.w	ip, #4
 800658e:	d00a      	beq.n	80065a6 <ai_array_get_byte_size+0x46>
 8006590:	f1bc 0f08 	cmp.w	ip, #8
 8006594:	bf02      	ittt	eq
 8006596:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 800659a:	1882      	addeq	r2, r0, r2
 800659c:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 80065a0:	1dc9      	adds	r1, r1, #7
 80065a2:	08c8      	lsrs	r0, r1, #3
 80065a4:	4770      	bx	lr
 80065a6:	f3c0 3082 	ubfx	r0, r0, #14, #3
 80065aa:	1882      	adds	r2, r0, r2
 80065ac:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 80065b0:	1dc9      	adds	r1, r1, #7
 80065b2:	08c8      	lsrs	r0, r1, #3
 80065b4:	4770      	bx	lr

080065b6 <ai_array_get_data_byte_size>:
 80065b6:	b909      	cbnz	r1, 80065bc <ai_array_get_data_byte_size+0x6>
 80065b8:	2000      	movs	r0, #0
 80065ba:	4770      	bx	lr
 80065bc:	11c2      	asrs	r2, r0, #7
 80065be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065c2:	f3c0 3382 	ubfx	r3, r0, #14, #3
 80065c6:	189a      	adds	r2, r3, r2
 80065c8:	4351      	muls	r1, r2
 80065ca:	1540      	asrs	r0, r0, #21
 80065cc:	f000 0003 	and.w	r0, r0, #3
 80065d0:	1dc9      	adds	r1, r1, #7
 80065d2:	08c9      	lsrs	r1, r1, #3
 80065d4:	00c9      	lsls	r1, r1, #3
 80065d6:	40c1      	lsrs	r1, r0
 80065d8:	1dc9      	adds	r1, r1, #7
 80065da:	08c8      	lsrs	r0, r1, #3
 80065dc:	4770      	bx	lr

080065de <ai_array_get_elems_from_size>:
 80065de:	b909      	cbnz	r1, 80065e4 <ai_array_get_elems_from_size+0x6>
 80065e0:	2000      	movs	r0, #0
 80065e2:	4770      	bx	lr
 80065e4:	1442      	asrs	r2, r0, #17
 80065e6:	00c9      	lsls	r1, r1, #3
 80065e8:	f002 020f 	and.w	r2, r2, #15
 80065ec:	2a04      	cmp	r2, #4
 80065ee:	d002      	beq.n	80065f6 <ai_array_get_elems_from_size+0x18>
 80065f0:	2a08      	cmp	r2, #8
 80065f2:	d009      	beq.n	8006608 <ai_array_get_elems_from_size+0x2a>
 80065f4:	e010      	b.n	8006618 <ai_array_get_elems_from_size+0x3a>
 80065f6:	11c3      	asrs	r3, r0, #7
 80065f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065fc:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8006600:	18d2      	adds	r2, r2, r3
 8006602:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 8006606:	e007      	b.n	8006618 <ai_array_get_elems_from_size+0x3a>
 8006608:	11c2      	asrs	r2, r0, #7
 800660a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800660e:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8006612:	189a      	adds	r2, r3, r2
 8006614:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 8006618:	1542      	asrs	r2, r0, #21
 800661a:	f002 0203 	and.w	r2, r2, #3
 800661e:	4091      	lsls	r1, r2
 8006620:	1dc9      	adds	r1, r1, #7
 8006622:	11c3      	asrs	r3, r0, #7
 8006624:	08c9      	lsrs	r1, r1, #3
 8006626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800662a:	f3c0 3082 	ubfx	r0, r0, #14, #3
 800662e:	00c9      	lsls	r1, r1, #3
 8006630:	18c0      	adds	r0, r0, r3
 8006632:	fbb1 f0f0 	udiv	r0, r1, r0
 8006636:	4770      	bx	lr

08006638 <.text_38>:
 8006638:	5f544d46 	.word	0x5f544d46
 800663c:	454e4f4e 	.word	0x454e4f4e
 8006640:	00          	.byte	0x00
 8006641:	00          	.byte	0x00
	...

08006644 <.text_39>:
 8006644:	5f544d46 	.word	0x5f544d46
 8006648:	414f4c46 	.word	0x414f4c46
 800664c:	0054      	.short	0x0054
	...

08006650 <.text_40>:
 8006650:	5f544d46 	.word	0x5f544d46
 8006654:	414f4c46 	.word	0x414f4c46
 8006658:	00343654 	.word	0x00343654

0800665c <.text_41>:
 800665c:	5f544d46 	.word	0x5f544d46
 8006660:	414f4c46 	.word	0x414f4c46
 8006664:	00363154 	.word	0x00363154

08006668 <.text_42>:
 8006668:	5f544d46 	.word	0x5f544d46
 800666c:	00003855 	.word	0x00003855

08006670 <.text_43>:
 8006670:	5f544d46 	.word	0x5f544d46
 8006674:	00363155 	.word	0x00363155

08006678 <.text_44>:
 8006678:	5f544d46 	.word	0x5f544d46
 800667c:	00323355 	.word	0x00323355

08006680 <.text_45>:
 8006680:	5f544d46 	.word	0x5f544d46
 8006684:	00343655 	.word	0x00343655

08006688 <.text_46>:
 8006688:	5f544d46 	.word	0x5f544d46
 800668c:	00003455 	.word	0x00003455

08006690 <.text_47>:
 8006690:	5f544d46 	.word	0x5f544d46
 8006694:	00003853 	.word	0x00003853

08006698 <.text_48>:
 8006698:	5f544d46 	.word	0x5f544d46
 800669c:	00363153 	.word	0x00363153

080066a0 <.text_49>:
 80066a0:	5f544d46 	.word	0x5f544d46
 80066a4:	00323353 	.word	0x00323353

080066a8 <.text_50>:
 80066a8:	5f544d46 	.word	0x5f544d46
 80066ac:	00343653 	.word	0x00343653

080066b0 <.text_51>:
 80066b0:	5f544d46 	.word	0x5f544d46
 80066b4:	00003453 	.word	0x00003453

080066b8 <.text_52>:
 80066b8:	5f544d46 	.word	0x5f544d46
 80066bc:	0051      	.short	0x0051
	...

080066c0 <.text_53>:
 80066c0:	5f544d46 	.word	0x5f544d46
 80066c4:	00003751 	.word	0x00003751

080066c8 <.text_54>:
 80066c8:	5f544d46 	.word	0x5f544d46
 80066cc:	00353151 	.word	0x00353151

080066d0 <.text_55>:
 80066d0:	5f544d46 	.word	0x5f544d46
 80066d4:	00313351 	.word	0x00313351

080066d8 <.text_56>:
 80066d8:	5f544d46 	.word	0x5f544d46
 80066dc:	00005155 	.word	0x00005155

080066e0 <.text_57>:
 80066e0:	5f544d46 	.word	0x5f544d46
 80066e4:	00375155 	.word	0x00375155

080066e8 <.text_58>:
 80066e8:	5f544d46 	.word	0x5f544d46
 80066ec:	35315155 	.word	0x35315155
 80066f0:	00          	.byte	0x00
 80066f1:	00          	.byte	0x00
	...

080066f4 <.text_59>:
 80066f4:	5f544d46 	.word	0x5f544d46
 80066f8:	31335155 	.word	0x31335155
 80066fc:	00          	.byte	0x00
 80066fd:	00          	.byte	0x00
	...

08006700 <.text_60>:
 8006700:	5f544d46 	.word	0x5f544d46
 8006704:	3454554c 	.word	0x3454554c
 8006708:	4f4c465f 	.word	0x4f4c465f
 800670c:	00005441 	.word	0x00005441

08006710 <.text_61>:
 8006710:	5f544d46 	.word	0x5f544d46
 8006714:	3854554c 	.word	0x3854554c
 8006718:	4f4c465f 	.word	0x4f4c465f
 800671c:	00005441 	.word	0x00005441

08006720 <.text_62>:
 8006720:	5f544d46 	.word	0x5f544d46
 8006724:	3454554c 	.word	0x3454554c
 8006728:	3531515f 	.word	0x3531515f
 800672c:	00          	.byte	0x00
 800672d:	00          	.byte	0x00
	...

08006730 <.text_63>:
 8006730:	5f544d46 	.word	0x5f544d46
 8006734:	3854554c 	.word	0x3854554c
 8006738:	3531515f 	.word	0x3531515f
 800673c:	00          	.byte	0x00
 800673d:	00          	.byte	0x00
	...

08006740 <.text_64>:
 8006740:	5f544d46 	.word	0x5f544d46
 8006744:	3454554c 	.word	0x3454554c
 8006748:	3151555f 	.word	0x3151555f
 800674c:	0035      	.short	0x0035
	...

08006750 <.text_65>:
 8006750:	5f544d46 	.word	0x5f544d46
 8006754:	3854554c 	.word	0x3854554c
 8006758:	3151555f 	.word	0x3151555f
 800675c:	0035      	.short	0x0035
	...

08006760 <.text_66>:
 8006760:	415f4941 	.word	0x415f4941
 8006764:	59415252 	.word	0x59415252
 8006768:	524f465f 	.word	0x524f465f
 800676c:	5f54414d 	.word	0x5f54414d
 8006770:	454e4f4e 	.word	0x454e4f4e
 8006774:	00          	.byte	0x00
 8006775:	00          	.byte	0x00
	...

08006778 <.text_67>:
 8006778:	415f4941 	.word	0x415f4941
 800677c:	59415252 	.word	0x59415252
 8006780:	524f465f 	.word	0x524f465f
 8006784:	5f54414d 	.word	0x5f54414d
 8006788:	0051      	.short	0x0051
	...

0800678c <.text_68>:
 800678c:	415f4941 	.word	0x415f4941
 8006790:	59415252 	.word	0x59415252
 8006794:	524f465f 	.word	0x524f465f
 8006798:	5f54414d 	.word	0x5f54414d
 800679c:	00005155 	.word	0x00005155

080067a0 <.text_69>:
 80067a0:	425f4941 	.word	0x425f4941
 80067a4:	45464655 	.word	0x45464655
 80067a8:	4f465f52 	.word	0x4f465f52
 80067ac:	54414d52 	.word	0x54414d52
 80067b0:	4e4f4e5f 	.word	0x4e4f4e5f
 80067b4:	0045      	.short	0x0045
	...

080067b8 <.text_70>:
 80067b8:	425f4941 	.word	0x425f4941
 80067bc:	45464655 	.word	0x45464655
 80067c0:	4f465f52 	.word	0x4f465f52
 80067c4:	54414d52 	.word	0x54414d52
 80067c8:	0000515f 	.word	0x0000515f

080067cc <.text_71>:
 80067cc:	425f4941 	.word	0x425f4941
 80067d0:	45464655 	.word	0x45464655
 80067d4:	4f465f52 	.word	0x4f465f52
 80067d8:	54414d52 	.word	0x54414d52
 80067dc:	0051555f 	.word	0x0051555f

080067e0 <ai_math_dot_array>:
 80067e0:	b530      	push	{r4, r5, lr}
 80067e2:	4604      	mov	r4, r0
 80067e4:	4608      	mov	r0, r1
 80067e6:	4611      	mov	r1, r2
 80067e8:	b081      	sub	sp, #4
 80067ea:	461a      	mov	r2, r3
 80067ec:	2500      	movs	r5, #0
 80067ee:	9500      	str	r5, [sp, #0]
 80067f0:	466b      	mov	r3, sp
 80067f2:	f004 fda2 	bl	800b33a <arm_dot_prod_f32>
 80067f6:	ed94 0a00 	vldr	s0, [r4]
 80067fa:	eddd 0a00 	vldr	s1, [sp]
 80067fe:	ee70 0a20 	vadd.f32	s1, s0, s1
 8006802:	edc4 0a00 	vstr	s1, [r4]
 8006806:	b001      	add	sp, #4
 8006808:	bd30      	pop	{r4, r5, pc}
	...

0800680c <ai_math_sqrt>:
 800680c:	eef0 0a40 	vmov.f32	s1, s0
 8006810:	eef5 0a40 	vcmp.f32	s1, #0.0
 8006814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006818:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80068c0 <.text_13>
 800681c:	db01      	blt.n	8006822 <ai_math_sqrt+0x16>
 800681e:	eeb1 0ae0 	vsqrt.f32	s0, s1
 8006822:	4770      	bx	lr

08006824 <ai_math_exp>:
 8006824:	f00c bbfa 	b.w	801301c <expf>

08006828 <ai_math_pow>:
 8006828:	f00c bdba 	b.w	80133a0 <powf>

0800682c <ai_math_tanh>:
 800682c:	f00c b976 	b.w	8012b1c <tanhf>

08006830 <ai_math_cosh>:
 8006830:	f00c bb94 	b.w	8012f5c <coshf>

08006834 <ai_math_relu>:
 8006834:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800683c:	bf48      	it	mi
 800683e:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 80068c0 <.text_13>
 8006842:	4770      	bx	lr

08006844 <ai_math_prelu>:
 8006844:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800684c:	bf48      	it	mi
 800684e:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 8006852:	4770      	bx	lr

08006854 <ai_math_sigmoid>:
 8006854:	b500      	push	{lr}
 8006856:	b081      	sub	sp, #4
 8006858:	eeb1 0a40 	vneg.f32	s0, s0
 800685c:	f00c fbde 	bl	801301c <expf>
 8006860:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006864:	b001      	add	sp, #4
 8006866:	ee30 0a20 	vadd.f32	s0, s0, s1
 800686a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800686e:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8006872:	bd00      	pop	{pc}

08006874 <ai_math_hard_sigmoid>:
 8006874:	eef0 0a40 	vmov.f32	s1, s0
 8006878:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80068c4 <.text_14>
 800687c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8006880:	ee00 0a81 	vmla.f32	s0, s1, s2
 8006884:	eddf 0a10 	vldr	s1, [pc, #64]	; 80068c8 <.text_15>
 8006888:	eeb4 0a60 	vcmp.f32	s0, s1
 800688c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006890:	da07      	bge.n	80068a2 <ai_math_hard_sigmoid+0x2e>
 8006892:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800689a:	d504      	bpl.n	80068a6 <ai_math_hard_sigmoid+0x32>
 800689c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80068c0 <.text_13>
 80068a0:	4770      	bx	lr
 80068a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80068a6:	4770      	bx	lr

080068a8 <ai_math_sign>:
 80068a8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80068ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b0:	bfcc      	ite	gt
 80068b2:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 80068cc <.text_16>
 80068b6:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 80068d0 <.text_17>
 80068ba:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80068be:	4770      	bx	lr

080068c0 <.text_13>:
 80068c0:	00000000 	.word	0x00000000

080068c4 <.text_14>:
 80068c4:	3e4ccccd 	.word	0x3e4ccccd

080068c8 <.text_15>:
 80068c8:	3f800001 	.word	0x3f800001

080068cc <.text_16>:
 80068cc:	00000001 	.word	0x00000001

080068d0 <.text_17>:
 80068d0:	ffffffff 	.word	0xffffffff

080068d4 <ai_div>:
 80068d4:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80068d8:	4770      	bx	lr

080068da <ai_floor_div>:
 80068da:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80068de:	f00b bf43 	b.w	8012768 <floorf>

080068e2 <ai_floor_mod>:
 80068e2:	f00c bc15 	b.w	8013110 <fmodf>

080068e6 <ai_max>:
 80068e6:	eef4 0a40 	vcmp.f32	s1, s0
 80068ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ee:	bf58      	it	pl
 80068f0:	eeb0 0a60 	vmovpl.f32	s0, s1
 80068f4:	4770      	bx	lr

080068f6 <ai_min>:
 80068f6:	eeb4 0a60 	vcmp.f32	s0, s1
 80068fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068fe:	bf58      	it	pl
 8006900:	eeb0 0a60 	vmovpl.f32	s0, s1
 8006904:	4770      	bx	lr

08006906 <ai_mul>:
 8006906:	ee20 0a20 	vmul.f32	s0, s0, s1
 800690a:	4770      	bx	lr

0800690c <ai_sub>:
 800690c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006910:	4770      	bx	lr

08006912 <ai_sum>:
 8006912:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006916:	4770      	bx	lr

08006918 <__aeabi_memset>:
 8006918:	b470      	push	{r4, r5, r6}
 800691a:	0784      	lsls	r4, r0, #30
 800691c:	d046      	beq.n	80069ac <__aeabi_memset+0x94>
 800691e:	1e4c      	subs	r4, r1, #1
 8006920:	2900      	cmp	r1, #0
 8006922:	d041      	beq.n	80069a8 <__aeabi_memset+0x90>
 8006924:	b2d5      	uxtb	r5, r2
 8006926:	4603      	mov	r3, r0
 8006928:	e002      	b.n	8006930 <__aeabi_memset+0x18>
 800692a:	1e61      	subs	r1, r4, #1
 800692c:	b3e4      	cbz	r4, 80069a8 <__aeabi_memset+0x90>
 800692e:	460c      	mov	r4, r1
 8006930:	f803 5b01 	strb.w	r5, [r3], #1
 8006934:	0799      	lsls	r1, r3, #30
 8006936:	d1f8      	bne.n	800692a <__aeabi_memset+0x12>
 8006938:	2c03      	cmp	r4, #3
 800693a:	d92e      	bls.n	800699a <__aeabi_memset+0x82>
 800693c:	b2d5      	uxtb	r5, r2
 800693e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006942:	2c0f      	cmp	r4, #15
 8006944:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006948:	d919      	bls.n	800697e <__aeabi_memset+0x66>
 800694a:	4626      	mov	r6, r4
 800694c:	f103 0110 	add.w	r1, r3, #16
 8006950:	3e10      	subs	r6, #16
 8006952:	2e0f      	cmp	r6, #15
 8006954:	f841 5c10 	str.w	r5, [r1, #-16]
 8006958:	f841 5c0c 	str.w	r5, [r1, #-12]
 800695c:	f841 5c08 	str.w	r5, [r1, #-8]
 8006960:	f841 5c04 	str.w	r5, [r1, #-4]
 8006964:	f101 0110 	add.w	r1, r1, #16
 8006968:	d8f2      	bhi.n	8006950 <__aeabi_memset+0x38>
 800696a:	f1a4 0110 	sub.w	r1, r4, #16
 800696e:	f021 010f 	bic.w	r1, r1, #15
 8006972:	f004 040f 	and.w	r4, r4, #15
 8006976:	3110      	adds	r1, #16
 8006978:	2c03      	cmp	r4, #3
 800697a:	440b      	add	r3, r1
 800697c:	d90d      	bls.n	800699a <__aeabi_memset+0x82>
 800697e:	461e      	mov	r6, r3
 8006980:	4621      	mov	r1, r4
 8006982:	3904      	subs	r1, #4
 8006984:	2903      	cmp	r1, #3
 8006986:	f846 5b04 	str.w	r5, [r6], #4
 800698a:	d8fa      	bhi.n	8006982 <__aeabi_memset+0x6a>
 800698c:	1f21      	subs	r1, r4, #4
 800698e:	f021 0103 	bic.w	r1, r1, #3
 8006992:	3104      	adds	r1, #4
 8006994:	440b      	add	r3, r1
 8006996:	f004 0403 	and.w	r4, r4, #3
 800699a:	b12c      	cbz	r4, 80069a8 <__aeabi_memset+0x90>
 800699c:	b2d2      	uxtb	r2, r2
 800699e:	441c      	add	r4, r3
 80069a0:	f803 2b01 	strb.w	r2, [r3], #1
 80069a4:	42a3      	cmp	r3, r4
 80069a6:	d1fb      	bne.n	80069a0 <__aeabi_memset+0x88>
 80069a8:	bc70      	pop	{r4, r5, r6}
 80069aa:	4770      	bx	lr
 80069ac:	460c      	mov	r4, r1
 80069ae:	4603      	mov	r3, r0
 80069b0:	e7c2      	b.n	8006938 <__aeabi_memset+0x20>

080069b2 <strlen>:
 80069b2:	4603      	mov	r3, r0
 80069b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069b8:	2a00      	cmp	r2, #0
 80069ba:	d1fb      	bne.n	80069b4 <strlen+0x2>
 80069bc:	1a18      	subs	r0, r3, r0
 80069be:	3801      	subs	r0, #1
 80069c0:	4770      	bx	lr
	...

080069d0 <memchr>:
 80069d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80069d4:	2a10      	cmp	r2, #16
 80069d6:	db2b      	blt.n	8006a30 <memchr+0x60>
 80069d8:	f010 0f07 	tst.w	r0, #7
 80069dc:	d008      	beq.n	80069f0 <memchr+0x20>
 80069de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80069e2:	3a01      	subs	r2, #1
 80069e4:	428b      	cmp	r3, r1
 80069e6:	d02d      	beq.n	8006a44 <memchr+0x74>
 80069e8:	f010 0f07 	tst.w	r0, #7
 80069ec:	b342      	cbz	r2, 8006a40 <memchr+0x70>
 80069ee:	d1f6      	bne.n	80069de <memchr+0xe>
 80069f0:	b4f0      	push	{r4, r5, r6, r7}
 80069f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80069f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80069fa:	f022 0407 	bic.w	r4, r2, #7
 80069fe:	f07f 0700 	mvns.w	r7, #0
 8006a02:	2300      	movs	r3, #0
 8006a04:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006a08:	3c08      	subs	r4, #8
 8006a0a:	ea85 0501 	eor.w	r5, r5, r1
 8006a0e:	ea86 0601 	eor.w	r6, r6, r1
 8006a12:	fa85 f547 	uadd8	r5, r5, r7
 8006a16:	faa3 f587 	sel	r5, r3, r7
 8006a1a:	fa86 f647 	uadd8	r6, r6, r7
 8006a1e:	faa5 f687 	sel	r6, r5, r7
 8006a22:	b98e      	cbnz	r6, 8006a48 <memchr+0x78>
 8006a24:	d1ee      	bne.n	8006a04 <memchr+0x34>
 8006a26:	bcf0      	pop	{r4, r5, r6, r7}
 8006a28:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006a2c:	f002 0207 	and.w	r2, r2, #7
 8006a30:	b132      	cbz	r2, 8006a40 <memchr+0x70>
 8006a32:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006a36:	3a01      	subs	r2, #1
 8006a38:	ea83 0301 	eor.w	r3, r3, r1
 8006a3c:	b113      	cbz	r3, 8006a44 <memchr+0x74>
 8006a3e:	d1f8      	bne.n	8006a32 <memchr+0x62>
 8006a40:	2000      	movs	r0, #0
 8006a42:	4770      	bx	lr
 8006a44:	3801      	subs	r0, #1
 8006a46:	4770      	bx	lr
 8006a48:	2d00      	cmp	r5, #0
 8006a4a:	bf06      	itte	eq
 8006a4c:	4635      	moveq	r5, r6
 8006a4e:	3803      	subeq	r0, #3
 8006a50:	3807      	subne	r0, #7
 8006a52:	f015 0f01 	tst.w	r5, #1
 8006a56:	d107      	bne.n	8006a68 <memchr+0x98>
 8006a58:	3001      	adds	r0, #1
 8006a5a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006a5e:	bf02      	ittt	eq
 8006a60:	3001      	addeq	r0, #1
 8006a62:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006a66:	3001      	addeq	r0, #1
 8006a68:	bcf0      	pop	{r4, r5, r6, r7}
 8006a6a:	3801      	subs	r0, #1
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop

08006a70 <__aeabi_drsub>:
 8006a70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006a74:	e002      	b.n	8006a7c <__adddf3>
 8006a76:	bf00      	nop

08006a78 <__aeabi_dsub>:
 8006a78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006a7c <__adddf3>:
 8006a7c:	b530      	push	{r4, r5, lr}
 8006a7e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006a82:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006a86:	ea94 0f05 	teq	r4, r5
 8006a8a:	bf08      	it	eq
 8006a8c:	ea90 0f02 	teqeq	r0, r2
 8006a90:	bf1f      	itttt	ne
 8006a92:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006a96:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006a9a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006a9e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006aa2:	f000 80e2 	beq.w	8006c6a <__adddf3+0x1ee>
 8006aa6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006aaa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006aae:	bfb8      	it	lt
 8006ab0:	426d      	neglt	r5, r5
 8006ab2:	dd0c      	ble.n	8006ace <__adddf3+0x52>
 8006ab4:	442c      	add	r4, r5
 8006ab6:	ea80 0202 	eor.w	r2, r0, r2
 8006aba:	ea81 0303 	eor.w	r3, r1, r3
 8006abe:	ea82 0000 	eor.w	r0, r2, r0
 8006ac2:	ea83 0101 	eor.w	r1, r3, r1
 8006ac6:	ea80 0202 	eor.w	r2, r0, r2
 8006aca:	ea81 0303 	eor.w	r3, r1, r3
 8006ace:	2d36      	cmp	r5, #54	; 0x36
 8006ad0:	bf88      	it	hi
 8006ad2:	bd30      	pophi	{r4, r5, pc}
 8006ad4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006ad8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006adc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006ae0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006ae4:	d002      	beq.n	8006aec <__adddf3+0x70>
 8006ae6:	4240      	negs	r0, r0
 8006ae8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006aec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006af0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006af4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006af8:	d002      	beq.n	8006b00 <__adddf3+0x84>
 8006afa:	4252      	negs	r2, r2
 8006afc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006b00:	ea94 0f05 	teq	r4, r5
 8006b04:	f000 80a7 	beq.w	8006c56 <__adddf3+0x1da>
 8006b08:	f1a4 0401 	sub.w	r4, r4, #1
 8006b0c:	f1d5 0e20 	rsbs	lr, r5, #32
 8006b10:	db0d      	blt.n	8006b2e <__adddf3+0xb2>
 8006b12:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006b16:	fa22 f205 	lsr.w	r2, r2, r5
 8006b1a:	1880      	adds	r0, r0, r2
 8006b1c:	f141 0100 	adc.w	r1, r1, #0
 8006b20:	fa03 f20e 	lsl.w	r2, r3, lr
 8006b24:	1880      	adds	r0, r0, r2
 8006b26:	fa43 f305 	asr.w	r3, r3, r5
 8006b2a:	4159      	adcs	r1, r3
 8006b2c:	e00e      	b.n	8006b4c <__adddf3+0xd0>
 8006b2e:	f1a5 0520 	sub.w	r5, r5, #32
 8006b32:	f10e 0e20 	add.w	lr, lr, #32
 8006b36:	2a01      	cmp	r2, #1
 8006b38:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006b3c:	bf28      	it	cs
 8006b3e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006b42:	fa43 f305 	asr.w	r3, r3, r5
 8006b46:	18c0      	adds	r0, r0, r3
 8006b48:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006b4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006b50:	d507      	bpl.n	8006b62 <__adddf3+0xe6>
 8006b52:	f04f 0e00 	mov.w	lr, #0
 8006b56:	f1dc 0c00 	rsbs	ip, ip, #0
 8006b5a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006b5e:	eb6e 0101 	sbc.w	r1, lr, r1
 8006b62:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006b66:	d31b      	bcc.n	8006ba0 <__adddf3+0x124>
 8006b68:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006b6c:	d30c      	bcc.n	8006b88 <__adddf3+0x10c>
 8006b6e:	0849      	lsrs	r1, r1, #1
 8006b70:	ea5f 0030 	movs.w	r0, r0, rrx
 8006b74:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006b78:	f104 0401 	add.w	r4, r4, #1
 8006b7c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006b80:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006b84:	f080 809a 	bcs.w	8006cbc <__adddf3+0x240>
 8006b88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006b8c:	bf08      	it	eq
 8006b8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006b92:	f150 0000 	adcs.w	r0, r0, #0
 8006b96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006b9a:	ea41 0105 	orr.w	r1, r1, r5
 8006b9e:	bd30      	pop	{r4, r5, pc}
 8006ba0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006ba4:	4140      	adcs	r0, r0
 8006ba6:	eb41 0101 	adc.w	r1, r1, r1
 8006baa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006bae:	f1a4 0401 	sub.w	r4, r4, #1
 8006bb2:	d1e9      	bne.n	8006b88 <__adddf3+0x10c>
 8006bb4:	f091 0f00 	teq	r1, #0
 8006bb8:	bf04      	itt	eq
 8006bba:	4601      	moveq	r1, r0
 8006bbc:	2000      	moveq	r0, #0
 8006bbe:	fab1 f381 	clz	r3, r1
 8006bc2:	bf08      	it	eq
 8006bc4:	3320      	addeq	r3, #32
 8006bc6:	f1a3 030b 	sub.w	r3, r3, #11
 8006bca:	f1b3 0220 	subs.w	r2, r3, #32
 8006bce:	da0c      	bge.n	8006bea <__adddf3+0x16e>
 8006bd0:	320c      	adds	r2, #12
 8006bd2:	dd08      	ble.n	8006be6 <__adddf3+0x16a>
 8006bd4:	f102 0c14 	add.w	ip, r2, #20
 8006bd8:	f1c2 020c 	rsb	r2, r2, #12
 8006bdc:	fa01 f00c 	lsl.w	r0, r1, ip
 8006be0:	fa21 f102 	lsr.w	r1, r1, r2
 8006be4:	e00c      	b.n	8006c00 <__adddf3+0x184>
 8006be6:	f102 0214 	add.w	r2, r2, #20
 8006bea:	bfd8      	it	le
 8006bec:	f1c2 0c20 	rsble	ip, r2, #32
 8006bf0:	fa01 f102 	lsl.w	r1, r1, r2
 8006bf4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006bf8:	bfdc      	itt	le
 8006bfa:	ea41 010c 	orrle.w	r1, r1, ip
 8006bfe:	4090      	lslle	r0, r2
 8006c00:	1ae4      	subs	r4, r4, r3
 8006c02:	bfa2      	ittt	ge
 8006c04:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006c08:	4329      	orrge	r1, r5
 8006c0a:	bd30      	popge	{r4, r5, pc}
 8006c0c:	ea6f 0404 	mvn.w	r4, r4
 8006c10:	3c1f      	subs	r4, #31
 8006c12:	da1c      	bge.n	8006c4e <__adddf3+0x1d2>
 8006c14:	340c      	adds	r4, #12
 8006c16:	dc0e      	bgt.n	8006c36 <__adddf3+0x1ba>
 8006c18:	f104 0414 	add.w	r4, r4, #20
 8006c1c:	f1c4 0220 	rsb	r2, r4, #32
 8006c20:	fa20 f004 	lsr.w	r0, r0, r4
 8006c24:	fa01 f302 	lsl.w	r3, r1, r2
 8006c28:	ea40 0003 	orr.w	r0, r0, r3
 8006c2c:	fa21 f304 	lsr.w	r3, r1, r4
 8006c30:	ea45 0103 	orr.w	r1, r5, r3
 8006c34:	bd30      	pop	{r4, r5, pc}
 8006c36:	f1c4 040c 	rsb	r4, r4, #12
 8006c3a:	f1c4 0220 	rsb	r2, r4, #32
 8006c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8006c42:	fa01 f304 	lsl.w	r3, r1, r4
 8006c46:	ea40 0003 	orr.w	r0, r0, r3
 8006c4a:	4629      	mov	r1, r5
 8006c4c:	bd30      	pop	{r4, r5, pc}
 8006c4e:	fa21 f004 	lsr.w	r0, r1, r4
 8006c52:	4629      	mov	r1, r5
 8006c54:	bd30      	pop	{r4, r5, pc}
 8006c56:	f094 0f00 	teq	r4, #0
 8006c5a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006c5e:	bf06      	itte	eq
 8006c60:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006c64:	3401      	addeq	r4, #1
 8006c66:	3d01      	subne	r5, #1
 8006c68:	e74e      	b.n	8006b08 <__adddf3+0x8c>
 8006c6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006c6e:	bf18      	it	ne
 8006c70:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006c74:	d029      	beq.n	8006cca <__adddf3+0x24e>
 8006c76:	ea94 0f05 	teq	r4, r5
 8006c7a:	bf08      	it	eq
 8006c7c:	ea90 0f02 	teqeq	r0, r2
 8006c80:	d005      	beq.n	8006c8e <__adddf3+0x212>
 8006c82:	ea54 0c00 	orrs.w	ip, r4, r0
 8006c86:	bf04      	itt	eq
 8006c88:	4619      	moveq	r1, r3
 8006c8a:	4610      	moveq	r0, r2
 8006c8c:	bd30      	pop	{r4, r5, pc}
 8006c8e:	ea91 0f03 	teq	r1, r3
 8006c92:	bf1e      	ittt	ne
 8006c94:	2100      	movne	r1, #0
 8006c96:	2000      	movne	r0, #0
 8006c98:	bd30      	popne	{r4, r5, pc}
 8006c9a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006c9e:	d105      	bne.n	8006cac <__adddf3+0x230>
 8006ca0:	0040      	lsls	r0, r0, #1
 8006ca2:	4149      	adcs	r1, r1
 8006ca4:	bf28      	it	cs
 8006ca6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006caa:	bd30      	pop	{r4, r5, pc}
 8006cac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006cb0:	bf3c      	itt	cc
 8006cb2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006cb6:	bd30      	popcc	{r4, r5, pc}
 8006cb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006cbc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006cc0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006cc4:	f04f 0000 	mov.w	r0, #0
 8006cc8:	bd30      	pop	{r4, r5, pc}
 8006cca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006cce:	bf1a      	itte	ne
 8006cd0:	4619      	movne	r1, r3
 8006cd2:	4610      	movne	r0, r2
 8006cd4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006cd8:	bf1c      	itt	ne
 8006cda:	460b      	movne	r3, r1
 8006cdc:	4602      	movne	r2, r0
 8006cde:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006ce2:	bf06      	itte	eq
 8006ce4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006ce8:	ea91 0f03 	teqeq	r1, r3
 8006cec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006cf0:	bd30      	pop	{r4, r5, pc}
 8006cf2:	bf00      	nop

08006cf4 <__aeabi_ui2d>:
 8006cf4:	f090 0f00 	teq	r0, #0
 8006cf8:	bf04      	itt	eq
 8006cfa:	2100      	moveq	r1, #0
 8006cfc:	4770      	bxeq	lr
 8006cfe:	b530      	push	{r4, r5, lr}
 8006d00:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006d04:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006d08:	f04f 0500 	mov.w	r5, #0
 8006d0c:	f04f 0100 	mov.w	r1, #0
 8006d10:	e750      	b.n	8006bb4 <__adddf3+0x138>
 8006d12:	bf00      	nop

08006d14 <__aeabi_i2d>:
 8006d14:	f090 0f00 	teq	r0, #0
 8006d18:	bf04      	itt	eq
 8006d1a:	2100      	moveq	r1, #0
 8006d1c:	4770      	bxeq	lr
 8006d1e:	b530      	push	{r4, r5, lr}
 8006d20:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006d24:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006d28:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006d2c:	bf48      	it	mi
 8006d2e:	4240      	negmi	r0, r0
 8006d30:	f04f 0100 	mov.w	r1, #0
 8006d34:	e73e      	b.n	8006bb4 <__adddf3+0x138>
 8006d36:	bf00      	nop

08006d38 <__aeabi_f2d>:
 8006d38:	0042      	lsls	r2, r0, #1
 8006d3a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006d3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8006d42:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006d46:	bf1f      	itttt	ne
 8006d48:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006d4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006d50:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006d54:	4770      	bxne	lr
 8006d56:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8006d5a:	bf08      	it	eq
 8006d5c:	4770      	bxeq	lr
 8006d5e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8006d62:	bf04      	itt	eq
 8006d64:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8006d68:	4770      	bxeq	lr
 8006d6a:	b530      	push	{r4, r5, lr}
 8006d6c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006d70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006d74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006d78:	e71c      	b.n	8006bb4 <__adddf3+0x138>
 8006d7a:	bf00      	nop

08006d7c <__aeabi_ul2d>:
 8006d7c:	ea50 0201 	orrs.w	r2, r0, r1
 8006d80:	bf08      	it	eq
 8006d82:	4770      	bxeq	lr
 8006d84:	b530      	push	{r4, r5, lr}
 8006d86:	f04f 0500 	mov.w	r5, #0
 8006d8a:	e00a      	b.n	8006da2 <__aeabi_l2d+0x16>

08006d8c <__aeabi_l2d>:
 8006d8c:	ea50 0201 	orrs.w	r2, r0, r1
 8006d90:	bf08      	it	eq
 8006d92:	4770      	bxeq	lr
 8006d94:	b530      	push	{r4, r5, lr}
 8006d96:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006d9a:	d502      	bpl.n	8006da2 <__aeabi_l2d+0x16>
 8006d9c:	4240      	negs	r0, r0
 8006d9e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006da2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006da6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006daa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006dae:	f43f aed8 	beq.w	8006b62 <__adddf3+0xe6>
 8006db2:	f04f 0203 	mov.w	r2, #3
 8006db6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006dba:	bf18      	it	ne
 8006dbc:	3203      	addne	r2, #3
 8006dbe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006dc2:	bf18      	it	ne
 8006dc4:	3203      	addne	r2, #3
 8006dc6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006dca:	f1c2 0320 	rsb	r3, r2, #32
 8006dce:	fa00 fc03 	lsl.w	ip, r0, r3
 8006dd2:	fa20 f002 	lsr.w	r0, r0, r2
 8006dd6:	fa01 fe03 	lsl.w	lr, r1, r3
 8006dda:	ea40 000e 	orr.w	r0, r0, lr
 8006dde:	fa21 f102 	lsr.w	r1, r1, r2
 8006de2:	4414      	add	r4, r2
 8006de4:	e6bd      	b.n	8006b62 <__adddf3+0xe6>
 8006de6:	bf00      	nop

08006de8 <__aeabi_dmul>:
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006dee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006df2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006df6:	bf1d      	ittte	ne
 8006df8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006dfc:	ea94 0f0c 	teqne	r4, ip
 8006e00:	ea95 0f0c 	teqne	r5, ip
 8006e04:	f000 f8de 	bleq	8006fc4 <__aeabi_dmul+0x1dc>
 8006e08:	442c      	add	r4, r5
 8006e0a:	ea81 0603 	eor.w	r6, r1, r3
 8006e0e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006e12:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006e16:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006e1a:	bf18      	it	ne
 8006e1c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006e20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e28:	d038      	beq.n	8006e9c <__aeabi_dmul+0xb4>
 8006e2a:	fba0 ce02 	umull	ip, lr, r0, r2
 8006e2e:	f04f 0500 	mov.w	r5, #0
 8006e32:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006e36:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8006e3a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006e3e:	f04f 0600 	mov.w	r6, #0
 8006e42:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006e46:	f09c 0f00 	teq	ip, #0
 8006e4a:	bf18      	it	ne
 8006e4c:	f04e 0e01 	orrne.w	lr, lr, #1
 8006e50:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006e54:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006e58:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006e5c:	d204      	bcs.n	8006e68 <__aeabi_dmul+0x80>
 8006e5e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006e62:	416d      	adcs	r5, r5
 8006e64:	eb46 0606 	adc.w	r6, r6, r6
 8006e68:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006e6c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006e70:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006e74:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006e78:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006e7c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006e80:	bf88      	it	hi
 8006e82:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006e86:	d81e      	bhi.n	8006ec6 <__aeabi_dmul+0xde>
 8006e88:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006e8c:	bf08      	it	eq
 8006e8e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006e92:	f150 0000 	adcs.w	r0, r0, #0
 8006e96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006e9a:	bd70      	pop	{r4, r5, r6, pc}
 8006e9c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006ea0:	ea46 0101 	orr.w	r1, r6, r1
 8006ea4:	ea40 0002 	orr.w	r0, r0, r2
 8006ea8:	ea81 0103 	eor.w	r1, r1, r3
 8006eac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006eb0:	bfc2      	ittt	gt
 8006eb2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006eb6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006eba:	bd70      	popgt	{r4, r5, r6, pc}
 8006ebc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006ec0:	f04f 0e00 	mov.w	lr, #0
 8006ec4:	3c01      	subs	r4, #1
 8006ec6:	f300 80ab 	bgt.w	8007020 <__aeabi_dmul+0x238>
 8006eca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8006ece:	bfde      	ittt	le
 8006ed0:	2000      	movle	r0, #0
 8006ed2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8006ed6:	bd70      	pople	{r4, r5, r6, pc}
 8006ed8:	f1c4 0400 	rsb	r4, r4, #0
 8006edc:	3c20      	subs	r4, #32
 8006ede:	da35      	bge.n	8006f4c <__aeabi_dmul+0x164>
 8006ee0:	340c      	adds	r4, #12
 8006ee2:	dc1b      	bgt.n	8006f1c <__aeabi_dmul+0x134>
 8006ee4:	f104 0414 	add.w	r4, r4, #20
 8006ee8:	f1c4 0520 	rsb	r5, r4, #32
 8006eec:	fa00 f305 	lsl.w	r3, r0, r5
 8006ef0:	fa20 f004 	lsr.w	r0, r0, r4
 8006ef4:	fa01 f205 	lsl.w	r2, r1, r5
 8006ef8:	ea40 0002 	orr.w	r0, r0, r2
 8006efc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006f00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006f04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006f08:	fa21 f604 	lsr.w	r6, r1, r4
 8006f0c:	eb42 0106 	adc.w	r1, r2, r6
 8006f10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006f14:	bf08      	it	eq
 8006f16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006f1a:	bd70      	pop	{r4, r5, r6, pc}
 8006f1c:	f1c4 040c 	rsb	r4, r4, #12
 8006f20:	f1c4 0520 	rsb	r5, r4, #32
 8006f24:	fa00 f304 	lsl.w	r3, r0, r4
 8006f28:	fa20 f005 	lsr.w	r0, r0, r5
 8006f2c:	fa01 f204 	lsl.w	r2, r1, r4
 8006f30:	ea40 0002 	orr.w	r0, r0, r2
 8006f34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006f38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006f3c:	f141 0100 	adc.w	r1, r1, #0
 8006f40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006f44:	bf08      	it	eq
 8006f46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006f4a:	bd70      	pop	{r4, r5, r6, pc}
 8006f4c:	f1c4 0520 	rsb	r5, r4, #32
 8006f50:	fa00 f205 	lsl.w	r2, r0, r5
 8006f54:	ea4e 0e02 	orr.w	lr, lr, r2
 8006f58:	fa20 f304 	lsr.w	r3, r0, r4
 8006f5c:	fa01 f205 	lsl.w	r2, r1, r5
 8006f60:	ea43 0302 	orr.w	r3, r3, r2
 8006f64:	fa21 f004 	lsr.w	r0, r1, r4
 8006f68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006f6c:	fa21 f204 	lsr.w	r2, r1, r4
 8006f70:	ea20 0002 	bic.w	r0, r0, r2
 8006f74:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006f78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006f7c:	bf08      	it	eq
 8006f7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006f82:	bd70      	pop	{r4, r5, r6, pc}
 8006f84:	f094 0f00 	teq	r4, #0
 8006f88:	d10f      	bne.n	8006faa <__aeabi_dmul+0x1c2>
 8006f8a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8006f8e:	0040      	lsls	r0, r0, #1
 8006f90:	eb41 0101 	adc.w	r1, r1, r1
 8006f94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006f98:	bf08      	it	eq
 8006f9a:	3c01      	subeq	r4, #1
 8006f9c:	d0f7      	beq.n	8006f8e <__aeabi_dmul+0x1a6>
 8006f9e:	ea41 0106 	orr.w	r1, r1, r6
 8006fa2:	f095 0f00 	teq	r5, #0
 8006fa6:	bf18      	it	ne
 8006fa8:	4770      	bxne	lr
 8006faa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8006fae:	0052      	lsls	r2, r2, #1
 8006fb0:	eb43 0303 	adc.w	r3, r3, r3
 8006fb4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006fb8:	bf08      	it	eq
 8006fba:	3d01      	subeq	r5, #1
 8006fbc:	d0f7      	beq.n	8006fae <__aeabi_dmul+0x1c6>
 8006fbe:	ea43 0306 	orr.w	r3, r3, r6
 8006fc2:	4770      	bx	lr
 8006fc4:	ea94 0f0c 	teq	r4, ip
 8006fc8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006fcc:	bf18      	it	ne
 8006fce:	ea95 0f0c 	teqne	r5, ip
 8006fd2:	d00c      	beq.n	8006fee <__aeabi_dmul+0x206>
 8006fd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006fd8:	bf18      	it	ne
 8006fda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006fde:	d1d1      	bne.n	8006f84 <__aeabi_dmul+0x19c>
 8006fe0:	ea81 0103 	eor.w	r1, r1, r3
 8006fe4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006fe8:	f04f 0000 	mov.w	r0, #0
 8006fec:	bd70      	pop	{r4, r5, r6, pc}
 8006fee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006ff2:	bf06      	itte	eq
 8006ff4:	4610      	moveq	r0, r2
 8006ff6:	4619      	moveq	r1, r3
 8006ff8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006ffc:	d019      	beq.n	8007032 <__aeabi_dmul+0x24a>
 8006ffe:	ea94 0f0c 	teq	r4, ip
 8007002:	d102      	bne.n	800700a <__aeabi_dmul+0x222>
 8007004:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8007008:	d113      	bne.n	8007032 <__aeabi_dmul+0x24a>
 800700a:	ea95 0f0c 	teq	r5, ip
 800700e:	d105      	bne.n	800701c <__aeabi_dmul+0x234>
 8007010:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8007014:	bf1c      	itt	ne
 8007016:	4610      	movne	r0, r2
 8007018:	4619      	movne	r1, r3
 800701a:	d10a      	bne.n	8007032 <__aeabi_dmul+0x24a>
 800701c:	ea81 0103 	eor.w	r1, r1, r3
 8007020:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007024:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007028:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800702c:	f04f 0000 	mov.w	r0, #0
 8007030:	bd70      	pop	{r4, r5, r6, pc}
 8007032:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007036:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800703a:	bd70      	pop	{r4, r5, r6, pc}

0800703c <__aeabi_ddiv>:
 800703c:	b570      	push	{r4, r5, r6, lr}
 800703e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007042:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007046:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800704a:	bf1d      	ittte	ne
 800704c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007050:	ea94 0f0c 	teqne	r4, ip
 8007054:	ea95 0f0c 	teqne	r5, ip
 8007058:	f000 f8a7 	bleq	80071aa <__aeabi_ddiv+0x16e>
 800705c:	eba4 0405 	sub.w	r4, r4, r5
 8007060:	ea81 0e03 	eor.w	lr, r1, r3
 8007064:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007068:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800706c:	f000 8088 	beq.w	8007180 <__aeabi_ddiv+0x144>
 8007070:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007074:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8007078:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800707c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8007080:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8007084:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8007088:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800708c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8007090:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8007094:	429d      	cmp	r5, r3
 8007096:	bf08      	it	eq
 8007098:	4296      	cmpeq	r6, r2
 800709a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800709e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80070a2:	d202      	bcs.n	80070aa <__aeabi_ddiv+0x6e>
 80070a4:	085b      	lsrs	r3, r3, #1
 80070a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80070aa:	1ab6      	subs	r6, r6, r2
 80070ac:	eb65 0503 	sbc.w	r5, r5, r3
 80070b0:	085b      	lsrs	r3, r3, #1
 80070b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80070b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80070ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80070be:	ebb6 0e02 	subs.w	lr, r6, r2
 80070c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80070c6:	bf22      	ittt	cs
 80070c8:	1ab6      	subcs	r6, r6, r2
 80070ca:	4675      	movcs	r5, lr
 80070cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80070d0:	085b      	lsrs	r3, r3, #1
 80070d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80070d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80070da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80070de:	bf22      	ittt	cs
 80070e0:	1ab6      	subcs	r6, r6, r2
 80070e2:	4675      	movcs	r5, lr
 80070e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80070e8:	085b      	lsrs	r3, r3, #1
 80070ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80070ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80070f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80070f6:	bf22      	ittt	cs
 80070f8:	1ab6      	subcs	r6, r6, r2
 80070fa:	4675      	movcs	r5, lr
 80070fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007100:	085b      	lsrs	r3, r3, #1
 8007102:	ea4f 0232 	mov.w	r2, r2, rrx
 8007106:	ebb6 0e02 	subs.w	lr, r6, r2
 800710a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800710e:	bf22      	ittt	cs
 8007110:	1ab6      	subcs	r6, r6, r2
 8007112:	4675      	movcs	r5, lr
 8007114:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8007118:	ea55 0e06 	orrs.w	lr, r5, r6
 800711c:	d018      	beq.n	8007150 <__aeabi_ddiv+0x114>
 800711e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8007122:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8007126:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800712a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800712e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8007132:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007136:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800713a:	d1c0      	bne.n	80070be <__aeabi_ddiv+0x82>
 800713c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007140:	d10b      	bne.n	800715a <__aeabi_ddiv+0x11e>
 8007142:	ea41 0100 	orr.w	r1, r1, r0
 8007146:	f04f 0000 	mov.w	r0, #0
 800714a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800714e:	e7b6      	b.n	80070be <__aeabi_ddiv+0x82>
 8007150:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007154:	bf04      	itt	eq
 8007156:	4301      	orreq	r1, r0
 8007158:	2000      	moveq	r0, #0
 800715a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800715e:	bf88      	it	hi
 8007160:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007164:	f63f aeaf 	bhi.w	8006ec6 <__aeabi_dmul+0xde>
 8007168:	ebb5 0c03 	subs.w	ip, r5, r3
 800716c:	bf04      	itt	eq
 800716e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8007172:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007176:	f150 0000 	adcs.w	r0, r0, #0
 800717a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800717e:	bd70      	pop	{r4, r5, r6, pc}
 8007180:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8007184:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8007188:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800718c:	bfc2      	ittt	gt
 800718e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007192:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007196:	bd70      	popgt	{r4, r5, r6, pc}
 8007198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800719c:	f04f 0e00 	mov.w	lr, #0
 80071a0:	3c01      	subs	r4, #1
 80071a2:	e690      	b.n	8006ec6 <__aeabi_dmul+0xde>
 80071a4:	ea45 0e06 	orr.w	lr, r5, r6
 80071a8:	e68d      	b.n	8006ec6 <__aeabi_dmul+0xde>
 80071aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80071ae:	ea94 0f0c 	teq	r4, ip
 80071b2:	bf08      	it	eq
 80071b4:	ea95 0f0c 	teqeq	r5, ip
 80071b8:	f43f af3b 	beq.w	8007032 <__aeabi_dmul+0x24a>
 80071bc:	ea94 0f0c 	teq	r4, ip
 80071c0:	d10a      	bne.n	80071d8 <__aeabi_ddiv+0x19c>
 80071c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80071c6:	f47f af34 	bne.w	8007032 <__aeabi_dmul+0x24a>
 80071ca:	ea95 0f0c 	teq	r5, ip
 80071ce:	f47f af25 	bne.w	800701c <__aeabi_dmul+0x234>
 80071d2:	4610      	mov	r0, r2
 80071d4:	4619      	mov	r1, r3
 80071d6:	e72c      	b.n	8007032 <__aeabi_dmul+0x24a>
 80071d8:	ea95 0f0c 	teq	r5, ip
 80071dc:	d106      	bne.n	80071ec <__aeabi_ddiv+0x1b0>
 80071de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80071e2:	f43f aefd 	beq.w	8006fe0 <__aeabi_dmul+0x1f8>
 80071e6:	4610      	mov	r0, r2
 80071e8:	4619      	mov	r1, r3
 80071ea:	e722      	b.n	8007032 <__aeabi_dmul+0x24a>
 80071ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80071f0:	bf18      	it	ne
 80071f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80071f6:	f47f aec5 	bne.w	8006f84 <__aeabi_dmul+0x19c>
 80071fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80071fe:	f47f af0d 	bne.w	800701c <__aeabi_dmul+0x234>
 8007202:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8007206:	f47f aeeb 	bne.w	8006fe0 <__aeabi_dmul+0x1f8>
 800720a:	e712      	b.n	8007032 <__aeabi_dmul+0x24a>

0800720c <__gedf2>:
 800720c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007210:	e006      	b.n	8007220 <__cmpdf2+0x4>
 8007212:	bf00      	nop

08007214 <__ledf2>:
 8007214:	f04f 0c01 	mov.w	ip, #1
 8007218:	e002      	b.n	8007220 <__cmpdf2+0x4>
 800721a:	bf00      	nop

0800721c <__cmpdf2>:
 800721c:	f04f 0c01 	mov.w	ip, #1
 8007220:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007224:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007228:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800722c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007230:	bf18      	it	ne
 8007232:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8007236:	d01b      	beq.n	8007270 <__cmpdf2+0x54>
 8007238:	b001      	add	sp, #4
 800723a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800723e:	bf0c      	ite	eq
 8007240:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8007244:	ea91 0f03 	teqne	r1, r3
 8007248:	bf02      	ittt	eq
 800724a:	ea90 0f02 	teqeq	r0, r2
 800724e:	2000      	moveq	r0, #0
 8007250:	4770      	bxeq	lr
 8007252:	f110 0f00 	cmn.w	r0, #0
 8007256:	ea91 0f03 	teq	r1, r3
 800725a:	bf58      	it	pl
 800725c:	4299      	cmppl	r1, r3
 800725e:	bf08      	it	eq
 8007260:	4290      	cmpeq	r0, r2
 8007262:	bf2c      	ite	cs
 8007264:	17d8      	asrcs	r0, r3, #31
 8007266:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800726a:	f040 0001 	orr.w	r0, r0, #1
 800726e:	4770      	bx	lr
 8007270:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007274:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007278:	d102      	bne.n	8007280 <__cmpdf2+0x64>
 800727a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800727e:	d107      	bne.n	8007290 <__cmpdf2+0x74>
 8007280:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007284:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007288:	d1d6      	bne.n	8007238 <__cmpdf2+0x1c>
 800728a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800728e:	d0d3      	beq.n	8007238 <__cmpdf2+0x1c>
 8007290:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop

08007298 <__aeabi_cdrcmple>:
 8007298:	4684      	mov	ip, r0
 800729a:	4610      	mov	r0, r2
 800729c:	4662      	mov	r2, ip
 800729e:	468c      	mov	ip, r1
 80072a0:	4619      	mov	r1, r3
 80072a2:	4663      	mov	r3, ip
 80072a4:	e000      	b.n	80072a8 <__aeabi_cdcmpeq>
 80072a6:	bf00      	nop

080072a8 <__aeabi_cdcmpeq>:
 80072a8:	b501      	push	{r0, lr}
 80072aa:	f7ff ffb7 	bl	800721c <__cmpdf2>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	bf48      	it	mi
 80072b2:	f110 0f00 	cmnmi.w	r0, #0
 80072b6:	bd01      	pop	{r0, pc}

080072b8 <__aeabi_dcmpeq>:
 80072b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80072bc:	f7ff fff4 	bl	80072a8 <__aeabi_cdcmpeq>
 80072c0:	bf0c      	ite	eq
 80072c2:	2001      	moveq	r0, #1
 80072c4:	2000      	movne	r0, #0
 80072c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80072ca:	bf00      	nop

080072cc <__aeabi_dcmplt>:
 80072cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80072d0:	f7ff ffea 	bl	80072a8 <__aeabi_cdcmpeq>
 80072d4:	bf34      	ite	cc
 80072d6:	2001      	movcc	r0, #1
 80072d8:	2000      	movcs	r0, #0
 80072da:	f85d fb08 	ldr.w	pc, [sp], #8
 80072de:	bf00      	nop

080072e0 <__aeabi_dcmple>:
 80072e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80072e4:	f7ff ffe0 	bl	80072a8 <__aeabi_cdcmpeq>
 80072e8:	bf94      	ite	ls
 80072ea:	2001      	movls	r0, #1
 80072ec:	2000      	movhi	r0, #0
 80072ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80072f2:	bf00      	nop

080072f4 <__aeabi_dcmpge>:
 80072f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80072f8:	f7ff ffce 	bl	8007298 <__aeabi_cdrcmple>
 80072fc:	bf94      	ite	ls
 80072fe:	2001      	movls	r0, #1
 8007300:	2000      	movhi	r0, #0
 8007302:	f85d fb08 	ldr.w	pc, [sp], #8
 8007306:	bf00      	nop

08007308 <__aeabi_dcmpgt>:
 8007308:	f84d ed08 	str.w	lr, [sp, #-8]!
 800730c:	f7ff ffc4 	bl	8007298 <__aeabi_cdrcmple>
 8007310:	bf34      	ite	cc
 8007312:	2001      	movcc	r0, #1
 8007314:	2000      	movcs	r0, #0
 8007316:	f85d fb08 	ldr.w	pc, [sp], #8
 800731a:	bf00      	nop

0800731c <__aeabi_dcmpun>:
 800731c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007320:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007324:	d102      	bne.n	800732c <__aeabi_dcmpun+0x10>
 8007326:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800732a:	d10a      	bne.n	8007342 <__aeabi_dcmpun+0x26>
 800732c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007330:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007334:	d102      	bne.n	800733c <__aeabi_dcmpun+0x20>
 8007336:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800733a:	d102      	bne.n	8007342 <__aeabi_dcmpun+0x26>
 800733c:	f04f 0000 	mov.w	r0, #0
 8007340:	4770      	bx	lr
 8007342:	f04f 0001 	mov.w	r0, #1
 8007346:	4770      	bx	lr

08007348 <__aeabi_d2iz>:
 8007348:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800734c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8007350:	d215      	bcs.n	800737e <__aeabi_d2iz+0x36>
 8007352:	d511      	bpl.n	8007378 <__aeabi_d2iz+0x30>
 8007354:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8007358:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800735c:	d912      	bls.n	8007384 <__aeabi_d2iz+0x3c>
 800735e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007362:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007366:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800736a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800736e:	fa23 f002 	lsr.w	r0, r3, r2
 8007372:	bf18      	it	ne
 8007374:	4240      	negne	r0, r0
 8007376:	4770      	bx	lr
 8007378:	f04f 0000 	mov.w	r0, #0
 800737c:	4770      	bx	lr
 800737e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8007382:	d105      	bne.n	8007390 <__aeabi_d2iz+0x48>
 8007384:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8007388:	bf08      	it	eq
 800738a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800738e:	4770      	bx	lr
 8007390:	f04f 0000 	mov.w	r0, #0
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop

08007398 <__aeabi_d2f>:
 8007398:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800739c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80073a0:	bf24      	itt	cs
 80073a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80073a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80073aa:	d90d      	bls.n	80073c8 <__aeabi_d2f+0x30>
 80073ac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80073b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80073b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80073b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80073bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80073c0:	bf08      	it	eq
 80073c2:	f020 0001 	biceq.w	r0, r0, #1
 80073c6:	4770      	bx	lr
 80073c8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80073cc:	d121      	bne.n	8007412 <__aeabi_d2f+0x7a>
 80073ce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80073d2:	bfbc      	itt	lt
 80073d4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80073d8:	4770      	bxlt	lr
 80073da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80073de:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80073e2:	f1c2 0218 	rsb	r2, r2, #24
 80073e6:	f1c2 0c20 	rsb	ip, r2, #32
 80073ea:	fa10 f30c 	lsls.w	r3, r0, ip
 80073ee:	fa20 f002 	lsr.w	r0, r0, r2
 80073f2:	bf18      	it	ne
 80073f4:	f040 0001 	orrne.w	r0, r0, #1
 80073f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80073fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8007400:	fa03 fc0c 	lsl.w	ip, r3, ip
 8007404:	ea40 000c 	orr.w	r0, r0, ip
 8007408:	fa23 f302 	lsr.w	r3, r3, r2
 800740c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007410:	e7cc      	b.n	80073ac <__aeabi_d2f+0x14>
 8007412:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8007416:	d107      	bne.n	8007428 <__aeabi_d2f+0x90>
 8007418:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800741c:	bf1e      	ittt	ne
 800741e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8007422:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8007426:	4770      	bxne	lr
 8007428:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800742c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007430:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop

08007438 <__aeabi_uldivmod>:
 8007438:	b953      	cbnz	r3, 8007450 <__aeabi_uldivmod+0x18>
 800743a:	b94a      	cbnz	r2, 8007450 <__aeabi_uldivmod+0x18>
 800743c:	2900      	cmp	r1, #0
 800743e:	bf08      	it	eq
 8007440:	2800      	cmpeq	r0, #0
 8007442:	bf1c      	itt	ne
 8007444:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007448:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800744c:	f000 b972 	b.w	8007734 <__aeabi_idiv0>
 8007450:	f1ad 0c08 	sub.w	ip, sp, #8
 8007454:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007458:	f000 f806 	bl	8007468 <__udivmoddi4>
 800745c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007464:	b004      	add	sp, #16
 8007466:	4770      	bx	lr

08007468 <__udivmoddi4>:
 8007468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800746c:	9e08      	ldr	r6, [sp, #32]
 800746e:	4604      	mov	r4, r0
 8007470:	4688      	mov	r8, r1
 8007472:	2b00      	cmp	r3, #0
 8007474:	d14b      	bne.n	800750e <__udivmoddi4+0xa6>
 8007476:	428a      	cmp	r2, r1
 8007478:	4615      	mov	r5, r2
 800747a:	d967      	bls.n	800754c <__udivmoddi4+0xe4>
 800747c:	fab2 f282 	clz	r2, r2
 8007480:	b14a      	cbz	r2, 8007496 <__udivmoddi4+0x2e>
 8007482:	f1c2 0720 	rsb	r7, r2, #32
 8007486:	fa01 f302 	lsl.w	r3, r1, r2
 800748a:	fa20 f707 	lsr.w	r7, r0, r7
 800748e:	4095      	lsls	r5, r2
 8007490:	ea47 0803 	orr.w	r8, r7, r3
 8007494:	4094      	lsls	r4, r2
 8007496:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800749a:	0c23      	lsrs	r3, r4, #16
 800749c:	fbb8 f7fe 	udiv	r7, r8, lr
 80074a0:	fa1f fc85 	uxth.w	ip, r5
 80074a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80074a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80074ac:	fb07 f10c 	mul.w	r1, r7, ip
 80074b0:	4299      	cmp	r1, r3
 80074b2:	d909      	bls.n	80074c8 <__udivmoddi4+0x60>
 80074b4:	18eb      	adds	r3, r5, r3
 80074b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80074ba:	f080 811b 	bcs.w	80076f4 <__udivmoddi4+0x28c>
 80074be:	4299      	cmp	r1, r3
 80074c0:	f240 8118 	bls.w	80076f4 <__udivmoddi4+0x28c>
 80074c4:	3f02      	subs	r7, #2
 80074c6:	442b      	add	r3, r5
 80074c8:	1a5b      	subs	r3, r3, r1
 80074ca:	b2a4      	uxth	r4, r4
 80074cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80074d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80074d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80074d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80074dc:	45a4      	cmp	ip, r4
 80074de:	d909      	bls.n	80074f4 <__udivmoddi4+0x8c>
 80074e0:	192c      	adds	r4, r5, r4
 80074e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80074e6:	f080 8107 	bcs.w	80076f8 <__udivmoddi4+0x290>
 80074ea:	45a4      	cmp	ip, r4
 80074ec:	f240 8104 	bls.w	80076f8 <__udivmoddi4+0x290>
 80074f0:	3802      	subs	r0, #2
 80074f2:	442c      	add	r4, r5
 80074f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80074f8:	eba4 040c 	sub.w	r4, r4, ip
 80074fc:	2700      	movs	r7, #0
 80074fe:	b11e      	cbz	r6, 8007508 <__udivmoddi4+0xa0>
 8007500:	40d4      	lsrs	r4, r2
 8007502:	2300      	movs	r3, #0
 8007504:	e9c6 4300 	strd	r4, r3, [r6]
 8007508:	4639      	mov	r1, r7
 800750a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800750e:	428b      	cmp	r3, r1
 8007510:	d909      	bls.n	8007526 <__udivmoddi4+0xbe>
 8007512:	2e00      	cmp	r6, #0
 8007514:	f000 80eb 	beq.w	80076ee <__udivmoddi4+0x286>
 8007518:	2700      	movs	r7, #0
 800751a:	e9c6 0100 	strd	r0, r1, [r6]
 800751e:	4638      	mov	r0, r7
 8007520:	4639      	mov	r1, r7
 8007522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007526:	fab3 f783 	clz	r7, r3
 800752a:	2f00      	cmp	r7, #0
 800752c:	d147      	bne.n	80075be <__udivmoddi4+0x156>
 800752e:	428b      	cmp	r3, r1
 8007530:	d302      	bcc.n	8007538 <__udivmoddi4+0xd0>
 8007532:	4282      	cmp	r2, r0
 8007534:	f200 80fa 	bhi.w	800772c <__udivmoddi4+0x2c4>
 8007538:	1a84      	subs	r4, r0, r2
 800753a:	eb61 0303 	sbc.w	r3, r1, r3
 800753e:	2001      	movs	r0, #1
 8007540:	4698      	mov	r8, r3
 8007542:	2e00      	cmp	r6, #0
 8007544:	d0e0      	beq.n	8007508 <__udivmoddi4+0xa0>
 8007546:	e9c6 4800 	strd	r4, r8, [r6]
 800754a:	e7dd      	b.n	8007508 <__udivmoddi4+0xa0>
 800754c:	b902      	cbnz	r2, 8007550 <__udivmoddi4+0xe8>
 800754e:	deff      	udf	#255	; 0xff
 8007550:	fab2 f282 	clz	r2, r2
 8007554:	2a00      	cmp	r2, #0
 8007556:	f040 808f 	bne.w	8007678 <__udivmoddi4+0x210>
 800755a:	1b49      	subs	r1, r1, r5
 800755c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007560:	fa1f f885 	uxth.w	r8, r5
 8007564:	2701      	movs	r7, #1
 8007566:	fbb1 fcfe 	udiv	ip, r1, lr
 800756a:	0c23      	lsrs	r3, r4, #16
 800756c:	fb0e 111c 	mls	r1, lr, ip, r1
 8007570:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007574:	fb08 f10c 	mul.w	r1, r8, ip
 8007578:	4299      	cmp	r1, r3
 800757a:	d907      	bls.n	800758c <__udivmoddi4+0x124>
 800757c:	18eb      	adds	r3, r5, r3
 800757e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8007582:	d202      	bcs.n	800758a <__udivmoddi4+0x122>
 8007584:	4299      	cmp	r1, r3
 8007586:	f200 80cd 	bhi.w	8007724 <__udivmoddi4+0x2bc>
 800758a:	4684      	mov	ip, r0
 800758c:	1a59      	subs	r1, r3, r1
 800758e:	b2a3      	uxth	r3, r4
 8007590:	fbb1 f0fe 	udiv	r0, r1, lr
 8007594:	fb0e 1410 	mls	r4, lr, r0, r1
 8007598:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800759c:	fb08 f800 	mul.w	r8, r8, r0
 80075a0:	45a0      	cmp	r8, r4
 80075a2:	d907      	bls.n	80075b4 <__udivmoddi4+0x14c>
 80075a4:	192c      	adds	r4, r5, r4
 80075a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80075aa:	d202      	bcs.n	80075b2 <__udivmoddi4+0x14a>
 80075ac:	45a0      	cmp	r8, r4
 80075ae:	f200 80b6 	bhi.w	800771e <__udivmoddi4+0x2b6>
 80075b2:	4618      	mov	r0, r3
 80075b4:	eba4 0408 	sub.w	r4, r4, r8
 80075b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80075bc:	e79f      	b.n	80074fe <__udivmoddi4+0x96>
 80075be:	f1c7 0c20 	rsb	ip, r7, #32
 80075c2:	40bb      	lsls	r3, r7
 80075c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80075c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80075cc:	fa01 f407 	lsl.w	r4, r1, r7
 80075d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80075d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80075d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80075dc:	4325      	orrs	r5, r4
 80075de:	fbb3 f9f8 	udiv	r9, r3, r8
 80075e2:	0c2c      	lsrs	r4, r5, #16
 80075e4:	fb08 3319 	mls	r3, r8, r9, r3
 80075e8:	fa1f fa8e 	uxth.w	sl, lr
 80075ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80075f0:	fb09 f40a 	mul.w	r4, r9, sl
 80075f4:	429c      	cmp	r4, r3
 80075f6:	fa02 f207 	lsl.w	r2, r2, r7
 80075fa:	fa00 f107 	lsl.w	r1, r0, r7
 80075fe:	d90b      	bls.n	8007618 <__udivmoddi4+0x1b0>
 8007600:	eb1e 0303 	adds.w	r3, lr, r3
 8007604:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8007608:	f080 8087 	bcs.w	800771a <__udivmoddi4+0x2b2>
 800760c:	429c      	cmp	r4, r3
 800760e:	f240 8084 	bls.w	800771a <__udivmoddi4+0x2b2>
 8007612:	f1a9 0902 	sub.w	r9, r9, #2
 8007616:	4473      	add	r3, lr
 8007618:	1b1b      	subs	r3, r3, r4
 800761a:	b2ad      	uxth	r5, r5
 800761c:	fbb3 f0f8 	udiv	r0, r3, r8
 8007620:	fb08 3310 	mls	r3, r8, r0, r3
 8007624:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8007628:	fb00 fa0a 	mul.w	sl, r0, sl
 800762c:	45a2      	cmp	sl, r4
 800762e:	d908      	bls.n	8007642 <__udivmoddi4+0x1da>
 8007630:	eb1e 0404 	adds.w	r4, lr, r4
 8007634:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007638:	d26b      	bcs.n	8007712 <__udivmoddi4+0x2aa>
 800763a:	45a2      	cmp	sl, r4
 800763c:	d969      	bls.n	8007712 <__udivmoddi4+0x2aa>
 800763e:	3802      	subs	r0, #2
 8007640:	4474      	add	r4, lr
 8007642:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8007646:	fba0 8902 	umull	r8, r9, r0, r2
 800764a:	eba4 040a 	sub.w	r4, r4, sl
 800764e:	454c      	cmp	r4, r9
 8007650:	46c2      	mov	sl, r8
 8007652:	464b      	mov	r3, r9
 8007654:	d354      	bcc.n	8007700 <__udivmoddi4+0x298>
 8007656:	d051      	beq.n	80076fc <__udivmoddi4+0x294>
 8007658:	2e00      	cmp	r6, #0
 800765a:	d069      	beq.n	8007730 <__udivmoddi4+0x2c8>
 800765c:	ebb1 050a 	subs.w	r5, r1, sl
 8007660:	eb64 0403 	sbc.w	r4, r4, r3
 8007664:	fa04 fc0c 	lsl.w	ip, r4, ip
 8007668:	40fd      	lsrs	r5, r7
 800766a:	40fc      	lsrs	r4, r7
 800766c:	ea4c 0505 	orr.w	r5, ip, r5
 8007670:	e9c6 5400 	strd	r5, r4, [r6]
 8007674:	2700      	movs	r7, #0
 8007676:	e747      	b.n	8007508 <__udivmoddi4+0xa0>
 8007678:	f1c2 0320 	rsb	r3, r2, #32
 800767c:	fa20 f703 	lsr.w	r7, r0, r3
 8007680:	4095      	lsls	r5, r2
 8007682:	fa01 f002 	lsl.w	r0, r1, r2
 8007686:	fa21 f303 	lsr.w	r3, r1, r3
 800768a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800768e:	4338      	orrs	r0, r7
 8007690:	0c01      	lsrs	r1, r0, #16
 8007692:	fbb3 f7fe 	udiv	r7, r3, lr
 8007696:	fa1f f885 	uxth.w	r8, r5
 800769a:	fb0e 3317 	mls	r3, lr, r7, r3
 800769e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80076a2:	fb07 f308 	mul.w	r3, r7, r8
 80076a6:	428b      	cmp	r3, r1
 80076a8:	fa04 f402 	lsl.w	r4, r4, r2
 80076ac:	d907      	bls.n	80076be <__udivmoddi4+0x256>
 80076ae:	1869      	adds	r1, r5, r1
 80076b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80076b4:	d22f      	bcs.n	8007716 <__udivmoddi4+0x2ae>
 80076b6:	428b      	cmp	r3, r1
 80076b8:	d92d      	bls.n	8007716 <__udivmoddi4+0x2ae>
 80076ba:	3f02      	subs	r7, #2
 80076bc:	4429      	add	r1, r5
 80076be:	1acb      	subs	r3, r1, r3
 80076c0:	b281      	uxth	r1, r0
 80076c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80076c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80076ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80076ce:	fb00 f308 	mul.w	r3, r0, r8
 80076d2:	428b      	cmp	r3, r1
 80076d4:	d907      	bls.n	80076e6 <__udivmoddi4+0x27e>
 80076d6:	1869      	adds	r1, r5, r1
 80076d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80076dc:	d217      	bcs.n	800770e <__udivmoddi4+0x2a6>
 80076de:	428b      	cmp	r3, r1
 80076e0:	d915      	bls.n	800770e <__udivmoddi4+0x2a6>
 80076e2:	3802      	subs	r0, #2
 80076e4:	4429      	add	r1, r5
 80076e6:	1ac9      	subs	r1, r1, r3
 80076e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80076ec:	e73b      	b.n	8007566 <__udivmoddi4+0xfe>
 80076ee:	4637      	mov	r7, r6
 80076f0:	4630      	mov	r0, r6
 80076f2:	e709      	b.n	8007508 <__udivmoddi4+0xa0>
 80076f4:	4607      	mov	r7, r0
 80076f6:	e6e7      	b.n	80074c8 <__udivmoddi4+0x60>
 80076f8:	4618      	mov	r0, r3
 80076fa:	e6fb      	b.n	80074f4 <__udivmoddi4+0x8c>
 80076fc:	4541      	cmp	r1, r8
 80076fe:	d2ab      	bcs.n	8007658 <__udivmoddi4+0x1f0>
 8007700:	ebb8 0a02 	subs.w	sl, r8, r2
 8007704:	eb69 020e 	sbc.w	r2, r9, lr
 8007708:	3801      	subs	r0, #1
 800770a:	4613      	mov	r3, r2
 800770c:	e7a4      	b.n	8007658 <__udivmoddi4+0x1f0>
 800770e:	4660      	mov	r0, ip
 8007710:	e7e9      	b.n	80076e6 <__udivmoddi4+0x27e>
 8007712:	4618      	mov	r0, r3
 8007714:	e795      	b.n	8007642 <__udivmoddi4+0x1da>
 8007716:	4667      	mov	r7, ip
 8007718:	e7d1      	b.n	80076be <__udivmoddi4+0x256>
 800771a:	4681      	mov	r9, r0
 800771c:	e77c      	b.n	8007618 <__udivmoddi4+0x1b0>
 800771e:	3802      	subs	r0, #2
 8007720:	442c      	add	r4, r5
 8007722:	e747      	b.n	80075b4 <__udivmoddi4+0x14c>
 8007724:	f1ac 0c02 	sub.w	ip, ip, #2
 8007728:	442b      	add	r3, r5
 800772a:	e72f      	b.n	800758c <__udivmoddi4+0x124>
 800772c:	4638      	mov	r0, r7
 800772e:	e708      	b.n	8007542 <__udivmoddi4+0xda>
 8007730:	4637      	mov	r7, r6
 8007732:	e6e9      	b.n	8007508 <__udivmoddi4+0xa0>

08007734 <__aeabi_idiv0>:
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop

08007738 <mfcc>:
     int aNCep, int aNFilters, int aNFFT,
     int aLowFreq, int aHighFreq, csf_float aPreemph,
     int aCepLifter, int aAppendEnergy,
     csf_float* aWinFunc,
     csf_float** aMFCC, int* mfcc_d1, int* mfcc_d2)
{
 8007738:	b5b0      	push	{r4, r5, r7, lr}
 800773a:	b0aa      	sub	sp, #168	; 0xa8
 800773c:	af08      	add	r7, sp, #32
 800773e:	61f8      	str	r0, [r7, #28]
 8007740:	61b9      	str	r1, [r7, #24]
 8007742:	617a      	str	r2, [r7, #20]
 8007744:	ed87 0a04 	vstr	s0, [r7, #16]
 8007748:	edc7 0a03 	vstr	s1, [r7, #12]
 800774c:	60bb      	str	r3, [r7, #8]
 800774e:	ed87 1a01 	vstr	s2, [r7, #4]
	char buffer2[100];
	strcpy(buffer2, "Before csf_mfcc\r\n");
 8007752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007756:	4a2e      	ldr	r2, [pc, #184]	; (8007810 <mfcc+0xd8>)
 8007758:	461c      	mov	r4, r3
 800775a:	4615      	mov	r5, r2
 800775c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800775e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)buffer2, strlen(buffer2), HAL_MAX_DELAY);
 8007764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff f922 	bl	80069b2 <strlen>
 800776e:	4603      	mov	r3, r0
 8007770:	b29a      	uxth	r2, r3
 8007772:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800777a:	4826      	ldr	r0, [pc, #152]	; (8007814 <mfcc+0xdc>)
 800777c:	f006 ff8e 	bl	800e69c <HAL_UART_Transmit>

  *mfcc_d1 = csf_mfcc(aSignal, aSignalLen, aSampleRate, aWinLen, aWinStep,
 8007780:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007784:	9307      	str	r3, [sp, #28]
 8007786:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800778a:	9306      	str	r3, [sp, #24]
 800778c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007790:	9305      	str	r3, [sp, #20]
 8007792:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007796:	9304      	str	r3, [sp, #16]
 8007798:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800779c:	9303      	str	r3, [sp, #12]
 800779e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077a2:	9302      	str	r3, [sp, #8]
 80077a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077a8:	9301      	str	r3, [sp, #4]
 80077aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	ed97 1a01 	vldr	s2, [r7, #4]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	edd7 0a03 	vldr	s1, [r7, #12]
 80077ba:	ed97 0a04 	vldr	s0, [r7, #16]
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	69b9      	ldr	r1, [r7, #24]
 80077c2:	69f8      	ldr	r0, [r7, #28]
 80077c4:	f000 f82c 	bl	8007820 <csf_mfcc>
 80077c8:	4602      	mov	r2, r0
 80077ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077ce:	601a      	str	r2, [r3, #0]
                      aNCep, aNFilters, aNFFT, aLowFreq, aHighFreq, aPreemph,
                      aCepLifter, aAppendEnergy, aWinFunc, aMFCC);

  	strcpy(buffer2, "After csf_mfcc\r\n");
 80077d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077d4:	4a10      	ldr	r2, [pc, #64]	; (8007818 <mfcc+0xe0>)
 80077d6:	461c      	mov	r4, r3
 80077d8:	4615      	mov	r5, r2
 80077da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077de:	682b      	ldr	r3, [r5, #0]
 80077e0:	7023      	strb	r3, [r4, #0]
  	HAL_UART_Transmit(&huart3, (uint8_t*)buffer2, strlen(buffer2), HAL_MAX_DELAY);
 80077e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7ff f8e3 	bl	80069b2 <strlen>
 80077ec:	4603      	mov	r3, r0
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80077f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077f8:	4806      	ldr	r0, [pc, #24]	; (8007814 <mfcc+0xdc>)
 80077fa:	f006 ff4f 	bl	800e69c <HAL_UART_Transmit>

  *mfcc_d2 = aNCep;
 80077fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	601a      	str	r2, [r3, #0]
}
 8007806:	bf00      	nop
 8007808:	3788      	adds	r7, #136	; 0x88
 800780a:	46bd      	mov	sp, r7
 800780c:	bdb0      	pop	{r4, r5, r7, pc}
 800780e:	bf00      	nop
 8007810:	080167d0 	.word	0x080167d0
 8007814:	2000e8c8 	.word	0x2000e8c8
 8007818:	080167e4 	.word	0x080167e4
 800781c:	00000000 	.word	0x00000000

08007820 <csf_mfcc>:
csf_mfcc(const short* aSignal, unsigned int aSignalLen, int aSampleRate,
         csf_float aWinLen, csf_float aWinStep, int aNCep, int aNFilters,
         int aNFFT, int aLowFreq, int aHighFreq, csf_float aPreemph,
         int aCepLifter, int aAppendEnergy, csf_float* aWinFunc,
         csf_float** aMFCC)
{
 8007820:	b5b0      	push	{r4, r5, r7, lr}
 8007822:	b0b8      	sub	sp, #224	; 0xe0
 8007824:	af06      	add	r7, sp, #24
 8007826:	61f8      	str	r0, [r7, #28]
 8007828:	61b9      	str	r1, [r7, #24]
 800782a:	617a      	str	r2, [r7, #20]
 800782c:	ed87 0a04 	vstr	s0, [r7, #16]
 8007830:	edc7 0a03 	vstr	s1, [r7, #12]
 8007834:	60bb      	str	r3, [r7, #8]
 8007836:	ed87 1a01 	vstr	s2, [r7, #4]
  int i, j, k, idx, fidx, didx;
  csf_float* feat;
  csf_float* energy;

  char buffer2[100];
  	strcpy(buffer2, "Before csf_logfbank\r\n");
 800783a:	f107 0320 	add.w	r3, r7, #32
 800783e:	4ab4      	ldr	r2, [pc, #720]	; (8007b10 <csf_mfcc+0x2f0>)
 8007840:	461c      	mov	r4, r3
 8007842:	4615      	mov	r5, r2
 8007844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007848:	e895 0003 	ldmia.w	r5, {r0, r1}
 800784c:	6020      	str	r0, [r4, #0]
 800784e:	3404      	adds	r4, #4
 8007850:	8021      	strh	r1, [r4, #0]
  	HAL_UART_Transmit(&huart3, (uint8_t*)buffer2, strlen(buffer2), HAL_MAX_DELAY);
 8007852:	f107 0320 	add.w	r3, r7, #32
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff f8ab 	bl	80069b2 <strlen>
 800785c:	4603      	mov	r3, r0
 800785e:	b29a      	uxth	r2, r3
 8007860:	f107 0120 	add.w	r1, r7, #32
 8007864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007868:	48aa      	ldr	r0, [pc, #680]	; (8007b14 <csf_mfcc+0x2f4>)
 800786a:	f006 ff17 	bl	800e69c <HAL_UART_Transmit>

  int n_frames = csf_logfbank(aSignal, aSignalLen, aSampleRate, aWinLen, aWinStep,
 800786e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007872:	2b00      	cmp	r3, #0
 8007874:	d002      	beq.n	800787c <csf_mfcc+0x5c>
 8007876:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800787a:	e000      	b.n	800787e <csf_mfcc+0x5e>
 800787c:	2300      	movs	r3, #0
 800787e:	9305      	str	r3, [sp, #20]
 8007880:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007884:	9304      	str	r3, [sp, #16]
 8007886:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800788a:	9303      	str	r3, [sp, #12]
 800788c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007890:	9302      	str	r3, [sp, #8]
 8007892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007896:	9301      	str	r3, [sp, #4]
 8007898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	ed97 1a01 	vldr	s2, [r7, #4]
 80078a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078a6:	edd7 0a03 	vldr	s1, [r7, #12]
 80078aa:	ed97 0a04 	vldr	s0, [r7, #16]
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	69b9      	ldr	r1, [r7, #24]
 80078b2:	69f8      	ldr	r0, [r7, #28]
 80078b4:	f000 fbac 	bl	8008010 <csf_logfbank>
 80078b8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                              aNFilters, aNFFT, aLowFreq, aHighFreq, aPreemph,
                              aWinFunc, &feat, aAppendEnergy ? &energy : NULL);
  	strcpy(buffer2, "After csf_logfbank\r\n");
 80078bc:	f107 0320 	add.w	r3, r7, #32
 80078c0:	4a95      	ldr	r2, [pc, #596]	; (8007b18 <csf_mfcc+0x2f8>)
 80078c2:	461c      	mov	r4, r3
 80078c4:	4615      	mov	r5, r2
 80078c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80078ce:	6020      	str	r0, [r4, #0]
 80078d0:	3404      	adds	r4, #4
 80078d2:	7021      	strb	r1, [r4, #0]
  	HAL_UART_Transmit(&huart3, (uint8_t*)buffer2, strlen(buffer2), HAL_MAX_DELAY);
 80078d4:	f107 0320 	add.w	r3, r7, #32
 80078d8:	4618      	mov	r0, r3
 80078da:	f7ff f86a 	bl	80069b2 <strlen>
 80078de:	4603      	mov	r3, r0
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	f107 0120 	add.w	r1, r7, #32
 80078e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078ea:	488a      	ldr	r0, [pc, #552]	; (8007b14 <csf_mfcc+0x2f4>)
 80078ec:	f006 fed6 	bl	800e69c <HAL_UART_Transmit>

  // Allocate an array so we can calculate the inner loop multipliers
  // in the DCT-II just one time.
  double* dct2f = (double*)malloc(sizeof(double) * aNFilters * aNCep);
 80078f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	fb02 f303 	mul.w	r3, r2, r3
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	4618      	mov	r0, r3
 80078fe:	f007 fe8b 	bl	800f618 <malloc>
 8007902:	4603      	mov	r3, r0
 8007904:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  // Perform DCT-II
  double sf1 = csf_sqrt(1 / (4 * (double)aNFilters));
 8007908:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800790c:	f7ff fa02 	bl	8006d14 <__aeabi_i2d>
 8007910:	f04f 0200 	mov.w	r2, #0
 8007914:	4b81      	ldr	r3, [pc, #516]	; (8007b1c <csf_mfcc+0x2fc>)
 8007916:	f7ff fa67 	bl	8006de8 <__aeabi_dmul>
 800791a:	4603      	mov	r3, r0
 800791c:	460c      	mov	r4, r1
 800791e:	461a      	mov	r2, r3
 8007920:	4623      	mov	r3, r4
 8007922:	f04f 0000 	mov.w	r0, #0
 8007926:	497e      	ldr	r1, [pc, #504]	; (8007b20 <csf_mfcc+0x300>)
 8007928:	f7ff fb88 	bl	800703c <__aeabi_ddiv>
 800792c:	4603      	mov	r3, r0
 800792e:	460c      	mov	r4, r1
 8007930:	4618      	mov	r0, r3
 8007932:	4621      	mov	r1, r4
 8007934:	f7ff fd30 	bl	8007398 <__aeabi_d2f>
 8007938:	4603      	mov	r3, r0
 800793a:	ee00 3a10 	vmov	s0, r3
 800793e:	f00b fef9 	bl	8013734 <sqrtf>
 8007942:	ee10 3a10 	vmov	r3, s0
 8007946:	4618      	mov	r0, r3
 8007948:	f7ff f9f6 	bl	8006d38 <__aeabi_f2d>
 800794c:	4603      	mov	r3, r0
 800794e:	460c      	mov	r4, r1
 8007950:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
  double sf2 = csf_sqrt(1 / (2 * (double)aNFilters));
 8007954:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8007958:	f7ff f9dc 	bl	8006d14 <__aeabi_i2d>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	f7ff f88c 	bl	8006a7c <__adddf3>
 8007964:	4603      	mov	r3, r0
 8007966:	460c      	mov	r4, r1
 8007968:	461a      	mov	r2, r3
 800796a:	4623      	mov	r3, r4
 800796c:	f04f 0000 	mov.w	r0, #0
 8007970:	496b      	ldr	r1, [pc, #428]	; (8007b20 <csf_mfcc+0x300>)
 8007972:	f7ff fb63 	bl	800703c <__aeabi_ddiv>
 8007976:	4603      	mov	r3, r0
 8007978:	460c      	mov	r4, r1
 800797a:	4618      	mov	r0, r3
 800797c:	4621      	mov	r1, r4
 800797e:	f7ff fd0b 	bl	8007398 <__aeabi_d2f>
 8007982:	4603      	mov	r3, r0
 8007984:	ee00 3a10 	vmov	s0, r3
 8007988:	f00b fed4 	bl	8013734 <sqrtf>
 800798c:	ee10 3a10 	vmov	r3, s0
 8007990:	4618      	mov	r0, r3
 8007992:	f7ff f9d1 	bl	8006d38 <__aeabi_f2d>
 8007996:	4603      	mov	r3, r0
 8007998:	460c      	mov	r4, r1
 800799a:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
  csf_float* mfcc = (csf_float*)malloc(sizeof(csf_float) * n_frames * aNCep);
 800799e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	fb02 f303 	mul.w	r3, r2, r3
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4618      	mov	r0, r3
 80079ac:	f007 fe34 	bl	800f618 <malloc>
 80079b0:	4603      	mov	r3, r0
 80079b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  for (i = 0, idx = 0, fidx = 0; i < n_frames;
 80079b6:	2300      	movs	r3, #0
 80079b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079bc:	2300      	movs	r3, #0
 80079be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079c2:	2300      	movs	r3, #0
 80079c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079c8:	e0e0      	b.n	8007b8c <csf_mfcc+0x36c>
       i++, idx += aNCep, fidx += aNFilters) {
    for (j = 0, didx = 0; j < aNCep; j++) {
 80079ca:	2300      	movs	r3, #0
 80079cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079d0:	2300      	movs	r3, #0
 80079d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079d6:	e0c1      	b.n	8007b5c <csf_mfcc+0x33c>
      double sum = 0.0;
 80079d8:	f04f 0300 	mov.w	r3, #0
 80079dc:	f04f 0400 	mov.w	r4, #0
 80079e0:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
      for (k = 0; k < aNFilters; k++, didx++) {
 80079e4:	2300      	movs	r3, #0
 80079e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80079ea:	e072      	b.n	8007ad2 <csf_mfcc+0x2b2>
        if (i == 0) {
 80079ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d13f      	bne.n	8007a74 <csf_mfcc+0x254>
          dct2f[didx] = cos(M_PI * j * (2 * k + 1) / (double)(2 * aNFilters));
 80079f4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80079f8:	f7ff f98c 	bl	8006d14 <__aeabi_i2d>
 80079fc:	a342      	add	r3, pc, #264	; (adr r3, 8007b08 <csf_mfcc+0x2e8>)
 80079fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a02:	f7ff f9f1 	bl	8006de8 <__aeabi_dmul>
 8007a06:	4603      	mov	r3, r0
 8007a08:	460c      	mov	r4, r1
 8007a0a:	4625      	mov	r5, r4
 8007a0c:	461c      	mov	r4, r3
 8007a0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	3301      	adds	r3, #1
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff f97c 	bl	8006d14 <__aeabi_i2d>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	4620      	mov	r0, r4
 8007a22:	4629      	mov	r1, r5
 8007a24:	f7ff f9e0 	bl	8006de8 <__aeabi_dmul>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	4625      	mov	r5, r4
 8007a2e:	461c      	mov	r4, r3
 8007a30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff f96c 	bl	8006d14 <__aeabi_i2d>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4620      	mov	r0, r4
 8007a42:	4629      	mov	r1, r5
 8007a44:	f7ff fafa 	bl	800703c <__aeabi_ddiv>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	460c      	mov	r4, r1
 8007a4c:	ec44 3b17 	vmov	d7, r3, r4
 8007a50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a54:	00db      	lsls	r3, r3, #3
 8007a56:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007a5a:	18d4      	adds	r4, r2, r3
 8007a5c:	eeb0 0a47 	vmov.f32	s0, s14
 8007a60:	eef0 0a67 	vmov.f32	s1, s15
 8007a64:	f00a f980 	bl	8011d68 <cos>
 8007a68:	eeb0 7a40 	vmov.f32	s14, s0
 8007a6c:	eef0 7a60 	vmov.f32	s15, s1
 8007a70:	ed84 7b00 	vstr	d7, [r4]
        }
        sum += (double)feat[fidx+k] * dct2f[didx];
 8007a74:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007a78:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8007a7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a80:	440b      	add	r3, r1
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7ff f955 	bl	8006d38 <__aeabi_f2d>
 8007a8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007a98:	4413      	add	r3, r2
 8007a9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	4623      	mov	r3, r4
 8007aa2:	f7ff f9a1 	bl	8006de8 <__aeabi_dmul>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	461a      	mov	r2, r3
 8007aac:	4623      	mov	r3, r4
 8007aae:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007ab2:	f7fe ffe3 	bl	8006a7c <__adddf3>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	460c      	mov	r4, r1
 8007aba:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
      for (k = 0; k < aNFilters; k++, didx++) {
 8007abe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007ac8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007acc:	3301      	adds	r3, #1
 8007ace:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ad2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007ad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ada:	429a      	cmp	r2, r3
 8007adc:	db86      	blt.n	80079ec <csf_mfcc+0x1cc>
      }
      mfcc[idx+j] = (csf_float)(sum * 2.0 * ((i == 0 && j == 0) ? sf1 : sf2));
 8007ade:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	f7fe ffc9 	bl	8006a7c <__adddf3>
 8007aea:	4603      	mov	r3, r0
 8007aec:	460c      	mov	r4, r1
 8007aee:	4625      	mov	r5, r4
 8007af0:	461c      	mov	r4, r3
 8007af2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d114      	bne.n	8007b24 <csf_mfcc+0x304>
 8007afa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d110      	bne.n	8007b24 <csf_mfcc+0x304>
 8007b02:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007b06:	e00f      	b.n	8007b28 <csf_mfcc+0x308>
 8007b08:	54442d18 	.word	0x54442d18
 8007b0c:	400921fb 	.word	0x400921fb
 8007b10:	080167f8 	.word	0x080167f8
 8007b14:	2000e8c8 	.word	0x2000e8c8
 8007b18:	08016810 	.word	0x08016810
 8007b1c:	40100000 	.word	0x40100000
 8007b20:	3ff00000 	.word	0x3ff00000
 8007b24:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007b28:	4622      	mov	r2, r4
 8007b2a:	462b      	mov	r3, r5
 8007b2c:	f7ff f95c 	bl	8006de8 <__aeabi_dmul>
 8007b30:	4603      	mov	r3, r0
 8007b32:	460c      	mov	r4, r1
 8007b34:	4618      	mov	r0, r3
 8007b36:	4621      	mov	r1, r4
 8007b38:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007b3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b40:	4413      	add	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007b48:	18d4      	adds	r4, r2, r3
 8007b4a:	f7ff fc25 	bl	8007398 <__aeabi_d2f>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	6023      	str	r3, [r4, #0]
    for (j = 0, didx = 0; j < aNCep; j++) {
 8007b52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b56:	3301      	adds	r3, #1
 8007b58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	f6ff af38 	blt.w	80079d8 <csf_mfcc+0x1b8>
       i++, idx += aNCep, fidx += aNFilters) {
 8007b68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b86:	4413      	add	r3, r2
 8007b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  for (i = 0, idx = 0, fidx = 0; i < n_frames;
 8007b8c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b94:	429a      	cmp	r2, r3
 8007b96:	f6ff af18 	blt.w	80079ca <csf_mfcc+0x1aa>
    }
  }

  // Free inner-loop multiplier cache
  free(dct2f);
 8007b9a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007b9e:	f007 fd43 	bl	800f628 <free>

  // Free features array
  free(feat);
 8007ba2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f007 fd3e 	bl	800f628 <free>

  // Apply a cepstral lifter
  if (aCepLifter != 0) {
 8007bac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d008      	beq.n	8007bc6 <csf_mfcc+0x3a6>
    csf_lifter(mfcc, n_frames, aNCep, aCepLifter);
 8007bb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bbe:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8007bc2:	f000 facd 	bl	8008160 <csf_lifter>
  }

  // Append energies
  if (aAppendEnergy) {
 8007bc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d032      	beq.n	8007c34 <csf_mfcc+0x414>
    for (i = 0, idx = 0; i < n_frames; i++, idx += aNCep) {
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bda:	e020      	b.n	8007c1e <csf_mfcc+0x3fe>
      mfcc[idx] = csf_log(energy[i]);
 8007bdc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007be0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	edd3 7a00 	vldr	s15, [r3]
 8007bec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007bf6:	18d4      	adds	r4, r2, r3
 8007bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8007bfc:	f00b fae4 	bl	80131c8 <logf>
 8007c00:	eef0 7a40 	vmov.f32	s15, s0
 8007c04:	edc4 7a00 	vstr	s15, [r4]
    for (i = 0, idx = 0; i < n_frames; i++, idx += aNCep) {
 8007c08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c26:	429a      	cmp	r2, r3
 8007c28:	dbd8      	blt.n	8007bdc <csf_mfcc+0x3bc>
    }

    // Free energy array
    free(energy);
 8007c2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f007 fcfa 	bl	800f628 <free>
  }

  // Return MFCC features
  *aMFCC = mfcc;
 8007c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c38:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007c3c:	601a      	str	r2, [r3, #0]

  return n_frames;
 8007c3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	37c8      	adds	r7, #200	; 0xc8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bdb0      	pop	{r4, r5, r7, pc}
 8007c4a:	bf00      	nop

08007c4c <csf_fbank>:
int
csf_fbank(const short* aSignal, unsigned int aSignalLen, int aSampleRate,
          csf_float aWinLen, csf_float aWinStep, int aNFilters, int aNFFT,
          int aLowFreq, int aHighFreq, csf_float aPreemph, csf_float* aWinFunc,
          csf_float** aFeatures, csf_float** aEnergy)
{
 8007c4c:	b5b0      	push	{r4, r5, r7, lr}
 8007c4e:	b0b6      	sub	sp, #216	; 0xd8
 8007c50:	af04      	add	r7, sp, #16
 8007c52:	61f8      	str	r0, [r7, #28]
 8007c54:	61b9      	str	r1, [r7, #24]
 8007c56:	617a      	str	r2, [r7, #20]
 8007c58:	ed87 0a04 	vstr	s0, [r7, #16]
 8007c5c:	edc7 0a03 	vstr	s1, [r7, #12]
 8007c60:	60bb      	str	r3, [r7, #8]
 8007c62:	ed87 1a01 	vstr	s2, [r7, #4]
  csf_float* feat;
  csf_float* fbank;
  csf_float* pspec;
  csf_float* frames;
  csf_float* energy;
  csf_float* preemph = csf_preemphasis(aSignal, aSignalLen, aPreemph);
 8007c66:	ed97 0a01 	vldr	s0, [r7, #4]
 8007c6a:	69b9      	ldr	r1, [r7, #24]
 8007c6c:	69f8      	ldr	r0, [r7, #28]
 8007c6e:	f000 fdff 	bl	8008870 <csf_preemphasis>
 8007c72:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  int frame_len = (int)round(aWinLen * aSampleRate);
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	ee07 3a90 	vmov	s15, r3
 8007c7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c80:	edd7 7a04 	vldr	s15, [r7, #16]
 8007c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c88:	ee17 0a90 	vmov	r0, s15
 8007c8c:	f7ff f854 	bl	8006d38 <__aeabi_f2d>
 8007c90:	4603      	mov	r3, r0
 8007c92:	460c      	mov	r4, r1
 8007c94:	ec44 3b10 	vmov	d0, r3, r4
 8007c98:	f00a f92e 	bl	8011ef8 <round>
 8007c9c:	ec54 3b10 	vmov	r3, r4, d0
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	4621      	mov	r1, r4
 8007ca4:	f7ff fb50 	bl	8007348 <__aeabi_d2iz>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  int frame_step = (int)round(aWinStep * aSampleRate);
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	ee07 3a90 	vmov	s15, r3
 8007cb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007cb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8007cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cc0:	ee17 0a90 	vmov	r0, s15
 8007cc4:	f7ff f838 	bl	8006d38 <__aeabi_f2d>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	460c      	mov	r4, r1
 8007ccc:	ec44 3b10 	vmov	d0, r3, r4
 8007cd0:	f00a f912 	bl	8011ef8 <round>
 8007cd4:	ec54 3b10 	vmov	r3, r4, d0
 8007cd8:	4618      	mov	r0, r3
 8007cda:	4621      	mov	r1, r4
 8007cdc:	f7ff fb34 	bl	8007348 <__aeabi_d2iz>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int feat_width = aNFFT / 2 + 1;
 8007ce6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	da00      	bge.n	8007cf0 <csf_fbank+0xa4>
 8007cee:	3301      	adds	r3, #1
 8007cf0:	105b      	asrs	r3, r3, #1
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  char buffer2[100];
    	strcpy(buffer2, "Before csf_framesig\r\n");
 8007cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cfc:	4ac1      	ldr	r2, [pc, #772]	; (8008004 <csf_fbank+0x3b8>)
 8007cfe:	461c      	mov	r4, r3
 8007d00:	4615      	mov	r5, r2
 8007d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d06:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007d0a:	6020      	str	r0, [r4, #0]
 8007d0c:	3404      	adds	r4, #4
 8007d0e:	8021      	strh	r1, [r4, #0]
    	HAL_UART_Transmit(&huart3, (uint8_t*)buffer2, strlen(buffer2), HAL_MAX_DELAY);
 8007d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fe fe4c 	bl	80069b2 <strlen>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d26:	48b8      	ldr	r0, [pc, #736]	; (8008008 <csf_fbank+0x3bc>)
 8007d28:	f006 fcb8 	bl	800e69c <HAL_UART_Transmit>
  // Frame the signal into overlapping frames
  int n_frames = csf_framesig(preemph, aSignalLen, frame_len, aNFFT,
 8007d2c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007d30:	9302      	str	r3, [sp, #8]
 8007d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d36:	9301      	str	r3, [sp, #4]
 8007d38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d42:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007d46:	69b9      	ldr	r1, [r7, #24]
 8007d48:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007d4c:	f000 fc5e 	bl	800860c <csf_framesig>
 8007d50:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                              frame_step, aWinFunc, &frames);

  strcpy(buffer2, "After csf_framesig\r\n");
 8007d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d58:	4aac      	ldr	r2, [pc, #688]	; (800800c <csf_fbank+0x3c0>)
 8007d5a:	461c      	mov	r4, r3
 8007d5c:	4615      	mov	r5, r2
 8007d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007d66:	6020      	str	r0, [r4, #0]
 8007d68:	3404      	adds	r4, #4
 8007d6a:	7021      	strb	r1, [r4, #0]
      	HAL_UART_Transmit(&huart3, (uint8_t*)buffer2, strlen(buffer2), HAL_MAX_DELAY);
 8007d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fe fe1e 	bl	80069b2 <strlen>
 8007d76:	4603      	mov	r3, r0
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d82:	48a1      	ldr	r0, [pc, #644]	; (8008008 <csf_fbank+0x3bc>)
 8007d84:	f006 fc8a 	bl	800e69c <HAL_UART_Transmit>

  // Free preemphasised signal buffer
  free(preemph);
 8007d88:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007d8c:	f007 fc4c 	bl	800f628 <free>

  // Compute the power spectrum of the frames
  pspec = csf_powspec((const csf_float*)frames, n_frames, aNFFT);
 8007d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d94:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007d98:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 fe35 	bl	8008a0c <csf_powspec>
 8007da2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  // Free frames
  free(frames);
 8007da6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007daa:	4618      	mov	r0, r3
 8007dac:	f007 fc3c 	bl	800f628 <free>

  // Store the total energy in each frame
  if (aEnergy) {
 8007db0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d05e      	beq.n	8007e76 <csf_fbank+0x22a>
    energy = (csf_float*)calloc(sizeof(csf_float), n_frames);
 8007db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	2004      	movs	r0, #4
 8007dc0:	f007 fb88 	bl	800f4d4 <calloc>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0, idx = 0; i < n_frames; i++) {
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007dd6:	e048      	b.n	8007e6a <csf_fbank+0x21e>
      for (j = 0; j < feat_width; j++, idx++) {
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dde:	e023      	b.n	8007e28 <csf_fbank+0x1dc>
        energy[i] += pspec[idx];
 8007de0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007dea:	4413      	add	r3, r2
 8007dec:	ed93 7a00 	vldr	s14, [r3]
 8007df0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007dfa:	4413      	add	r3, r2
 8007dfc:	edd3 7a00 	vldr	s15, [r3]
 8007e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007e0a:	4413      	add	r3, r2
 8007e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e10:	edc3 7a00 	vstr	s15, [r3]
      for (j = 0; j < feat_width; j++, idx++) {
 8007e14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e18:	3301      	adds	r3, #1
 8007e1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e22:	3301      	adds	r3, #1
 8007e24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e30:	429a      	cmp	r2, r3
 8007e32:	dbd5      	blt.n	8007de0 <csf_fbank+0x194>
      }
      if (energy[i] == 0.0) {
 8007e34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007e3e:	4413      	add	r3, r2
 8007e40:	edd3 7a00 	vldr	s15, [r3]
 8007e44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e4c:	d108      	bne.n	8007e60 <csf_fbank+0x214>
        energy[i] = csf_float_min;
 8007e4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007e58:	4413      	add	r3, r2
 8007e5a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007e5e:	601a      	str	r2, [r3, #0]
    for (i = 0, idx = 0; i < n_frames; i++) {
 8007e60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e64:	3301      	adds	r3, #1
 8007e66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e72:	429a      	cmp	r2, r3
 8007e74:	dbb0      	blt.n	8007dd8 <csf_fbank+0x18c>
      }
    }
  }

  // Compute the filter-bank energies
  fbank = csf_get_filterbanks(aNFilters, aNFFT, aSampleRate,
 8007e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8007e86:	68b8      	ldr	r0, [r7, #8]
 8007e88:	f000 fa02 	bl	8008290 <csf_get_filterbanks>
 8007e8c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                              aLowFreq, aHighFreq);
  feat = (csf_float*)calloc(sizeof(csf_float), n_frames * aNFilters);
 8007e90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	fb02 f303 	mul.w	r3, r2, r3
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	2004      	movs	r0, #4
 8007e9e:	f007 fb19 	bl	800f4d4 <calloc>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  for (i = 0, idx = 0, pidx = 0; i < n_frames;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007eae:	2300      	movs	r3, #0
 8007eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007eba:	e07f      	b.n	8007fbc <csf_fbank+0x370>
       i++, idx += aNFilters, pidx += feat_width) {
    for (j = 0, fidx = 0; j < aNFilters; j++) {
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ec8:	e061      	b.n	8007f8e <csf_fbank+0x342>
      for (k = 0; k < feat_width; k++, fidx++) {
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007ed0:	e036      	b.n	8007f40 <csf_fbank+0x2f4>
        feat[idx + j] += pspec[pidx + k] * fbank[fidx];
 8007ed2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007ed6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007eda:	4413      	add	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007ee2:	4413      	add	r3, r2
 8007ee4:	ed93 7a00 	vldr	s14, [r3]
 8007ee8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007eec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ef0:	4413      	add	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ef8:	4413      	add	r3, r2
 8007efa:	edd3 6a00 	vldr	s13, [r3]
 8007efe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007f08:	4413      	add	r3, r2
 8007f0a:	edd3 7a00 	vldr	s15, [r3]
 8007f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007f12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007f16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f1a:	4413      	add	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007f22:	4413      	add	r3, r2
 8007f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f28:	edc3 7a00 	vstr	s15, [r3]
      for (k = 0; k < feat_width; k++, fidx++) {
 8007f2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f30:	3301      	adds	r3, #1
 8007f32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	dbc2      	blt.n	8007ed2 <csf_fbank+0x286>
      }
      if (feat[idx + j] == 0.0) {
 8007f4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007f50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f54:	4413      	add	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007f5c:	4413      	add	r3, r2
 8007f5e:	edd3 7a00 	vldr	s15, [r3]
 8007f62:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f6a:	d10b      	bne.n	8007f84 <csf_fbank+0x338>
        feat[idx + j] = csf_float_min;
 8007f6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007f70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f74:	4413      	add	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007f82:	601a      	str	r2, [r3, #0]
    for (j = 0, fidx = 0; j < aNFilters; j++) {
 8007f84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f88:	3301      	adds	r3, #1
 8007f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f8e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	db98      	blt.n	8007eca <csf_fbank+0x27e>
       i++, idx += aNFilters, pidx += feat_width) {
 8007f98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fa2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	4413      	add	r3, r2
 8007faa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007fb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  for (i = 0, idx = 0, pidx = 0; i < n_frames;
 8007fbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007fc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	f6ff af79 	blt.w	8007ebc <csf_fbank+0x270>
      }
    }
  }

  // Free fbank
  free(fbank);
 8007fca:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8007fce:	f007 fb2b 	bl	800f628 <free>

  // Free pspec
  free(pspec);
 8007fd2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8007fd6:	f007 fb27 	bl	800f628 <free>

  // Return features and energies
  *aFeatures = feat;
 8007fda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fde:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007fe2:	601a      	str	r2, [r3, #0]
  if (aEnergy) {
 8007fe4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d004      	beq.n	8007ff6 <csf_fbank+0x3aa>
    *aEnergy = energy;
 8007fec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007ff0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ff4:	601a      	str	r2, [r3, #0]
  }

  return n_frames;
 8007ff6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	37c8      	adds	r7, #200	; 0xc8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bdb0      	pop	{r4, r5, r7, pc}
 8008002:	bf00      	nop
 8008004:	08016828 	.word	0x08016828
 8008008:	2000e8c8 	.word	0x2000e8c8
 800800c:	08016840 	.word	0x08016840

08008010 <csf_logfbank>:
int
csf_logfbank(const short* aSignal, unsigned int aSignalLen, int aSampleRate,
             csf_float aWinLen, csf_float aWinStep, int aNFilters, int aNFFT,
             int aLowFreq, int aHighFreq, csf_float aPreemph,
             csf_float* aWinFunc, csf_float** aFeatures, csf_float** aEnergy)
{
 8008010:	b5b0      	push	{r4, r5, r7, lr}
 8008012:	b0ac      	sub	sp, #176	; 0xb0
 8008014:	af06      	add	r7, sp, #24
 8008016:	61f8      	str	r0, [r7, #28]
 8008018:	61b9      	str	r1, [r7, #24]
 800801a:	617a      	str	r2, [r7, #20]
 800801c:	ed87 0a04 	vstr	s0, [r7, #16]
 8008020:	edc7 0a03 	vstr	s1, [r7, #12]
 8008024:	60bb      	str	r3, [r7, #8]
 8008026:	ed87 1a01 	vstr	s2, [r7, #4]
  int i, j, idx;
  char buffer3[100];
    	strcpy(buffer3, "Before csf_fbank\r\n");
 800802a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800802e:	4a49      	ldr	r2, [pc, #292]	; (8008154 <csf_logfbank+0x144>)
 8008030:	461c      	mov	r4, r3
 8008032:	4615      	mov	r5, r2
 8008034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	461a      	mov	r2, r3
 800803c:	8022      	strh	r2, [r4, #0]
 800803e:	3402      	adds	r4, #2
 8008040:	0c1b      	lsrs	r3, r3, #16
 8008042:	7023      	strb	r3, [r4, #0]
    	HAL_UART_Transmit(&huart3, (uint8_t*)buffer3, strlen(buffer3), HAL_MAX_DELAY);
 8008044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008048:	4618      	mov	r0, r3
 800804a:	f7fe fcb2 	bl	80069b2 <strlen>
 800804e:	4603      	mov	r3, r0
 8008050:	b29a      	uxth	r2, r3
 8008052:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800805a:	483f      	ldr	r0, [pc, #252]	; (8008158 <csf_logfbank+0x148>)
 800805c:	f006 fb1e 	bl	800e69c <HAL_UART_Transmit>
  int n_frames = csf_fbank(aSignal, aSignalLen, aSampleRate, aWinLen, aWinStep,
 8008060:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008064:	9305      	str	r3, [sp, #20]
 8008066:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800806a:	9304      	str	r3, [sp, #16]
 800806c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008070:	9303      	str	r3, [sp, #12]
 8008072:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008076:	9302      	str	r3, [sp, #8]
 8008078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800807c:	9301      	str	r3, [sp, #4]
 800807e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	ed97 1a01 	vldr	s2, [r7, #4]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	edd7 0a03 	vldr	s1, [r7, #12]
 800808e:	ed97 0a04 	vldr	s0, [r7, #16]
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	69b9      	ldr	r1, [r7, #24]
 8008096:	69f8      	ldr	r0, [r7, #28]
 8008098:	f7ff fdd8 	bl	8007c4c <csf_fbank>
 800809c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                           aNFilters, aNFFT, aLowFreq, aHighFreq, aPreemph,
                           aWinFunc, aFeatures, aEnergy);
    	strcpy(buffer3, "After csf_fbank\r\n");
 80080a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080a4:	4a2d      	ldr	r2, [pc, #180]	; (800815c <csf_logfbank+0x14c>)
 80080a6:	461c      	mov	r4, r3
 80080a8:	4615      	mov	r5, r2
 80080aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080ae:	682b      	ldr	r3, [r5, #0]
 80080b0:	8023      	strh	r3, [r4, #0]
    	HAL_UART_Transmit(&huart3, (uint8_t*)buffer3, strlen(buffer3), HAL_MAX_DELAY);
 80080b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe fc7b 	bl	80069b2 <strlen>
 80080bc:	4603      	mov	r3, r0
 80080be:	b29a      	uxth	r2, r3
 80080c0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80080c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080c8:	4823      	ldr	r0, [pc, #140]	; (8008158 <csf_logfbank+0x148>)
 80080ca:	f006 fae7 	bl	800e69c <HAL_UART_Transmit>

  for (i = 0, idx = 0; i < n_frames; i++) {
 80080ce:	2300      	movs	r3, #0
 80080d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80080d4:	2300      	movs	r3, #0
 80080d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80080da:	e02f      	b.n	800813c <csf_logfbank+0x12c>
    for (j = 0; j < aNFilters; j++, idx++) {
 80080dc:	2300      	movs	r3, #0
 80080de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080e2:	e021      	b.n	8008128 <csf_logfbank+0x118>
      (*aFeatures)[idx] = csf_log((*aFeatures)[idx]);
 80080e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	edd3 7a00 	vldr	s15, [r3]
 80080f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	18d4      	adds	r4, r2, r3
 8008104:	eeb0 0a67 	vmov.f32	s0, s15
 8008108:	f00b f85e 	bl	80131c8 <logf>
 800810c:	eef0 7a40 	vmov.f32	s15, s0
 8008110:	edc4 7a00 	vstr	s15, [r4]
    for (j = 0; j < aNFilters; j++, idx++) {
 8008114:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008118:	3301      	adds	r3, #1
 800811a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800811e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008122:	3301      	adds	r3, #1
 8008124:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008128:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	429a      	cmp	r2, r3
 8008130:	dbd8      	blt.n	80080e4 <csf_logfbank+0xd4>
  for (i = 0, idx = 0; i < n_frames; i++) {
 8008132:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008136:	3301      	adds	r3, #1
 8008138:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800813c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008140:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008144:	429a      	cmp	r2, r3
 8008146:	dbc9      	blt.n	80080dc <csf_logfbank+0xcc>
    }
  }

  return n_frames;
 8008148:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 800814c:	4618      	mov	r0, r3
 800814e:	3798      	adds	r7, #152	; 0x98
 8008150:	46bd      	mov	sp, r7
 8008152:	bdb0      	pop	{r4, r5, r7, pc}
 8008154:	08016858 	.word	0x08016858
 8008158:	2000e8c8 	.word	0x2000e8c8
 800815c:	0801686c 	.word	0x0801686c

08008160 <csf_lifter>:
  return CSF_MEL2HZ(aMel);
}

void
csf_lifter(csf_float* aCepstra, int aNFrames, int aNCep, int aCepLifter)
{
 8008160:	b5b0      	push	{r4, r5, r7, lr}
 8008162:	b08a      	sub	sp, #40	; 0x28
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	603b      	str	r3, [r7, #0]
  int i, j, idx;

  csf_float lifter = aCepLifter / 2.0;
 800816e:	6838      	ldr	r0, [r7, #0]
 8008170:	f7fe fdd0 	bl	8006d14 <__aeabi_i2d>
 8008174:	f04f 0200 	mov.w	r2, #0
 8008178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800817c:	f7fe ff5e 	bl	800703c <__aeabi_ddiv>
 8008180:	4603      	mov	r3, r0
 8008182:	460c      	mov	r4, r1
 8008184:	4618      	mov	r0, r3
 8008186:	4621      	mov	r1, r4
 8008188:	f7ff f906 	bl	8007398 <__aeabi_d2f>
 800818c:	4603      	mov	r3, r0
 800818e:	61bb      	str	r3, [r7, #24]
  csf_float* factors = malloc(sizeof(csf_float) * aNCep);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4618      	mov	r0, r3
 8008196:	f007 fa3f 	bl	800f618 <malloc>
 800819a:	4603      	mov	r3, r0
 800819c:	617b      	str	r3, [r7, #20]
  for (i = 0; i < aNCep; i++) {
 800819e:	2300      	movs	r3, #0
 80081a0:	627b      	str	r3, [r7, #36]	; 0x24
 80081a2:	e038      	b.n	8008216 <csf_lifter+0xb6>
    factors[i] = 1 + lifter * csf_sin(M_PI * i / (csf_float)aCepLifter);
 80081a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081a6:	f7fe fdb5 	bl	8006d14 <__aeabi_i2d>
 80081aa:	a337      	add	r3, pc, #220	; (adr r3, 8008288 <csf_lifter+0x128>)
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	f7fe fe1a 	bl	8006de8 <__aeabi_dmul>
 80081b4:	4603      	mov	r3, r0
 80081b6:	460c      	mov	r4, r1
 80081b8:	4625      	mov	r5, r4
 80081ba:	461c      	mov	r4, r3
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	ee07 3a90 	vmov	s15, r3
 80081c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081c6:	ee17 0a90 	vmov	r0, s15
 80081ca:	f7fe fdb5 	bl	8006d38 <__aeabi_f2d>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	4620      	mov	r0, r4
 80081d4:	4629      	mov	r1, r5
 80081d6:	f7fe ff31 	bl	800703c <__aeabi_ddiv>
 80081da:	4603      	mov	r3, r0
 80081dc:	460c      	mov	r4, r1
 80081de:	4618      	mov	r0, r3
 80081e0:	4621      	mov	r1, r4
 80081e2:	f7ff f8d9 	bl	8007398 <__aeabi_d2f>
 80081e6:	4603      	mov	r3, r0
 80081e8:	ee00 3a10 	vmov	s0, r3
 80081ec:	f00a fc2c 	bl	8012a48 <sinf>
 80081f0:	eeb0 7a40 	vmov.f32	s14, s0
 80081f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80081f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	4413      	add	r3, r2
 8008204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008208:	ee77 7a87 	vadd.f32	s15, s15, s14
 800820c:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < aNCep; i++) {
 8008210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008212:	3301      	adds	r3, #1
 8008214:	627b      	str	r3, [r7, #36]	; 0x24
 8008216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	429a      	cmp	r2, r3
 800821c:	dbc2      	blt.n	80081a4 <csf_lifter+0x44>
  }

  for (i = 0, idx = 0; i < aNFrames; i++) {
 800821e:	2300      	movs	r3, #0
 8008220:	627b      	str	r3, [r7, #36]	; 0x24
 8008222:	2300      	movs	r3, #0
 8008224:	61fb      	str	r3, [r7, #28]
 8008226:	e023      	b.n	8008270 <csf_lifter+0x110>
    for (j = 0; j < aNCep; j++, idx++) {
 8008228:	2300      	movs	r3, #0
 800822a:	623b      	str	r3, [r7, #32]
 800822c:	e019      	b.n	8008262 <csf_lifter+0x102>
      aCepstra[idx] *= factors[j];
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	4413      	add	r3, r2
 8008236:	ed93 7a00 	vldr	s14, [r3]
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	4413      	add	r3, r2
 8008242:	edd3 7a00 	vldr	s15, [r3]
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	4413      	add	r3, r2
 800824e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008252:	edc3 7a00 	vstr	s15, [r3]
    for (j = 0; j < aNCep; j++, idx++) {
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	3301      	adds	r3, #1
 800825a:	623b      	str	r3, [r7, #32]
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	3301      	adds	r3, #1
 8008260:	61fb      	str	r3, [r7, #28]
 8008262:	6a3a      	ldr	r2, [r7, #32]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	429a      	cmp	r2, r3
 8008268:	dbe1      	blt.n	800822e <csf_lifter+0xce>
  for (i = 0, idx = 0; i < aNFrames; i++) {
 800826a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826c:	3301      	adds	r3, #1
 800826e:	627b      	str	r3, [r7, #36]	; 0x24
 8008270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	429a      	cmp	r2, r3
 8008276:	dbd7      	blt.n	8008228 <csf_lifter+0xc8>
    }
  }

  free(factors);
 8008278:	6978      	ldr	r0, [r7, #20]
 800827a:	f007 f9d5 	bl	800f628 <free>
}
 800827e:	bf00      	nop
 8008280:	3728      	adds	r7, #40	; 0x28
 8008282:	46bd      	mov	sp, r7
 8008284:	bdb0      	pop	{r4, r5, r7, pc}
 8008286:	bf00      	nop
 8008288:	54442d18 	.word	0x54442d18
 800828c:	400921fb 	.word	0x400921fb

08008290 <csf_get_filterbanks>:
}

csf_float*
csf_get_filterbanks(int aNFilters, int aNFFT, int aSampleRate,
                    int aLowFreq, int aHighFreq)
{
 8008290:	b5b0      	push	{r4, r5, r7, lr}
 8008292:	b090      	sub	sp, #64	; 0x40
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
 800829c:	603b      	str	r3, [r7, #0]
  int i, j, idx;
  int feat_width = aNFFT / 2 + 1;
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	da00      	bge.n	80082a6 <csf_get_filterbanks+0x16>
 80082a4:	3301      	adds	r3, #1
 80082a6:	105b      	asrs	r3, r3, #1
 80082a8:	3301      	adds	r3, #1
 80082aa:	633b      	str	r3, [r7, #48]	; 0x30
  csf_float lowmel = CSF_HZ2MEL(aLowFreq);
 80082ac:	6838      	ldr	r0, [r7, #0]
 80082ae:	f7fe fd31 	bl	8006d14 <__aeabi_i2d>
 80082b2:	f04f 0200 	mov.w	r2, #0
 80082b6:	4bb1      	ldr	r3, [pc, #708]	; (800857c <csf_get_filterbanks+0x2ec>)
 80082b8:	f7fe fec0 	bl	800703c <__aeabi_ddiv>
 80082bc:	4603      	mov	r3, r0
 80082be:	460c      	mov	r4, r1
 80082c0:	4618      	mov	r0, r3
 80082c2:	4621      	mov	r1, r4
 80082c4:	f04f 0200 	mov.w	r2, #0
 80082c8:	4bad      	ldr	r3, [pc, #692]	; (8008580 <csf_get_filterbanks+0x2f0>)
 80082ca:	f7fe fbd7 	bl	8006a7c <__adddf3>
 80082ce:	4603      	mov	r3, r0
 80082d0:	460c      	mov	r4, r1
 80082d2:	4618      	mov	r0, r3
 80082d4:	4621      	mov	r1, r4
 80082d6:	f7ff f85f 	bl	8007398 <__aeabi_d2f>
 80082da:	4603      	mov	r3, r0
 80082dc:	ee00 3a10 	vmov	s0, r3
 80082e0:	f00a ffe8 	bl	80132b4 <log10f>
 80082e4:	eeb0 7a40 	vmov.f32	s14, s0
 80082e8:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8008584 <csf_get_filterbanks+0x2f4>
 80082ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  csf_float highmel = CSF_HZ2MEL((aHighFreq <= aLowFreq) ?
 80082f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	dc18      	bgt.n	800832e <csf_get_filterbanks+0x9e>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	da00      	bge.n	8008304 <csf_get_filterbanks+0x74>
 8008302:	3301      	adds	r3, #1
 8008304:	105b      	asrs	r3, r3, #1
 8008306:	4618      	mov	r0, r3
 8008308:	f7fe fd04 	bl	8006d14 <__aeabi_i2d>
 800830c:	f04f 0200 	mov.w	r2, #0
 8008310:	4b9a      	ldr	r3, [pc, #616]	; (800857c <csf_get_filterbanks+0x2ec>)
 8008312:	f7fe fe93 	bl	800703c <__aeabi_ddiv>
 8008316:	4603      	mov	r3, r0
 8008318:	460c      	mov	r4, r1
 800831a:	4618      	mov	r0, r3
 800831c:	4621      	mov	r1, r4
 800831e:	f04f 0200 	mov.w	r2, #0
 8008322:	4b97      	ldr	r3, [pc, #604]	; (8008580 <csf_get_filterbanks+0x2f0>)
 8008324:	f7fe fbaa 	bl	8006a7c <__adddf3>
 8008328:	4603      	mov	r3, r0
 800832a:	460c      	mov	r4, r1
 800832c:	e012      	b.n	8008354 <csf_get_filterbanks+0xc4>
 800832e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008330:	f7fe fcf0 	bl	8006d14 <__aeabi_i2d>
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	4b90      	ldr	r3, [pc, #576]	; (800857c <csf_get_filterbanks+0x2ec>)
 800833a:	f7fe fe7f 	bl	800703c <__aeabi_ddiv>
 800833e:	4603      	mov	r3, r0
 8008340:	460c      	mov	r4, r1
 8008342:	4618      	mov	r0, r3
 8008344:	4621      	mov	r1, r4
 8008346:	f04f 0200 	mov.w	r2, #0
 800834a:	4b8d      	ldr	r3, [pc, #564]	; (8008580 <csf_get_filterbanks+0x2f0>)
 800834c:	f7fe fb96 	bl	8006a7c <__adddf3>
 8008350:	4603      	mov	r3, r0
 8008352:	460c      	mov	r4, r1
 8008354:	4618      	mov	r0, r3
 8008356:	4621      	mov	r1, r4
 8008358:	f7ff f81e 	bl	8007398 <__aeabi_d2f>
 800835c:	4603      	mov	r3, r0
 800835e:	ee00 3a10 	vmov	s0, r3
 8008362:	f00a ffa7 	bl	80132b4 <log10f>
 8008366:	eeb0 7a40 	vmov.f32	s14, s0
 800836a:	eddf 7a86 	vldr	s15, [pc, #536]	; 8008584 <csf_get_filterbanks+0x2f4>
 800836e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008372:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                             aSampleRate / 2 : aHighFreq);
  int* bin = (int*)malloc(sizeof(int) * (aNFilters + 2));
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	3302      	adds	r3, #2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4618      	mov	r0, r3
 800837e:	f007 f94b 	bl	800f618 <malloc>
 8008382:	4603      	mov	r3, r0
 8008384:	627b      	str	r3, [r7, #36]	; 0x24
  csf_float* fbank =
    (csf_float*)calloc(sizeof(csf_float), aNFilters * feat_width);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800838a:	fb02 f303 	mul.w	r3, r2, r3
  csf_float* fbank =
 800838e:	4619      	mov	r1, r3
 8008390:	2004      	movs	r0, #4
 8008392:	f007 f89f 	bl	800f4d4 <calloc>
 8008396:	4603      	mov	r3, r0
 8008398:	623b      	str	r3, [r7, #32]

  for (i = 0; i < aNFilters + 2; i++) {
 800839a:	2300      	movs	r3, #0
 800839c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800839e:	e072      	b.n	8008486 <csf_get_filterbanks+0x1f6>
    csf_float melpoint = ((highmel - lowmel) /
 80083a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80083a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80083a8:	ee77 6a67 	vsub.f32	s13, s14, s15
                          (csf_float)(aNFilters + 1) * i) + lowmel;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3301      	adds	r3, #1
 80083b0:	ee07 3a90 	vmov	s15, r3
 80083b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    csf_float melpoint = ((highmel - lowmel) /
 80083b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                          (csf_float)(aNFilters + 1) * i) + lowmel;
 80083bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083be:	ee07 3a90 	vmov	s15, r3
 80083c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083c6:	ee67 7a27 	vmul.f32	s15, s14, s15
    csf_float melpoint = ((highmel - lowmel) /
 80083ca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80083ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083d2:	edc7 7a05 	vstr	s15, [r7, #20]
    bin[i] = (int)csf_floor((aNFFT + 1) *
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	3301      	adds	r3, #1
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe fc9a 	bl	8006d14 <__aeabi_i2d>
 80083e0:	4604      	mov	r4, r0
 80083e2:	460d      	mov	r5, r1
                            CSF_MEL2HZ(melpoint) / (csf_float)aSampleRate);
 80083e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80083e8:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8008584 <csf_get_filterbanks+0x2f4>
 80083ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80083f0:	eef0 0a66 	vmov.f32	s1, s13
 80083f4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80083f8:	f00a ffd2 	bl	80133a0 <powf>
 80083fc:	ee10 3a10 	vmov	r3, s0
 8008400:	4618      	mov	r0, r3
 8008402:	f7fe fc99 	bl	8006d38 <__aeabi_f2d>
 8008406:	f04f 0200 	mov.w	r2, #0
 800840a:	4b5d      	ldr	r3, [pc, #372]	; (8008580 <csf_get_filterbanks+0x2f0>)
 800840c:	f7fe fb34 	bl	8006a78 <__aeabi_dsub>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	4610      	mov	r0, r2
 8008416:	4619      	mov	r1, r3
 8008418:	f04f 0200 	mov.w	r2, #0
 800841c:	4b57      	ldr	r3, [pc, #348]	; (800857c <csf_get_filterbanks+0x2ec>)
 800841e:	f7fe fce3 	bl	8006de8 <__aeabi_dmul>
 8008422:	4602      	mov	r2, r0
 8008424:	460b      	mov	r3, r1
    bin[i] = (int)csf_floor((aNFFT + 1) *
 8008426:	4620      	mov	r0, r4
 8008428:	4629      	mov	r1, r5
 800842a:	f7fe fcdd 	bl	8006de8 <__aeabi_dmul>
 800842e:	4603      	mov	r3, r0
 8008430:	460c      	mov	r4, r1
 8008432:	4625      	mov	r5, r4
 8008434:	461c      	mov	r4, r3
                            CSF_MEL2HZ(melpoint) / (csf_float)aSampleRate);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	ee07 3a90 	vmov	s15, r3
 800843c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008440:	ee17 0a90 	vmov	r0, s15
 8008444:	f7fe fc78 	bl	8006d38 <__aeabi_f2d>
 8008448:	4602      	mov	r2, r0
 800844a:	460b      	mov	r3, r1
 800844c:	4620      	mov	r0, r4
 800844e:	4629      	mov	r1, r5
 8008450:	f7fe fdf4 	bl	800703c <__aeabi_ddiv>
 8008454:	4603      	mov	r3, r0
 8008456:	460c      	mov	r4, r1
    bin[i] = (int)csf_floor((aNFFT + 1) *
 8008458:	4618      	mov	r0, r3
 800845a:	4621      	mov	r1, r4
 800845c:	f7fe ff9c 	bl	8007398 <__aeabi_d2f>
 8008460:	4603      	mov	r3, r0
 8008462:	ee00 3a10 	vmov	s0, r3
 8008466:	f00a f97f 	bl	8012768 <floorf>
 800846a:	eef0 7a40 	vmov.f32	s15, s0
 800846e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008474:	4413      	add	r3, r2
 8008476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800847a:	ee17 2a90 	vmov	r2, s15
 800847e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < aNFilters + 2; i++) {
 8008480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008482:	3301      	adds	r3, #1
 8008484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3302      	adds	r3, #2
 800848a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800848c:	429a      	cmp	r2, r3
 800848e:	db87      	blt.n	80083a0 <csf_get_filterbanks+0x110>
  }

  for (i = 0, idx = 0; i < aNFilters; i++, idx += feat_width) {
 8008490:	2300      	movs	r3, #0
 8008492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008494:	2300      	movs	r3, #0
 8008496:	637b      	str	r3, [r7, #52]	; 0x34
 8008498:	e0ab      	b.n	80085f2 <csf_get_filterbanks+0x362>
    int start = MIN(bin[i], bin[i+1]);
 800849a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800849c:	3301      	adds	r3, #1
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a2:	4413      	add	r3, r2
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084ac:	440b      	add	r3, r1
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4293      	cmp	r3, r2
 80084b2:	bfa8      	it	ge
 80084b4:	4613      	movge	r3, r2
 80084b6:	61fb      	str	r3, [r7, #28]
    int end = MAX(bin[i], bin[i+1]);
 80084b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ba:	3301      	adds	r3, #1
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084c0:	4413      	add	r3, r2
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084ca:	440b      	add	r3, r1
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4293      	cmp	r3, r2
 80084d0:	bfb8      	it	lt
 80084d2:	4613      	movlt	r3, r2
 80084d4:	61bb      	str	r3, [r7, #24]
    for (j = start; j < end; j++) {
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80084da:	e027      	b.n	800852c <csf_get_filterbanks+0x29c>
      fbank[idx + j] = (j - bin[i]) / (csf_float)(bin[i+1]-bin[i]);
 80084dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084e2:	4413      	add	r3, r2
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	ee07 3a90 	vmov	s15, r3
 80084ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80084f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084f4:	3301      	adds	r3, #1
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084fa:	4413      	add	r3, r2
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008504:	440b      	add	r3, r1
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	ee07 3a90 	vmov	s15, r3
 800850e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008516:	4413      	add	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	6a3a      	ldr	r2, [r7, #32]
 800851c:	4413      	add	r3, r2
 800851e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008522:	edc3 7a00 	vstr	s15, [r3]
    for (j = start; j < end; j++) {
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	3301      	adds	r3, #1
 800852a:	63bb      	str	r3, [r7, #56]	; 0x38
 800852c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	429a      	cmp	r2, r3
 8008532:	dbd3      	blt.n	80084dc <csf_get_filterbanks+0x24c>
    }
    start = MIN(bin[i+1], bin[i+2]);
 8008534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008536:	3302      	adds	r3, #2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800853c:	4413      	add	r3, r2
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008542:	3301      	adds	r3, #1
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008548:	440b      	add	r3, r1
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4293      	cmp	r3, r2
 800854e:	bfa8      	it	ge
 8008550:	4613      	movge	r3, r2
 8008552:	61fb      	str	r3, [r7, #28]
    end = MAX(bin[i+1], bin[i+2]);
 8008554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008556:	3302      	adds	r3, #2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800855c:	4413      	add	r3, r2
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008562:	3301      	adds	r3, #1
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008568:	440b      	add	r3, r1
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4293      	cmp	r3, r2
 800856e:	bfb8      	it	lt
 8008570:	4613      	movlt	r3, r2
 8008572:	61bb      	str	r3, [r7, #24]
    for (j = start; j < end; j++) {
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	63bb      	str	r3, [r7, #56]	; 0x38
 8008578:	e030      	b.n	80085dc <csf_get_filterbanks+0x34c>
 800857a:	bf00      	nop
 800857c:	4085e000 	.word	0x4085e000
 8008580:	3ff00000 	.word	0x3ff00000
 8008584:	45223000 	.word	0x45223000
      fbank[idx + j] = (bin[i+2]-j) / (csf_float)(bin[i+2]-bin[i+1]);
 8008588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800858a:	3302      	adds	r3, #2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008590:	4413      	add	r3, r2
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	ee07 3a90 	vmov	s15, r3
 800859c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80085a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a2:	3302      	adds	r3, #2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a8:	4413      	add	r3, r2
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ae:	3301      	adds	r3, #1
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085b4:	440b      	add	r3, r1
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	ee07 3a90 	vmov	s15, r3
 80085be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c6:	4413      	add	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	6a3a      	ldr	r2, [r7, #32]
 80085cc:	4413      	add	r3, r2
 80085ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085d2:	edc3 7a00 	vstr	s15, [r3]
    for (j = start; j < end; j++) {
 80085d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d8:	3301      	adds	r3, #1
 80085da:	63bb      	str	r3, [r7, #56]	; 0x38
 80085dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	dbd1      	blt.n	8008588 <csf_get_filterbanks+0x2f8>
  for (i = 0, idx = 0; i < aNFilters; i++, idx += feat_width) {
 80085e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e6:	3301      	adds	r3, #1
 80085e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	4413      	add	r3, r2
 80085f0:	637b      	str	r3, [r7, #52]	; 0x34
 80085f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	f6ff af4f 	blt.w	800849a <csf_get_filterbanks+0x20a>
    }
  }
  free(bin);
 80085fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085fe:	f007 f813 	bl	800f628 <free>

  return fbank;
 8008602:	6a3b      	ldr	r3, [r7, #32]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3740      	adds	r7, #64	; 0x40
 8008608:	46bd      	mov	sp, r7
 800860a:	bdb0      	pop	{r4, r5, r7, pc}

0800860c <csf_framesig>:

int
csf_framesig(const csf_float* aSignal, unsigned int aSignalLen, int aFrameLen,
             int aPaddedFrameLen, int aFrameStep, csf_float* aWinFunc,
             csf_float** aFrames)
{
 800860c:	b5b0      	push	{r4, r5, r7, lr}
 800860e:	b0a8      	sub	sp, #160	; 0xa0
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
 8008618:	603b      	str	r3, [r7, #0]
  int* indices;
  csf_float* frames;
  int i, j, idx, iidx, n_frames;
  int frame_width = MAX(aPaddedFrameLen, aFrameLen);
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	4293      	cmp	r3, r2
 8008620:	bfb8      	it	lt
 8008622:	4613      	movlt	r3, r2
 8008624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  char buffer3[100];
      	strcpy(buffer3, "Top of csf_framesig\r\n");
 8008628:	f107 0314 	add.w	r3, r7, #20
 800862c:	4a8e      	ldr	r2, [pc, #568]	; (8008868 <csf_framesig+0x25c>)
 800862e:	461c      	mov	r4, r3
 8008630:	4615      	mov	r5, r2
 8008632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008636:	e895 0003 	ldmia.w	r5, {r0, r1}
 800863a:	6020      	str	r0, [r4, #0]
 800863c:	3404      	adds	r4, #4
 800863e:	8021      	strh	r1, [r4, #0]
      	HAL_UART_Transmit(&huart3, (uint8_t*)buffer3, strlen(buffer3), HAL_MAX_DELAY);
 8008640:	f107 0314 	add.w	r3, r7, #20
 8008644:	4618      	mov	r0, r3
 8008646:	f7fe f9b4 	bl	80069b2 <strlen>
 800864a:	4603      	mov	r3, r0
 800864c:	b29a      	uxth	r2, r3
 800864e:	f107 0114 	add.w	r1, r7, #20
 8008652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008656:	4885      	ldr	r0, [pc, #532]	; (800886c <csf_framesig+0x260>)
 8008658:	f006 f820 	bl	800e69c <HAL_UART_Transmit>

  if (aSignalLen > aFrameLen) {
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	429a      	cmp	r2, r3
 8008662:	d91c      	bls.n	800869e <csf_framesig+0x92>
    n_frames = 1 + (int)csf_ceil((aSignalLen - aFrameLen) /
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                 (csf_float)aFrameStep);
 8008672:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008676:	ee07 3a90 	vmov	s15, r3
 800867a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    n_frames = 1 + (int)csf_ceil((aSignalLen - aFrameLen) /
 800867e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008682:	eeb0 0a66 	vmov.f32	s0, s13
 8008686:	f009 fe07 	bl	8012298 <ceilf>
 800868a:	eef0 7a40 	vmov.f32	s15, s0
 800868e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008692:	ee17 3a90 	vmov	r3, s15
 8008696:	3301      	adds	r3, #1
 8008698:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800869c:	e002      	b.n	80086a4 <csf_framesig+0x98>
  } else {
    n_frames = 1;
 800869e:	2301      	movs	r3, #1
 80086a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  }

  indices = (int*)malloc(sizeof(int) * n_frames * aFrameLen);
 80086a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	fb02 f303 	mul.w	r3, r2, r3
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4618      	mov	r0, r3
 80086b2:	f006 ffb1 	bl	800f618 <malloc>
 80086b6:	4603      	mov	r3, r0
 80086b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  for (i = 0, idx = 0; i < n_frames; i++) {
 80086bc:	2300      	movs	r3, #0
 80086be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80086c2:	2300      	movs	r3, #0
 80086c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80086c8:	e029      	b.n	800871e <csf_framesig+0x112>
    int base = i * aFrameStep;
 80086ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80086d2:	fb02 f303 	mul.w	r3, r2, r3
 80086d6:	67bb      	str	r3, [r7, #120]	; 0x78
    for (j = 0; j < aFrameLen; j++, idx++) {
 80086d8:	2300      	movs	r3, #0
 80086da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80086de:	e014      	b.n	800870a <csf_framesig+0xfe>
      indices[idx] = base + j;
 80086e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80086ea:	4413      	add	r3, r2
 80086ec:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80086ee:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80086f2:	440a      	add	r2, r1
 80086f4:	601a      	str	r2, [r3, #0]
    for (j = 0; j < aFrameLen; j++, idx++) {
 80086f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086fa:	3301      	adds	r3, #1
 80086fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008700:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008704:	3301      	adds	r3, #1
 8008706:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800870a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	429a      	cmp	r2, r3
 8008712:	dbe5      	blt.n	80086e0 <csf_framesig+0xd4>
  for (i = 0, idx = 0; i < n_frames; i++) {
 8008714:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008718:	3301      	adds	r3, #1
 800871a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800871e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008722:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008726:	429a      	cmp	r2, r3
 8008728:	dbcf      	blt.n	80086ca <csf_framesig+0xbe>
    }
  }

  frames = (csf_float*)malloc(sizeof(csf_float) * n_frames * frame_width);
 800872a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800872e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008732:	fb02 f303 	mul.w	r3, r2, r3
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4618      	mov	r0, r3
 800873a:	f006 ff6d 	bl	800f618 <malloc>
 800873e:	4603      	mov	r3, r0
 8008740:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  for (i = 0, idx = 0, iidx = 0; i < n_frames; i++) {
 8008744:	2300      	movs	r3, #0
 8008746:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800874a:	2300      	movs	r3, #0
 800874c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008750:	2300      	movs	r3, #0
 8008752:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008756:	e071      	b.n	800883c <csf_framesig+0x230>
    for (j = 0; j < aFrameLen; j++, idx++, iidx++) {
 8008758:	2300      	movs	r3, #0
 800875a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800875e:	e047      	b.n	80087f0 <csf_framesig+0x1e4>
      int index = indices[iidx];
 8008760:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800876a:	4413      	add	r3, r2
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	67fb      	str	r3, [r7, #124]	; 0x7c
      frames[idx] = index < aSignalLen ? aSignal[index] : 0.0;
 8008770:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	429a      	cmp	r2, r3
 8008776:	d905      	bls.n	8008784 <csf_framesig+0x178>
 8008778:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	4413      	add	r3, r2
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	e001      	b.n	8008788 <csf_framesig+0x17c>
 8008784:	f04f 0300 	mov.w	r3, #0
 8008788:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800878c:	0092      	lsls	r2, r2, #2
 800878e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008792:	440a      	add	r2, r1
 8008794:	6013      	str	r3, [r2, #0]
      //strcpy(buffer3, "Before aWinFunc: csf_framesig\r\n");
      //HAL_UART_Transmit(&huart3, (uint8_t*)buffer3, strlen(buffer3), HAL_MAX_DELAY);
      if (aWinFunc) {
 8008796:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800879a:	2b00      	cmp	r3, #0
 800879c:	d019      	beq.n	80087d2 <csf_framesig+0x1c6>
        frames[idx] *= aWinFunc[j];
 800879e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087a8:	4413      	add	r3, r2
 80087aa:	ed93 7a00 	vldr	s14, [r3]
 80087ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80087b8:	4413      	add	r3, r2
 80087ba:	edd3 7a00 	vldr	s15, [r3]
 80087be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087c8:	4413      	add	r3, r2
 80087ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ce:	edc3 7a00 	vstr	s15, [r3]
    for (j = 0; j < aFrameLen; j++, idx++, iidx++) {
 80087d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087d6:	3301      	adds	r3, #1
 80087d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80087e0:	3301      	adds	r3, #1
 80087e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087ea:	3301      	adds	r3, #1
 80087ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80087f0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	dbb2      	blt.n	8008760 <csf_framesig+0x154>

        //sprintf(buffer3, "frames[idx] = %f, j = %i\r\n", frames[idx], j);
        //HAL_UART_Transmit(&huart3, (uint8_t*)buffer3, strlen(buffer3), HAL_MAX_DELAY);
      }
    }
    for (j = aFrameLen; j < aPaddedFrameLen; j++, idx++) {
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008800:	e012      	b.n	8008828 <csf_framesig+0x21c>
      frames[idx] = 0.0;
 8008802:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800880c:	4413      	add	r3, r2
 800880e:	f04f 0200 	mov.w	r2, #0
 8008812:	601a      	str	r2, [r3, #0]
    for (j = aFrameLen; j < aPaddedFrameLen; j++, idx++) {
 8008814:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008818:	3301      	adds	r3, #1
 800881a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800881e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008822:	3301      	adds	r3, #1
 8008824:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008828:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	dbe7      	blt.n	8008802 <csf_framesig+0x1f6>
  for (i = 0, idx = 0, iidx = 0; i < n_frames; i++) {
 8008832:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008836:	3301      	adds	r3, #1
 8008838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800883c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008840:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008844:	429a      	cmp	r2, r3
 8008846:	db87      	blt.n	8008758 <csf_framesig+0x14c>
    }
  }
  free(indices);
 8008848:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800884c:	f006 feec 	bl	800f628 <free>

  *aFrames = frames;
 8008850:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008854:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008858:	601a      	str	r2, [r3, #0]

  return n_frames;
 800885a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 800885e:	4618      	mov	r0, r3
 8008860:	37a0      	adds	r7, #160	; 0xa0
 8008862:	46bd      	mov	sp, r7
 8008864:	bdb0      	pop	{r4, r5, r7, pc}
 8008866:	bf00      	nop
 8008868:	08016880 	.word	0x08016880
 800886c:	2000e8c8 	.word	0x2000e8c8

08008870 <csf_preemphasis>:
  return aSigLen;
}

csf_float*
csf_preemphasis(const short* aSignal, unsigned int aSignalLen, csf_float aCoeff)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	ed87 0a01 	vstr	s0, [r7, #4]
  int i;
  csf_float* preemph = (csf_float*)malloc(sizeof(csf_float) * aSignalLen);
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4618      	mov	r0, r3
 8008884:	f006 fec8 	bl	800f618 <malloc>
 8008888:	4603      	mov	r3, r0
 800888a:	613b      	str	r3, [r7, #16]

  for (i = aSignalLen - 1; i >= 1; i--) {
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	3b01      	subs	r3, #1
 8008890:	617b      	str	r3, [r7, #20]
 8008892:	e025      	b.n	80088e0 <csf_preemphasis+0x70>
    preemph[i] = aSignal[i] - aSignal[i-1] * aCoeff;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	005b      	lsls	r3, r3, #1
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	4413      	add	r3, r2
 800889c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088a0:	ee07 3a90 	vmov	s15, r3
 80088a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80088ae:	4413      	add	r3, r2
 80088b0:	005b      	lsls	r3, r3, #1
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	4413      	add	r3, r2
 80088b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80088c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80088c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	4413      	add	r3, r2
 80088d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088d6:	edc3 7a00 	vstr	s15, [r3]
  for (i = aSignalLen - 1; i >= 1; i--) {
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	3b01      	subs	r3, #1
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	dcd6      	bgt.n	8008894 <csf_preemphasis+0x24>
  }
  preemph[0] = (csf_float)aSignal[0];
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088ec:	ee07 3a90 	vmov	s15, r3
 80088f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	edc3 7a00 	vstr	s15, [r3]

  return preemph;
 80088fa:	693b      	ldr	r3, [r7, #16]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3718      	adds	r7, #24
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <csf_magspec>:

csf_float*
csf_magspec(const csf_float* aFrames, int aNFrames, int aNFFT)
{
 8008904:	b590      	push	{r4, r7, lr}
 8008906:	ed2d 8b02 	vpush	{d8}
 800890a:	b08d      	sub	sp, #52	; 0x34
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
  int i, j, idx;
  const int fft_out = aNFFT / 2 + 1;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	da00      	bge.n	800891c <csf_magspec+0x18>
 800891a:	3301      	adds	r3, #1
 800891c:	105b      	asrs	r3, r3, #1
 800891e:	3301      	adds	r3, #1
 8008920:	623b      	str	r3, [r7, #32]
  kiss_fftr_cfg cfg = kiss_fftr_alloc(aNFFT, 0, NULL, NULL);
 8008922:	2300      	movs	r3, #0
 8008924:	2200      	movs	r2, #0
 8008926:	2100      	movs	r1, #0
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f001 fa15 	bl	8009d58 <kiss_fftr_alloc>
 800892e:	61f8      	str	r0, [r7, #28]
  csf_float* mspec = (csf_float*)malloc(sizeof(csf_float) * aNFrames * fft_out);
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	6a3a      	ldr	r2, [r7, #32]
 8008934:	fb02 f303 	mul.w	r3, r2, r3
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4618      	mov	r0, r3
 800893c:	f006 fe6c 	bl	800f618 <malloc>
 8008940:	4603      	mov	r3, r0
 8008942:	61bb      	str	r3, [r7, #24]
  kiss_fft_cpx* out = (kiss_fft_cpx*)malloc(sizeof(kiss_fft_cpx) * fft_out);
 8008944:	6a3b      	ldr	r3, [r7, #32]
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	4618      	mov	r0, r3
 800894a:	f006 fe65 	bl	800f618 <malloc>
 800894e:	4603      	mov	r3, r0
 8008950:	617b      	str	r3, [r7, #20]

  for (i = 0, idx = 0; i < aNFrames; i++) {
 8008952:	2300      	movs	r3, #0
 8008954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008956:	2300      	movs	r3, #0
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
 800895a:	e045      	b.n	80089e8 <csf_magspec+0xe4>
    // Compute the magnitude spectrum
    kiss_fftr(cfg, &(aFrames[i * aNFFT]), out);
 800895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	fb02 f303 	mul.w	r3, r2, r3
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	4413      	add	r3, r2
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	4619      	mov	r1, r3
 800896e:	69f8      	ldr	r0, [r7, #28]
 8008970:	f001 fac0 	bl	8009ef4 <kiss_fftr>
    for (j = 0; j < fft_out; j++, idx++) {
 8008974:	2300      	movs	r3, #0
 8008976:	62bb      	str	r3, [r7, #40]	; 0x28
 8008978:	e02f      	b.n	80089da <csf_magspec+0xd6>
      mspec[idx] = csf_sqrt(csf_pow(out[j].r, 2.0) + csf_pow(out[j].i, 2.0));
 800897a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897c:	00db      	lsls	r3, r3, #3
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	4413      	add	r3, r2
 8008982:	edd3 7a00 	vldr	s15, [r3]
 8008986:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800898a:	eeb0 0a67 	vmov.f32	s0, s15
 800898e:	f00a fd07 	bl	80133a0 <powf>
 8008992:	eeb0 8a40 	vmov.f32	s16, s0
 8008996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008998:	00db      	lsls	r3, r3, #3
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	4413      	add	r3, r2
 800899e:	edd3 7a01 	vldr	s15, [r3, #4]
 80089a2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80089a6:	eeb0 0a67 	vmov.f32	s0, s15
 80089aa:	f00a fcf9 	bl	80133a0 <powf>
 80089ae:	eef0 7a40 	vmov.f32	s15, s0
 80089b2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	69ba      	ldr	r2, [r7, #24]
 80089bc:	18d4      	adds	r4, r2, r3
 80089be:	eeb0 0a67 	vmov.f32	s0, s15
 80089c2:	f00a feb7 	bl	8013734 <sqrtf>
 80089c6:	eef0 7a40 	vmov.f32	s15, s0
 80089ca:	edc4 7a00 	vstr	s15, [r4]
    for (j = 0; j < fft_out; j++, idx++) {
 80089ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d0:	3301      	adds	r3, #1
 80089d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	3301      	adds	r3, #1
 80089d8:	627b      	str	r3, [r7, #36]	; 0x24
 80089da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	429a      	cmp	r2, r3
 80089e0:	dbcb      	blt.n	800897a <csf_magspec+0x76>
  for (i = 0, idx = 0; i < aNFrames; i++) {
 80089e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e4:	3301      	adds	r3, #1
 80089e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	dbb5      	blt.n	800895c <csf_magspec+0x58>
    }
  }

  KISS_FFT_FREE(cfg);
 80089f0:	69f8      	ldr	r0, [r7, #28]
 80089f2:	f006 fe19 	bl	800f628 <free>
  free(out);
 80089f6:	6978      	ldr	r0, [r7, #20]
 80089f8:	f006 fe16 	bl	800f628 <free>
  return mspec;
 80089fc:	69bb      	ldr	r3, [r7, #24]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3734      	adds	r7, #52	; 0x34
 8008a02:	46bd      	mov	sp, r7
 8008a04:	ecbd 8b02 	vpop	{d8}
 8008a08:	bd90      	pop	{r4, r7, pc}
	...

08008a0c <csf_powspec>:

csf_float*
csf_powspec(const csf_float* aFrames, int aNFrames, int aNFFT)
{
 8008a0c:	b5b0      	push	{r4, r5, r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
  int i;
  const int fft_out = aNFFT / 2 + 1;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	da00      	bge.n	8008a20 <csf_powspec+0x14>
 8008a1e:	3301      	adds	r3, #1
 8008a20:	105b      	asrs	r3, r3, #1
 8008a22:	3301      	adds	r3, #1
 8008a24:	61bb      	str	r3, [r7, #24]
  csf_float* pspec = csf_magspec(aFrames, aNFrames, aNFFT);
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	68b9      	ldr	r1, [r7, #8]
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f7ff ff6a 	bl	8008904 <csf_magspec>
 8008a30:	6178      	str	r0, [r7, #20]

  // Compute the power spectrum
  for (i = 0; i < aNFrames * fft_out; i++) {
 8008a32:	2300      	movs	r3, #0
 8008a34:	61fb      	str	r3, [r7, #28]
 8008a36:	e035      	b.n	8008aa4 <csf_powspec+0x98>
    pspec[i] = (1.0/aNFFT) * powf(pspec[i], 2.0);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7fe f96b 	bl	8006d14 <__aeabi_i2d>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	460c      	mov	r4, r1
 8008a42:	461a      	mov	r2, r3
 8008a44:	4623      	mov	r3, r4
 8008a46:	f04f 0000 	mov.w	r0, #0
 8008a4a:	491c      	ldr	r1, [pc, #112]	; (8008abc <csf_powspec+0xb0>)
 8008a4c:	f7fe faf6 	bl	800703c <__aeabi_ddiv>
 8008a50:	4603      	mov	r3, r0
 8008a52:	460c      	mov	r4, r1
 8008a54:	4625      	mov	r5, r4
 8008a56:	461c      	mov	r4, r3
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	4413      	add	r3, r2
 8008a60:	edd3 7a00 	vldr	s15, [r3]
 8008a64:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8008a68:	eeb0 0a67 	vmov.f32	s0, s15
 8008a6c:	f00a fc98 	bl	80133a0 <powf>
 8008a70:	ee10 3a10 	vmov	r3, s0
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7fe f95f 	bl	8006d38 <__aeabi_f2d>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	4620      	mov	r0, r4
 8008a80:	4629      	mov	r1, r5
 8008a82:	f7fe f9b1 	bl	8006de8 <__aeabi_dmul>
 8008a86:	4603      	mov	r3, r0
 8008a88:	460c      	mov	r4, r1
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	18d4      	adds	r4, r2, r3
 8008a96:	f7fe fc7f 	bl	8007398 <__aeabi_d2f>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	6023      	str	r3, [r4, #0]
  for (i = 0; i < aNFrames * fft_out; i++) {
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	61fb      	str	r3, [r7, #28]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	fb02 f303 	mul.w	r3, r2, r3
 8008aac:	69fa      	ldr	r2, [r7, #28]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	dbc2      	blt.n	8008a38 <csf_powspec+0x2c>
  }

  return pspec;
 8008ab2:	697b      	ldr	r3, [r7, #20]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3720      	adds	r7, #32
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bdb0      	pop	{r4, r5, r7, pc}
 8008abc:	3ff00000 	.word	0x3ff00000

08008ac0 <kf_bfly2>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b089      	sub	sp, #36	; 0x24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8008ad4:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	00db      	lsls	r3, r3, #3
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	4413      	add	r3, r2
 8008ade:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	ed93 7a00 	vldr	s14, [r3]
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	edd3 7a00 	vldr	s15, [r3]
 8008aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	edd3 6a01 	vldr	s13, [r3, #4]
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	edd3 7a01 	vldr	s15, [r3, #4]
 8008afc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008b00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b04:	edc7 7a04 	vstr	s15, [r7, #16]
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	ed93 7a00 	vldr	s14, [r3]
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	edd3 7a01 	vldr	s15, [r3, #4]
 8008b14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	edd3 6a01 	vldr	s13, [r3, #4]
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	edd3 7a00 	vldr	s15, [r3]
 8008b24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b2c:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	00db      	lsls	r3, r3, #3
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	4413      	add	r3, r2
 8008b38:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	ed93 7a00 	vldr	s14, [r3]
 8008b40:	edd7 7a04 	vldr	s15, [r7, #16]
 8008b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	edc3 7a00 	vstr	s15, [r3]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	ed93 7a01 	vldr	s14, [r3, #4]
 8008b54:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	ed93 7a00 	vldr	s14, [r3]
 8008b68:	edd7 7a04 	vldr	s15, [r7, #16]
 8008b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	edc3 7a00 	vstr	s15, [r3]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	ed93 7a01 	vldr	s14, [r3, #4]
 8008b7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	3308      	adds	r3, #8
 8008b8e:	61fb      	str	r3, [r7, #28]
        ++Fout;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	3308      	adds	r3, #8
 8008b94:	60fb      	str	r3, [r7, #12]
    }while (--m);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	603b      	str	r3, [r7, #0]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d19e      	bne.n	8008ae0 <kf_bfly2+0x20>
}
 8008ba2:	bf00      	nop
 8008ba4:	3724      	adds	r7, #36	; 0x24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <kf_bfly4>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b097      	sub	sp, #92	; 0x5c
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	60f8      	str	r0, [r7, #12]
 8008bb6:	60b9      	str	r1, [r7, #8]
 8008bb8:	607a      	str	r2, [r7, #4]
 8008bba:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	005b      	lsls	r3, r3, #1
 8008bc4:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	005b      	lsls	r3, r3, #1
 8008bcc:	4413      	add	r3, r2
 8008bce:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8008bd6:	657b      	str	r3, [r7, #84]	; 0x54
 8008bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bda:	653b      	str	r3, [r7, #80]	; 0x50
 8008bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bde:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	00db      	lsls	r3, r3, #3
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	4413      	add	r3, r2
 8008be8:	ed93 7a00 	vldr	s14, [r3]
 8008bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bee:	edd3 7a00 	vldr	s15, [r3]
 8008bf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	00db      	lsls	r3, r3, #3
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	edd3 6a01 	vldr	s13, [r3, #4]
 8008c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c04:	edd3 7a01 	vldr	s15, [r3, #4]
 8008c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c10:	edc7 7a04 	vstr	s15, [r7, #16]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	00db      	lsls	r3, r3, #3
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	ed93 7a00 	vldr	s14, [r3]
 8008c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c22:	edd3 7a01 	vldr	s15, [r3, #4]
 8008c26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	00db      	lsls	r3, r3, #3
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	4413      	add	r3, r2
 8008c32:	edd3 6a01 	vldr	s13, [r3, #4]
 8008c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c38:	edd3 7a00 	vldr	s15, [r3]
 8008c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c44:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 8008c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c4a:	00db      	lsls	r3, r3, #3
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	4413      	add	r3, r2
 8008c50:	ed93 7a00 	vldr	s14, [r3]
 8008c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c56:	edd3 7a00 	vldr	s15, [r3]
 8008c5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c60:	00db      	lsls	r3, r3, #3
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	4413      	add	r3, r2
 8008c66:	edd3 6a01 	vldr	s13, [r3, #4]
 8008c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c78:	edc7 7a06 	vstr	s15, [r7, #24]
 8008c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c7e:	00db      	lsls	r3, r3, #3
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	4413      	add	r3, r2
 8008c84:	ed93 7a00 	vldr	s14, [r3]
 8008c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8008c8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c94:	00db      	lsls	r3, r3, #3
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	4413      	add	r3, r2
 8008c9a:	edd3 6a01 	vldr	s13, [r3, #4]
 8008c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ca0:	edd3 7a00 	vldr	s15, [r3]
 8008ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cac:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 8008cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cb2:	00db      	lsls	r3, r3, #3
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	ed93 7a00 	vldr	s14, [r3]
 8008cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cbe:	edd3 7a00 	vldr	s15, [r3]
 8008cc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cc8:	00db      	lsls	r3, r3, #3
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	4413      	add	r3, r2
 8008cce:	edd3 6a01 	vldr	s13, [r3, #4]
 8008cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8008cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ce0:	edc7 7a08 	vstr	s15, [r7, #32]
 8008ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ce6:	00db      	lsls	r3, r3, #3
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	4413      	add	r3, r2
 8008cec:	ed93 7a00 	vldr	s14, [r3]
 8008cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cf2:	edd3 7a01 	vldr	s15, [r3, #4]
 8008cf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cfc:	00db      	lsls	r3, r3, #3
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	4413      	add	r3, r2
 8008d02:	edd3 6a01 	vldr	s13, [r3, #4]
 8008d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d08:	edd3 7a00 	vldr	s15, [r3]
 8008d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d14:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	ed93 7a00 	vldr	s14, [r3]
 8008d1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8008d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d26:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	ed93 7a01 	vldr	s14, [r3, #4]
 8008d30:	edd7 7a07 	vldr	s15, [r7, #28]
 8008d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d38:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	ed93 7a00 	vldr	s14, [r3]
 8008d42:	edd7 7a06 	vldr	s15, [r7, #24]
 8008d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	edc3 7a00 	vstr	s15, [r3]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	ed93 7a01 	vldr	s14, [r3, #4]
 8008d56:	edd7 7a07 	vldr	s15, [r7, #28]
 8008d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 8008d64:	ed97 7a04 	vldr	s14, [r7, #16]
 8008d68:	edd7 7a08 	vldr	s15, [r7, #32]
 8008d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d70:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8008d74:	ed97 7a05 	vldr	s14, [r7, #20]
 8008d78:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d80:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 8008d84:	ed97 7a04 	vldr	s14, [r7, #16]
 8008d88:	edd7 7a08 	vldr	s15, [r7, #32]
 8008d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d90:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8008d94:	ed97 7a05 	vldr	s14, [r7, #20]
 8008d98:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008da0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	ed93 7a00 	vldr	s14, [r3]
 8008daa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	4413      	add	r3, r2
 8008db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008dba:	edc3 7a00 	vstr	s15, [r3]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	ed93 7a01 	vldr	s14, [r3, #4]
 8008dc4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dca:	00db      	lsls	r3, r3, #3
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	4413      	add	r3, r2
 8008dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008dd4:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008dde:	4413      	add	r3, r2
 8008de0:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	011b      	lsls	r3, r3, #4
 8008de6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008de8:	4413      	add	r3, r2
 8008dea:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	4613      	mov	r3, r2
 8008df0:	005b      	lsls	r3, r3, #1
 8008df2:	4413      	add	r3, r2
 8008df4:	00db      	lsls	r3, r3, #3
 8008df6:	461a      	mov	r2, r3
 8008df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dfa:	4413      	add	r3, r2
 8008dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	ed93 7a00 	vldr	s14, [r3]
 8008e04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	edc3 7a00 	vstr	s15, [r3]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	ed93 7a01 	vldr	s14, [r3, #4]
 8008e18:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d030      	beq.n	8008e90 <kf_bfly4+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 8008e2e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008e32:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	00db      	lsls	r3, r3, #3
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e42:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 8008e46:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008e4a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	00db      	lsls	r3, r3, #3
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	4413      	add	r3, r2
 8008e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e5a:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 8008e5e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008e62:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e68:	00db      	lsls	r3, r3, #3
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e72:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 8008e76:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008e7a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e80:	00db      	lsls	r3, r3, #3
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	4413      	add	r3, r2
 8008e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e8a:	edc3 7a01 	vstr	s15, [r3, #4]
 8008e8e:	e02f      	b.n	8008ef0 <kf_bfly4+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 8008e90:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008e94:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	00db      	lsls	r3, r3, #3
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ea4:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 8008ea8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008eac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	00db      	lsls	r3, r3, #3
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ebc:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 8008ec0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008ec4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eca:	00db      	lsls	r3, r3, #3
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ed4:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 8008ed8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008edc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ee2:	00db      	lsls	r3, r3, #3
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008eec:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	3308      	adds	r3, #8
 8008ef4:	60fb      	str	r3, [r7, #12]
    }while(--k);
 8008ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8008efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f47f ae6e 	bne.w	8008be0 <kf_bfly4+0x32>
}
 8008f04:	bf00      	nop
 8008f06:	375c      	adds	r7, #92	; 0x5c
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <kf_bfly3>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 8008f10:	b5b0      	push	{r4, r5, r7, lr}
 8008f12:	b094      	sub	sp, #80	; 0x50
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
 8008f1c:	603b      	str	r3, [r7, #0]
     size_t k=m;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	fb02 f303 	mul.w	r3, r2, r3
 8008f30:	6879      	ldr	r1, [r7, #4]
 8008f32:	3321      	adds	r3, #33	; 0x21
 8008f34:	f107 0210 	add.w	r2, r7, #16
 8008f38:	00db      	lsls	r3, r3, #3
 8008f3a:	440b      	add	r3, r1
 8008f3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008f40:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8008f4a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f4e:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	00db      	lsls	r3, r3, #3
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	4413      	add	r3, r2
 8008f58:	ed93 7a00 	vldr	s14, [r3]
 8008f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f5e:	edd3 7a00 	vldr	s15, [r3]
 8008f62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	00db      	lsls	r3, r3, #3
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	edd3 6a01 	vldr	s13, [r3, #4]
 8008f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f74:	edd3 7a01 	vldr	s15, [r3, #4]
 8008f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f80:	edc7 7a08 	vstr	s15, [r7, #32]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	00db      	lsls	r3, r3, #3
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	ed93 7a00 	vldr	s14, [r3]
 8008f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f92:	edd3 7a01 	vldr	s15, [r3, #4]
 8008f96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	00db      	lsls	r3, r3, #3
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	edd3 6a01 	vldr	s13, [r3, #4]
 8008fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fa8:	edd3 7a00 	vldr	s15, [r3]
 8008fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fb4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 8008fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fba:	00db      	lsls	r3, r3, #3
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	ed93 7a00 	vldr	s14, [r3]
 8008fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fc6:	edd3 7a00 	vldr	s15, [r3]
 8008fca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fd0:	00db      	lsls	r3, r3, #3
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	edd3 6a01 	vldr	s13, [r3, #4]
 8008fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fdc:	edd3 7a01 	vldr	s15, [r3, #4]
 8008fe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008fe8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8008fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fee:	00db      	lsls	r3, r3, #3
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	ed93 7a00 	vldr	s14, [r3]
 8008ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ffa:	edd3 7a01 	vldr	s15, [r3, #4]
 8008ffe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009004:	00db      	lsls	r3, r3, #3
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	4413      	add	r3, r2
 800900a:	edd3 6a01 	vldr	s13, [r3, #4]
 800900e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009010:	edd3 7a00 	vldr	s15, [r3]
 8009014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800901c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 8009020:	ed97 7a08 	vldr	s14, [r7, #32]
 8009024:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800902c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8009030:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009034:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800903c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 8009040:	ed97 7a08 	vldr	s14, [r7, #32]
 8009044:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800904c:	edc7 7a06 	vstr	s15, [r7, #24]
 8009050:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009054:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800905c:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	00db      	lsls	r3, r3, #3
 8009064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009066:	4413      	add	r3, r2
 8009068:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	011b      	lsls	r3, r3, #4
 800906e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009070:	4413      	add	r3, r2
 8009072:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4618      	mov	r0, r3
 800907a:	f7fd fe5d 	bl	8006d38 <__aeabi_f2d>
 800907e:	4604      	mov	r4, r0
 8009080:	460d      	mov	r5, r1
 8009082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009084:	4618      	mov	r0, r3
 8009086:	f7fd fe57 	bl	8006d38 <__aeabi_f2d>
 800908a:	f04f 0200 	mov.w	r2, #0
 800908e:	4b54      	ldr	r3, [pc, #336]	; (80091e0 <kf_bfly3+0x2d0>)
 8009090:	f7fd feaa 	bl	8006de8 <__aeabi_dmul>
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	4620      	mov	r0, r4
 800909a:	4629      	mov	r1, r5
 800909c:	f7fd fcec 	bl	8006a78 <__aeabi_dsub>
 80090a0:	4603      	mov	r3, r0
 80090a2:	460c      	mov	r4, r1
 80090a4:	4618      	mov	r0, r3
 80090a6:	4621      	mov	r1, r4
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	00db      	lsls	r3, r3, #3
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	18d4      	adds	r4, r2, r3
 80090b0:	f7fe f972 	bl	8007398 <__aeabi_d2f>
 80090b4:	4603      	mov	r3, r0
 80090b6:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	4618      	mov	r0, r3
 80090be:	f7fd fe3b 	bl	8006d38 <__aeabi_f2d>
 80090c2:	4604      	mov	r4, r0
 80090c4:	460d      	mov	r5, r1
 80090c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fd fe35 	bl	8006d38 <__aeabi_f2d>
 80090ce:	f04f 0200 	mov.w	r2, #0
 80090d2:	4b43      	ldr	r3, [pc, #268]	; (80091e0 <kf_bfly3+0x2d0>)
 80090d4:	f7fd fe88 	bl	8006de8 <__aeabi_dmul>
 80090d8:	4602      	mov	r2, r0
 80090da:	460b      	mov	r3, r1
 80090dc:	4620      	mov	r0, r4
 80090de:	4629      	mov	r1, r5
 80090e0:	f7fd fcca 	bl	8006a78 <__aeabi_dsub>
 80090e4:	4603      	mov	r3, r0
 80090e6:	460c      	mov	r4, r1
 80090e8:	4618      	mov	r0, r3
 80090ea:	4621      	mov	r1, r4
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	00db      	lsls	r3, r3, #3
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	18d4      	adds	r4, r2, r3
 80090f4:	f7fe f950 	bl	8007398 <__aeabi_d2f>
 80090f8:	4603      	mov	r3, r0
 80090fa:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 80090fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8009100:	edd7 7a05 	vldr	s15, [r7, #20]
 8009104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009108:	edc7 7a06 	vstr	s15, [r7, #24]
 800910c:	ed97 7a07 	vldr	s14, [r7, #28]
 8009110:	edd7 7a05 	vldr	s15, [r7, #20]
 8009114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009118:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	ed93 7a00 	vldr	s14, [r3]
 8009122:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	edc3 7a00 	vstr	s15, [r3]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	ed93 7a01 	vldr	s14, [r3, #4]
 8009136:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800913a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	00db      	lsls	r3, r3, #3
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	4413      	add	r3, r2
 800914c:	ed93 7a00 	vldr	s14, [r3]
 8009150:	edd7 7a07 	vldr	s15, [r7, #28]
 8009154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009156:	00db      	lsls	r3, r3, #3
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	4413      	add	r3, r2
 800915c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009160:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	00db      	lsls	r3, r3, #3
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	4413      	add	r3, r2
 800916c:	ed93 7a01 	vldr	s14, [r3, #4]
 8009170:	edd7 7a06 	vldr	s15, [r7, #24]
 8009174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009176:	00db      	lsls	r3, r3, #3
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	4413      	add	r3, r2
 800917c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009180:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	4413      	add	r3, r2
 800918c:	ed93 7a00 	vldr	s14, [r3]
 8009190:	edd7 7a07 	vldr	s15, [r7, #28]
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	00db      	lsls	r3, r3, #3
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	4413      	add	r3, r2
 800919c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091a0:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	00db      	lsls	r3, r3, #3
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	4413      	add	r3, r2
 80091ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80091b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	00db      	lsls	r3, r3, #3
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	4413      	add	r3, r2
 80091bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091c0:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	3308      	adds	r3, #8
 80091c8:	60fb      	str	r3, [r7, #12]
     }while(--k);
 80091ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091cc:	3b01      	subs	r3, #1
 80091ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f47f aebc 	bne.w	8008f50 <kf_bfly3+0x40>
}
 80091d8:	bf00      	nop
 80091da:	3750      	adds	r7, #80	; 0x50
 80091dc:	46bd      	mov	sp, r7
 80091de:	bdb0      	pop	{r4, r5, r7, pc}
 80091e0:	3fe00000 	.word	0x3fe00000

080091e4 <kf_bfly5>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 80091e4:	b480      	push	{r7}
 80091e6:	b0ab      	sub	sp, #172	; 0xac
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
 80091f0:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80091f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	fb02 f303 	mul.w	r3, r2, r3
 8009204:	00db      	lsls	r3, r3, #3
 8009206:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800920a:	441a      	add	r2, r3
 800920c:	f107 0318 	add.w	r3, r7, #24
 8009210:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009214:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	fb02 f303 	mul.w	r3, r2, r3
 8009220:	011b      	lsls	r3, r3, #4
 8009222:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009226:	441a      	add	r2, r3
 8009228:	f107 0310 	add.w	r3, r7, #16
 800922c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009230:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009242:	4413      	add	r3, r2
 8009244:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	011b      	lsls	r3, r3, #4
 800924c:	461a      	mov	r2, r3
 800924e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009252:	4413      	add	r3, r2
 8009254:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	4613      	mov	r3, r2
 800925c:	005b      	lsls	r3, r3, #1
 800925e:	4413      	add	r3, r2
 8009260:	00db      	lsls	r3, r3, #3
 8009262:	461a      	mov	r2, r3
 8009264:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009268:	4413      	add	r3, r2
 800926a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	015b      	lsls	r3, r3, #5
 8009272:	461a      	mov	r2, r3
 8009274:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009278:	4413      	add	r3, r2
 800927a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8009284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 8009288:	2300      	movs	r3, #0
 800928a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800928e:	e2a7      	b.n	80097e0 <kf_bfly5+0x5fc>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 8009290:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009294:	f107 0320 	add.w	r3, r7, #32
 8009298:	e892 0003 	ldmia.w	r2, {r0, r1}
 800929c:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 80092a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092a4:	ed93 7a00 	vldr	s14, [r3]
 80092a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	fb02 f303 	mul.w	r3, r2, r3
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80092b8:	4413      	add	r3, r2
 80092ba:	edd3 7a00 	vldr	s15, [r3]
 80092be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80092ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	fb02 f303 	mul.w	r3, r2, r3
 80092d4:	00db      	lsls	r3, r3, #3
 80092d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80092da:	4413      	add	r3, r2
 80092dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80092e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092e8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80092ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092f0:	ed93 7a00 	vldr	s14, [r3]
 80092f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	fb02 f303 	mul.w	r3, r2, r3
 80092fe:	00db      	lsls	r3, r3, #3
 8009300:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009304:	4413      	add	r3, r2
 8009306:	edd3 7a01 	vldr	s15, [r3, #4]
 800930a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800930e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009312:	edd3 6a01 	vldr	s13, [r3, #4]
 8009316:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	fb02 f303 	mul.w	r3, r2, r3
 8009320:	00db      	lsls	r3, r3, #3
 8009322:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009326:	4413      	add	r3, r2
 8009328:	edd3 7a00 	vldr	s15, [r3]
 800932c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009330:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009334:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 8009338:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800933c:	ed93 7a00 	vldr	s14, [r3]
 8009340:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009344:	68ba      	ldr	r2, [r7, #8]
 8009346:	fb02 f303 	mul.w	r3, r2, r3
 800934a:	011b      	lsls	r3, r3, #4
 800934c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009350:	4413      	add	r3, r2
 8009352:	edd3 7a00 	vldr	s15, [r3]
 8009356:	ee27 7a27 	vmul.f32	s14, s14, s15
 800935a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800935e:	edd3 6a01 	vldr	s13, [r3, #4]
 8009362:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	fb02 f303 	mul.w	r3, r2, r3
 800936c:	011b      	lsls	r3, r3, #4
 800936e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009372:	4413      	add	r3, r2
 8009374:	edd3 7a01 	vldr	s15, [r3, #4]
 8009378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800937c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009380:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8009384:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009388:	ed93 7a00 	vldr	s14, [r3]
 800938c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	fb02 f303 	mul.w	r3, r2, r3
 8009396:	011b      	lsls	r3, r3, #4
 8009398:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800939c:	4413      	add	r3, r2
 800939e:	edd3 7a01 	vldr	s15, [r3, #4]
 80093a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80093aa:	edd3 6a01 	vldr	s13, [r3, #4]
 80093ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	fb02 f303 	mul.w	r3, r2, r3
 80093b8:	011b      	lsls	r3, r3, #4
 80093ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80093be:	4413      	add	r3, r2
 80093c0:	edd3 7a00 	vldr	s15, [r3]
 80093c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80093c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093cc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 80093d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093d4:	ed93 7a00 	vldr	s14, [r3]
 80093d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	fb02 f203 	mul.w	r2, r2, r3
 80093e2:	4613      	mov	r3, r2
 80093e4:	005b      	lsls	r3, r3, #1
 80093e6:	4413      	add	r3, r2
 80093e8:	00db      	lsls	r3, r3, #3
 80093ea:	461a      	mov	r2, r3
 80093ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093f0:	4413      	add	r3, r2
 80093f2:	edd3 7a00 	vldr	s15, [r3]
 80093f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093fe:	edd3 6a01 	vldr	s13, [r3, #4]
 8009402:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	fb02 f203 	mul.w	r2, r2, r3
 800940c:	4613      	mov	r3, r2
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	4413      	add	r3, r2
 8009412:	00db      	lsls	r3, r3, #3
 8009414:	461a      	mov	r2, r3
 8009416:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800941a:	4413      	add	r3, r2
 800941c:	edd3 7a01 	vldr	s15, [r3, #4]
 8009420:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009428:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 800942c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009430:	ed93 7a00 	vldr	s14, [r3]
 8009434:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	fb02 f203 	mul.w	r2, r2, r3
 800943e:	4613      	mov	r3, r2
 8009440:	005b      	lsls	r3, r3, #1
 8009442:	4413      	add	r3, r2
 8009444:	00db      	lsls	r3, r3, #3
 8009446:	461a      	mov	r2, r3
 8009448:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800944c:	4413      	add	r3, r2
 800944e:	edd3 7a01 	vldr	s15, [r3, #4]
 8009452:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009456:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800945a:	edd3 6a01 	vldr	s13, [r3, #4]
 800945e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	fb02 f203 	mul.w	r2, r2, r3
 8009468:	4613      	mov	r3, r2
 800946a:	005b      	lsls	r3, r3, #1
 800946c:	4413      	add	r3, r2
 800946e:	00db      	lsls	r3, r3, #3
 8009470:	461a      	mov	r2, r3
 8009472:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009476:	4413      	add	r3, r2
 8009478:	edd3 7a00 	vldr	s15, [r3]
 800947c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009484:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 8009488:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800948c:	ed93 7a00 	vldr	s14, [r3]
 8009490:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	fb02 f303 	mul.w	r3, r2, r3
 800949a:	015b      	lsls	r3, r3, #5
 800949c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80094a0:	4413      	add	r3, r2
 80094a2:	edd3 7a00 	vldr	s15, [r3]
 80094a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80094aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094ae:	edd3 6a01 	vldr	s13, [r3, #4]
 80094b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	fb02 f303 	mul.w	r3, r2, r3
 80094bc:	015b      	lsls	r3, r3, #5
 80094be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80094c2:	4413      	add	r3, r2
 80094c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80094c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80094cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094d0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 80094d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094d8:	ed93 7a00 	vldr	s14, [r3]
 80094dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	fb02 f303 	mul.w	r3, r2, r3
 80094e6:	015b      	lsls	r3, r3, #5
 80094e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80094ec:	4413      	add	r3, r2
 80094ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80094f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80094f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094fa:	edd3 6a01 	vldr	s13, [r3, #4]
 80094fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	fb02 f303 	mul.w	r3, r2, r3
 8009508:	015b      	lsls	r3, r3, #5
 800950a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800950e:	4413      	add	r3, r2
 8009510:	edd3 7a00 	vldr	s15, [r3]
 8009514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800951c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 8009520:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009524:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800952c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8009530:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009534:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800953c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 8009540:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009544:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800954c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 8009550:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009554:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800955c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 8009560:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009564:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800956c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8009570:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009574:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800957c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 8009580:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009584:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800958c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 8009590:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009594:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800959c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 80095a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80095a4:	ed93 7a00 	vldr	s14, [r3]
 80095a8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80095ac:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80095b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80095bc:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 80095c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80095c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80095c8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80095cc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80095d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80095dc:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 80095e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80095e4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80095e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80095ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80095f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80095f4:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80095f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80095fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009604:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 8009608:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800960c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8009610:	edd7 7a06 	vldr	s15, [r7, #24]
 8009614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009618:	ee37 7a27 	vadd.f32	s14, s14, s15
 800961c:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8009620:	edd7 7a04 	vldr	s15, [r7, #16]
 8009624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800962c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 8009630:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8009634:	edd7 7a07 	vldr	s15, [r7, #28]
 8009638:	ee27 7a27 	vmul.f32	s14, s14, s15
 800963c:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8009640:	edd7 7a05 	vldr	s15, [r7, #20]
 8009644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800964c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 8009650:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8009654:	edd7 7a07 	vldr	s15, [r7, #28]
 8009658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800965c:	eeb1 7a67 	vneg.f32	s14, s15
 8009660:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8009664:	edd7 7a05 	vldr	s15, [r7, #20]
 8009668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800966c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009670:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 8009674:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009678:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800967c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009680:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009684:	edc3 7a00 	vstr	s15, [r3]
 8009688:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800968c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009694:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009698:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 800969c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80096a0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80096a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80096ac:	edc3 7a00 	vstr	s15, [r3]
 80096b0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80096b4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80096b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80096c0:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 80096c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80096c8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80096cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80096d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80096d8:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80096dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80096e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096e8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 80096ec:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80096f0:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80096f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80096f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009700:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8009704:	edd7 7a06 	vldr	s15, [r7, #24]
 8009708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800970c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009710:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 8009714:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8009718:	edd7 7a07 	vldr	s15, [r7, #28]
 800971c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009720:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8009724:	edd7 7a05 	vldr	s15, [r7, #20]
 8009728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800972c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009730:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 8009734:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8009738:	edd7 7a05 	vldr	s15, [r7, #20]
 800973c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009740:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8009744:	edd7 7a07 	vldr	s15, [r7, #28]
 8009748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800974c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009750:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 8009754:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8009758:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800975c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009760:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009764:	edc3 7a00 	vstr	s15, [r3]
 8009768:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800976c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8009770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009774:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009778:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 800977c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8009780:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8009784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009788:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800978c:	edc3 7a00 	vstr	s15, [r3]
 8009790:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8009794:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8009798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800979c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097a0:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 80097a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097a8:	3308      	adds	r3, #8
 80097aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80097ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097b2:	3308      	adds	r3, #8
 80097b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097bc:	3308      	adds	r3, #8
 80097be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80097c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097c6:	3308      	adds	r3, #8
 80097c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80097cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097d0:	3308      	adds	r3, #8
 80097d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 80097d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097da:	3301      	adds	r3, #1
 80097dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80097e0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	f6ff ad52 	blt.w	8009290 <kf_bfly5+0xac>
    }
}
 80097ec:	bf00      	nop
 80097ee:	37ac      	adds	r7, #172	; 0xac
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <kf_bfly_generic>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b08e      	sub	sp, #56	; 0x38
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
 8009804:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800980c:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 8009814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009816:	00db      	lsls	r3, r3, #3
 8009818:	4618      	mov	r0, r3
 800981a:	f005 fefd 	bl	800f618 <malloc>
 800981e:	4603      	mov	r3, r0
 8009820:	61bb      	str	r3, [r7, #24]

    for ( u=0; u<m; ++u ) {
 8009822:	2300      	movs	r3, #0
 8009824:	637b      	str	r3, [r7, #52]	; 0x34
 8009826:	e0b4      	b.n	8009992 <kf_bfly_generic+0x19a>
        k=u;
 8009828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800982a:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800982c:	2300      	movs	r3, #0
 800982e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009830:	e013      	b.n	800985a <kf_bfly_generic+0x62>
            scratch[q1] = Fout[ k  ];
 8009832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009834:	00db      	lsls	r3, r3, #3
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	18d1      	adds	r1, r2, r3
 800983a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983c:	00db      	lsls	r3, r3, #3
 800983e:	69ba      	ldr	r2, [r7, #24]
 8009840:	4413      	add	r3, r2
 8009842:	460a      	mov	r2, r1
 8009844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009848:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 800984c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	4413      	add	r3, r2
 8009852:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8009854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009856:	3301      	adds	r3, #1
 8009858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800985a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800985c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800985e:	429a      	cmp	r2, r3
 8009860:	dbe7      	blt.n	8009832 <kf_bfly_generic+0x3a>
        }

        k=u;
 8009862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009864:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8009866:	2300      	movs	r3, #0
 8009868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800986a:	e08a      	b.n	8009982 <kf_bfly_generic+0x18a>
            int twidx=0;
 800986c:	2300      	movs	r3, #0
 800986e:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 8009870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009872:	00db      	lsls	r3, r3, #3
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	4413      	add	r3, r2
 8009878:	69ba      	ldr	r2, [r7, #24]
 800987a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800987e:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 8009882:	2301      	movs	r3, #1
 8009884:	62bb      	str	r3, [r7, #40]	; 0x28
 8009886:	e071      	b.n	800996c <kf_bfly_generic+0x174>
                twidx += fstride * k;
 8009888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988a:	68ba      	ldr	r2, [r7, #8]
 800988c:	fb02 f203 	mul.w	r2, r2, r3
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	4413      	add	r3, r2
 8009894:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 8009896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	429a      	cmp	r2, r3
 800989c:	db03      	blt.n	80098a6 <kf_bfly_generic+0xae>
 800989e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 80098a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a8:	00db      	lsls	r3, r3, #3
 80098aa:	69ba      	ldr	r2, [r7, #24]
 80098ac:	4413      	add	r3, r2
 80098ae:	ed93 7a00 	vldr	s14, [r3]
 80098b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b4:	00db      	lsls	r3, r3, #3
 80098b6:	6a3a      	ldr	r2, [r7, #32]
 80098b8:	4413      	add	r3, r2
 80098ba:	edd3 7a00 	vldr	s15, [r3]
 80098be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80098c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c4:	00db      	lsls	r3, r3, #3
 80098c6:	69ba      	ldr	r2, [r7, #24]
 80098c8:	4413      	add	r3, r2
 80098ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80098ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d0:	00db      	lsls	r3, r3, #3
 80098d2:	6a3a      	ldr	r2, [r7, #32]
 80098d4:	4413      	add	r3, r2
 80098d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80098da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80098de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098e2:	edc7 7a04 	vstr	s15, [r7, #16]
 80098e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e8:	00db      	lsls	r3, r3, #3
 80098ea:	69ba      	ldr	r2, [r7, #24]
 80098ec:	4413      	add	r3, r2
 80098ee:	ed93 7a00 	vldr	s14, [r3]
 80098f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f4:	00db      	lsls	r3, r3, #3
 80098f6:	6a3a      	ldr	r2, [r7, #32]
 80098f8:	4413      	add	r3, r2
 80098fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80098fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009904:	00db      	lsls	r3, r3, #3
 8009906:	69ba      	ldr	r2, [r7, #24]
 8009908:	4413      	add	r3, r2
 800990a:	edd3 6a01 	vldr	s13, [r3, #4]
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	00db      	lsls	r3, r3, #3
 8009912:	6a3a      	ldr	r2, [r7, #32]
 8009914:	4413      	add	r3, r2
 8009916:	edd3 7a00 	vldr	s15, [r3]
 800991a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800991e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009922:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 8009926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009928:	00db      	lsls	r3, r3, #3
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	4413      	add	r3, r2
 800992e:	ed93 7a00 	vldr	s14, [r3]
 8009932:	edd7 7a04 	vldr	s15, [r7, #16]
 8009936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009938:	00db      	lsls	r3, r3, #3
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	4413      	add	r3, r2
 800993e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009942:	edc3 7a00 	vstr	s15, [r3]
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	00db      	lsls	r3, r3, #3
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	4413      	add	r3, r2
 800994e:	ed93 7a01 	vldr	s14, [r3, #4]
 8009952:	edd7 7a05 	vldr	s15, [r7, #20]
 8009956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009958:	00db      	lsls	r3, r3, #3
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	4413      	add	r3, r2
 800995e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009962:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 8009966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009968:	3301      	adds	r3, #1
 800996a:	62bb      	str	r3, [r7, #40]	; 0x28
 800996c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800996e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009970:	429a      	cmp	r2, r3
 8009972:	db89      	blt.n	8009888 <kf_bfly_generic+0x90>
            }
            k += m;
 8009974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	4413      	add	r3, r2
 800997a:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800997c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997e:	3301      	adds	r3, #1
 8009980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009986:	429a      	cmp	r2, r3
 8009988:	f6ff af70 	blt.w	800986c <kf_bfly_generic+0x74>
    for ( u=0; u<m; ++u ) {
 800998c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800998e:	3301      	adds	r3, #1
 8009990:	637b      	str	r3, [r7, #52]	; 0x34
 8009992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	429a      	cmp	r2, r3
 8009998:	f6ff af46 	blt.w	8009828 <kf_bfly_generic+0x30>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 800999c:	69b8      	ldr	r0, [r7, #24]
 800999e:	f005 fe43 	bl	800f628 <free>
}
 80099a2:	bf00      	nop
 80099a4:	3738      	adds	r7, #56	; 0x38
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <kf_work>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b08a      	sub	sp, #40	; 0x28
 80099b0:	af02      	add	r7, sp, #8
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 80099be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c0:	1d1a      	adds	r2, r3, #4
 80099c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 80099c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ca:	1d1a      	adds	r2, r3, #4
 80099cc:	62ba      	str	r2, [r7, #40]	; 0x28
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	fb02 f303 	mul.w	r3, r2, r3
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	4413      	add	r3, r2
 80099e0:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d115      	bne.n	8009a14 <kf_work+0x68>
        do{
            *Fout = *f;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099f0:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	fb02 f303 	mul.w	r3, r2, r3
 80099fc:	00db      	lsls	r3, r3, #3
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	4413      	add	r3, r2
 8009a02:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	3308      	adds	r3, #8
 8009a08:	60fb      	str	r3, [r7, #12]
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d1ea      	bne.n	80099e8 <kf_work+0x3c>
 8009a12:	e01d      	b.n	8009a50 <kf_work+0xa4>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m, 
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	fb02 f203 	mul.w	r2, r2, r3
 8009a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1e:	9301      	str	r3, [sp, #4]
 8009a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	68b9      	ldr	r1, [r7, #8]
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f7ff ffbf 	bl	80099ac <kf_work>
            f += fstride*in_stride;
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	fb02 f303 	mul.w	r3, r2, r3
 8009a36:	00db      	lsls	r3, r3, #3
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	00db      	lsls	r3, r3, #3
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	4413      	add	r3, r2
 8009a46:	60fb      	str	r3, [r7, #12]
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d1e1      	bne.n	8009a14 <kf_work+0x68>
    }

    Fout=Fout_beg;
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	60fb      	str	r3, [r7, #12]

    // recombine the p smaller DFTs 
    switch (p) {
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	3b02      	subs	r3, #2
 8009a58:	2b03      	cmp	r3, #3
 8009a5a:	d827      	bhi.n	8009aac <kf_work+0x100>
 8009a5c:	a201      	add	r2, pc, #4	; (adr r2, 8009a64 <kf_work+0xb8>)
 8009a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a62:	bf00      	nop
 8009a64:	08009a75 	.word	0x08009a75
 8009a68:	08009a83 	.word	0x08009a83
 8009a6c:	08009a91 	.word	0x08009a91
 8009a70:	08009a9f 	.word	0x08009a9f
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a78:	6879      	ldr	r1, [r7, #4]
 8009a7a:	68f8      	ldr	r0, [r7, #12]
 8009a7c:	f7ff f820 	bl	8008ac0 <kf_bfly2>
 8009a80:	e01d      	b.n	8009abe <kf_work+0x112>
        case 3: kf_bfly3(Fout,fstride,st,m); break; 
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a86:	6879      	ldr	r1, [r7, #4]
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f7ff fa41 	bl	8008f10 <kf_bfly3>
 8009a8e:	e016      	b.n	8009abe <kf_work+0x112>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a94:	6879      	ldr	r1, [r7, #4]
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f7ff f889 	bl	8008bae <kf_bfly4>
 8009a9c:	e00f      	b.n	8009abe <kf_work+0x112>
        case 5: kf_bfly5(Fout,fstride,st,m); break; 
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009aa2:	6879      	ldr	r1, [r7, #4]
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f7ff fb9d 	bl	80091e4 <kf_bfly5>
 8009aaa:	e008      	b.n	8009abe <kf_work+0x112>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ab4:	6879      	ldr	r1, [r7, #4]
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f7ff fe9e 	bl	80097f8 <kf_bfly_generic>
 8009abc:	bf00      	nop
    }
}
 8009abe:	bf00      	nop
 8009ac0:	3720      	adds	r7, #32
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop

08009ac8 <kf_factor>:
    where 
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static 
void kf_factor(int n,int * facbuf)
{
 8009ac8:	b590      	push	{r4, r7, lr}
 8009aca:	b087      	sub	sp, #28
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
    int p=4;
 8009ad2:	2304      	movs	r3, #4
 8009ad4:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7fd f91c 	bl	8006d14 <__aeabi_i2d>
 8009adc:	4603      	mov	r3, r0
 8009ade:	460c      	mov	r4, r1
 8009ae0:	ec44 3b10 	vmov	d0, r3, r4
 8009ae4:	f009 f86c 	bl	8012bc0 <sqrt>
 8009ae8:	eeb0 7a40 	vmov.f32	s14, s0
 8009aec:	eef0 7a60 	vmov.f32	s15, s1
 8009af0:	eeb0 0a47 	vmov.f32	s0, s14
 8009af4:	eef0 0a67 	vmov.f32	s1, s15
 8009af8:	f008 f97a 	bl	8011df0 <floor>
 8009afc:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 8009b00:	e01f      	b.n	8009b42 <kf_factor+0x7a>
            switch (p) {
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d004      	beq.n	8009b12 <kf_factor+0x4a>
 8009b08:	2b04      	cmp	r3, #4
 8009b0a:	d105      	bne.n	8009b18 <kf_factor+0x50>
                case 4: p = 2; break;
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	617b      	str	r3, [r7, #20]
 8009b10:	e006      	b.n	8009b20 <kf_factor+0x58>
                case 2: p = 3; break;
 8009b12:	2303      	movs	r3, #3
 8009b14:	617b      	str	r3, [r7, #20]
 8009b16:	e003      	b.n	8009b20 <kf_factor+0x58>
                default: p += 2; break;
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	3302      	adds	r3, #2
 8009b1c:	617b      	str	r3, [r7, #20]
 8009b1e:	bf00      	nop
            }
            if (p > floor_sqrt)
 8009b20:	6978      	ldr	r0, [r7, #20]
 8009b22:	f7fd f8f7 	bl	8006d14 <__aeabi_i2d>
 8009b26:	4603      	mov	r3, r0
 8009b28:	460c      	mov	r4, r1
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	4623      	mov	r3, r4
 8009b2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b32:	f7fd fbcb 	bl	80072cc <__aeabi_dcmplt>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d100      	bne.n	8009b3e <kf_factor+0x76>
 8009b3c:	e001      	b.n	8009b42 <kf_factor+0x7a>
                p = n;          /* no more factors, skip to end */
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	617b      	str	r3, [r7, #20]
        while (n % p) {
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	697a      	ldr	r2, [r7, #20]
 8009b46:	fb93 f2f2 	sdiv	r2, r3, r2
 8009b4a:	6979      	ldr	r1, [r7, #20]
 8009b4c:	fb01 f202 	mul.w	r2, r1, r2
 8009b50:	1a9b      	subs	r3, r3, r2
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1d5      	bne.n	8009b02 <kf_factor+0x3a>
        }
        n /= p;
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8009b5e:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	1d1a      	adds	r2, r3, #4
 8009b64:	603a      	str	r2, [r7, #0]
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	1d1a      	adds	r2, r3, #4
 8009b6e:	603a      	str	r2, [r7, #0]
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	dce3      	bgt.n	8009b42 <kf_factor+0x7a>
}
 8009b7a:	bf00      	nop
 8009b7c:	371c      	adds	r7, #28
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd90      	pop	{r4, r7, pc}
 8009b82:	0000      	movs	r0, r0
 8009b84:	0000      	movs	r0, r0
	...

08009b88 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem )
{
 8009b88:	b5b0      	push	{r4, r5, r7, lr}
 8009b8a:	b08c      	sub	sp, #48	; 0x30
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
 8009b94:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 8009b96:	2300      	movs	r3, #0
 8009b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 8009b9e:	00db      	lsls	r3, r3, #3
 8009ba0:	61fb      	str	r3, [r7, #28]

    if ( lenmem==NULL ) {
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d105      	bne.n	8009bb4 <kiss_fft_alloc+0x2c>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 8009ba8:	69f8      	ldr	r0, [r7, #28]
 8009baa:	f005 fd35 	bl	800f618 <malloc>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bb2:	e00c      	b.n	8009bce <kiss_fft_alloc+0x46>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d006      	beq.n	8009bc8 <kiss_fft_alloc+0x40>
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	69fa      	ldr	r2, [r7, #28]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d801      	bhi.n	8009bc8 <kiss_fft_alloc+0x40>
            st = (kiss_fft_cfg)mem;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        *lenmem = memneeded;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	69fa      	ldr	r2, [r7, #28]
 8009bcc:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 8009bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d06a      	beq.n	8009caa <kiss_fft_alloc+0x122>
        int i;
        st->nfft=nfft;
 8009bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 8009bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	605a      	str	r2, [r3, #4]

        for (i=0;i<nfft;++i) {
 8009be0:	2300      	movs	r3, #0
 8009be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009be4:	e057      	b.n	8009c96 <kiss_fft_alloc+0x10e>
            const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 8009be6:	a434      	add	r4, pc, #208	; (adr r4, 8009cb8 <kiss_fft_alloc+0x130>)
 8009be8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009bec:	e9c7 3404 	strd	r3, r4, [r7, #16]
            double phase = -2*pi*i / nfft;
 8009bf0:	f04f 0200 	mov.w	r2, #0
 8009bf4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8009bf8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009bfc:	f7fd f8f4 	bl	8006de8 <__aeabi_dmul>
 8009c00:	4603      	mov	r3, r0
 8009c02:	460c      	mov	r4, r1
 8009c04:	4625      	mov	r5, r4
 8009c06:	461c      	mov	r4, r3
 8009c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c0a:	f7fd f883 	bl	8006d14 <__aeabi_i2d>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	460b      	mov	r3, r1
 8009c12:	4620      	mov	r0, r4
 8009c14:	4629      	mov	r1, r5
 8009c16:	f7fd f8e7 	bl	8006de8 <__aeabi_dmul>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	4625      	mov	r5, r4
 8009c20:	461c      	mov	r4, r3
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f7fd f876 	bl	8006d14 <__aeabi_i2d>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	4629      	mov	r1, r5
 8009c30:	f7fd fa04 	bl	800703c <__aeabi_ddiv>
 8009c34:	4603      	mov	r3, r0
 8009c36:	460c      	mov	r4, r1
 8009c38:	e9c7 3408 	strd	r3, r4, [r7, #32]
            if (st->inverse)
 8009c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d005      	beq.n	8009c50 <kiss_fft_alloc+0xc8>
                phase *= -1;
 8009c44:	6a3b      	ldr	r3, [r7, #32]
 8009c46:	623b      	str	r3, [r7, #32]
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009c4e:	627b      	str	r3, [r7, #36]	; 0x24
            kf_cexp(st->twiddles+i, phase );
 8009c50:	ed97 0b08 	vldr	d0, [r7, #32]
 8009c54:	f008 f888 	bl	8011d68 <cos>
 8009c58:	ec51 0b10 	vmov	r0, r1, d0
 8009c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8009c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c64:	00db      	lsls	r3, r3, #3
 8009c66:	18d4      	adds	r4, r2, r3
 8009c68:	f7fd fb96 	bl	8007398 <__aeabi_d2f>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	6023      	str	r3, [r4, #0]
 8009c70:	ed97 0b08 	vldr	d0, [r7, #32]
 8009c74:	f008 f98c 	bl	8011f90 <sin>
 8009c78:	ec51 0b10 	vmov	r0, r1, d0
 8009c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8009c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c84:	00db      	lsls	r3, r3, #3
 8009c86:	18d4      	adds	r4, r2, r3
 8009c88:	f7fd fb86 	bl	8007398 <__aeabi_d2f>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	6063      	str	r3, [r4, #4]
        for (i=0;i<nfft;++i) {
 8009c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c92:	3301      	adds	r3, #1
 8009c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	dba3      	blt.n	8009be6 <kiss_fft_alloc+0x5e>
        }

        kf_factor(nfft,st->factors);
 8009c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca0:	3308      	adds	r3, #8
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f7ff ff0f 	bl	8009ac8 <kf_factor>
    }
    return st;
 8009caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3730      	adds	r7, #48	; 0x30
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8009cb4:	f3af 8000 	nop.w
 8009cb8:	54442d18 	.word	0x54442d18
 8009cbc:	400921fb 	.word	0x400921fb

08009cc0 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b088      	sub	sp, #32
 8009cc4:	af02      	add	r7, sp, #8
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
 8009ccc:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d11e      	bne.n	8009d14 <kiss_fft_stride+0x54>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	00db      	lsls	r3, r3, #3
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f005 fc9b 	bl	800f618 <malloc>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	617b      	str	r3, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	3308      	adds	r3, #8
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	9201      	str	r2, [sp, #4]
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	68b9      	ldr	r1, [r7, #8]
 8009cf6:	6978      	ldr	r0, [r7, #20]
 8009cf8:	f7ff fe58 	bl	80099ac <kf_work>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	00db      	lsls	r3, r3, #3
 8009d02:	461a      	mov	r2, r3
 8009d04:	6979      	ldr	r1, [r7, #20]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f005 fca5 	bl	800f656 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 8009d0c:	6978      	ldr	r0, [r7, #20]
 8009d0e:	f005 fc8b 	bl	800f628 <free>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 8009d12:	e00a      	b.n	8009d2a <kiss_fft_stride+0x6a>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	3308      	adds	r3, #8
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	9201      	str	r2, [sp, #4]
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2201      	movs	r2, #1
 8009d22:	68b9      	ldr	r1, [r7, #8]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7ff fe41 	bl	80099ac <kf_work>
}
 8009d2a:	bf00      	nop
 8009d2c:	3718      	adds	r7, #24
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b084      	sub	sp, #16
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	60f8      	str	r0, [r7, #12]
 8009d3a:	60b9      	str	r1, [r7, #8]
 8009d3c:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 8009d3e:	2301      	movs	r3, #1
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	68b9      	ldr	r1, [r7, #8]
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f7ff ffbb 	bl	8009cc0 <kiss_fft_stride>
}
 8009d4a:	bf00      	nop
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	0000      	movs	r0, r0
 8009d54:	0000      	movs	r0, r0
	...

08009d58 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem)
{
 8009d58:	b5b0      	push	{r4, r5, r7, lr}
 8009d5a:	b08a      	sub	sp, #40	; 0x28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
 8009d64:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 8009d66:	2300      	movs	r3, #0
 8009d68:	623b      	str	r3, [r7, #32]
    size_t subsize, memneeded;

    if (nfft & 1) {
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d009      	beq.n	8009d88 <kiss_fftr_alloc+0x30>
        fprintf(stderr,"Real FFT optimization must be even.\n");
 8009d74:	4b5c      	ldr	r3, [pc, #368]	; (8009ee8 <kiss_fftr_alloc+0x190>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	2224      	movs	r2, #36	; 0x24
 8009d7c:	2101      	movs	r1, #1
 8009d7e:	485b      	ldr	r0, [pc, #364]	; (8009eec <kiss_fftr_alloc+0x194>)
 8009d80:	f005 fc18 	bl	800f5b4 <fwrite>
        return NULL;
 8009d84:	2300      	movs	r3, #0
 8009d86:	e0a5      	b.n	8009ed4 <kiss_fftr_alloc+0x17c>
    }
    nfft >>= 1;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	105b      	asrs	r3, r3, #1
 8009d8c:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 8009d8e:	f107 0310 	add.w	r3, r7, #16
 8009d92:	2200      	movs	r2, #0
 8009d94:	68b9      	ldr	r1, [r7, #8]
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f7ff fef6 	bl	8009b88 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	005b      	lsls	r3, r3, #1
 8009da2:	4413      	add	r3, r2
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	da00      	bge.n	8009daa <kiss_fftr_alloc+0x52>
 8009da8:	3301      	adds	r3, #1
 8009daa:	105b      	asrs	r3, r3, #1
 8009dac:	00da      	lsls	r2, r3, #3
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	4413      	add	r3, r2
 8009db2:	330c      	adds	r3, #12
 8009db4:	617b      	str	r3, [r7, #20]

    if (lenmem == NULL) {
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d105      	bne.n	8009dc8 <kiss_fftr_alloc+0x70>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 8009dbc:	6978      	ldr	r0, [r7, #20]
 8009dbe:	f005 fc2b 	bl	800f618 <malloc>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	623b      	str	r3, [r7, #32]
 8009dc6:	e009      	b.n	8009ddc <kiss_fftr_alloc+0x84>
    } else {
        if (*lenmem >= memneeded)
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	697a      	ldr	r2, [r7, #20]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d801      	bhi.n	8009dd6 <kiss_fftr_alloc+0x7e>
            st = (kiss_fftr_cfg) mem;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	623b      	str	r3, [r7, #32]
        *lenmem = memneeded;
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	697a      	ldr	r2, [r7, #20]
 8009dda:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 8009ddc:	6a3b      	ldr	r3, [r7, #32]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d101      	bne.n	8009de6 <kiss_fftr_alloc+0x8e>
        return NULL;
 8009de2:	2300      	movs	r3, #0
 8009de4:	e076      	b.n	8009ed4 <kiss_fftr_alloc+0x17c>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	f103 020c 	add.w	r2, r3, #12
 8009dec:	6a3b      	ldr	r3, [r7, #32]
 8009dee:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	441a      	add	r2, r3
 8009df8:	6a3b      	ldr	r3, [r7, #32]
 8009dfa:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	685a      	ldr	r2, [r3, #4]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	00db      	lsls	r3, r3, #3
 8009e04:	441a      	add	r2, r3
 8009e06:	6a3b      	ldr	r3, [r7, #32]
 8009e08:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 8009e0a:	6a3b      	ldr	r3, [r7, #32]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	f107 0310 	add.w	r3, r7, #16
 8009e12:	68b9      	ldr	r1, [r7, #8]
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f7ff feb7 	bl	8009b88 <kiss_fft_alloc>

    for (i = 0; i < nfft/2; ++i) {
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e1e:	e04f      	b.n	8009ec0 <kiss_fftr_alloc+0x168>
        double phase =
            -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e22:	3301      	adds	r3, #1
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fc ff75 	bl	8006d14 <__aeabi_i2d>
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	460d      	mov	r5, r1
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f7fc ff70 	bl	8006d14 <__aeabi_i2d>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	4620      	mov	r0, r4
 8009e3a:	4629      	mov	r1, r5
 8009e3c:	f7fd f8fe 	bl	800703c <__aeabi_ddiv>
 8009e40:	4603      	mov	r3, r0
 8009e42:	460c      	mov	r4, r1
 8009e44:	4618      	mov	r0, r3
 8009e46:	4621      	mov	r1, r4
 8009e48:	f04f 0200 	mov.w	r2, #0
 8009e4c:	4b28      	ldr	r3, [pc, #160]	; (8009ef0 <kiss_fftr_alloc+0x198>)
 8009e4e:	f7fc fe15 	bl	8006a7c <__adddf3>
 8009e52:	4603      	mov	r3, r0
 8009e54:	460c      	mov	r4, r1
 8009e56:	4618      	mov	r0, r3
 8009e58:	4621      	mov	r1, r4
        double phase =
 8009e5a:	a321      	add	r3, pc, #132	; (adr r3, 8009ee0 <kiss_fftr_alloc+0x188>)
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	f7fc ffc2 	bl	8006de8 <__aeabi_dmul>
 8009e64:	4603      	mov	r3, r0
 8009e66:	460c      	mov	r4, r1
 8009e68:	e9c7 3406 	strd	r3, r4, [r7, #24]
        if (inverse_fft)
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d005      	beq.n	8009e7e <kiss_fftr_alloc+0x126>
            phase *= -1;
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	61bb      	str	r3, [r7, #24]
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009e7c:	61fb      	str	r3, [r7, #28]
        kf_cexp (st->super_twiddles+i,phase);
 8009e7e:	ed97 0b06 	vldr	d0, [r7, #24]
 8009e82:	f007 ff71 	bl	8011d68 <cos>
 8009e86:	ec51 0b10 	vmov	r0, r1, d0
 8009e8a:	6a3b      	ldr	r3, [r7, #32]
 8009e8c:	689a      	ldr	r2, [r3, #8]
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e90:	00db      	lsls	r3, r3, #3
 8009e92:	18d4      	adds	r4, r2, r3
 8009e94:	f7fd fa80 	bl	8007398 <__aeabi_d2f>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	6023      	str	r3, [r4, #0]
 8009e9c:	ed97 0b06 	vldr	d0, [r7, #24]
 8009ea0:	f008 f876 	bl	8011f90 <sin>
 8009ea4:	ec51 0b10 	vmov	r0, r1, d0
 8009ea8:	6a3b      	ldr	r3, [r7, #32]
 8009eaa:	689a      	ldr	r2, [r3, #8]
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	00db      	lsls	r3, r3, #3
 8009eb0:	18d4      	adds	r4, r2, r3
 8009eb2:	f7fd fa71 	bl	8007398 <__aeabi_d2f>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	6063      	str	r3, [r4, #4]
    for (i = 0; i < nfft/2; ++i) {
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	da00      	bge.n	8009ec8 <kiss_fftr_alloc+0x170>
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	105b      	asrs	r3, r3, #1
 8009eca:	461a      	mov	r2, r3
 8009ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	dba6      	blt.n	8009e20 <kiss_fftr_alloc+0xc8>
    }
    return st;
 8009ed2:	6a3b      	ldr	r3, [r7, #32]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3728      	adds	r7, #40	; 0x28
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bdb0      	pop	{r4, r5, r7, pc}
 8009edc:	f3af 8000 	nop.w
 8009ee0:	54442d18 	.word	0x54442d18
 8009ee4:	c00921fb 	.word	0xc00921fb
 8009ee8:	20000d24 	.word	0x20000d24
 8009eec:	08016898 	.word	0x08016898
 8009ef0:	3fe00000 	.word	0x3fe00000

08009ef4 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b092      	sub	sp, #72	; 0x48
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00a      	beq.n	8009f20 <kiss_fftr+0x2c>
        fprintf(stderr,"kiss fft usage error: improper alloc\n");
 8009f0a:	4b8c      	ldr	r3, [pc, #560]	; (800a13c <kiss_fftr+0x248>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	2225      	movs	r2, #37	; 0x25
 8009f12:	2101      	movs	r1, #1
 8009f14:	488a      	ldr	r0, [pc, #552]	; (800a140 <kiss_fftr+0x24c>)
 8009f16:	f005 fb4d 	bl	800f5b4 <fwrite>
        exit(1);
 8009f1a:	2001      	movs	r0, #1
 8009f1c:	f005 fae8 	bl	800f4f0 <exit>
    }

    ncfft = st->substate->nfft;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6818      	ldr	r0, [r3, #0]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	461a      	mov	r2, r3
 8009f32:	68b9      	ldr	r1, [r7, #8]
 8009f34:	f7ff fefd 	bl	8009d32 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1... 
     *      yielding Nyquist bin of input time sequence
     */
 
    tdc.r = st->tmpbuf[0].r;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 8009f48:	ed97 7a04 	vldr	s14, [r7, #16]
 8009f4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 8009f5a:	ed97 7a04 	vldr	s14, [r7, #16]
 8009f5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f64:	00db      	lsls	r3, r3, #3
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	4413      	add	r3, r2
 8009f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f6e:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD    
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f04f 0200 	mov.w	r2, #0
 8009f78:	605a      	str	r2, [r3, #4]
 8009f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f7c:	00db      	lsls	r3, r3, #3
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	4413      	add	r3, r2
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	6852      	ldr	r2, [r2, #4]
 8009f86:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 8009f88:	2301      	movs	r3, #1
 8009f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8009f8c:	e0c7      	b.n	800a11e <kiss_fftr+0x22a>
        fpk    = st->tmpbuf[k]; 
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	685a      	ldr	r2, [r3, #4]
 8009f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f94:	00db      	lsls	r3, r3, #3
 8009f96:	441a      	add	r2, r3
 8009f98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009fa0:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fac:	1acb      	subs	r3, r1, r3
 8009fae:	00db      	lsls	r3, r3, #3
 8009fb0:	4413      	add	r3, r2
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	685a      	ldr	r2, [r3, #4]
 8009fba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fbe:	1acb      	subs	r3, r1, r3
 8009fc0:	00db      	lsls	r3, r3, #3
 8009fc2:	4413      	add	r3, r2
 8009fc4:	edd3 7a01 	vldr	s15, [r3, #4]
 8009fc8:	eef1 7a67 	vneg.f32	s15, s15
 8009fcc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 8009fd0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009fd4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fdc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8009fe0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009fe4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fec:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 8009ff0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009ff4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ffc:	edc7 7a08 	vstr	s15, [r7, #32]
 800a000:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a004:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a00c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 800a010:	ed97 7a08 	vldr	s14, [r7, #32]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	689a      	ldr	r2, [r3, #8]
 800a018:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a01a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a01e:	440b      	add	r3, r1
 800a020:	00db      	lsls	r3, r3, #3
 800a022:	4413      	add	r3, r2
 800a024:	edd3 7a00 	vldr	s15, [r3]
 800a028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a02c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	689a      	ldr	r2, [r3, #8]
 800a034:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a036:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a03a:	440b      	add	r3, r1
 800a03c:	00db      	lsls	r3, r3, #3
 800a03e:	4413      	add	r3, r2
 800a040:	edd3 7a01 	vldr	s15, [r3, #4]
 800a044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a04c:	edc7 7a06 	vstr	s15, [r7, #24]
 800a050:	ed97 7a08 	vldr	s14, [r7, #32]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	689a      	ldr	r2, [r3, #8]
 800a058:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a05a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a05e:	440b      	add	r3, r1
 800a060:	00db      	lsls	r3, r3, #3
 800a062:	4413      	add	r3, r2
 800a064:	edd3 7a01 	vldr	s15, [r3, #4]
 800a068:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a06c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	689a      	ldr	r2, [r3, #8]
 800a074:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a076:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a07a:	440b      	add	r3, r1
 800a07c:	00db      	lsls	r3, r3, #3
 800a07e:	4413      	add	r3, r2
 800a080:	edd3 7a00 	vldr	s15, [r3]
 800a084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a08c:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 800a090:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a094:	edd7 7a06 	vldr	s15, [r7, #24]
 800a098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a09c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a09e:	00db      	lsls	r3, r3, #3
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a0a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0ac:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 800a0b0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a0b4:	edd7 7a07 	vldr	s15, [r7, #28]
 800a0b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0be:	00db      	lsls	r3, r3, #3
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a0c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0cc:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 800a0d0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a0d4:	edd7 7a06 	vldr	s15, [r7, #24]
 800a0d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	00db      	lsls	r3, r3, #3
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a0ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0f0:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 800a0f4:	ed97 7a07 	vldr	s14, [r7, #28]
 800a0f8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a0fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a100:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a104:	1ad3      	subs	r3, r2, r3
 800a106:	00db      	lsls	r3, r3, #3
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	4413      	add	r3, r2
 800a10c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a110:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a114:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 800a118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a11a:	3301      	adds	r3, #1
 800a11c:	647b      	str	r3, [r7, #68]	; 0x44
 800a11e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a120:	2b00      	cmp	r3, #0
 800a122:	da00      	bge.n	800a126 <kiss_fftr+0x232>
 800a124:	3301      	adds	r3, #1
 800a126:	105b      	asrs	r3, r3, #1
 800a128:	461a      	mov	r2, r3
 800a12a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a12c:	4293      	cmp	r3, r2
 800a12e:	f77f af2e 	ble.w	8009f8e <kiss_fftr+0x9a>
    }
}
 800a132:	bf00      	nop
 800a134:	3748      	adds	r7, #72	; 0x48
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	20000d24 	.word	0x20000d24
 800a140:	080168c0 	.word	0x080168c0

0800a144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a146:	f6ad 1d44 	subw	sp, sp, #2372	; 0x944
 800a14a:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN 1 */
	//uint32_t startTime = 0;
	//uint32_t finishTime = 0;
	csf_float* MFCC = NULL;
 800a14c:	2300      	movs	r3, #0
 800a14e:	f8c7 38d0 	str.w	r3, [r7, #2256]	; 0x8d0
	int mfcc_d1 = 0;
 800a152:	2300      	movs	r3, #0
 800a154:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
	int mfcc_d2 = 0;
 800a158:	2300      	movs	r3, #0
 800a15a:	f8c7 38c8 	str.w	r3, [r7, #2248]	; 0x8c8
	csf_float winFunc[400] = {0.0};
 800a15e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a162:	4618      	mov	r0, r3
 800a164:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800a168:	461a      	mov	r2, r3
 800a16a:	2100      	movs	r1, #0
 800a16c:	f005 fa7e 	bl	800f66c <memset>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a170:	f001 f97d 	bl	800b46e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a174:	f000 fb90 	bl	800a898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a178:	f000 fd26 	bl	800abc8 <MX_GPIO_Init>
  MX_ETH_Init();
 800a17c:	f000 fc96 	bl	800aaac <MX_ETH_Init>
  MX_USART3_UART_Init();
 800a180:	f000 fcd4 	bl	800ab2c <MX_USART3_UART_Init>
  //MX_USB_OTG_FS_PCD_Init();
  MX_DMA_Init();
 800a184:	f000 fd02 	bl	800ab8c <MX_DMA_Init>
  MX_ADC1_Init();
 800a188:	f000 fc1c 	bl	800a9c4 <MX_ADC1_Init>
  MX_CRC_Init();
 800a18c:	f000 fc6c 	bl	800aa68 <MX_CRC_Init>
  //MX_TIM3_Init();
  MX_X_CUBE_AI_Init();
 800a190:	f004 ff72 	bl	800f078 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_SIZE);
 800a194:	2271      	movs	r2, #113	; 0x71
 800a196:	49cd      	ldr	r1, [pc, #820]	; (800a4cc <main+0x388>)
 800a198:	48cd      	ldr	r0, [pc, #820]	; (800a4d0 <main+0x38c>)
 800a19a:	f001 fa2b 	bl	800b5f4 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Print to serial------------------------//
	  strcpy(stringBuffer, "Recording..\r\n");
 800a19e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a1a2:	4acc      	ldr	r2, [pc, #816]	; (800a4d4 <main+0x390>)
 800a1a4:	461c      	mov	r4, r3
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a1aa:	c407      	stmia	r4!, {r0, r1, r2}
 800a1ac:	8023      	strh	r3, [r4, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*)stringBuffer, strlen(stringBuffer), HAL_MAX_DELAY);
 800a1ae:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7fc fbfd 	bl	80069b2 <strlen>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800a1c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a1c4:	48c4      	ldr	r0, [pc, #784]	; (800a4d8 <main+0x394>)
 800a1c6:	f004 fa69 	bl	800e69c <HAL_UART_Transmit>
	  //----------------------------------------//


	  // Gather signal, from ADC readings-----------------//
	  for (uint16_t i = 0; i < BIG_BUFFER_SIZE; i++){
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	f8a7 3916 	strh.w	r3, [r7, #2326]	; 0x916
 800a1d0:	e015      	b.n	800a1fe <main+0xba>
		  while (TakeADCReading == 0){
 800a1d2:	bf00      	nop
 800a1d4:	4bc1      	ldr	r3, [pc, #772]	; (800a4dc <main+0x398>)
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d0fb      	beq.n	800a1d4 <main+0x90>
			  // Do Nothing
			  // Wait to take a further ADC Reading
		  }
		  TakeADCReading = 0;
 800a1dc:	4bbf      	ldr	r3, [pc, #764]	; (800a4dc <main+0x398>)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	701a      	strb	r2, [r3, #0]
		  BigBuffer[i] = adc_buf[112];
 800a1e2:	4bba      	ldr	r3, [pc, #744]	; (800a4cc <main+0x388>)
 800a1e4:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	; 0xe0
 800a1e8:	f8b7 3916 	ldrh.w	r3, [r7, #2326]	; 0x916
 800a1ec:	b211      	sxth	r1, r2
 800a1ee:	4abc      	ldr	r2, [pc, #752]	; (800a4e0 <main+0x39c>)
 800a1f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for (uint16_t i = 0; i < BIG_BUFFER_SIZE; i++){
 800a1f4:	f8b7 3916 	ldrh.w	r3, [r7, #2326]	; 0x916
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	f8a7 3916 	strh.w	r3, [r7, #2326]	; 0x916
 800a1fe:	f8b7 3916 	ldrh.w	r3, [r7, #2326]	; 0x916
 800a202:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 800a206:	d3e4      	bcc.n	800a1d2 <main+0x8e>
	  }
	  //--------------------------------------------------//


	  // Print to serial---------------------------//
	  strcpy(stringBuffer, "Recorded\r\n");
 800a208:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a20c:	4ab5      	ldr	r2, [pc, #724]	; (800a4e4 <main+0x3a0>)
 800a20e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a210:	c303      	stmia	r3!, {r0, r1}
 800a212:	801a      	strh	r2, [r3, #0]
 800a214:	3302      	adds	r3, #2
 800a216:	0c12      	lsrs	r2, r2, #16
 800a218:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*)stringBuffer, strlen(stringBuffer), HAL_MAX_DELAY);
 800a21a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a21e:	4618      	mov	r0, r3
 800a220:	f7fc fbc7 	bl	80069b2 <strlen>
 800a224:	4603      	mov	r3, r0
 800a226:	b29a      	uxth	r2, r3
 800a228:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800a22c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a230:	48a9      	ldr	r0, [pc, #676]	; (800a4d8 <main+0x394>)
 800a232:	f004 fa33 	bl	800e69c <HAL_UART_Transmit>
	  //------------------------------------------//


	  // Check Signal, from ADC, print to serial-----------------------------//
	  strcpy(stringBuffer, "Printing: \r\n");
 800a236:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a23a:	4aab      	ldr	r2, [pc, #684]	; (800a4e8 <main+0x3a4>)
 800a23c:	461c      	mov	r4, r3
 800a23e:	4613      	mov	r3, r2
 800a240:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a242:	c407      	stmia	r4!, {r0, r1, r2}
 800a244:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*)stringBuffer, strlen(stringBuffer), HAL_MAX_DELAY);
 800a246:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fc fbb1 	bl	80069b2 <strlen>
 800a250:	4603      	mov	r3, r0
 800a252:	b29a      	uxth	r2, r3
 800a254:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800a258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a25c:	489e      	ldr	r0, [pc, #632]	; (800a4d8 <main+0x394>)
 800a25e:	f004 fa1d 	bl	800e69c <HAL_UART_Transmit>

	  for (int i = 0; i < (BIG_BUFFER_SIZE/8); i++){
 800a262:	2300      	movs	r3, #0
 800a264:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 800a268:	e05e      	b.n	800a328 <main+0x1e4>
		  sprintf(stringBuffer, "%i, %i, %i, %i, %i, %i, %i, %i,\r\n", BigBuffer[i*8],
 800a26a:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800a26e:	00db      	lsls	r3, r3, #3
 800a270:	4a9b      	ldr	r2, [pc, #620]	; (800a4e0 <main+0x39c>)
 800a272:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a276:	469c      	mov	ip, r3
				  BigBuffer[i*8+1], BigBuffer[i*8+2], BigBuffer[i*8+3], BigBuffer[i*8+4],
 800a278:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800a27c:	00db      	lsls	r3, r3, #3
 800a27e:	3301      	adds	r3, #1
 800a280:	4a97      	ldr	r2, [pc, #604]	; (800a4e0 <main+0x39c>)
 800a282:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
		  sprintf(stringBuffer, "%i, %i, %i, %i, %i, %i, %i, %i,\r\n", BigBuffer[i*8],
 800a286:	469e      	mov	lr, r3
				  BigBuffer[i*8+1], BigBuffer[i*8+2], BigBuffer[i*8+3], BigBuffer[i*8+4],
 800a288:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800a28c:	00db      	lsls	r3, r3, #3
 800a28e:	3302      	adds	r3, #2
 800a290:	4a93      	ldr	r2, [pc, #588]	; (800a4e0 <main+0x39c>)
 800a292:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
		  sprintf(stringBuffer, "%i, %i, %i, %i, %i, %i, %i, %i,\r\n", BigBuffer[i*8],
 800a296:	4619      	mov	r1, r3
				  BigBuffer[i*8+1], BigBuffer[i*8+2], BigBuffer[i*8+3], BigBuffer[i*8+4],
 800a298:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800a29c:	00db      	lsls	r3, r3, #3
 800a29e:	3303      	adds	r3, #3
 800a2a0:	4a8f      	ldr	r2, [pc, #572]	; (800a4e0 <main+0x39c>)
 800a2a2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
		  sprintf(stringBuffer, "%i, %i, %i, %i, %i, %i, %i, %i,\r\n", BigBuffer[i*8],
 800a2a6:	461c      	mov	r4, r3
				  BigBuffer[i*8+1], BigBuffer[i*8+2], BigBuffer[i*8+3], BigBuffer[i*8+4],
 800a2a8:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800a2ac:	00db      	lsls	r3, r3, #3
 800a2ae:	3304      	adds	r3, #4
 800a2b0:	4a8b      	ldr	r2, [pc, #556]	; (800a4e0 <main+0x39c>)
 800a2b2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
		  sprintf(stringBuffer, "%i, %i, %i, %i, %i, %i, %i, %i,\r\n", BigBuffer[i*8],
 800a2b6:	461d      	mov	r5, r3
	  			  BigBuffer[i*8+5], BigBuffer[i*8+6], BigBuffer[i*8+7]);
 800a2b8:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800a2bc:	00db      	lsls	r3, r3, #3
 800a2be:	3305      	adds	r3, #5
 800a2c0:	4a87      	ldr	r2, [pc, #540]	; (800a4e0 <main+0x39c>)
 800a2c2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
		  sprintf(stringBuffer, "%i, %i, %i, %i, %i, %i, %i, %i,\r\n", BigBuffer[i*8],
 800a2c6:	461e      	mov	r6, r3
	  			  BigBuffer[i*8+5], BigBuffer[i*8+6], BigBuffer[i*8+7]);
 800a2c8:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800a2cc:	00db      	lsls	r3, r3, #3
 800a2ce:	3306      	adds	r3, #6
 800a2d0:	4a83      	ldr	r2, [pc, #524]	; (800a4e0 <main+0x39c>)
 800a2d2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
		  sprintf(stringBuffer, "%i, %i, %i, %i, %i, %i, %i, %i,\r\n", BigBuffer[i*8],
 800a2d6:	607b      	str	r3, [r7, #4]
	  			  BigBuffer[i*8+5], BigBuffer[i*8+6], BigBuffer[i*8+7]);
 800a2d8:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800a2dc:	00db      	lsls	r3, r3, #3
 800a2de:	3307      	adds	r3, #7
 800a2e0:	4a7f      	ldr	r2, [pc, #508]	; (800a4e0 <main+0x39c>)
 800a2e2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
		  sprintf(stringBuffer, "%i, %i, %i, %i, %i, %i, %i, %i,\r\n", BigBuffer[i*8],
 800a2e6:	f507 70f8 	add.w	r0, r7, #496	; 0x1f0
 800a2ea:	9305      	str	r3, [sp, #20]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	9304      	str	r3, [sp, #16]
 800a2f0:	9603      	str	r6, [sp, #12]
 800a2f2:	9502      	str	r5, [sp, #8]
 800a2f4:	9401      	str	r4, [sp, #4]
 800a2f6:	9100      	str	r1, [sp, #0]
 800a2f8:	4673      	mov	r3, lr
 800a2fa:	4662      	mov	r2, ip
 800a2fc:	497b      	ldr	r1, [pc, #492]	; (800a4ec <main+0x3a8>)
 800a2fe:	f005 fedf 	bl	80100c0 <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*)stringBuffer, strlen(stringBuffer), HAL_MAX_DELAY);
 800a302:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a306:	4618      	mov	r0, r3
 800a308:	f7fc fb53 	bl	80069b2 <strlen>
 800a30c:	4603      	mov	r3, r0
 800a30e:	b29a      	uxth	r2, r3
 800a310:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800a314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a318:	486f      	ldr	r0, [pc, #444]	; (800a4d8 <main+0x394>)
 800a31a:	f004 f9bf 	bl	800e69c <HAL_UART_Transmit>
	  for (int i = 0; i < (BIG_BUFFER_SIZE/8); i++){
 800a31e:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800a322:	3301      	adds	r3, #1
 800a324:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 800a328:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800a32c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800a330:	db9b      	blt.n	800a26a <main+0x126>
	  }

	  strcpy(stringBuffer, "Printed \r\n");
 800a332:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a336:	4a6e      	ldr	r2, [pc, #440]	; (800a4f0 <main+0x3ac>)
 800a338:	ca07      	ldmia	r2, {r0, r1, r2}
 800a33a:	c303      	stmia	r3!, {r0, r1}
 800a33c:	801a      	strh	r2, [r3, #0]
 800a33e:	3302      	adds	r3, #2
 800a340:	0c12      	lsrs	r2, r2, #16
 800a342:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*)stringBuffer, strlen(stringBuffer), HAL_MAX_DELAY);
 800a344:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a348:	4618      	mov	r0, r3
 800a34a:	f7fc fb32 	bl	80069b2 <strlen>
 800a34e:	4603      	mov	r3, r0
 800a350:	b29a      	uxth	r2, r3
 800a352:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800a356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a35a:	485f      	ldr	r0, [pc, #380]	; (800a4d8 <main+0x394>)
 800a35c:	f004 f99e 	bl	800e69c <HAL_UART_Transmit>
	  //---------------------------------------------------------------------//


	  // Isolate peak----------------------------//
	  // Get maximum/peak value and Index
	  int16_t maxValue = 0;
 800a360:	2300      	movs	r3, #0
 800a362:	f8a7 390e 	strh.w	r3, [r7, #2318]	; 0x90e
	  int16_t maxValueIndex = 0;
 800a366:	2300      	movs	r3, #0
 800a368:	f8a7 390c 	strh.w	r3, [r7, #2316]	; 0x90c
	  int16_t samplesBefore = (int16_t) (0.03*SAMPLE_RATE);
 800a36c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800a370:	f8a7 38de 	strh.w	r3, [r7, #2270]	; 0x8de
	  int16_t samplesAfter = (int16_t) (0.07*SAMPLE_RATE);
 800a374:	f44f 638c 	mov.w	r3, #1120	; 0x460
 800a378:	f8a7 38dc 	strh.w	r3, [r7, #2268]	; 0x8dc
	  for (int i = 0; i < (BIG_BUFFER_SIZE); i++){
 800a37c:	2300      	movs	r3, #0
 800a37e:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 800a382:	e026      	b.n	800a3d2 <main+0x28e>
	  		  if (BigBuffer[i] > maxValue){
 800a384:	4a56      	ldr	r2, [pc, #344]	; (800a4e0 <main+0x39c>)
 800a386:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 800a38a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a38e:	f9b7 290e 	ldrsh.w	r2, [r7, #2318]	; 0x90e
 800a392:	429a      	cmp	r2, r3
 800a394:	da18      	bge.n	800a3c8 <main+0x284>
	  			  if (i < samplesBefore){
 800a396:	f9b7 38de 	ldrsh.w	r3, [r7, #2270]	; 0x8de
 800a39a:	f8d7 2908 	ldr.w	r2, [r7, #2312]	; 0x908
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	db12      	blt.n	800a3c8 <main+0x284>
	  				  // Don't set maximum
	  			  }
	  			  else if (i > BIG_BUFFER_SIZE - samplesAfter){
 800a3a2:	f9b7 38dc 	ldrsh.w	r3, [r7, #2268]	; 0x8dc
 800a3a6:	f5c3 437a 	rsb	r3, r3, #64000	; 0xfa00
 800a3aa:	f8d7 2908 	ldr.w	r2, [r7, #2312]	; 0x908
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	dc0a      	bgt.n	800a3c8 <main+0x284>
	  				  // Don't set maximum
	  			  }
	  			  else {
					  maxValue = BigBuffer[i];
 800a3b2:	4a4b      	ldr	r2, [pc, #300]	; (800a4e0 <main+0x39c>)
 800a3b4:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 800a3b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3bc:	f8a7 390e 	strh.w	r3, [r7, #2318]	; 0x90e
					  maxValueIndex = i;
 800a3c0:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 800a3c4:	f8a7 390c 	strh.w	r3, [r7, #2316]	; 0x90c
	  for (int i = 0; i < (BIG_BUFFER_SIZE); i++){
 800a3c8:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 800a3d2:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 800a3d6:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 800a3da:	dbd3      	blt.n	800a384 <main+0x240>
	  			  }
	  		  }
	  }
	  sprintf(stringBuffer, "MaxValueIndex: %u\r\n", maxValueIndex);
 800a3dc:	f9b7 290c 	ldrsh.w	r2, [r7, #2316]	; 0x90c
 800a3e0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a3e4:	4943      	ldr	r1, [pc, #268]	; (800a4f4 <main+0x3b0>)
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f005 fe6a 	bl	80100c0 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)stringBuffer, strlen(stringBuffer), HAL_MAX_DELAY);
 800a3ec:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fc fade 	bl	80069b2 <strlen>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800a3fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a402:	4835      	ldr	r0, [pc, #212]	; (800a4d8 <main+0x394>)
 800a404:	f004 f94a 	bl	800e69c <HAL_UART_Transmit>


	  // Isolate 0.1 seconds around peak
	  // Take 0.03 seconds before peak and 0.07 seconds after
	  int16_t peakStartIndex = maxValueIndex - samplesBefore;
 800a408:	f8b7 290c 	ldrh.w	r2, [r7, #2316]	; 0x90c
 800a40c:	f8b7 38de 	ldrh.w	r3, [r7, #2270]	; 0x8de
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	b29b      	uxth	r3, r3
 800a414:	f8a7 38da 	strh.w	r3, [r7, #2266]	; 0x8da
	  int16_t peakEndIndex = maxValueIndex + samplesAfter;
 800a418:	f8b7 290c 	ldrh.w	r2, [r7, #2316]	; 0x90c
 800a41c:	f8b7 38dc 	ldrh.w	r3, [r7, #2268]	; 0x8dc
 800a420:	4413      	add	r3, r2
 800a422:	b29b      	uxth	r3, r3
 800a424:	f8a7 38d8 	strh.w	r3, [r7, #2264]	; 0x8d8

	  sprintf(stringBuffer, "peakStartIndex: %u\r\n", peakStartIndex);
 800a428:	f9b7 28da 	ldrsh.w	r2, [r7, #2266]	; 0x8da
 800a42c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a430:	4931      	ldr	r1, [pc, #196]	; (800a4f8 <main+0x3b4>)
 800a432:	4618      	mov	r0, r3
 800a434:	f005 fe44 	bl	80100c0 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)stringBuffer, strlen(stringBuffer), HAL_MAX_DELAY);
 800a438:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fc fab8 	bl	80069b2 <strlen>
 800a442:	4603      	mov	r3, r0
 800a444:	b29a      	uxth	r2, r3
 800a446:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800a44a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a44e:	4822      	ldr	r0, [pc, #136]	; (800a4d8 <main+0x394>)
 800a450:	f004 f924 	bl	800e69c <HAL_UART_Transmit>

	  sprintf(stringBuffer, "peakEndIndex: %u\r\n", peakEndIndex);
 800a454:	f9b7 28d8 	ldrsh.w	r2, [r7, #2264]	; 0x8d8
 800a458:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a45c:	4927      	ldr	r1, [pc, #156]	; (800a4fc <main+0x3b8>)
 800a45e:	4618      	mov	r0, r3
 800a460:	f005 fe2e 	bl	80100c0 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)stringBuffer, strlen(stringBuffer), HAL_MAX_DELAY);
 800a464:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a468:	4618      	mov	r0, r3
 800a46a:	f7fc faa2 	bl	80069b2 <strlen>
 800a46e:	4603      	mov	r3, r0
 800a470:	b29a      	uxth	r2, r3
 800a472:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800a476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a47a:	4817      	ldr	r0, [pc, #92]	; (800a4d8 <main+0x394>)
 800a47c:	f004 f90e 	bl	800e69c <HAL_UART_Transmit>


	  // Fill 0.1 second window
	  for (int16_t i = 0; (i + peakStartIndex) < peakEndIndex; i++){
 800a480:	2300      	movs	r3, #0
 800a482:	f8a7 3906 	strh.w	r3, [r7, #2310]	; 0x906
 800a486:	e013      	b.n	800a4b0 <main+0x36c>
		  LittleBuffer[i] = BigBuffer[i + peakStartIndex];
 800a488:	f9b7 2906 	ldrsh.w	r2, [r7, #2310]	; 0x906
 800a48c:	f9b7 38da 	ldrsh.w	r3, [r7, #2266]	; 0x8da
 800a490:	441a      	add	r2, r3
 800a492:	f9b7 3906 	ldrsh.w	r3, [r7, #2310]	; 0x906
 800a496:	4912      	ldr	r1, [pc, #72]	; (800a4e0 <main+0x39c>)
 800a498:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800a49c:	4a18      	ldr	r2, [pc, #96]	; (800a500 <main+0x3bc>)
 800a49e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for (int16_t i = 0; (i + peakStartIndex) < peakEndIndex; i++){
 800a4a2:	f9b7 3906 	ldrsh.w	r3, [r7, #2310]	; 0x906
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	f8a7 3906 	strh.w	r3, [r7, #2310]	; 0x906
 800a4b0:	f9b7 2906 	ldrsh.w	r2, [r7, #2310]	; 0x906
 800a4b4:	f9b7 38da 	ldrsh.w	r3, [r7, #2266]	; 0x8da
 800a4b8:	441a      	add	r2, r3
 800a4ba:	f9b7 38d8 	ldrsh.w	r3, [r7, #2264]	; 0x8d8
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	dbe2      	blt.n	800a488 <main+0x344>
	  }*/
	  //-----------------------------------------------------------//


	  // Calculate window function, for use in mfcc function-----------//
	  for (int i = 0; i < 400; i++){
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
 800a4c8:	e02a      	b.n	800a520 <main+0x3dc>
 800a4ca:	bf00      	nop
 800a4cc:	2002e218 	.word	0x2002e218
 800a4d0:	2002e170 	.word	0x2002e170
 800a4d4:	080168e8 	.word	0x080168e8
 800a4d8:	2000e8c8 	.word	0x2000e8c8
 800a4dc:	20000f14 	.word	0x20000f14
 800a4e0:	2000e948 	.word	0x2000e948
 800a4e4:	080168f8 	.word	0x080168f8
 800a4e8:	08016904 	.word	0x08016904
 800a4ec:	08016914 	.word	0x08016914
 800a4f0:	08016938 	.word	0x08016938
 800a4f4:	08016944 	.word	0x08016944
 800a4f8:	08016958 	.word	0x08016958
 800a4fc:	08016970 	.word	0x08016970
 800a500:	2002e2fc 	.word	0x2002e2fc
		  winFunc[i] = 1.0;
 800a504:	f507 7222 	add.w	r2, r7, #648	; 0x288
 800a508:	f8d7 3900 	ldr.w	r3, [r7, #2304]	; 0x900
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	4413      	add	r3, r2
 800a510:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a514:	601a      	str	r2, [r3, #0]
	  for (int i = 0; i < 400; i++){
 800a516:	f8d7 3900 	ldr.w	r3, [r7, #2304]	; 0x900
 800a51a:	3301      	adds	r3, #1
 800a51c:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
 800a520:	f8d7 3900 	ldr.w	r3, [r7, #2304]	; 0x900
 800a524:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a528:	dbec      	blt.n	800a504 <main+0x3c0>
	  //---------------------------------------------------------------//


	  // Normalization signal before mfcc--------------//
	  // Get minimum value
	  int16_t minValue = MAX_UINT12;
 800a52a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800a52e:	f8a7 38fe 	strh.w	r3, [r7, #2302]	; 0x8fe
	  for (int i = 0; i < LITTLE_BUFFER_SIZE; i++){
 800a532:	2300      	movs	r3, #0
 800a534:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
 800a538:	e014      	b.n	800a564 <main+0x420>
		  if (LittleBuffer[i] < minValue){
 800a53a:	4ab3      	ldr	r2, [pc, #716]	; (800a808 <main+0x6c4>)
 800a53c:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 800a540:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a544:	f9b7 28fe 	ldrsh.w	r2, [r7, #2302]	; 0x8fe
 800a548:	429a      	cmp	r2, r3
 800a54a:	dd06      	ble.n	800a55a <main+0x416>
			  minValue = LittleBuffer[i];
 800a54c:	4aae      	ldr	r2, [pc, #696]	; (800a808 <main+0x6c4>)
 800a54e:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 800a552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a556:	f8a7 38fe 	strh.w	r3, [r7, #2302]	; 0x8fe
	  for (int i = 0; i < LITTLE_BUFFER_SIZE; i++){
 800a55a:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 800a55e:	3301      	adds	r3, #1
 800a560:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
 800a564:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 800a568:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a56c:	dbe5      	blt.n	800a53a <main+0x3f6>
		  }
	  }

	  sprintf(stringBuffer, "MaxValue = %u\r\n", maxValue);
 800a56e:	f9b7 290e 	ldrsh.w	r2, [r7, #2318]	; 0x90e
 800a572:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a576:	49a5      	ldr	r1, [pc, #660]	; (800a80c <main+0x6c8>)
 800a578:	4618      	mov	r0, r3
 800a57a:	f005 fda1 	bl	80100c0 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)stringBuffer, strlen(stringBuffer), HAL_MAX_DELAY);
 800a57e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a582:	4618      	mov	r0, r3
 800a584:	f7fc fa15 	bl	80069b2 <strlen>
 800a588:	4603      	mov	r3, r0
 800a58a:	b29a      	uxth	r2, r3
 800a58c:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800a590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a594:	489e      	ldr	r0, [pc, #632]	; (800a810 <main+0x6cc>)
 800a596:	f004 f881 	bl	800e69c <HAL_UART_Transmit>
	  sprintf(stringBuffer, "MinValue = %u\r\n", minValue);
 800a59a:	f9b7 28fe 	ldrsh.w	r2, [r7, #2302]	; 0x8fe
 800a59e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a5a2:	499c      	ldr	r1, [pc, #624]	; (800a814 <main+0x6d0>)
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f005 fd8b 	bl	80100c0 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)stringBuffer, strlen(stringBuffer), HAL_MAX_DELAY);
 800a5aa:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fc f9ff 	bl	80069b2 <strlen>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800a5bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5c0:	4893      	ldr	r0, [pc, #588]	; (800a810 <main+0x6cc>)
 800a5c2:	f004 f86b 	bl	800e69c <HAL_UART_Transmit>

	  // Int Normalization, between 4095 and 0
	  float NormFactor = ((float) MAX_UINT12/ (float) (maxValue - minValue));
 800a5c6:	f9b7 290e 	ldrsh.w	r2, [r7, #2318]	; 0x90e
 800a5ca:	f9b7 38fe 	ldrsh.w	r3, [r7, #2302]	; 0x8fe
 800a5ce:	1ad3      	subs	r3, r2, r3
 800a5d0:	ee07 3a90 	vmov	s15, r3
 800a5d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5d8:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800a818 <main+0x6d4>
 800a5dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5e0:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 800a5e4:	edc3 7a00 	vstr	s15, [r3]
	  for (int i = 0; i < LITTLE_BUFFER_SIZE; i++){
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 800a5ee:	e026      	b.n	800a63e <main+0x4fa>
		  float tmp = (float) (LittleBuffer[i] - minValue) * NormFactor;
 800a5f0:	4a85      	ldr	r2, [pc, #532]	; (800a808 <main+0x6c4>)
 800a5f2:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 800a5f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	f9b7 38fe 	ldrsh.w	r3, [r7, #2302]	; 0x8fe
 800a600:	1ad3      	subs	r3, r2, r3
 800a602:	ee07 3a90 	vmov	s15, r3
 800a606:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a60a:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 800a60e:	edd3 7a00 	vldr	s15, [r3]
 800a612:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a616:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a61a:	edc3 7a00 	vstr	s15, [r3]
		  floatToIntRound(&tmp, &LittleBuffer[i]);
 800a61e:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 800a622:	005b      	lsls	r3, r3, #1
 800a624:	4a78      	ldr	r2, [pc, #480]	; (800a808 <main+0x6c4>)
 800a626:	441a      	add	r2, r3
 800a628:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a62c:	4611      	mov	r1, r2
 800a62e:	4618      	mov	r0, r3
 800a630:	f000 f8fe 	bl	800a830 <floatToIntRound>
	  for (int i = 0; i < LITTLE_BUFFER_SIZE; i++){
 800a634:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 800a638:	3301      	adds	r3, #1
 800a63a:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 800a63e:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 800a642:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a646:	dbd3      	blt.n	800a5f0 <main+0x4ac>
	  }*/
	  //--------------------------------------------------------------//


	  // Get Mfcc----------------------------------//
	  mfcc(LittleBuffer, LITTLE_BUFFER_SIZE, SAMPLE_RATE,
 800a648:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800a64c:	9309      	str	r3, [sp, #36]	; 0x24
 800a64e:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 800a652:	9308      	str	r3, [sp, #32]
 800a654:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800a658:	9307      	str	r3, [sp, #28]
 800a65a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a65e:	9306      	str	r3, [sp, #24]
 800a660:	2301      	movs	r3, #1
 800a662:	9305      	str	r3, [sp, #20]
 800a664:	2316      	movs	r3, #22
 800a666:	9304      	str	r3, [sp, #16]
 800a668:	2300      	movs	r3, #0
 800a66a:	9303      	str	r3, [sp, #12]
 800a66c:	2300      	movs	r3, #0
 800a66e:	9302      	str	r3, [sp, #8]
 800a670:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a674:	9301      	str	r3, [sp, #4]
 800a676:	231a      	movs	r3, #26
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	ed9f 1a68 	vldr	s2, [pc, #416]	; 800a81c <main+0x6d8>
 800a67e:	230d      	movs	r3, #13
 800a680:	eddf 0a67 	vldr	s1, [pc, #412]	; 800a820 <main+0x6dc>
 800a684:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800a824 <main+0x6e0>
 800a688:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800a68c:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800a690:	485d      	ldr	r0, [pc, #372]	; (800a808 <main+0x6c4>)
 800a692:	f7fd f851 	bl	8007738 <mfcc>
	  //-------------------------------------------------------//


	  // Normalization after Mfcc------------------------------//
	  // Get maximum and minimum from data, for normalization
	  float maxMfccValue = 0;
 800a696:	f04f 0300 	mov.w	r3, #0
 800a69a:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 800a69e:	6013      	str	r3, [r2, #0]
	  float minMfccValue = 10000000.0;
 800a6a0:	4b61      	ldr	r3, [pc, #388]	; (800a828 <main+0x6e4>)
 800a6a2:	f607 02ec 	addw	r2, r7, #2284	; 0x8ec
 800a6a6:	6013      	str	r3, [r2, #0]
	  for (int i = 0; i < (NCEPS*MFCC_LENGTH); i++){
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
 800a6ae:	e03a      	b.n	800a726 <main+0x5e2>
		  if (MFCC[i] > maxMfccValue){
 800a6b0:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 800a6b4:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	4413      	add	r3, r2
 800a6bc:	edd3 7a00 	vldr	s15, [r3]
 800a6c0:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800a6c4:	ed93 7a00 	vldr	s14, [r3]
 800a6c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6d0:	d509      	bpl.n	800a6e6 <main+0x5a2>
			  maxMfccValue = MFCC[i];
 800a6d2:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 800a6d6:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	4413      	add	r3, r2
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 800a6e4:	6013      	str	r3, [r2, #0]
		  }
		  if (MFCC[i] < minMfccValue){
 800a6e6:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 800a6ea:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	4413      	add	r3, r2
 800a6f2:	edd3 7a00 	vldr	s15, [r3]
 800a6f6:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 800a6fa:	ed93 7a00 	vldr	s14, [r3]
 800a6fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a706:	dd09      	ble.n	800a71c <main+0x5d8>
			  minMfccValue = MFCC[i];
 800a708:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 800a70c:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	4413      	add	r3, r2
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f607 02ec 	addw	r2, r7, #2284	; 0x8ec
 800a71a:	6013      	str	r3, [r2, #0]
	  for (int i = 0; i < (NCEPS*MFCC_LENGTH); i++){
 800a71c:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 800a720:	3301      	adds	r3, #1
 800a722:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
 800a726:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 800a72a:	2b74      	cmp	r3, #116	; 0x74
 800a72c:	ddc0      	ble.n	800a6b0 <main+0x56c>
		  }
	  }

	  // Normalise
	  for (int i = 0; i < (NCEPS*MFCC_LENGTH); i++){
 800a72e:	2300      	movs	r3, #0
 800a730:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 800a734:	e026      	b.n	800a784 <main+0x640>
		  NnInput[i] = (MFCC[i] - minMfccValue) / (maxMfccValue - minMfccValue);
 800a736:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 800a73a:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	4413      	add	r3, r2
 800a742:	ed93 7a00 	vldr	s14, [r3]
 800a746:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 800a74a:	edd3 7a00 	vldr	s15, [r3]
 800a74e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a752:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800a756:	ed93 7a00 	vldr	s14, [r3]
 800a75a:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 800a75e:	edd3 7a00 	vldr	s15, [r3]
 800a762:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a76a:	f107 020c 	add.w	r2, r7, #12
 800a76e:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	4413      	add	r3, r2
 800a776:	edc3 7a00 	vstr	s15, [r3]
	  for (int i = 0; i < (NCEPS*MFCC_LENGTH); i++){
 800a77a:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 800a77e:	3301      	adds	r3, #1
 800a780:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 800a784:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 800a788:	2b74      	cmp	r3, #116	; 0x74
 800a78a:	ddd4      	ble.n	800a736 <main+0x5f2>
	  }*/
	  //-------------------------------------------//


	  // Run NN ---------------------------//
	  aiRun(NnInput,NnOutput);
 800a78c:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 800a790:	f107 030c 	add.w	r3, r7, #12
 800a794:	4611      	mov	r1, r2
 800a796:	4618      	mov	r0, r3
 800a798:	f004 fc2e 	bl	800eff8 <aiRun>
	  //aiRun(GlassSample, NnOutput); // Test
	  //-----------------------------------//


	  // Print Result Probabilites --------------------//
	  for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++){
 800a79c:	2300      	movs	r3, #0
 800a79e:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
 800a7a2:	e027      	b.n	800a7f4 <main+0x6b0>
		  sprintf(stringBuffer, "%i Output = %f\r\n", i, NnOutput[i]);
 800a7a4:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 800a7a8:	f8d7 38e0 	ldr.w	r3, [r7, #2272]	; 0x8e0
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	4413      	add	r3, r2
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fc fac0 	bl	8006d38 <__aeabi_f2d>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	f507 70f8 	add.w	r0, r7, #496	; 0x1f0
 800a7c0:	e9cd 3400 	strd	r3, r4, [sp]
 800a7c4:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 800a7c8:	4918      	ldr	r1, [pc, #96]	; (800a82c <main+0x6e8>)
 800a7ca:	f005 fc79 	bl	80100c0 <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*)stringBuffer, strlen(stringBuffer), HAL_MAX_DELAY);
 800a7ce:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7fc f8ed 	bl	80069b2 <strlen>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800a7e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7e4:	480a      	ldr	r0, [pc, #40]	; (800a810 <main+0x6cc>)
 800a7e6:	f003 ff59 	bl	800e69c <HAL_UART_Transmit>
	  for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++){
 800a7ea:	f8d7 38e0 	ldr.w	r3, [r7, #2272]	; 0x8e0
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
 800a7f4:	f8d7 38e0 	ldr.w	r3, [r7, #2272]	; 0x8e0
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	ddd3      	ble.n	800a7a4 <main+0x660>
	  }
	  //-----------------------------------------------//


	  // Take only one reading------------------//
	  return 1;
 800a7fc:	2301      	movs	r3, #1
	  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	f607 171c 	addw	r7, r7, #2332	; 0x91c
 800a804:	46bd      	mov	sp, r7
 800a806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a808:	2002e2fc 	.word	0x2002e2fc
 800a80c:	08016984 	.word	0x08016984
 800a810:	2000e8c8 	.word	0x2000e8c8
 800a814:	08016994 	.word	0x08016994
 800a818:	457ff000 	.word	0x457ff000
 800a81c:	3f7851ec 	.word	0x3f7851ec
 800a820:	3c23d70a 	.word	0x3c23d70a
 800a824:	3ccccccd 	.word	0x3ccccccd
 800a828:	4b189680 	.word	0x4b189680
 800a82c:	080169a4 	.word	0x080169a4

0800a830 <floatToIntRound>:

void floatToIntRound(float *input, int16_t *output){
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
	int16_t tmp = (int16_t) *input;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	edd3 7a00 	vldr	s15, [r3]
 800a840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a844:	ee17 3a90 	vmov	r3, s15
 800a848:	81fb      	strh	r3, [r7, #14]
	float afterDecimal = *input - (float) tmp;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	ed93 7a00 	vldr	s14, [r3]
 800a850:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a854:	ee07 3a90 	vmov	s15, r3
 800a858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a85c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a860:	edc7 7a02 	vstr	s15, [r7, #8]
	if (afterDecimal < 0.5){
 800a864:	edd7 7a02 	vldr	s15, [r7, #8]
 800a868:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a86c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a874:	d503      	bpl.n	800a87e <floatToIntRound+0x4e>
		*output = tmp;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	89fa      	ldrh	r2, [r7, #14]
 800a87a:	801a      	strh	r2, [r3, #0]
	}
	else{
		*output = tmp + 1;
	}
}
 800a87c:	e005      	b.n	800a88a <floatToIntRound+0x5a>
		*output = tmp + 1;
 800a87e:	89fb      	ldrh	r3, [r7, #14]
 800a880:	3301      	adds	r3, #1
 800a882:	b29b      	uxth	r3, r3
 800a884:	b21a      	sxth	r2, r3
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	801a      	strh	r2, [r3, #0]
}
 800a88a:	bf00      	nop
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
	...

0800a898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b0b4      	sub	sp, #208	; 0xd0
 800a89c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a89e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a8a2:	2230      	movs	r2, #48	; 0x30
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f004 fee0 	bl	800f66c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a8ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	601a      	str	r2, [r3, #0]
 800a8b4:	605a      	str	r2, [r3, #4]
 800a8b6:	609a      	str	r2, [r3, #8]
 800a8b8:	60da      	str	r2, [r3, #12]
 800a8ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a8bc:	f107 0308 	add.w	r3, r7, #8
 800a8c0:	2284      	movs	r2, #132	; 0x84
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f004 fed1 	bl	800f66c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800a8ca:	f002 fde7 	bl	800d49c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a8ce:	4b3a      	ldr	r3, [pc, #232]	; (800a9b8 <SystemClock_Config+0x120>)
 800a8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d2:	4a39      	ldr	r2, [pc, #228]	; (800a9b8 <SystemClock_Config+0x120>)
 800a8d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8d8:	6413      	str	r3, [r2, #64]	; 0x40
 800a8da:	4b37      	ldr	r3, [pc, #220]	; (800a9b8 <SystemClock_Config+0x120>)
 800a8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8e2:	607b      	str	r3, [r7, #4]
 800a8e4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a8e6:	4b35      	ldr	r3, [pc, #212]	; (800a9bc <SystemClock_Config+0x124>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a34      	ldr	r2, [pc, #208]	; (800a9bc <SystemClock_Config+0x124>)
 800a8ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a8f0:	6013      	str	r3, [r2, #0]
 800a8f2:	4b32      	ldr	r3, [pc, #200]	; (800a9bc <SystemClock_Config+0x124>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a8fa:	603b      	str	r3, [r7, #0]
 800a8fc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a8fe:	2301      	movs	r3, #1
 800a900:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800a904:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800a908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a90c:	2302      	movs	r3, #2
 800a90e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a912:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a916:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800a91a:	2304      	movs	r3, #4
 800a91c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 800a920:	23d8      	movs	r3, #216	; 0xd8
 800a922:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a926:	2302      	movs	r3, #2
 800a928:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800a92c:	2309      	movs	r3, #9
 800a92e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a932:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a936:	4618      	mov	r0, r3
 800a938:	f002 fe10 	bl	800d55c <HAL_RCC_OscConfig>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d001      	beq.n	800a946 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800a942:	f000 f9f3 	bl	800ad2c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800a946:	f002 fdb9 	bl	800d4bc <HAL_PWREx_EnableOverDrive>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d001      	beq.n	800a954 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800a950:	f000 f9ec 	bl	800ad2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a954:	230f      	movs	r3, #15
 800a956:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a95a:	2302      	movs	r3, #2
 800a95c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a960:	2300      	movs	r3, #0
 800a962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a966:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a96a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a96e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a972:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800a976:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a97a:	2107      	movs	r1, #7
 800a97c:	4618      	mov	r0, r3
 800a97e:	f003 f85d 	bl	800da3c <HAL_RCC_ClockConfig>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d001      	beq.n	800a98c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800a988:	f000 f9d0 	bl	800ad2c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800a98c:	4b0c      	ldr	r3, [pc, #48]	; (800a9c0 <SystemClock_Config+0x128>)
 800a98e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a990:	2300      	movs	r3, #0
 800a992:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800a994:	2300      	movs	r3, #0
 800a996:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a99a:	f107 0308 	add.w	r3, r7, #8
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f003 fa40 	bl	800de24 <HAL_RCCEx_PeriphCLKConfig>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <SystemClock_Config+0x116>
  {
    Error_Handler();
 800a9aa:	f000 f9bf 	bl	800ad2c <Error_Handler>
  }
}
 800a9ae:	bf00      	nop
 800a9b0:	37d0      	adds	r7, #208	; 0xd0
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	40023800 	.word	0x40023800
 800a9bc:	40007000 	.word	0x40007000
 800a9c0:	00200100 	.word	0x00200100

0800a9c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a9ca:	463b      	mov	r3, r7
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	601a      	str	r2, [r3, #0]
 800a9d0:	605a      	str	r2, [r3, #4]
 800a9d2:	609a      	str	r2, [r3, #8]
 800a9d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800a9d6:	4b21      	ldr	r3, [pc, #132]	; (800aa5c <MX_ADC1_Init+0x98>)
 800a9d8:	4a21      	ldr	r2, [pc, #132]	; (800aa60 <MX_ADC1_Init+0x9c>)
 800a9da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800a9dc:	4b1f      	ldr	r3, [pc, #124]	; (800aa5c <MX_ADC1_Init+0x98>)
 800a9de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a9e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a9e4:	4b1d      	ldr	r3, [pc, #116]	; (800aa5c <MX_ADC1_Init+0x98>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a9ea:	4b1c      	ldr	r3, [pc, #112]	; (800aa5c <MX_ADC1_Init+0x98>)
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800a9f0:	4b1a      	ldr	r3, [pc, #104]	; (800aa5c <MX_ADC1_Init+0x98>)
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a9f6:	4b19      	ldr	r3, [pc, #100]	; (800aa5c <MX_ADC1_Init+0x98>)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a9fe:	4b17      	ldr	r3, [pc, #92]	; (800aa5c <MX_ADC1_Init+0x98>)
 800aa00:	2200      	movs	r2, #0
 800aa02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800aa04:	4b15      	ldr	r3, [pc, #84]	; (800aa5c <MX_ADC1_Init+0x98>)
 800aa06:	4a17      	ldr	r2, [pc, #92]	; (800aa64 <MX_ADC1_Init+0xa0>)
 800aa08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800aa0a:	4b14      	ldr	r3, [pc, #80]	; (800aa5c <MX_ADC1_Init+0x98>)
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800aa10:	4b12      	ldr	r3, [pc, #72]	; (800aa5c <MX_ADC1_Init+0x98>)
 800aa12:	2201      	movs	r2, #1
 800aa14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800aa16:	4b11      	ldr	r3, [pc, #68]	; (800aa5c <MX_ADC1_Init+0x98>)
 800aa18:	2201      	movs	r2, #1
 800aa1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800aa1e:	4b0f      	ldr	r3, [pc, #60]	; (800aa5c <MX_ADC1_Init+0x98>)
 800aa20:	2201      	movs	r2, #1
 800aa22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800aa24:	480d      	ldr	r0, [pc, #52]	; (800aa5c <MX_ADC1_Init+0x98>)
 800aa26:	f000 fda1 	bl	800b56c <HAL_ADC_Init>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d001      	beq.n	800aa34 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800aa30:	f000 f97c 	bl	800ad2c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800aa34:	2303      	movs	r3, #3
 800aa36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800aa40:	463b      	mov	r3, r7
 800aa42:	4619      	mov	r1, r3
 800aa44:	4805      	ldr	r0, [pc, #20]	; (800aa5c <MX_ADC1_Init+0x98>)
 800aa46:	f000 fed7 	bl	800b7f8 <HAL_ADC_ConfigChannel>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800aa50:	f000 f96c 	bl	800ad2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800aa54:	bf00      	nop
 800aa56:	3710      	adds	r7, #16
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	2002e170 	.word	0x2002e170
 800aa60:	40012000 	.word	0x40012000
 800aa64:	0f000001 	.word	0x0f000001

0800aa68 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800aa6c:	4b0d      	ldr	r3, [pc, #52]	; (800aaa4 <MX_CRC_Init+0x3c>)
 800aa6e:	4a0e      	ldr	r2, [pc, #56]	; (800aaa8 <MX_CRC_Init+0x40>)
 800aa70:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800aa72:	4b0c      	ldr	r3, [pc, #48]	; (800aaa4 <MX_CRC_Init+0x3c>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800aa78:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <MX_CRC_Init+0x3c>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800aa7e:	4b09      	ldr	r3, [pc, #36]	; (800aaa4 <MX_CRC_Init+0x3c>)
 800aa80:	2200      	movs	r2, #0
 800aa82:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800aa84:	4b07      	ldr	r3, [pc, #28]	; (800aaa4 <MX_CRC_Init+0x3c>)
 800aa86:	2200      	movs	r2, #0
 800aa88:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800aa8a:	4b06      	ldr	r3, [pc, #24]	; (800aaa4 <MX_CRC_Init+0x3c>)
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800aa90:	4804      	ldr	r0, [pc, #16]	; (800aaa4 <MX_CRC_Init+0x3c>)
 800aa92:	f001 fa73 	bl	800bf7c <HAL_CRC_Init>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d001      	beq.n	800aaa0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800aa9c:	f000 f946 	bl	800ad2c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800aaa0:	bf00      	nop
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	2002e14c 	.word	0x2002e14c
 800aaa8:	40023000 	.word	0x40023000

0800aaac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800aab0:	4b1c      	ldr	r3, [pc, #112]	; (800ab24 <MX_ETH_Init+0x78>)
 800aab2:	4a1d      	ldr	r2, [pc, #116]	; (800ab28 <MX_ETH_Init+0x7c>)
 800aab4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800aab6:	4b1b      	ldr	r3, [pc, #108]	; (800ab24 <MX_ETH_Init+0x78>)
 800aab8:	2201      	movs	r2, #1
 800aaba:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800aabc:	4b19      	ldr	r3, [pc, #100]	; (800ab24 <MX_ETH_Init+0x78>)
 800aabe:	2200      	movs	r2, #0
 800aac0:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800aac2:	4b18      	ldr	r3, [pc, #96]	; (800ab24 <MX_ETH_Init+0x78>)
 800aac4:	695b      	ldr	r3, [r3, #20]
 800aac6:	2200      	movs	r2, #0
 800aac8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800aaca:	4b16      	ldr	r3, [pc, #88]	; (800ab24 <MX_ETH_Init+0x78>)
 800aacc:	695b      	ldr	r3, [r3, #20]
 800aace:	3301      	adds	r3, #1
 800aad0:	2280      	movs	r2, #128	; 0x80
 800aad2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800aad4:	4b13      	ldr	r3, [pc, #76]	; (800ab24 <MX_ETH_Init+0x78>)
 800aad6:	695b      	ldr	r3, [r3, #20]
 800aad8:	3302      	adds	r3, #2
 800aada:	22e1      	movs	r2, #225	; 0xe1
 800aadc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800aade:	4b11      	ldr	r3, [pc, #68]	; (800ab24 <MX_ETH_Init+0x78>)
 800aae0:	695b      	ldr	r3, [r3, #20]
 800aae2:	3303      	adds	r3, #3
 800aae4:	2200      	movs	r2, #0
 800aae6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800aae8:	4b0e      	ldr	r3, [pc, #56]	; (800ab24 <MX_ETH_Init+0x78>)
 800aaea:	695b      	ldr	r3, [r3, #20]
 800aaec:	3304      	adds	r3, #4
 800aaee:	2200      	movs	r2, #0
 800aaf0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800aaf2:	4b0c      	ldr	r3, [pc, #48]	; (800ab24 <MX_ETH_Init+0x78>)
 800aaf4:	695b      	ldr	r3, [r3, #20]
 800aaf6:	3305      	adds	r3, #5
 800aaf8:	2200      	movs	r2, #0
 800aafa:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800aafc:	4b09      	ldr	r3, [pc, #36]	; (800ab24 <MX_ETH_Init+0x78>)
 800aafe:	2200      	movs	r2, #0
 800ab00:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800ab02:	4b08      	ldr	r3, [pc, #32]	; (800ab24 <MX_ETH_Init+0x78>)
 800ab04:	2200      	movs	r2, #0
 800ab06:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800ab08:	4b06      	ldr	r3, [pc, #24]	; (800ab24 <MX_ETH_Init+0x78>)
 800ab0a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ab0e:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800ab10:	4804      	ldr	r0, [pc, #16]	; (800ab24 <MX_ETH_Init+0x78>)
 800ab12:	f001 fe93 	bl	800c83c <HAL_ETH_Init>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d001      	beq.n	800ab20 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 800ab1c:	f000 f906 	bl	800ad2c <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800ab20:	bf00      	nop
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	2002ef7c 	.word	0x2002ef7c
 800ab28:	40028000 	.word	0x40028000

0800ab2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800ab30:	4b14      	ldr	r3, [pc, #80]	; (800ab84 <MX_USART3_UART_Init+0x58>)
 800ab32:	4a15      	ldr	r2, [pc, #84]	; (800ab88 <MX_USART3_UART_Init+0x5c>)
 800ab34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800ab36:	4b13      	ldr	r3, [pc, #76]	; (800ab84 <MX_USART3_UART_Init+0x58>)
 800ab38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ab3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ab3e:	4b11      	ldr	r3, [pc, #68]	; (800ab84 <MX_USART3_UART_Init+0x58>)
 800ab40:	2200      	movs	r2, #0
 800ab42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800ab44:	4b0f      	ldr	r3, [pc, #60]	; (800ab84 <MX_USART3_UART_Init+0x58>)
 800ab46:	2200      	movs	r2, #0
 800ab48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800ab4a:	4b0e      	ldr	r3, [pc, #56]	; (800ab84 <MX_USART3_UART_Init+0x58>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800ab50:	4b0c      	ldr	r3, [pc, #48]	; (800ab84 <MX_USART3_UART_Init+0x58>)
 800ab52:	220c      	movs	r2, #12
 800ab54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ab56:	4b0b      	ldr	r3, [pc, #44]	; (800ab84 <MX_USART3_UART_Init+0x58>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800ab5c:	4b09      	ldr	r3, [pc, #36]	; (800ab84 <MX_USART3_UART_Init+0x58>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ab62:	4b08      	ldr	r3, [pc, #32]	; (800ab84 <MX_USART3_UART_Init+0x58>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ab68:	4b06      	ldr	r3, [pc, #24]	; (800ab84 <MX_USART3_UART_Init+0x58>)
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ab6e:	4805      	ldr	r0, [pc, #20]	; (800ab84 <MX_USART3_UART_Init+0x58>)
 800ab70:	f003 fd46 	bl	800e600 <HAL_UART_Init>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d001      	beq.n	800ab7e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800ab7a:	f000 f8d7 	bl	800ad2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800ab7e:	bf00      	nop
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	2000e8c8 	.word	0x2000e8c8
 800ab88:	40004800 	.word	0x40004800

0800ab8c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ab92:	4b0c      	ldr	r3, [pc, #48]	; (800abc4 <MX_DMA_Init+0x38>)
 800ab94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab96:	4a0b      	ldr	r2, [pc, #44]	; (800abc4 <MX_DMA_Init+0x38>)
 800ab98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ab9c:	6313      	str	r3, [r2, #48]	; 0x30
 800ab9e:	4b09      	ldr	r3, [pc, #36]	; (800abc4 <MX_DMA_Init+0x38>)
 800aba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aba6:	607b      	str	r3, [r7, #4]
 800aba8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800abaa:	2200      	movs	r2, #0
 800abac:	2100      	movs	r1, #0
 800abae:	2038      	movs	r0, #56	; 0x38
 800abb0:	f001 f9ad 	bl	800bf0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800abb4:	2038      	movs	r0, #56	; 0x38
 800abb6:	f001 f9c6 	bl	800bf46 <HAL_NVIC_EnableIRQ>

}
 800abba:	bf00      	nop
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	40023800 	.word	0x40023800

0800abc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b08c      	sub	sp, #48	; 0x30
 800abcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abce:	f107 031c 	add.w	r3, r7, #28
 800abd2:	2200      	movs	r2, #0
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	605a      	str	r2, [r3, #4]
 800abd8:	609a      	str	r2, [r3, #8]
 800abda:	60da      	str	r2, [r3, #12]
 800abdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800abde:	4b46      	ldr	r3, [pc, #280]	; (800acf8 <MX_GPIO_Init+0x130>)
 800abe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe2:	4a45      	ldr	r2, [pc, #276]	; (800acf8 <MX_GPIO_Init+0x130>)
 800abe4:	f043 0304 	orr.w	r3, r3, #4
 800abe8:	6313      	str	r3, [r2, #48]	; 0x30
 800abea:	4b43      	ldr	r3, [pc, #268]	; (800acf8 <MX_GPIO_Init+0x130>)
 800abec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abee:	f003 0304 	and.w	r3, r3, #4
 800abf2:	61bb      	str	r3, [r7, #24]
 800abf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800abf6:	4b40      	ldr	r3, [pc, #256]	; (800acf8 <MX_GPIO_Init+0x130>)
 800abf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abfa:	4a3f      	ldr	r2, [pc, #252]	; (800acf8 <MX_GPIO_Init+0x130>)
 800abfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac00:	6313      	str	r3, [r2, #48]	; 0x30
 800ac02:	4b3d      	ldr	r3, [pc, #244]	; (800acf8 <MX_GPIO_Init+0x130>)
 800ac04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac0a:	617b      	str	r3, [r7, #20]
 800ac0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac0e:	4b3a      	ldr	r3, [pc, #232]	; (800acf8 <MX_GPIO_Init+0x130>)
 800ac10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac12:	4a39      	ldr	r2, [pc, #228]	; (800acf8 <MX_GPIO_Init+0x130>)
 800ac14:	f043 0301 	orr.w	r3, r3, #1
 800ac18:	6313      	str	r3, [r2, #48]	; 0x30
 800ac1a:	4b37      	ldr	r3, [pc, #220]	; (800acf8 <MX_GPIO_Init+0x130>)
 800ac1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac1e:	f003 0301 	and.w	r3, r3, #1
 800ac22:	613b      	str	r3, [r7, #16]
 800ac24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac26:	4b34      	ldr	r3, [pc, #208]	; (800acf8 <MX_GPIO_Init+0x130>)
 800ac28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2a:	4a33      	ldr	r2, [pc, #204]	; (800acf8 <MX_GPIO_Init+0x130>)
 800ac2c:	f043 0302 	orr.w	r3, r3, #2
 800ac30:	6313      	str	r3, [r2, #48]	; 0x30
 800ac32:	4b31      	ldr	r3, [pc, #196]	; (800acf8 <MX_GPIO_Init+0x130>)
 800ac34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac36:	f003 0302 	and.w	r3, r3, #2
 800ac3a:	60fb      	str	r3, [r7, #12]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ac3e:	4b2e      	ldr	r3, [pc, #184]	; (800acf8 <MX_GPIO_Init+0x130>)
 800ac40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac42:	4a2d      	ldr	r2, [pc, #180]	; (800acf8 <MX_GPIO_Init+0x130>)
 800ac44:	f043 0308 	orr.w	r3, r3, #8
 800ac48:	6313      	str	r3, [r2, #48]	; 0x30
 800ac4a:	4b2b      	ldr	r3, [pc, #172]	; (800acf8 <MX_GPIO_Init+0x130>)
 800ac4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac4e:	f003 0308 	and.w	r3, r3, #8
 800ac52:	60bb      	str	r3, [r7, #8]
 800ac54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800ac56:	4b28      	ldr	r3, [pc, #160]	; (800acf8 <MX_GPIO_Init+0x130>)
 800ac58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac5a:	4a27      	ldr	r2, [pc, #156]	; (800acf8 <MX_GPIO_Init+0x130>)
 800ac5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac60:	6313      	str	r3, [r2, #48]	; 0x30
 800ac62:	4b25      	ldr	r3, [pc, #148]	; (800acf8 <MX_GPIO_Init+0x130>)
 800ac64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac6a:	607b      	str	r3, [r7, #4]
 800ac6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f244 0181 	movw	r1, #16513	; 0x4081
 800ac74:	4821      	ldr	r0, [pc, #132]	; (800acfc <MX_GPIO_Init+0x134>)
 800ac76:	f002 fbf7 	bl	800d468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	2140      	movs	r1, #64	; 0x40
 800ac7e:	4820      	ldr	r0, [pc, #128]	; (800ad00 <MX_GPIO_Init+0x138>)
 800ac80:	f002 fbf2 	bl	800d468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800ac84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ac8a:	4b1e      	ldr	r3, [pc, #120]	; (800ad04 <MX_GPIO_Init+0x13c>)
 800ac8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800ac92:	f107 031c 	add.w	r3, r7, #28
 800ac96:	4619      	mov	r1, r3
 800ac98:	481b      	ldr	r0, [pc, #108]	; (800ad08 <MX_GPIO_Init+0x140>)
 800ac9a:	f002 fa3b 	bl	800d114 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800ac9e:	f244 0381 	movw	r3, #16513	; 0x4081
 800aca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aca4:	2301      	movs	r3, #1
 800aca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aca8:	2300      	movs	r3, #0
 800acaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acac:	2300      	movs	r3, #0
 800acae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800acb0:	f107 031c 	add.w	r3, r7, #28
 800acb4:	4619      	mov	r1, r3
 800acb6:	4811      	ldr	r0, [pc, #68]	; (800acfc <MX_GPIO_Init+0x134>)
 800acb8:	f002 fa2c 	bl	800d114 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800acbc:	2340      	movs	r3, #64	; 0x40
 800acbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800acc0:	2301      	movs	r3, #1
 800acc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acc4:	2300      	movs	r3, #0
 800acc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acc8:	2300      	movs	r3, #0
 800acca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800accc:	f107 031c 	add.w	r3, r7, #28
 800acd0:	4619      	mov	r1, r3
 800acd2:	480b      	ldr	r0, [pc, #44]	; (800ad00 <MX_GPIO_Init+0x138>)
 800acd4:	f002 fa1e 	bl	800d114 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800acd8:	2380      	movs	r3, #128	; 0x80
 800acda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800acdc:	2300      	movs	r3, #0
 800acde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ace0:	2300      	movs	r3, #0
 800ace2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800ace4:	f107 031c 	add.w	r3, r7, #28
 800ace8:	4619      	mov	r1, r3
 800acea:	4805      	ldr	r0, [pc, #20]	; (800ad00 <MX_GPIO_Init+0x138>)
 800acec:	f002 fa12 	bl	800d114 <HAL_GPIO_Init>

}
 800acf0:	bf00      	nop
 800acf2:	3730      	adds	r7, #48	; 0x30
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	40023800 	.word	0x40023800
 800acfc:	40020400 	.word	0x40020400
 800ad00:	40021800 	.word	0x40021800
 800ad04:	10110000 	.word	0x10110000
 800ad08:	40020800 	.word	0x40020800

0800ad0c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
	TakeADCReading = 1;
 800ad14:	4b04      	ldr	r3, [pc, #16]	; (800ad28 <HAL_ADC_ConvCpltCallback+0x1c>)
 800ad16:	2201      	movs	r2, #1
 800ad18:	701a      	strb	r2, [r3, #0]
}
 800ad1a:	bf00      	nop
 800ad1c:	370c      	adds	r7, #12
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop
 800ad28:	20000f14 	.word	0x20000f14

0800ad2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ad30:	bf00      	nop
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr
	...

0800ad3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800ad42:	4b0f      	ldr	r3, [pc, #60]	; (800ad80 <HAL_MspInit+0x44>)
 800ad44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad46:	4a0e      	ldr	r2, [pc, #56]	; (800ad80 <HAL_MspInit+0x44>)
 800ad48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad4c:	6413      	str	r3, [r2, #64]	; 0x40
 800ad4e:	4b0c      	ldr	r3, [pc, #48]	; (800ad80 <HAL_MspInit+0x44>)
 800ad50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad56:	607b      	str	r3, [r7, #4]
 800ad58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad5a:	4b09      	ldr	r3, [pc, #36]	; (800ad80 <HAL_MspInit+0x44>)
 800ad5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad5e:	4a08      	ldr	r2, [pc, #32]	; (800ad80 <HAL_MspInit+0x44>)
 800ad60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad64:	6453      	str	r3, [r2, #68]	; 0x44
 800ad66:	4b06      	ldr	r3, [pc, #24]	; (800ad80 <HAL_MspInit+0x44>)
 800ad68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad6e:	603b      	str	r3, [r7, #0]
 800ad70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ad72:	bf00      	nop
 800ad74:	370c      	adds	r7, #12
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	40023800 	.word	0x40023800

0800ad84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b08a      	sub	sp, #40	; 0x28
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad8c:	f107 0314 	add.w	r3, r7, #20
 800ad90:	2200      	movs	r2, #0
 800ad92:	601a      	str	r2, [r3, #0]
 800ad94:	605a      	str	r2, [r3, #4]
 800ad96:	609a      	str	r2, [r3, #8]
 800ad98:	60da      	str	r2, [r3, #12]
 800ad9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a2d      	ldr	r2, [pc, #180]	; (800ae58 <HAL_ADC_MspInit+0xd4>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d153      	bne.n	800ae4e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ada6:	4b2d      	ldr	r3, [pc, #180]	; (800ae5c <HAL_ADC_MspInit+0xd8>)
 800ada8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adaa:	4a2c      	ldr	r2, [pc, #176]	; (800ae5c <HAL_ADC_MspInit+0xd8>)
 800adac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adb0:	6453      	str	r3, [r2, #68]	; 0x44
 800adb2:	4b2a      	ldr	r3, [pc, #168]	; (800ae5c <HAL_ADC_MspInit+0xd8>)
 800adb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adba:	613b      	str	r3, [r7, #16]
 800adbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800adbe:	4b27      	ldr	r3, [pc, #156]	; (800ae5c <HAL_ADC_MspInit+0xd8>)
 800adc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc2:	4a26      	ldr	r2, [pc, #152]	; (800ae5c <HAL_ADC_MspInit+0xd8>)
 800adc4:	f043 0301 	orr.w	r3, r3, #1
 800adc8:	6313      	str	r3, [r2, #48]	; 0x30
 800adca:	4b24      	ldr	r3, [pc, #144]	; (800ae5c <HAL_ADC_MspInit+0xd8>)
 800adcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	60fb      	str	r3, [r7, #12]
 800add4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800add6:	2308      	movs	r3, #8
 800add8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800adda:	2303      	movs	r3, #3
 800addc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adde:	2300      	movs	r3, #0
 800ade0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ade2:	f107 0314 	add.w	r3, r7, #20
 800ade6:	4619      	mov	r1, r3
 800ade8:	481d      	ldr	r0, [pc, #116]	; (800ae60 <HAL_ADC_MspInit+0xdc>)
 800adea:	f002 f993 	bl	800d114 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800adee:	4b1d      	ldr	r3, [pc, #116]	; (800ae64 <HAL_ADC_MspInit+0xe0>)
 800adf0:	4a1d      	ldr	r2, [pc, #116]	; (800ae68 <HAL_ADC_MspInit+0xe4>)
 800adf2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800adf4:	4b1b      	ldr	r3, [pc, #108]	; (800ae64 <HAL_ADC_MspInit+0xe0>)
 800adf6:	2200      	movs	r2, #0
 800adf8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800adfa:	4b1a      	ldr	r3, [pc, #104]	; (800ae64 <HAL_ADC_MspInit+0xe0>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae00:	4b18      	ldr	r3, [pc, #96]	; (800ae64 <HAL_ADC_MspInit+0xe0>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800ae06:	4b17      	ldr	r3, [pc, #92]	; (800ae64 <HAL_ADC_MspInit+0xe0>)
 800ae08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae0c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ae0e:	4b15      	ldr	r3, [pc, #84]	; (800ae64 <HAL_ADC_MspInit+0xe0>)
 800ae10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae14:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ae16:	4b13      	ldr	r3, [pc, #76]	; (800ae64 <HAL_ADC_MspInit+0xe0>)
 800ae18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ae1c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800ae1e:	4b11      	ldr	r3, [pc, #68]	; (800ae64 <HAL_ADC_MspInit+0xe0>)
 800ae20:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae24:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800ae26:	4b0f      	ldr	r3, [pc, #60]	; (800ae64 <HAL_ADC_MspInit+0xe0>)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ae2c:	4b0d      	ldr	r3, [pc, #52]	; (800ae64 <HAL_ADC_MspInit+0xe0>)
 800ae2e:	2200      	movs	r2, #0
 800ae30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800ae32:	480c      	ldr	r0, [pc, #48]	; (800ae64 <HAL_ADC_MspInit+0xe0>)
 800ae34:	f001 f98c 	bl	800c150 <HAL_DMA_Init>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d001      	beq.n	800ae42 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800ae3e:	f7ff ff75 	bl	800ad2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4a07      	ldr	r2, [pc, #28]	; (800ae64 <HAL_ADC_MspInit+0xe0>)
 800ae46:	639a      	str	r2, [r3, #56]	; 0x38
 800ae48:	4a06      	ldr	r2, [pc, #24]	; (800ae64 <HAL_ADC_MspInit+0xe0>)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800ae4e:	bf00      	nop
 800ae50:	3728      	adds	r7, #40	; 0x28
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	40012000 	.word	0x40012000
 800ae5c:	40023800 	.word	0x40023800
 800ae60:	40020000 	.word	0x40020000
 800ae64:	2002e1b8 	.word	0x2002e1b8
 800ae68:	40026410 	.word	0x40026410

0800ae6c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a0a      	ldr	r2, [pc, #40]	; (800aea4 <HAL_CRC_MspInit+0x38>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d10b      	bne.n	800ae96 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800ae7e:	4b0a      	ldr	r3, [pc, #40]	; (800aea8 <HAL_CRC_MspInit+0x3c>)
 800ae80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae82:	4a09      	ldr	r2, [pc, #36]	; (800aea8 <HAL_CRC_MspInit+0x3c>)
 800ae84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ae88:	6313      	str	r3, [r2, #48]	; 0x30
 800ae8a:	4b07      	ldr	r3, [pc, #28]	; (800aea8 <HAL_CRC_MspInit+0x3c>)
 800ae8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae92:	60fb      	str	r3, [r7, #12]
 800ae94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800ae96:	bf00      	nop
 800ae98:	3714      	adds	r7, #20
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	40023000 	.word	0x40023000
 800aea8:	40023800 	.word	0x40023800

0800aeac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b08e      	sub	sp, #56	; 0x38
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aeb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aeb8:	2200      	movs	r2, #0
 800aeba:	601a      	str	r2, [r3, #0]
 800aebc:	605a      	str	r2, [r3, #4]
 800aebe:	609a      	str	r2, [r3, #8]
 800aec0:	60da      	str	r2, [r3, #12]
 800aec2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a4e      	ldr	r2, [pc, #312]	; (800b004 <HAL_ETH_MspInit+0x158>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	f040 8096 	bne.w	800affc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800aed0:	4b4d      	ldr	r3, [pc, #308]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800aed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aed4:	4a4c      	ldr	r2, [pc, #304]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800aed6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800aeda:	6313      	str	r3, [r2, #48]	; 0x30
 800aedc:	4b4a      	ldr	r3, [pc, #296]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800aede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aee4:	623b      	str	r3, [r7, #32]
 800aee6:	6a3b      	ldr	r3, [r7, #32]
 800aee8:	4b47      	ldr	r3, [pc, #284]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800aeea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeec:	4a46      	ldr	r2, [pc, #280]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800aeee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aef2:	6313      	str	r3, [r2, #48]	; 0x30
 800aef4:	4b44      	ldr	r3, [pc, #272]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800aef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aefc:	61fb      	str	r3, [r7, #28]
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	4b41      	ldr	r3, [pc, #260]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800af02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af04:	4a40      	ldr	r2, [pc, #256]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800af06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af0a:	6313      	str	r3, [r2, #48]	; 0x30
 800af0c:	4b3e      	ldr	r3, [pc, #248]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800af0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af14:	61bb      	str	r3, [r7, #24]
 800af16:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800af18:	4b3b      	ldr	r3, [pc, #236]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800af1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af1c:	4a3a      	ldr	r2, [pc, #232]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800af1e:	f043 0304 	orr.w	r3, r3, #4
 800af22:	6313      	str	r3, [r2, #48]	; 0x30
 800af24:	4b38      	ldr	r3, [pc, #224]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800af26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af28:	f003 0304 	and.w	r3, r3, #4
 800af2c:	617b      	str	r3, [r7, #20]
 800af2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af30:	4b35      	ldr	r3, [pc, #212]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800af32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af34:	4a34      	ldr	r2, [pc, #208]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800af36:	f043 0301 	orr.w	r3, r3, #1
 800af3a:	6313      	str	r3, [r2, #48]	; 0x30
 800af3c:	4b32      	ldr	r3, [pc, #200]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800af3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af40:	f003 0301 	and.w	r3, r3, #1
 800af44:	613b      	str	r3, [r7, #16]
 800af46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af48:	4b2f      	ldr	r3, [pc, #188]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800af4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af4c:	4a2e      	ldr	r2, [pc, #184]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800af4e:	f043 0302 	orr.w	r3, r3, #2
 800af52:	6313      	str	r3, [r2, #48]	; 0x30
 800af54:	4b2c      	ldr	r3, [pc, #176]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800af56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af58:	f003 0302 	and.w	r3, r3, #2
 800af5c:	60fb      	str	r3, [r7, #12]
 800af5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800af60:	4b29      	ldr	r3, [pc, #164]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800af62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af64:	4a28      	ldr	r2, [pc, #160]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800af66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af6a:	6313      	str	r3, [r2, #48]	; 0x30
 800af6c:	4b26      	ldr	r3, [pc, #152]	; (800b008 <HAL_ETH_MspInit+0x15c>)
 800af6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af74:	60bb      	str	r3, [r7, #8]
 800af76:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800af78:	2332      	movs	r3, #50	; 0x32
 800af7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af7c:	2302      	movs	r3, #2
 800af7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af80:	2300      	movs	r3, #0
 800af82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af84:	2303      	movs	r3, #3
 800af86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800af88:	230b      	movs	r3, #11
 800af8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800af8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af90:	4619      	mov	r1, r3
 800af92:	481e      	ldr	r0, [pc, #120]	; (800b00c <HAL_ETH_MspInit+0x160>)
 800af94:	f002 f8be 	bl	800d114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800af98:	2386      	movs	r3, #134	; 0x86
 800af9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af9c:	2302      	movs	r3, #2
 800af9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afa0:	2300      	movs	r3, #0
 800afa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800afa4:	2303      	movs	r3, #3
 800afa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800afa8:	230b      	movs	r3, #11
 800afaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800afac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afb0:	4619      	mov	r1, r3
 800afb2:	4817      	ldr	r0, [pc, #92]	; (800b010 <HAL_ETH_MspInit+0x164>)
 800afb4:	f002 f8ae 	bl	800d114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800afb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800afbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afbe:	2302      	movs	r3, #2
 800afc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afc2:	2300      	movs	r3, #0
 800afc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800afc6:	2303      	movs	r3, #3
 800afc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800afca:	230b      	movs	r3, #11
 800afcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800afce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afd2:	4619      	mov	r1, r3
 800afd4:	480f      	ldr	r0, [pc, #60]	; (800b014 <HAL_ETH_MspInit+0x168>)
 800afd6:	f002 f89d 	bl	800d114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800afda:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800afde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afe0:	2302      	movs	r3, #2
 800afe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afe4:	2300      	movs	r3, #0
 800afe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800afe8:	2303      	movs	r3, #3
 800afea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800afec:	230b      	movs	r3, #11
 800afee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800aff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aff4:	4619      	mov	r1, r3
 800aff6:	4808      	ldr	r0, [pc, #32]	; (800b018 <HAL_ETH_MspInit+0x16c>)
 800aff8:	f002 f88c 	bl	800d114 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800affc:	bf00      	nop
 800affe:	3738      	adds	r7, #56	; 0x38
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	40028000 	.word	0x40028000
 800b008:	40023800 	.word	0x40023800
 800b00c:	40020800 	.word	0x40020800
 800b010:	40020000 	.word	0x40020000
 800b014:	40020400 	.word	0x40020400
 800b018:	40021800 	.word	0x40021800

0800b01c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b08a      	sub	sp, #40	; 0x28
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b024:	f107 0314 	add.w	r3, r7, #20
 800b028:	2200      	movs	r2, #0
 800b02a:	601a      	str	r2, [r3, #0]
 800b02c:	605a      	str	r2, [r3, #4]
 800b02e:	609a      	str	r2, [r3, #8]
 800b030:	60da      	str	r2, [r3, #12]
 800b032:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a17      	ldr	r2, [pc, #92]	; (800b098 <HAL_UART_MspInit+0x7c>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d128      	bne.n	800b090 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b03e:	4b17      	ldr	r3, [pc, #92]	; (800b09c <HAL_UART_MspInit+0x80>)
 800b040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b042:	4a16      	ldr	r2, [pc, #88]	; (800b09c <HAL_UART_MspInit+0x80>)
 800b044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b048:	6413      	str	r3, [r2, #64]	; 0x40
 800b04a:	4b14      	ldr	r3, [pc, #80]	; (800b09c <HAL_UART_MspInit+0x80>)
 800b04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b04e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b052:	613b      	str	r3, [r7, #16]
 800b054:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b056:	4b11      	ldr	r3, [pc, #68]	; (800b09c <HAL_UART_MspInit+0x80>)
 800b058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b05a:	4a10      	ldr	r2, [pc, #64]	; (800b09c <HAL_UART_MspInit+0x80>)
 800b05c:	f043 0308 	orr.w	r3, r3, #8
 800b060:	6313      	str	r3, [r2, #48]	; 0x30
 800b062:	4b0e      	ldr	r3, [pc, #56]	; (800b09c <HAL_UART_MspInit+0x80>)
 800b064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b066:	f003 0308 	and.w	r3, r3, #8
 800b06a:	60fb      	str	r3, [r7, #12]
 800b06c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800b06e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b074:	2302      	movs	r3, #2
 800b076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b078:	2300      	movs	r3, #0
 800b07a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b07c:	2303      	movs	r3, #3
 800b07e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b080:	2307      	movs	r3, #7
 800b082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b084:	f107 0314 	add.w	r3, r7, #20
 800b088:	4619      	mov	r1, r3
 800b08a:	4805      	ldr	r0, [pc, #20]	; (800b0a0 <HAL_UART_MspInit+0x84>)
 800b08c:	f002 f842 	bl	800d114 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b090:	bf00      	nop
 800b092:	3728      	adds	r7, #40	; 0x28
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	40004800 	.word	0x40004800
 800b09c:	40023800 	.word	0x40023800
 800b0a0:	40020c00 	.word	0x40020c00

0800b0a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b0a8:	bf00      	nop
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr

0800b0b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b0b2:	b480      	push	{r7}
 800b0b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b0b6:	e7fe      	b.n	800b0b6 <HardFault_Handler+0x4>

0800b0b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b0bc:	e7fe      	b.n	800b0bc <MemManage_Handler+0x4>

0800b0be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b0be:	b480      	push	{r7}
 800b0c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b0c2:	e7fe      	b.n	800b0c2 <BusFault_Handler+0x4>

0800b0c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b0c8:	e7fe      	b.n	800b0c8 <UsageFault_Handler+0x4>

0800b0ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b0ca:	b480      	push	{r7}
 800b0cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b0ce:	bf00      	nop
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b0dc:	bf00      	nop
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b0ea:	bf00      	nop
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b0f8:	f000 f9f6 	bl	800b4e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b0fc:	bf00      	nop
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800b104:	4802      	ldr	r0, [pc, #8]	; (800b110 <DMA2_Stream0_IRQHandler+0x10>)
 800b106:	f001 f931 	bl	800c36c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800b10a:	bf00      	nop
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	2002e1b8 	.word	0x2002e1b8

0800b114 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b11e:	f004 f9e1 	bl	800f4e4 <__errno>
 800b122:	4602      	mov	r2, r0
 800b124:	2316      	movs	r3, #22
 800b126:	6013      	str	r3, [r2, #0]
	return -1;
 800b128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3708      	adds	r7, #8
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <_exit>:

void _exit (int status)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b13c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7ff ffe7 	bl	800b114 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b146:	e7fe      	b.n	800b146 <_exit+0x12>

0800b148 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b154:	2300      	movs	r3, #0
 800b156:	617b      	str	r3, [r7, #20]
 800b158:	e00a      	b.n	800b170 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b15a:	f3af 8000 	nop.w
 800b15e:	4601      	mov	r1, r0
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	1c5a      	adds	r2, r3, #1
 800b164:	60ba      	str	r2, [r7, #8]
 800b166:	b2ca      	uxtb	r2, r1
 800b168:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	3301      	adds	r3, #1
 800b16e:	617b      	str	r3, [r7, #20]
 800b170:	697a      	ldr	r2, [r7, #20]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	429a      	cmp	r2, r3
 800b176:	dbf0      	blt.n	800b15a <_read+0x12>
	}

return len;
 800b178:	687b      	ldr	r3, [r7, #4]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3718      	adds	r7, #24
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b182:	b580      	push	{r7, lr}
 800b184:	b086      	sub	sp, #24
 800b186:	af00      	add	r7, sp, #0
 800b188:	60f8      	str	r0, [r7, #12]
 800b18a:	60b9      	str	r1, [r7, #8]
 800b18c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b18e:	2300      	movs	r3, #0
 800b190:	617b      	str	r3, [r7, #20]
 800b192:	e009      	b.n	800b1a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	1c5a      	adds	r2, r3, #1
 800b198:	60ba      	str	r2, [r7, #8]
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	617b      	str	r3, [r7, #20]
 800b1a8:	697a      	ldr	r2, [r7, #20]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	dbf1      	blt.n	800b194 <_write+0x12>
	}
	return len;
 800b1b0:	687b      	ldr	r3, [r7, #4]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3718      	adds	r7, #24
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <_close>:

int _close(int file)
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b083      	sub	sp, #12
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
	return -1;
 800b1c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	370c      	adds	r7, #12
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr

0800b1d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b1d2:	b480      	push	{r7}
 800b1d4:	b083      	sub	sp, #12
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b1e2:	605a      	str	r2, [r3, #4]
	return 0;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	370c      	adds	r7, #12
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr

0800b1f2 <_isatty>:

int _isatty(int file)
{
 800b1f2:	b480      	push	{r7}
 800b1f4:	b083      	sub	sp, #12
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
	return 1;
 800b1fa:	2301      	movs	r3, #1
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	607a      	str	r2, [r7, #4]
	return 0;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3714      	adds	r7, #20
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr
	...

0800b224 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b22c:	4b11      	ldr	r3, [pc, #68]	; (800b274 <_sbrk+0x50>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d102      	bne.n	800b23a <_sbrk+0x16>
		heap_end = &end;
 800b234:	4b0f      	ldr	r3, [pc, #60]	; (800b274 <_sbrk+0x50>)
 800b236:	4a10      	ldr	r2, [pc, #64]	; (800b278 <_sbrk+0x54>)
 800b238:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b23a:	4b0e      	ldr	r3, [pc, #56]	; (800b274 <_sbrk+0x50>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b240:	4b0c      	ldr	r3, [pc, #48]	; (800b274 <_sbrk+0x50>)
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4413      	add	r3, r2
 800b248:	466a      	mov	r2, sp
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d907      	bls.n	800b25e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b24e:	f004 f949 	bl	800f4e4 <__errno>
 800b252:	4602      	mov	r2, r0
 800b254:	230c      	movs	r3, #12
 800b256:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b25c:	e006      	b.n	800b26c <_sbrk+0x48>
	}

	heap_end += incr;
 800b25e:	4b05      	ldr	r3, [pc, #20]	; (800b274 <_sbrk+0x50>)
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4413      	add	r3, r2
 800b266:	4a03      	ldr	r2, [pc, #12]	; (800b274 <_sbrk+0x50>)
 800b268:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b26a:	68fb      	ldr	r3, [r7, #12]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3710      	adds	r7, #16
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}
 800b274:	20000f18 	.word	0x20000f18
 800b278:	2002efd0 	.word	0x2002efd0

0800b27c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b27c:	b480      	push	{r7}
 800b27e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b280:	4b15      	ldr	r3, [pc, #84]	; (800b2d8 <SystemInit+0x5c>)
 800b282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b286:	4a14      	ldr	r2, [pc, #80]	; (800b2d8 <SystemInit+0x5c>)
 800b288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b28c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b290:	4b12      	ldr	r3, [pc, #72]	; (800b2dc <SystemInit+0x60>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a11      	ldr	r2, [pc, #68]	; (800b2dc <SystemInit+0x60>)
 800b296:	f043 0301 	orr.w	r3, r3, #1
 800b29a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b29c:	4b0f      	ldr	r3, [pc, #60]	; (800b2dc <SystemInit+0x60>)
 800b29e:	2200      	movs	r2, #0
 800b2a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b2a2:	4b0e      	ldr	r3, [pc, #56]	; (800b2dc <SystemInit+0x60>)
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	490d      	ldr	r1, [pc, #52]	; (800b2dc <SystemInit+0x60>)
 800b2a8:	4b0d      	ldr	r3, [pc, #52]	; (800b2e0 <SystemInit+0x64>)
 800b2aa:	4013      	ands	r3, r2
 800b2ac:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b2ae:	4b0b      	ldr	r3, [pc, #44]	; (800b2dc <SystemInit+0x60>)
 800b2b0:	4a0c      	ldr	r2, [pc, #48]	; (800b2e4 <SystemInit+0x68>)
 800b2b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b2b4:	4b09      	ldr	r3, [pc, #36]	; (800b2dc <SystemInit+0x60>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4a08      	ldr	r2, [pc, #32]	; (800b2dc <SystemInit+0x60>)
 800b2ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b2be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b2c0:	4b06      	ldr	r3, [pc, #24]	; (800b2dc <SystemInit+0x60>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b2c6:	4b04      	ldr	r3, [pc, #16]	; (800b2d8 <SystemInit+0x5c>)
 800b2c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b2cc:	609a      	str	r2, [r3, #8]
#endif
}
 800b2ce:	bf00      	nop
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	e000ed00 	.word	0xe000ed00
 800b2dc:	40023800 	.word	0x40023800
 800b2e0:	fef6ffff 	.word	0xfef6ffff
 800b2e4:	24003010 	.word	0x24003010

0800b2e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b2e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b320 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b2ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b2ee:	e003      	b.n	800b2f8 <LoopCopyDataInit>

0800b2f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b2f0:	4b0c      	ldr	r3, [pc, #48]	; (800b324 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b2f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b2f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b2f6:	3104      	adds	r1, #4

0800b2f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b2f8:	480b      	ldr	r0, [pc, #44]	; (800b328 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b2fa:	4b0c      	ldr	r3, [pc, #48]	; (800b32c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b2fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b2fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b300:	d3f6      	bcc.n	800b2f0 <CopyDataInit>
  ldr  r2, =_sbss
 800b302:	4a0b      	ldr	r2, [pc, #44]	; (800b330 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b304:	e002      	b.n	800b30c <LoopFillZerobss>

0800b306 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b306:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b308:	f842 3b04 	str.w	r3, [r2], #4

0800b30c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b30c:	4b09      	ldr	r3, [pc, #36]	; (800b334 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b30e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b310:	d3f9      	bcc.n	800b306 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b312:	f7ff ffb3 	bl	800b27c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b316:	f004 f95b 	bl	800f5d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b31a:	f7fe ff13 	bl	800a144 <main>
  bx  lr    
 800b31e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b320:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800b324:	080a7870 	.word	0x080a7870
  ldr  r0, =_sdata
 800b328:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b32c:	20000ef8 	.word	0x20000ef8
  ldr  r2, =_sbss
 800b330:	20000ef8 	.word	0x20000ef8
  ldr  r3, = _ebss
 800b334:	2002efcc 	.word	0x2002efcc

0800b338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b338:	e7fe      	b.n	800b338 <ADC_IRQHandler>

0800b33a <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 800b33a:	b480      	push	{r7}
 800b33c:	b087      	sub	sp, #28
 800b33e:	af00      	add	r7, sp, #0
 800b340:	60f8      	str	r0, [r7, #12]
 800b342:	60b9      	str	r1, [r7, #8]
 800b344:	607a      	str	r2, [r7, #4]
 800b346:	603b      	str	r3, [r7, #0]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 800b348:	f04f 0300 	mov.w	r3, #0
 800b34c:	617b      	str	r3, [r7, #20]

#if defined (ARM_MATH_DSP)

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	089b      	lsrs	r3, r3, #2
 800b352:	613b      	str	r3, [r7, #16]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 800b354:	e04a      	b.n	800b3ec <arm_dot_prod_f32+0xb2>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer */
    sum += (*pSrcA++) * (*pSrcB++);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	1d1a      	adds	r2, r3, #4
 800b35a:	60fa      	str	r2, [r7, #12]
 800b35c:	ed93 7a00 	vldr	s14, [r3]
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	1d1a      	adds	r2, r3, #4
 800b364:	60ba      	str	r2, [r7, #8]
 800b366:	edd3 7a00 	vldr	s15, [r3]
 800b36a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b36e:	ed97 7a05 	vldr	s14, [r7, #20]
 800b372:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b376:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	1d1a      	adds	r2, r3, #4
 800b37e:	60fa      	str	r2, [r7, #12]
 800b380:	ed93 7a00 	vldr	s14, [r3]
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	1d1a      	adds	r2, r3, #4
 800b388:	60ba      	str	r2, [r7, #8]
 800b38a:	edd3 7a00 	vldr	s15, [r3]
 800b38e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b392:	ed97 7a05 	vldr	s14, [r7, #20]
 800b396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b39a:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	1d1a      	adds	r2, r3, #4
 800b3a2:	60fa      	str	r2, [r7, #12]
 800b3a4:	ed93 7a00 	vldr	s14, [r3]
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	1d1a      	adds	r2, r3, #4
 800b3ac:	60ba      	str	r2, [r7, #8]
 800b3ae:	edd3 7a00 	vldr	s15, [r3]
 800b3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3b6:	ed97 7a05 	vldr	s14, [r7, #20]
 800b3ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3be:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	1d1a      	adds	r2, r3, #4
 800b3c6:	60fa      	str	r2, [r7, #12]
 800b3c8:	ed93 7a00 	vldr	s14, [r3]
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	1d1a      	adds	r2, r3, #4
 800b3d0:	60ba      	str	r2, [r7, #8]
 800b3d2:	edd3 7a00 	vldr	s15, [r3]
 800b3d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3da:	ed97 7a05 	vldr	s14, [r7, #20]
 800b3de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3e2:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1b1      	bne.n	800b356 <arm_dot_prod_f32+0x1c>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f003 0303 	and.w	r3, r3, #3
 800b3f8:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 800b3fa:	e014      	b.n	800b426 <arm_dot_prod_f32+0xec>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer. */
    sum += (*pSrcA++) * (*pSrcB++);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	1d1a      	adds	r2, r3, #4
 800b400:	60fa      	str	r2, [r7, #12]
 800b402:	ed93 7a00 	vldr	s14, [r3]
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	1d1a      	adds	r2, r3, #4
 800b40a:	60ba      	str	r2, [r7, #8]
 800b40c:	edd3 7a00 	vldr	s15, [r3]
 800b410:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b414:	ed97 7a05 	vldr	s14, [r7, #20]
 800b418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b41c:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	3b01      	subs	r3, #1
 800b424:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d1e7      	bne.n	800b3fc <arm_dot_prod_f32+0xc2>
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	697a      	ldr	r2, [r7, #20]
 800b430:	601a      	str	r2, [r3, #0]
}
 800b432:	bf00      	nop
 800b434:	371c      	adds	r7, #28
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr

0800b43e <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800b43e:	b480      	push	{r7}
 800b440:	b085      	sub	sp, #20
 800b442:	af00      	add	r7, sp, #0
 800b444:	60f8      	str	r0, [r7, #12]
 800b446:	607b      	str	r3, [r7, #4]
 800b448:	460b      	mov	r3, r1
 800b44a:	817b      	strh	r3, [r7, #10]
 800b44c:	4613      	mov	r3, r2
 800b44e:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	897a      	ldrh	r2, [r7, #10]
 800b454:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	893a      	ldrh	r2, [r7, #8]
 800b45a:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	605a      	str	r2, [r3, #4]
}
 800b462:	bf00      	nop
 800b464:	3714      	adds	r7, #20
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b472:	2003      	movs	r0, #3
 800b474:	f000 fd40 	bl	800bef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b478:	2000      	movs	r0, #0
 800b47a:	f000 f805 	bl	800b488 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800b47e:	f7ff fc5d 	bl	800ad3c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800b482:	2300      	movs	r3, #0
}
 800b484:	4618      	mov	r0, r3
 800b486:	bd80      	pop	{r7, pc}

0800b488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b490:	4b12      	ldr	r3, [pc, #72]	; (800b4dc <HAL_InitTick+0x54>)
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	4b12      	ldr	r3, [pc, #72]	; (800b4e0 <HAL_InitTick+0x58>)
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	4619      	mov	r1, r3
 800b49a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b49e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f000 fd5b 	bl	800bf62 <HAL_SYSTICK_Config>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d001      	beq.n	800b4b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	e00e      	b.n	800b4d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2b0f      	cmp	r3, #15
 800b4ba:	d80a      	bhi.n	800b4d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b4bc:	2200      	movs	r2, #0
 800b4be:	6879      	ldr	r1, [r7, #4]
 800b4c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4c4:	f000 fd23 	bl	800bf0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b4c8:	4a06      	ldr	r2, [pc, #24]	; (800b4e4 <HAL_InitTick+0x5c>)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	e000      	b.n	800b4d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	20000000 	.word	0x20000000
 800b4e0:	20000008 	.word	0x20000008
 800b4e4:	20000004 	.word	0x20000004

0800b4e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b4ec:	4b06      	ldr	r3, [pc, #24]	; (800b508 <HAL_IncTick+0x20>)
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	4b06      	ldr	r3, [pc, #24]	; (800b50c <HAL_IncTick+0x24>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	4a04      	ldr	r2, [pc, #16]	; (800b50c <HAL_IncTick+0x24>)
 800b4fa:	6013      	str	r3, [r2, #0]
}
 800b4fc:	bf00      	nop
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	20000008 	.word	0x20000008
 800b50c:	2002efc4 	.word	0x2002efc4

0800b510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b510:	b480      	push	{r7}
 800b512:	af00      	add	r7, sp, #0
  return uwTick;
 800b514:	4b03      	ldr	r3, [pc, #12]	; (800b524 <HAL_GetTick+0x14>)
 800b516:	681b      	ldr	r3, [r3, #0]
}
 800b518:	4618      	mov	r0, r3
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	2002efc4 	.word	0x2002efc4

0800b528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b530:	f7ff ffee 	bl	800b510 <HAL_GetTick>
 800b534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b540:	d005      	beq.n	800b54e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b542:	4b09      	ldr	r3, [pc, #36]	; (800b568 <HAL_Delay+0x40>)
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	461a      	mov	r2, r3
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	4413      	add	r3, r2
 800b54c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b54e:	bf00      	nop
 800b550:	f7ff ffde 	bl	800b510 <HAL_GetTick>
 800b554:	4602      	mov	r2, r0
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	1ad3      	subs	r3, r2, r3
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d8f7      	bhi.n	800b550 <HAL_Delay+0x28>
  {
  }
}
 800b560:	bf00      	nop
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	20000008 	.word	0x20000008

0800b56c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b574:	2300      	movs	r3, #0
 800b576:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d101      	bne.n	800b582 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	e031      	b.n	800b5e6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b586:	2b00      	cmp	r3, #0
 800b588:	d109      	bne.n	800b59e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7ff fbfa 	bl	800ad84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a2:	f003 0310 	and.w	r3, r3, #16
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d116      	bne.n	800b5d8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b5ae:	4b10      	ldr	r3, [pc, #64]	; (800b5f0 <HAL_ADC_Init+0x84>)
 800b5b0:	4013      	ands	r3, r2
 800b5b2:	f043 0202 	orr.w	r2, r3, #2
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 fa50 	bl	800ba60 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ca:	f023 0303 	bic.w	r3, r3, #3
 800b5ce:	f043 0201 	orr.w	r2, r3, #1
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	641a      	str	r2, [r3, #64]	; 0x40
 800b5d6:	e001      	b.n	800b5dc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	ffffeefd 	.word	0xffffeefd

0800b5f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b086      	sub	sp, #24
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800b600:	2300      	movs	r3, #0
 800b602:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d101      	bne.n	800b612 <HAL_ADC_Start_DMA+0x1e>
 800b60e:	2302      	movs	r3, #2
 800b610:	e0c7      	b.n	800b7a2 <HAL_ADC_Start_DMA+0x1ae>
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2201      	movs	r2, #1
 800b616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	f003 0301 	and.w	r3, r3, #1
 800b624:	2b01      	cmp	r3, #1
 800b626:	d018      	beq.n	800b65a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	689a      	ldr	r2, [r3, #8]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f042 0201 	orr.w	r2, r2, #1
 800b636:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800b638:	4b5c      	ldr	r3, [pc, #368]	; (800b7ac <HAL_ADC_Start_DMA+0x1b8>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a5c      	ldr	r2, [pc, #368]	; (800b7b0 <HAL_ADC_Start_DMA+0x1bc>)
 800b63e:	fba2 2303 	umull	r2, r3, r2, r3
 800b642:	0c9a      	lsrs	r2, r3, #18
 800b644:	4613      	mov	r3, r2
 800b646:	005b      	lsls	r3, r3, #1
 800b648:	4413      	add	r3, r2
 800b64a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800b64c:	e002      	b.n	800b654 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	3b01      	subs	r3, #1
 800b652:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d1f9      	bne.n	800b64e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	f003 0301 	and.w	r3, r3, #1
 800b664:	2b01      	cmp	r3, #1
 800b666:	f040 809b 	bne.w	800b7a0 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b66e:	4b51      	ldr	r3, [pc, #324]	; (800b7b4 <HAL_ADC_Start_DMA+0x1c0>)
 800b670:	4013      	ands	r3, r2
 800b672:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b684:	2b00      	cmp	r3, #0
 800b686:	d007      	beq.n	800b698 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b68c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b690:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b69c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b6a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6a4:	d106      	bne.n	800b6b4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6aa:	f023 0206 	bic.w	r2, r3, #6
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	645a      	str	r2, [r3, #68]	; 0x44
 800b6b2:	e002      	b.n	800b6ba <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c6:	4a3c      	ldr	r2, [pc, #240]	; (800b7b8 <HAL_ADC_Start_DMA+0x1c4>)
 800b6c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ce:	4a3b      	ldr	r2, [pc, #236]	; (800b7bc <HAL_ADC_Start_DMA+0x1c8>)
 800b6d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d6:	4a3a      	ldr	r2, [pc, #232]	; (800b7c0 <HAL_ADC_Start_DMA+0x1cc>)
 800b6d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800b6e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	685a      	ldr	r2, [r3, #4]
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b6f2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	689a      	ldr	r2, [r3, #8]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b702:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	334c      	adds	r3, #76	; 0x4c
 800b70e:	4619      	mov	r1, r3
 800b710:	68ba      	ldr	r2, [r7, #8]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f000 fdca 	bl	800c2ac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800b718:	4b2a      	ldr	r3, [pc, #168]	; (800b7c4 <HAL_ADC_Start_DMA+0x1d0>)
 800b71a:	685b      	ldr	r3, [r3, #4]
 800b71c:	f003 031f 	and.w	r3, r3, #31
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10f      	bne.n	800b744 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d136      	bne.n	800b7a0 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	689a      	ldr	r2, [r3, #8]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b740:	609a      	str	r2, [r3, #8]
 800b742:	e02d      	b.n	800b7a0 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a1f      	ldr	r2, [pc, #124]	; (800b7c8 <HAL_ADC_Start_DMA+0x1d4>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d10e      	bne.n	800b76c <HAL_ADC_Start_DMA+0x178>
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d107      	bne.n	800b76c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	689a      	ldr	r2, [r3, #8]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b76a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800b76c:	4b15      	ldr	r3, [pc, #84]	; (800b7c4 <HAL_ADC_Start_DMA+0x1d0>)
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	f003 0310 	and.w	r3, r3, #16
 800b774:	2b00      	cmp	r3, #0
 800b776:	d113      	bne.n	800b7a0 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a13      	ldr	r2, [pc, #76]	; (800b7cc <HAL_ADC_Start_DMA+0x1d8>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d10e      	bne.n	800b7a0 <HAL_ADC_Start_DMA+0x1ac>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d107      	bne.n	800b7a0 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	689a      	ldr	r2, [r3, #8]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b79e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3718      	adds	r7, #24
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	20000000 	.word	0x20000000
 800b7b0:	431bde83 	.word	0x431bde83
 800b7b4:	fffff8fe 	.word	0xfffff8fe
 800b7b8:	0800bc55 	.word	0x0800bc55
 800b7bc:	0800bd0f 	.word	0x0800bd0f
 800b7c0:	0800bd2b 	.word	0x0800bd2b
 800b7c4:	40012300 	.word	0x40012300
 800b7c8:	40012000 	.word	0x40012000
 800b7cc:	40012200 	.word	0x40012200

0800b7d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800b7d8:	bf00      	nop
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800b7ec:	bf00      	nop
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800b802:	2300      	movs	r3, #0
 800b804:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d101      	bne.n	800b814 <HAL_ADC_ConfigChannel+0x1c>
 800b810:	2302      	movs	r3, #2
 800b812:	e115      	b.n	800ba40 <HAL_ADC_ConfigChannel+0x248>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2b09      	cmp	r3, #9
 800b822:	d935      	bls.n	800b890 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	68d9      	ldr	r1, [r3, #12]
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	b29b      	uxth	r3, r3
 800b830:	461a      	mov	r2, r3
 800b832:	4613      	mov	r3, r2
 800b834:	005b      	lsls	r3, r3, #1
 800b836:	4413      	add	r3, r2
 800b838:	3b1e      	subs	r3, #30
 800b83a:	2207      	movs	r2, #7
 800b83c:	fa02 f303 	lsl.w	r3, r2, r3
 800b840:	43da      	mvns	r2, r3
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	400a      	ands	r2, r1
 800b848:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4a7f      	ldr	r2, [pc, #508]	; (800ba4c <HAL_ADC_ConfigChannel+0x254>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d10a      	bne.n	800b86a <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68d9      	ldr	r1, [r3, #12]
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	061a      	lsls	r2, r3, #24
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	430a      	orrs	r2, r1
 800b866:	60da      	str	r2, [r3, #12]
 800b868:	e035      	b.n	800b8d6 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	68d9      	ldr	r1, [r3, #12]
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	689a      	ldr	r2, [r3, #8]
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	b29b      	uxth	r3, r3
 800b87a:	4618      	mov	r0, r3
 800b87c:	4603      	mov	r3, r0
 800b87e:	005b      	lsls	r3, r3, #1
 800b880:	4403      	add	r3, r0
 800b882:	3b1e      	subs	r3, #30
 800b884:	409a      	lsls	r2, r3
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	430a      	orrs	r2, r1
 800b88c:	60da      	str	r2, [r3, #12]
 800b88e:	e022      	b.n	800b8d6 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	6919      	ldr	r1, [r3, #16]
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	461a      	mov	r2, r3
 800b89e:	4613      	mov	r3, r2
 800b8a0:	005b      	lsls	r3, r3, #1
 800b8a2:	4413      	add	r3, r2
 800b8a4:	2207      	movs	r2, #7
 800b8a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8aa:	43da      	mvns	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	400a      	ands	r2, r1
 800b8b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	6919      	ldr	r1, [r3, #16]
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	689a      	ldr	r2, [r3, #8]
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	005b      	lsls	r3, r3, #1
 800b8ca:	4403      	add	r3, r0
 800b8cc:	409a      	lsls	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	430a      	orrs	r2, r1
 800b8d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	2b06      	cmp	r3, #6
 800b8dc:	d824      	bhi.n	800b928 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	685a      	ldr	r2, [r3, #4]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	4413      	add	r3, r2
 800b8ee:	3b05      	subs	r3, #5
 800b8f0:	221f      	movs	r2, #31
 800b8f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8f6:	43da      	mvns	r2, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	400a      	ands	r2, r1
 800b8fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	4618      	mov	r0, r3
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	685a      	ldr	r2, [r3, #4]
 800b912:	4613      	mov	r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	4413      	add	r3, r2
 800b918:	3b05      	subs	r3, #5
 800b91a:	fa00 f203 	lsl.w	r2, r0, r3
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	430a      	orrs	r2, r1
 800b924:	635a      	str	r2, [r3, #52]	; 0x34
 800b926:	e04c      	b.n	800b9c2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	2b0c      	cmp	r3, #12
 800b92e:	d824      	bhi.n	800b97a <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	685a      	ldr	r2, [r3, #4]
 800b93a:	4613      	mov	r3, r2
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	4413      	add	r3, r2
 800b940:	3b23      	subs	r3, #35	; 0x23
 800b942:	221f      	movs	r2, #31
 800b944:	fa02 f303 	lsl.w	r3, r2, r3
 800b948:	43da      	mvns	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	400a      	ands	r2, r1
 800b950:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	4618      	mov	r0, r3
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	685a      	ldr	r2, [r3, #4]
 800b964:	4613      	mov	r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	4413      	add	r3, r2
 800b96a:	3b23      	subs	r3, #35	; 0x23
 800b96c:	fa00 f203 	lsl.w	r2, r0, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	430a      	orrs	r2, r1
 800b976:	631a      	str	r2, [r3, #48]	; 0x30
 800b978:	e023      	b.n	800b9c2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	685a      	ldr	r2, [r3, #4]
 800b984:	4613      	mov	r3, r2
 800b986:	009b      	lsls	r3, r3, #2
 800b988:	4413      	add	r3, r2
 800b98a:	3b41      	subs	r3, #65	; 0x41
 800b98c:	221f      	movs	r2, #31
 800b98e:	fa02 f303 	lsl.w	r3, r2, r3
 800b992:	43da      	mvns	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	400a      	ands	r2, r1
 800b99a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	685a      	ldr	r2, [r3, #4]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	4413      	add	r3, r2
 800b9b4:	3b41      	subs	r3, #65	; 0x41
 800b9b6:	fa00 f203 	lsl.w	r2, r0, r3
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	430a      	orrs	r2, r1
 800b9c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a22      	ldr	r2, [pc, #136]	; (800ba50 <HAL_ADC_ConfigChannel+0x258>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d109      	bne.n	800b9e0 <HAL_ADC_ConfigChannel+0x1e8>
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b12      	cmp	r3, #18
 800b9d2:	d105      	bne.n	800b9e0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800b9d4:	4b1f      	ldr	r3, [pc, #124]	; (800ba54 <HAL_ADC_ConfigChannel+0x25c>)
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	4a1e      	ldr	r2, [pc, #120]	; (800ba54 <HAL_ADC_ConfigChannel+0x25c>)
 800b9da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b9de:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a1a      	ldr	r2, [pc, #104]	; (800ba50 <HAL_ADC_ConfigChannel+0x258>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d125      	bne.n	800ba36 <HAL_ADC_ConfigChannel+0x23e>
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4a17      	ldr	r2, [pc, #92]	; (800ba4c <HAL_ADC_ConfigChannel+0x254>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d003      	beq.n	800b9fc <HAL_ADC_ConfigChannel+0x204>
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2b11      	cmp	r3, #17
 800b9fa:	d11c      	bne.n	800ba36 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800b9fc:	4b15      	ldr	r3, [pc, #84]	; (800ba54 <HAL_ADC_ConfigChannel+0x25c>)
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	4a14      	ldr	r2, [pc, #80]	; (800ba54 <HAL_ADC_ConfigChannel+0x25c>)
 800ba02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ba06:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a0f      	ldr	r2, [pc, #60]	; (800ba4c <HAL_ADC_ConfigChannel+0x254>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d111      	bne.n	800ba36 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800ba12:	4b11      	ldr	r3, [pc, #68]	; (800ba58 <HAL_ADC_ConfigChannel+0x260>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a11      	ldr	r2, [pc, #68]	; (800ba5c <HAL_ADC_ConfigChannel+0x264>)
 800ba18:	fba2 2303 	umull	r2, r3, r2, r3
 800ba1c:	0c9a      	lsrs	r2, r3, #18
 800ba1e:	4613      	mov	r3, r2
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4413      	add	r3, r2
 800ba24:	005b      	lsls	r3, r3, #1
 800ba26:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800ba28:	e002      	b.n	800ba30 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d1f9      	bne.n	800ba2a <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3714      	adds	r7, #20
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr
 800ba4c:	10000012 	.word	0x10000012
 800ba50:	40012000 	.word	0x40012000
 800ba54:	40012300 	.word	0x40012300
 800ba58:	20000000 	.word	0x20000000
 800ba5c:	431bde83 	.word	0x431bde83

0800ba60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b083      	sub	sp, #12
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800ba68:	4b78      	ldr	r3, [pc, #480]	; (800bc4c <ADC_Init+0x1ec>)
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	4a77      	ldr	r2, [pc, #476]	; (800bc4c <ADC_Init+0x1ec>)
 800ba6e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800ba72:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800ba74:	4b75      	ldr	r3, [pc, #468]	; (800bc4c <ADC_Init+0x1ec>)
 800ba76:	685a      	ldr	r2, [r3, #4]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	4973      	ldr	r1, [pc, #460]	; (800bc4c <ADC_Init+0x1ec>)
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	685a      	ldr	r2, [r3, #4]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	6859      	ldr	r1, [r3, #4]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	691b      	ldr	r3, [r3, #16]
 800ba9c:	021a      	lsls	r2, r3, #8
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	430a      	orrs	r2, r1
 800baa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	685a      	ldr	r2, [r3, #4]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800bab4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	6859      	ldr	r1, [r3, #4]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	689a      	ldr	r2, [r3, #8]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	430a      	orrs	r2, r1
 800bac6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	689a      	ldr	r2, [r3, #8]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bad6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	6899      	ldr	r1, [r3, #8]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	68da      	ldr	r2, [r3, #12]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	430a      	orrs	r2, r1
 800bae8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baee:	4a58      	ldr	r2, [pc, #352]	; (800bc50 <ADC_Init+0x1f0>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d022      	beq.n	800bb3a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	689a      	ldr	r2, [r3, #8]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bb02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	6899      	ldr	r1, [r3, #8]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	430a      	orrs	r2, r1
 800bb14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	689a      	ldr	r2, [r3, #8]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bb24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	6899      	ldr	r1, [r3, #8]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	430a      	orrs	r2, r1
 800bb36:	609a      	str	r2, [r3, #8]
 800bb38:	e00f      	b.n	800bb5a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	689a      	ldr	r2, [r3, #8]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bb48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	689a      	ldr	r2, [r3, #8]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bb58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	689a      	ldr	r2, [r3, #8]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f022 0202 	bic.w	r2, r2, #2
 800bb68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	6899      	ldr	r1, [r3, #8]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	699b      	ldr	r3, [r3, #24]
 800bb74:	005a      	lsls	r2, r3, #1
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	430a      	orrs	r2, r1
 800bb7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d01b      	beq.n	800bbc0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	685a      	ldr	r2, [r3, #4]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	685a      	ldr	r2, [r3, #4]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800bba6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	6859      	ldr	r1, [r3, #4]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	035a      	lsls	r2, r3, #13
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	430a      	orrs	r2, r1
 800bbbc:	605a      	str	r2, [r3, #4]
 800bbbe:	e007      	b.n	800bbd0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	685a      	ldr	r2, [r3, #4]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bbce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800bbde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	69db      	ldr	r3, [r3, #28]
 800bbea:	3b01      	subs	r3, #1
 800bbec:	051a      	lsls	r2, r3, #20
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	430a      	orrs	r2, r1
 800bbf4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	689a      	ldr	r2, [r3, #8]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bc04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	6899      	ldr	r1, [r3, #8]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc12:	025a      	lsls	r2, r3, #9
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	430a      	orrs	r2, r1
 800bc1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	689a      	ldr	r2, [r3, #8]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	6899      	ldr	r1, [r3, #8]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	695b      	ldr	r3, [r3, #20]
 800bc36:	029a      	lsls	r2, r3, #10
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	430a      	orrs	r2, r1
 800bc3e:	609a      	str	r2, [r3, #8]
}
 800bc40:	bf00      	nop
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr
 800bc4c:	40012300 	.word	0x40012300
 800bc50:	0f000001 	.word	0x0f000001

0800bc54 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc60:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d13c      	bne.n	800bce8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d12b      	bne.n	800bce0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d127      	bne.n	800bce0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d006      	beq.n	800bcac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d119      	bne.n	800bce0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	685a      	ldr	r2, [r3, #4]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f022 0220 	bic.w	r2, r2, #32
 800bcba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d105      	bne.n	800bce0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd8:	f043 0201 	orr.w	r2, r3, #1
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f7ff f813 	bl	800ad0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800bce6:	e00e      	b.n	800bd06 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcec:	f003 0310 	and.w	r3, r3, #16
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d003      	beq.n	800bcfc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	f7ff fd75 	bl	800b7e4 <HAL_ADC_ErrorCallback>
}
 800bcfa:	e004      	b.n	800bd06 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	4798      	blx	r3
}
 800bd06:	bf00      	nop
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b084      	sub	sp, #16
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd1a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f7ff fd57 	bl	800b7d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bd22:	bf00      	nop
 800bd24:	3710      	adds	r7, #16
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}

0800bd2a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800bd2a:	b580      	push	{r7, lr}
 800bd2c:	b084      	sub	sp, #16
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd36:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2240      	movs	r2, #64	; 0x40
 800bd3c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd42:	f043 0204 	orr.w	r2, r3, #4
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f7ff fd4a 	bl	800b7e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bd50:	bf00      	nop
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b085      	sub	sp, #20
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f003 0307 	and.w	r3, r3, #7
 800bd66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bd68:	4b0b      	ldr	r3, [pc, #44]	; (800bd98 <__NVIC_SetPriorityGrouping+0x40>)
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bd6e:	68ba      	ldr	r2, [r7, #8]
 800bd70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bd74:	4013      	ands	r3, r2
 800bd76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800bd80:	4b06      	ldr	r3, [pc, #24]	; (800bd9c <__NVIC_SetPriorityGrouping+0x44>)
 800bd82:	4313      	orrs	r3, r2
 800bd84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bd86:	4a04      	ldr	r2, [pc, #16]	; (800bd98 <__NVIC_SetPriorityGrouping+0x40>)
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	60d3      	str	r3, [r2, #12]
}
 800bd8c:	bf00      	nop
 800bd8e:	3714      	adds	r7, #20
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr
 800bd98:	e000ed00 	.word	0xe000ed00
 800bd9c:	05fa0000 	.word	0x05fa0000

0800bda0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bda0:	b480      	push	{r7}
 800bda2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bda4:	4b04      	ldr	r3, [pc, #16]	; (800bdb8 <__NVIC_GetPriorityGrouping+0x18>)
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	0a1b      	lsrs	r3, r3, #8
 800bdaa:	f003 0307 	and.w	r3, r3, #7
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr
 800bdb8:	e000ed00 	.word	0xe000ed00

0800bdbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bdc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	db0b      	blt.n	800bde6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bdce:	79fb      	ldrb	r3, [r7, #7]
 800bdd0:	f003 021f 	and.w	r2, r3, #31
 800bdd4:	4907      	ldr	r1, [pc, #28]	; (800bdf4 <__NVIC_EnableIRQ+0x38>)
 800bdd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdda:	095b      	lsrs	r3, r3, #5
 800bddc:	2001      	movs	r0, #1
 800bdde:	fa00 f202 	lsl.w	r2, r0, r2
 800bde2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800bde6:	bf00      	nop
 800bde8:	370c      	adds	r7, #12
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	e000e100 	.word	0xe000e100

0800bdf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	4603      	mov	r3, r0
 800be00:	6039      	str	r1, [r7, #0]
 800be02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800be04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	db0a      	blt.n	800be22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	b2da      	uxtb	r2, r3
 800be10:	490c      	ldr	r1, [pc, #48]	; (800be44 <__NVIC_SetPriority+0x4c>)
 800be12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be16:	0112      	lsls	r2, r2, #4
 800be18:	b2d2      	uxtb	r2, r2
 800be1a:	440b      	add	r3, r1
 800be1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800be20:	e00a      	b.n	800be38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	b2da      	uxtb	r2, r3
 800be26:	4908      	ldr	r1, [pc, #32]	; (800be48 <__NVIC_SetPriority+0x50>)
 800be28:	79fb      	ldrb	r3, [r7, #7]
 800be2a:	f003 030f 	and.w	r3, r3, #15
 800be2e:	3b04      	subs	r3, #4
 800be30:	0112      	lsls	r2, r2, #4
 800be32:	b2d2      	uxtb	r2, r2
 800be34:	440b      	add	r3, r1
 800be36:	761a      	strb	r2, [r3, #24]
}
 800be38:	bf00      	nop
 800be3a:	370c      	adds	r7, #12
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr
 800be44:	e000e100 	.word	0xe000e100
 800be48:	e000ed00 	.word	0xe000ed00

0800be4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b089      	sub	sp, #36	; 0x24
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f003 0307 	and.w	r3, r3, #7
 800be5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	f1c3 0307 	rsb	r3, r3, #7
 800be66:	2b04      	cmp	r3, #4
 800be68:	bf28      	it	cs
 800be6a:	2304      	movcs	r3, #4
 800be6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800be6e:	69fb      	ldr	r3, [r7, #28]
 800be70:	3304      	adds	r3, #4
 800be72:	2b06      	cmp	r3, #6
 800be74:	d902      	bls.n	800be7c <NVIC_EncodePriority+0x30>
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	3b03      	subs	r3, #3
 800be7a:	e000      	b.n	800be7e <NVIC_EncodePriority+0x32>
 800be7c:	2300      	movs	r3, #0
 800be7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be84:	69bb      	ldr	r3, [r7, #24]
 800be86:	fa02 f303 	lsl.w	r3, r2, r3
 800be8a:	43da      	mvns	r2, r3
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	401a      	ands	r2, r3
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800be94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	fa01 f303 	lsl.w	r3, r1, r3
 800be9e:	43d9      	mvns	r1, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bea4:	4313      	orrs	r3, r2
         );
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3724      	adds	r7, #36	; 0x24
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr
	...

0800beb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	3b01      	subs	r3, #1
 800bec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bec4:	d301      	bcc.n	800beca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800bec6:	2301      	movs	r3, #1
 800bec8:	e00f      	b.n	800beea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800beca:	4a0a      	ldr	r2, [pc, #40]	; (800bef4 <SysTick_Config+0x40>)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	3b01      	subs	r3, #1
 800bed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800bed2:	210f      	movs	r1, #15
 800bed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bed8:	f7ff ff8e 	bl	800bdf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bedc:	4b05      	ldr	r3, [pc, #20]	; (800bef4 <SysTick_Config+0x40>)
 800bede:	2200      	movs	r2, #0
 800bee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bee2:	4b04      	ldr	r3, [pc, #16]	; (800bef4 <SysTick_Config+0x40>)
 800bee4:	2207      	movs	r2, #7
 800bee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3708      	adds	r7, #8
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	e000e010 	.word	0xe000e010

0800bef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f7ff ff29 	bl	800bd58 <__NVIC_SetPriorityGrouping>
}
 800bf06:	bf00      	nop
 800bf08:	3708      	adds	r7, #8
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b086      	sub	sp, #24
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	4603      	mov	r3, r0
 800bf16:	60b9      	str	r1, [r7, #8]
 800bf18:	607a      	str	r2, [r7, #4]
 800bf1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bf20:	f7ff ff3e 	bl	800bda0 <__NVIC_GetPriorityGrouping>
 800bf24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	68b9      	ldr	r1, [r7, #8]
 800bf2a:	6978      	ldr	r0, [r7, #20]
 800bf2c:	f7ff ff8e 	bl	800be4c <NVIC_EncodePriority>
 800bf30:	4602      	mov	r2, r0
 800bf32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf36:	4611      	mov	r1, r2
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7ff ff5d 	bl	800bdf8 <__NVIC_SetPriority>
}
 800bf3e:	bf00      	nop
 800bf40:	3718      	adds	r7, #24
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b082      	sub	sp, #8
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bf50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7ff ff31 	bl	800bdbc <__NVIC_EnableIRQ>
}
 800bf5a:	bf00      	nop
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b082      	sub	sp, #8
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f7ff ffa2 	bl	800beb4 <SysTick_Config>
 800bf70:	4603      	mov	r3, r0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
	...

0800bf7c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d101      	bne.n	800bf8e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e054      	b.n	800c038 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	7f5b      	ldrb	r3, [r3, #29]
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d105      	bne.n	800bfa4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7fe ff64 	bl	800ae6c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2202      	movs	r2, #2
 800bfa8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	791b      	ldrb	r3, [r3, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d10c      	bne.n	800bfcc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a22      	ldr	r2, [pc, #136]	; (800c040 <HAL_CRC_Init+0xc4>)
 800bfb8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	689a      	ldr	r2, [r3, #8]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f022 0218 	bic.w	r2, r2, #24
 800bfc8:	609a      	str	r2, [r3, #8]
 800bfca:	e00c      	b.n	800bfe6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6899      	ldr	r1, [r3, #8]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 f834 	bl	800c044 <HAL_CRCEx_Polynomial_Set>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d001      	beq.n	800bfe6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e028      	b.n	800c038 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	795b      	ldrb	r3, [r3, #5]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d105      	bne.n	800bffa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bff6:	611a      	str	r2, [r3, #16]
 800bff8:	e004      	b.n	800c004 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	6912      	ldr	r2, [r2, #16]
 800c002:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	695a      	ldr	r2, [r3, #20]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	430a      	orrs	r2, r1
 800c018:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	699a      	ldr	r2, [r3, #24]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	430a      	orrs	r2, r1
 800c02e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800c036:	2300      	movs	r3, #0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3708      	adds	r7, #8
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	04c11db7 	.word	0x04c11db7

0800c044 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800c044:	b480      	push	{r7}
 800c046:	b087      	sub	sp, #28
 800c048:	af00      	add	r7, sp, #0
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	60b9      	str	r1, [r7, #8]
 800c04e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c050:	2300      	movs	r3, #0
 800c052:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800c054:	231f      	movs	r3, #31
 800c056:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800c058:	bf00      	nop
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	1e5a      	subs	r2, r3, #1
 800c05e:	613a      	str	r2, [r7, #16]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d009      	beq.n	800c078 <HAL_CRCEx_Polynomial_Set+0x34>
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	f003 031f 	and.w	r3, r3, #31
 800c06a:	68ba      	ldr	r2, [r7, #8]
 800c06c:	fa22 f303 	lsr.w	r3, r2, r3
 800c070:	f003 0301 	and.w	r3, r3, #1
 800c074:	2b00      	cmp	r3, #0
 800c076:	d0f0      	beq.n	800c05a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2b18      	cmp	r3, #24
 800c07c:	d846      	bhi.n	800c10c <HAL_CRCEx_Polynomial_Set+0xc8>
 800c07e:	a201      	add	r2, pc, #4	; (adr r2, 800c084 <HAL_CRCEx_Polynomial_Set+0x40>)
 800c080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c084:	0800c113 	.word	0x0800c113
 800c088:	0800c10d 	.word	0x0800c10d
 800c08c:	0800c10d 	.word	0x0800c10d
 800c090:	0800c10d 	.word	0x0800c10d
 800c094:	0800c10d 	.word	0x0800c10d
 800c098:	0800c10d 	.word	0x0800c10d
 800c09c:	0800c10d 	.word	0x0800c10d
 800c0a0:	0800c10d 	.word	0x0800c10d
 800c0a4:	0800c101 	.word	0x0800c101
 800c0a8:	0800c10d 	.word	0x0800c10d
 800c0ac:	0800c10d 	.word	0x0800c10d
 800c0b0:	0800c10d 	.word	0x0800c10d
 800c0b4:	0800c10d 	.word	0x0800c10d
 800c0b8:	0800c10d 	.word	0x0800c10d
 800c0bc:	0800c10d 	.word	0x0800c10d
 800c0c0:	0800c10d 	.word	0x0800c10d
 800c0c4:	0800c0f5 	.word	0x0800c0f5
 800c0c8:	0800c10d 	.word	0x0800c10d
 800c0cc:	0800c10d 	.word	0x0800c10d
 800c0d0:	0800c10d 	.word	0x0800c10d
 800c0d4:	0800c10d 	.word	0x0800c10d
 800c0d8:	0800c10d 	.word	0x0800c10d
 800c0dc:	0800c10d 	.word	0x0800c10d
 800c0e0:	0800c10d 	.word	0x0800c10d
 800c0e4:	0800c0e9 	.word	0x0800c0e9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	2b06      	cmp	r3, #6
 800c0ec:	d913      	bls.n	800c116 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c0f2:	e010      	b.n	800c116 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	2b07      	cmp	r3, #7
 800c0f8:	d90f      	bls.n	800c11a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c0fe:	e00c      	b.n	800c11a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	2b0f      	cmp	r3, #15
 800c104:	d90b      	bls.n	800c11e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800c106:	2301      	movs	r3, #1
 800c108:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c10a:	e008      	b.n	800c11e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	75fb      	strb	r3, [r7, #23]
      break;
 800c110:	e006      	b.n	800c120 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c112:	bf00      	nop
 800c114:	e004      	b.n	800c120 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c116:	bf00      	nop
 800c118:	e002      	b.n	800c120 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c11a:	bf00      	nop
 800c11c:	e000      	b.n	800c120 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c11e:	bf00      	nop
  }
  if (status == HAL_OK)
 800c120:	7dfb      	ldrb	r3, [r7, #23]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d10d      	bne.n	800c142 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	68ba      	ldr	r2, [r7, #8]
 800c12c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	f023 0118 	bic.w	r1, r3, #24
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	430a      	orrs	r2, r1
 800c140:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800c142:	7dfb      	ldrb	r3, [r7, #23]
}
 800c144:	4618      	mov	r0, r3
 800c146:	371c      	adds	r7, #28
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b086      	sub	sp, #24
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c158:	2300      	movs	r3, #0
 800c15a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c15c:	f7ff f9d8 	bl	800b510 <HAL_GetTick>
 800c160:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d101      	bne.n	800c16c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c168:	2301      	movs	r3, #1
 800c16a:	e099      	b.n	800c2a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2202      	movs	r2, #2
 800c178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f022 0201 	bic.w	r2, r2, #1
 800c18a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c18c:	e00f      	b.n	800c1ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c18e:	f7ff f9bf 	bl	800b510 <HAL_GetTick>
 800c192:	4602      	mov	r2, r0
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	1ad3      	subs	r3, r2, r3
 800c198:	2b05      	cmp	r3, #5
 800c19a:	d908      	bls.n	800c1ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2220      	movs	r2, #32
 800c1a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2203      	movs	r2, #3
 800c1a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c1aa:	2303      	movs	r3, #3
 800c1ac:	e078      	b.n	800c2a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f003 0301 	and.w	r3, r3, #1
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1e8      	bne.n	800c18e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c1c4:	697a      	ldr	r2, [r7, #20]
 800c1c6:	4b38      	ldr	r3, [pc, #224]	; (800c2a8 <HAL_DMA_Init+0x158>)
 800c1c8:	4013      	ands	r3, r2
 800c1ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685a      	ldr	r2, [r3, #4]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c1da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	691b      	ldr	r3, [r3, #16]
 800c1e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c1e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	699b      	ldr	r3, [r3, #24]
 800c1ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c1f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6a1b      	ldr	r3, [r3, #32]
 800c1f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c1fa:	697a      	ldr	r2, [r7, #20]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c204:	2b04      	cmp	r3, #4
 800c206:	d107      	bne.n	800c218 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c210:	4313      	orrs	r3, r2
 800c212:	697a      	ldr	r2, [r7, #20]
 800c214:	4313      	orrs	r3, r2
 800c216:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	697a      	ldr	r2, [r7, #20]
 800c21e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	695b      	ldr	r3, [r3, #20]
 800c226:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	f023 0307 	bic.w	r3, r3, #7
 800c22e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c234:	697a      	ldr	r2, [r7, #20]
 800c236:	4313      	orrs	r3, r2
 800c238:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c23e:	2b04      	cmp	r3, #4
 800c240:	d117      	bne.n	800c272 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c246:	697a      	ldr	r2, [r7, #20]
 800c248:	4313      	orrs	r3, r2
 800c24a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c250:	2b00      	cmp	r3, #0
 800c252:	d00e      	beq.n	800c272 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 fa77 	bl	800c748 <DMA_CheckFifoParam>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d008      	beq.n	800c272 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2240      	movs	r2, #64	; 0x40
 800c264:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2201      	movs	r2, #1
 800c26a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c26e:	2301      	movs	r3, #1
 800c270:	e016      	b.n	800c2a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 fa2e 	bl	800c6dc <DMA_CalcBaseAndBitshift>
 800c280:	4603      	mov	r3, r0
 800c282:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c288:	223f      	movs	r2, #63	; 0x3f
 800c28a:	409a      	lsls	r2, r3
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2201      	movs	r2, #1
 800c29a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c29e:	2300      	movs	r3, #0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3718      	adds	r7, #24
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	f010803f 	.word	0xf010803f

0800c2ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b086      	sub	sp, #24
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	60b9      	str	r1, [r7, #8]
 800c2b6:	607a      	str	r2, [r7, #4]
 800c2b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d101      	bne.n	800c2d2 <HAL_DMA_Start_IT+0x26>
 800c2ce:	2302      	movs	r3, #2
 800c2d0:	e048      	b.n	800c364 <HAL_DMA_Start_IT+0xb8>
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d137      	bne.n	800c356 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2202      	movs	r2, #2
 800c2ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	68b9      	ldr	r1, [r7, #8]
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	f000 f9c0 	bl	800c680 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c304:	223f      	movs	r2, #63	; 0x3f
 800c306:	409a      	lsls	r2, r3
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f042 0216 	orr.w	r2, r2, #22
 800c31a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	695a      	ldr	r2, [r3, #20]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c32a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c330:	2b00      	cmp	r3, #0
 800c332:	d007      	beq.n	800c344 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f042 0208 	orr.w	r2, r2, #8
 800c342:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f042 0201 	orr.w	r2, r2, #1
 800c352:	601a      	str	r2, [r3, #0]
 800c354:	e005      	b.n	800c362 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2200      	movs	r2, #0
 800c35a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c35e:	2302      	movs	r3, #2
 800c360:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c362:	7dfb      	ldrb	r3, [r7, #23]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3718      	adds	r7, #24
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b086      	sub	sp, #24
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800c374:	2300      	movs	r3, #0
 800c376:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800c378:	4b92      	ldr	r3, [pc, #584]	; (800c5c4 <HAL_DMA_IRQHandler+0x258>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a92      	ldr	r2, [pc, #584]	; (800c5c8 <HAL_DMA_IRQHandler+0x25c>)
 800c37e:	fba2 2303 	umull	r2, r3, r2, r3
 800c382:	0a9b      	lsrs	r3, r3, #10
 800c384:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c38a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c396:	2208      	movs	r2, #8
 800c398:	409a      	lsls	r2, r3
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	4013      	ands	r3, r2
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d01a      	beq.n	800c3d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f003 0304 	and.w	r3, r3, #4
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d013      	beq.n	800c3d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	681a      	ldr	r2, [r3, #0]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f022 0204 	bic.w	r2, r2, #4
 800c3be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3c4:	2208      	movs	r2, #8
 800c3c6:	409a      	lsls	r2, r3
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3d0:	f043 0201 	orr.w	r2, r3, #1
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3dc:	2201      	movs	r2, #1
 800c3de:	409a      	lsls	r2, r3
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	4013      	ands	r3, r2
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d012      	beq.n	800c40e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	695b      	ldr	r3, [r3, #20]
 800c3ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d00b      	beq.n	800c40e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	409a      	lsls	r2, r3
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c406:	f043 0202 	orr.w	r2, r3, #2
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c412:	2204      	movs	r2, #4
 800c414:	409a      	lsls	r2, r3
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	4013      	ands	r3, r2
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d012      	beq.n	800c444 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f003 0302 	and.w	r3, r3, #2
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d00b      	beq.n	800c444 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c430:	2204      	movs	r2, #4
 800c432:	409a      	lsls	r2, r3
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c43c:	f043 0204 	orr.w	r2, r3, #4
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c448:	2210      	movs	r2, #16
 800c44a:	409a      	lsls	r2, r3
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	4013      	ands	r3, r2
 800c450:	2b00      	cmp	r3, #0
 800c452:	d043      	beq.n	800c4dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f003 0308 	and.w	r3, r3, #8
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d03c      	beq.n	800c4dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c466:	2210      	movs	r2, #16
 800c468:	409a      	lsls	r2, r3
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d018      	beq.n	800c4ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c486:	2b00      	cmp	r3, #0
 800c488:	d108      	bne.n	800c49c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d024      	beq.n	800c4dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	4798      	blx	r3
 800c49a:	e01f      	b.n	800c4dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d01b      	beq.n	800c4dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	4798      	blx	r3
 800c4ac:	e016      	b.n	800c4dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d107      	bne.n	800c4cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f022 0208 	bic.w	r2, r2, #8
 800c4ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d003      	beq.n	800c4dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4e0:	2220      	movs	r2, #32
 800c4e2:	409a      	lsls	r2, r3
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	4013      	ands	r3, r2
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f000 808e 	beq.w	800c60a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f003 0310 	and.w	r3, r3, #16
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f000 8086 	beq.w	800c60a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c502:	2220      	movs	r2, #32
 800c504:	409a      	lsls	r2, r3
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c510:	b2db      	uxtb	r3, r3
 800c512:	2b05      	cmp	r3, #5
 800c514:	d136      	bne.n	800c584 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f022 0216 	bic.w	r2, r2, #22
 800c524:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	695a      	ldr	r2, [r3, #20]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c534:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d103      	bne.n	800c546 <HAL_DMA_IRQHandler+0x1da>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c542:	2b00      	cmp	r3, #0
 800c544:	d007      	beq.n	800c556 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	681a      	ldr	r2, [r3, #0]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f022 0208 	bic.w	r2, r2, #8
 800c554:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c55a:	223f      	movs	r2, #63	; 0x3f
 800c55c:	409a      	lsls	r2, r3
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2201      	movs	r2, #1
 800c56e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c576:	2b00      	cmp	r3, #0
 800c578:	d07d      	beq.n	800c676 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	4798      	blx	r3
        }
        return;
 800c582:	e078      	b.n	800c676 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d01c      	beq.n	800c5cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d108      	bne.n	800c5b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d030      	beq.n	800c60a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	4798      	blx	r3
 800c5b0:	e02b      	b.n	800c60a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d027      	beq.n	800c60a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	4798      	blx	r3
 800c5c2:	e022      	b.n	800c60a <HAL_DMA_IRQHandler+0x29e>
 800c5c4:	20000000 	.word	0x20000000
 800c5c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d10f      	bne.n	800c5fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f022 0210 	bic.w	r2, r2, #16
 800c5e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d003      	beq.n	800c60a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d032      	beq.n	800c678 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c616:	f003 0301 	and.w	r3, r3, #1
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d022      	beq.n	800c664 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2205      	movs	r2, #5
 800c622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f022 0201 	bic.w	r2, r2, #1
 800c634:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	3301      	adds	r3, #1
 800c63a:	60bb      	str	r3, [r7, #8]
 800c63c:	697a      	ldr	r2, [r7, #20]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d307      	bcc.n	800c652 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f003 0301 	and.w	r3, r3, #1
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d1f2      	bne.n	800c636 <HAL_DMA_IRQHandler+0x2ca>
 800c650:	e000      	b.n	800c654 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c652:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2201      	movs	r2, #1
 800c660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d005      	beq.n	800c678 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	4798      	blx	r3
 800c674:	e000      	b.n	800c678 <HAL_DMA_IRQHandler+0x30c>
        return;
 800c676:	bf00      	nop
    }
  }
}
 800c678:	3718      	adds	r7, #24
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop

0800c680 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	607a      	str	r2, [r7, #4]
 800c68c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c69c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	683a      	ldr	r2, [r7, #0]
 800c6a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	2b40      	cmp	r3, #64	; 0x40
 800c6ac:	d108      	bne.n	800c6c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c6be:	e007      	b.n	800c6d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	68ba      	ldr	r2, [r7, #8]
 800c6c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	60da      	str	r2, [r3, #12]
}
 800c6d0:	bf00      	nop
 800c6d2:	3714      	adds	r7, #20
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b085      	sub	sp, #20
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	b2db      	uxtb	r3, r3
 800c6ea:	3b10      	subs	r3, #16
 800c6ec:	4a13      	ldr	r2, [pc, #76]	; (800c73c <DMA_CalcBaseAndBitshift+0x60>)
 800c6ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c6f2:	091b      	lsrs	r3, r3, #4
 800c6f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c6f6:	4a12      	ldr	r2, [pc, #72]	; (800c740 <DMA_CalcBaseAndBitshift+0x64>)
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	461a      	mov	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2b03      	cmp	r3, #3
 800c708:	d908      	bls.n	800c71c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	461a      	mov	r2, r3
 800c710:	4b0c      	ldr	r3, [pc, #48]	; (800c744 <DMA_CalcBaseAndBitshift+0x68>)
 800c712:	4013      	ands	r3, r2
 800c714:	1d1a      	adds	r2, r3, #4
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	659a      	str	r2, [r3, #88]	; 0x58
 800c71a:	e006      	b.n	800c72a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	461a      	mov	r2, r3
 800c722:	4b08      	ldr	r3, [pc, #32]	; (800c744 <DMA_CalcBaseAndBitshift+0x68>)
 800c724:	4013      	ands	r3, r2
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3714      	adds	r7, #20
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	aaaaaaab 	.word	0xaaaaaaab
 800c740:	08016a70 	.word	0x08016a70
 800c744:	fffffc00 	.word	0xfffffc00

0800c748 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c748:	b480      	push	{r7}
 800c74a:	b085      	sub	sp, #20
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c750:	2300      	movs	r3, #0
 800c752:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c758:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	699b      	ldr	r3, [r3, #24]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d11f      	bne.n	800c7a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	2b03      	cmp	r3, #3
 800c766:	d855      	bhi.n	800c814 <DMA_CheckFifoParam+0xcc>
 800c768:	a201      	add	r2, pc, #4	; (adr r2, 800c770 <DMA_CheckFifoParam+0x28>)
 800c76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c76e:	bf00      	nop
 800c770:	0800c781 	.word	0x0800c781
 800c774:	0800c793 	.word	0x0800c793
 800c778:	0800c781 	.word	0x0800c781
 800c77c:	0800c815 	.word	0x0800c815
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d045      	beq.n	800c818 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800c78c:	2301      	movs	r3, #1
 800c78e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c790:	e042      	b.n	800c818 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c796:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c79a:	d13f      	bne.n	800c81c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800c79c:	2301      	movs	r3, #1
 800c79e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c7a0:	e03c      	b.n	800c81c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	699b      	ldr	r3, [r3, #24]
 800c7a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7aa:	d121      	bne.n	800c7f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	2b03      	cmp	r3, #3
 800c7b0:	d836      	bhi.n	800c820 <DMA_CheckFifoParam+0xd8>
 800c7b2:	a201      	add	r2, pc, #4	; (adr r2, 800c7b8 <DMA_CheckFifoParam+0x70>)
 800c7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b8:	0800c7c9 	.word	0x0800c7c9
 800c7bc:	0800c7cf 	.word	0x0800c7cf
 800c7c0:	0800c7c9 	.word	0x0800c7c9
 800c7c4:	0800c7e1 	.word	0x0800c7e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	73fb      	strb	r3, [r7, #15]
      break;
 800c7cc:	e02f      	b.n	800c82e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d024      	beq.n	800c824 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c7de:	e021      	b.n	800c824 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c7e8:	d11e      	bne.n	800c828 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c7ee:	e01b      	b.n	800c828 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	2b02      	cmp	r3, #2
 800c7f4:	d902      	bls.n	800c7fc <DMA_CheckFifoParam+0xb4>
 800c7f6:	2b03      	cmp	r3, #3
 800c7f8:	d003      	beq.n	800c802 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c7fa:	e018      	b.n	800c82e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	73fb      	strb	r3, [r7, #15]
      break;
 800c800:	e015      	b.n	800c82e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00e      	beq.n	800c82c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800c80e:	2301      	movs	r3, #1
 800c810:	73fb      	strb	r3, [r7, #15]
      break;
 800c812:	e00b      	b.n	800c82c <DMA_CheckFifoParam+0xe4>
      break;
 800c814:	bf00      	nop
 800c816:	e00a      	b.n	800c82e <DMA_CheckFifoParam+0xe6>
      break;
 800c818:	bf00      	nop
 800c81a:	e008      	b.n	800c82e <DMA_CheckFifoParam+0xe6>
      break;
 800c81c:	bf00      	nop
 800c81e:	e006      	b.n	800c82e <DMA_CheckFifoParam+0xe6>
      break;
 800c820:	bf00      	nop
 800c822:	e004      	b.n	800c82e <DMA_CheckFifoParam+0xe6>
      break;
 800c824:	bf00      	nop
 800c826:	e002      	b.n	800c82e <DMA_CheckFifoParam+0xe6>
      break;   
 800c828:	bf00      	nop
 800c82a:	e000      	b.n	800c82e <DMA_CheckFifoParam+0xe6>
      break;
 800c82c:	bf00      	nop
    }
  } 
  
  return status; 
 800c82e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c830:	4618      	mov	r0, r3
 800c832:	3714      	adds	r7, #20
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b088      	sub	sp, #32
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800c844:	2300      	movs	r3, #0
 800c846:	61fb      	str	r3, [r7, #28]
 800c848:	2300      	movs	r3, #0
 800c84a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800c84c:	4ba9      	ldr	r3, [pc, #676]	; (800caf4 <HAL_ETH_Init+0x2b8>)
 800c84e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 800c850:	2300      	movs	r3, #0
 800c852:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800c854:	2300      	movs	r3, #0
 800c856:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d101      	bne.n	800c862 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800c85e:	2301      	movs	r3, #1
 800c860:	e183      	b.n	800cb6a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d106      	bne.n	800c87c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2200      	movs	r2, #0
 800c872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f7fe fb18 	bl	800aeac <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c87c:	4b9e      	ldr	r3, [pc, #632]	; (800caf8 <HAL_ETH_Init+0x2bc>)
 800c87e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c880:	4a9d      	ldr	r2, [pc, #628]	; (800caf8 <HAL_ETH_Init+0x2bc>)
 800c882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c886:	6453      	str	r3, [r2, #68]	; 0x44
 800c888:	4b9b      	ldr	r3, [pc, #620]	; (800caf8 <HAL_ETH_Init+0x2bc>)
 800c88a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c88c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c890:	60bb      	str	r3, [r7, #8]
 800c892:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800c894:	4b99      	ldr	r3, [pc, #612]	; (800cafc <HAL_ETH_Init+0x2c0>)
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	4a98      	ldr	r2, [pc, #608]	; (800cafc <HAL_ETH_Init+0x2c0>)
 800c89a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c89e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800c8a0:	4b96      	ldr	r3, [pc, #600]	; (800cafc <HAL_ETH_Init+0x2c0>)
 800c8a2:	685a      	ldr	r2, [r3, #4]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6a1b      	ldr	r3, [r3, #32]
 800c8a8:	4994      	ldr	r1, [pc, #592]	; (800cafc <HAL_ETH_Init+0x2c0>)
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f042 0201 	orr.w	r2, r2, #1
 800c8c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8c4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800c8c6:	f7fe fe23 	bl	800b510 <HAL_GetTick>
 800c8ca:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800c8cc:	e011      	b.n	800c8f2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800c8ce:	f7fe fe1f 	bl	800b510 <HAL_GetTick>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	1ad3      	subs	r3, r2, r3
 800c8d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c8dc:	d909      	bls.n	800c8f2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2203      	movs	r2, #3
 800c8e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800c8ee:	2303      	movs	r3, #3
 800c8f0:	e13b      	b.n	800cb6a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f003 0301 	and.w	r3, r3, #1
 800c900:	2b00      	cmp	r3, #0
 800c902:	d1e4      	bne.n	800c8ce <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	f023 031c 	bic.w	r3, r3, #28
 800c912:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800c914:	f001 fa52 	bl	800ddbc <HAL_RCC_GetHCLKFreq>
 800c918:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	4a78      	ldr	r2, [pc, #480]	; (800cb00 <HAL_ETH_Init+0x2c4>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d908      	bls.n	800c934 <HAL_ETH_Init+0xf8>
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	4a77      	ldr	r2, [pc, #476]	; (800cb04 <HAL_ETH_Init+0x2c8>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d804      	bhi.n	800c934 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	f043 0308 	orr.w	r3, r3, #8
 800c930:	61fb      	str	r3, [r7, #28]
 800c932:	e027      	b.n	800c984 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	4a73      	ldr	r2, [pc, #460]	; (800cb04 <HAL_ETH_Init+0x2c8>)
 800c938:	4293      	cmp	r3, r2
 800c93a:	d908      	bls.n	800c94e <HAL_ETH_Init+0x112>
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	4a72      	ldr	r2, [pc, #456]	; (800cb08 <HAL_ETH_Init+0x2cc>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d804      	bhi.n	800c94e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	f043 030c 	orr.w	r3, r3, #12
 800c94a:	61fb      	str	r3, [r7, #28]
 800c94c:	e01a      	b.n	800c984 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	4a6d      	ldr	r2, [pc, #436]	; (800cb08 <HAL_ETH_Init+0x2cc>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d903      	bls.n	800c95e <HAL_ETH_Init+0x122>
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	4a6c      	ldr	r2, [pc, #432]	; (800cb0c <HAL_ETH_Init+0x2d0>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d911      	bls.n	800c982 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	4a6a      	ldr	r2, [pc, #424]	; (800cb0c <HAL_ETH_Init+0x2d0>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d908      	bls.n	800c978 <HAL_ETH_Init+0x13c>
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	4a69      	ldr	r2, [pc, #420]	; (800cb10 <HAL_ETH_Init+0x2d4>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d804      	bhi.n	800c978 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800c96e:	69fb      	ldr	r3, [r7, #28]
 800c970:	f043 0304 	orr.w	r3, r3, #4
 800c974:	61fb      	str	r3, [r7, #28]
 800c976:	e005      	b.n	800c984 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	f043 0310 	orr.w	r3, r3, #16
 800c97e:	61fb      	str	r3, [r7, #28]
 800c980:	e000      	b.n	800c984 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800c982:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	69fa      	ldr	r2, [r7, #28]
 800c98a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800c98c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c990:	2100      	movs	r1, #0
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 f956 	bl	800cc44 <HAL_ETH_WritePHYRegister>
 800c998:	4603      	mov	r3, r0
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d00b      	beq.n	800c9b6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800c9a2:	6939      	ldr	r1, [r7, #16]
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 f9b3 	bl	800cd10 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	e0d9      	b.n	800cb6a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800c9b6:	20ff      	movs	r0, #255	; 0xff
 800c9b8:	f7fe fdb6 	bl	800b528 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	f000 80a7 	beq.w	800cb14 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800c9c6:	f7fe fda3 	bl	800b510 <HAL_GetTick>
 800c9ca:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800c9cc:	f107 030c 	add.w	r3, r7, #12
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	2101      	movs	r1, #1
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f000 f8cd 	bl	800cb74 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800c9da:	f7fe fd99 	bl	800b510 <HAL_GetTick>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	1ad3      	subs	r3, r2, r3
 800c9e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d90f      	bls.n	800ca0c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800c9f0:	6939      	ldr	r1, [r7, #16]
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 f98c 	bl	800cd10 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2200      	movs	r2, #0
 800ca04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800ca08:	2303      	movs	r3, #3
 800ca0a:	e0ae      	b.n	800cb6a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f003 0304 	and.w	r3, r3, #4
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d0da      	beq.n	800c9cc <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800ca16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f000 f911 	bl	800cc44 <HAL_ETH_WritePHYRegister>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d00b      	beq.n	800ca40 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800ca2c:	6939      	ldr	r1, [r7, #16]
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 f96e 	bl	800cd10 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2201      	movs	r2, #1
 800ca38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	e094      	b.n	800cb6a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800ca40:	f7fe fd66 	bl	800b510 <HAL_GetTick>
 800ca44:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800ca46:	f107 030c 	add.w	r3, r7, #12
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	2101      	movs	r1, #1
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 f890 	bl	800cb74 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800ca54:	f7fe fd5c 	bl	800b510 <HAL_GetTick>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	1ad3      	subs	r3, r2, r3
 800ca5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d90f      	bls.n	800ca86 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800ca66:	2301      	movs	r3, #1
 800ca68:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800ca6a:	6939      	ldr	r1, [r7, #16]
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 f94f 	bl	800cd10 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2201      	movs	r2, #1
 800ca76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800ca82:	2303      	movs	r3, #3
 800ca84:	e071      	b.n	800cb6a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f003 0320 	and.w	r3, r3, #32
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d0da      	beq.n	800ca46 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800ca90:	f107 030c 	add.w	r3, r7, #12
 800ca94:	461a      	mov	r2, r3
 800ca96:	211f      	movs	r1, #31
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 f86b 	bl	800cb74 <HAL_ETH_ReadPHYRegister>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d00b      	beq.n	800cabc <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800caa4:	2301      	movs	r3, #1
 800caa6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800caa8:	6939      	ldr	r1, [r7, #16]
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 f930 	bl	800cd10 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2201      	movs	r2, #1
 800cab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800cab8:	2301      	movs	r3, #1
 800caba:	e056      	b.n	800cb6a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f003 0310 	and.w	r3, r3, #16
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d004      	beq.n	800cad0 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cacc:	60da      	str	r2, [r3, #12]
 800cace:	e002      	b.n	800cad6 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2200      	movs	r2, #0
 800cad4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	f003 0304 	and.w	r3, r3, #4
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d003      	beq.n	800cae8 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	609a      	str	r2, [r3, #8]
 800cae6:	e037      	b.n	800cb58 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800caee:	609a      	str	r2, [r3, #8]
 800caf0:	e032      	b.n	800cb58 <HAL_ETH_Init+0x31c>
 800caf2:	bf00      	nop
 800caf4:	03938700 	.word	0x03938700
 800caf8:	40023800 	.word	0x40023800
 800cafc:	40013800 	.word	0x40013800
 800cb00:	01312cff 	.word	0x01312cff
 800cb04:	02160ebf 	.word	0x02160ebf
 800cb08:	039386ff 	.word	0x039386ff
 800cb0c:	05f5e0ff 	.word	0x05f5e0ff
 800cb10:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	08db      	lsrs	r3, r3, #3
 800cb1a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	689b      	ldr	r3, [r3, #8]
 800cb20:	085b      	lsrs	r3, r3, #1
 800cb22:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800cb24:	4313      	orrs	r3, r2
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	461a      	mov	r2, r3
 800cb2a:	2100      	movs	r1, #0
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 f889 	bl	800cc44 <HAL_ETH_WritePHYRegister>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00b      	beq.n	800cb50 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800cb3c:	6939      	ldr	r1, [r7, #16]
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 f8e6 	bl	800cd10 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2201      	movs	r2, #1
 800cb48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	e00c      	b.n	800cb6a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800cb50:	f640 70ff 	movw	r0, #4095	; 0xfff
 800cb54:	f7fe fce8 	bl	800b528 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800cb58:	6939      	ldr	r1, [r7, #16]
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 f8d8 	bl	800cd10 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2201      	movs	r2, #1
 800cb64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800cb68:	2300      	movs	r3, #0
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3720      	adds	r7, #32
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop

0800cb74 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b086      	sub	sp, #24
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	607a      	str	r2, [r7, #4]
 800cb80:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800cb82:	2300      	movs	r3, #0
 800cb84:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800cb86:	2300      	movs	r3, #0
 800cb88:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	2b82      	cmp	r3, #130	; 0x82
 800cb94:	d101      	bne.n	800cb9a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800cb96:	2302      	movs	r3, #2
 800cb98:	e050      	b.n	800cc3c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2282      	movs	r2, #130	; 0x82
 800cb9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	691b      	ldr	r3, [r3, #16]
 800cba8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	f003 031c 	and.w	r3, r3, #28
 800cbb0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	8a1b      	ldrh	r3, [r3, #16]
 800cbb6:	02db      	lsls	r3, r3, #11
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	697a      	ldr	r2, [r7, #20]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800cbc0:	897b      	ldrh	r3, [r7, #10]
 800cbc2:	019b      	lsls	r3, r3, #6
 800cbc4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800cbc8:	697a      	ldr	r2, [r7, #20]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	f023 0302 	bic.w	r3, r3, #2
 800cbd4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	f043 0301 	orr.w	r3, r3, #1
 800cbdc:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	697a      	ldr	r2, [r7, #20]
 800cbe4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800cbe6:	f7fe fc93 	bl	800b510 <HAL_GetTick>
 800cbea:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800cbec:	e015      	b.n	800cc1a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800cbee:	f7fe fc8f 	bl	800b510 <HAL_GetTick>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	1ad3      	subs	r3, r2, r3
 800cbf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbfc:	d309      	bcc.n	800cc12 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2201      	movs	r2, #1
 800cc02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800cc0e:	2303      	movs	r3, #3
 800cc10:	e014      	b.n	800cc3c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	691b      	ldr	r3, [r3, #16]
 800cc18:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	f003 0301 	and.w	r3, r3, #1
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d1e4      	bne.n	800cbee <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	695b      	ldr	r3, [r3, #20]
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2201      	movs	r2, #1
 800cc36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800cc3a:	2300      	movs	r3, #0
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3718      	adds	r7, #24
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b086      	sub	sp, #24
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	460b      	mov	r3, r1
 800cc4e:	607a      	str	r2, [r7, #4]
 800cc50:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800cc52:	2300      	movs	r3, #0
 800cc54:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800cc56:	2300      	movs	r3, #0
 800cc58:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	2b42      	cmp	r3, #66	; 0x42
 800cc64:	d101      	bne.n	800cc6a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800cc66:	2302      	movs	r3, #2
 800cc68:	e04e      	b.n	800cd08 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2242      	movs	r2, #66	; 0x42
 800cc6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	691b      	ldr	r3, [r3, #16]
 800cc78:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	f003 031c 	and.w	r3, r3, #28
 800cc80:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	8a1b      	ldrh	r3, [r3, #16]
 800cc86:	02db      	lsls	r3, r3, #11
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	697a      	ldr	r2, [r7, #20]
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800cc90:	897b      	ldrh	r3, [r7, #10]
 800cc92:	019b      	lsls	r3, r3, #6
 800cc94:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800cc98:	697a      	ldr	r2, [r7, #20]
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	f043 0302 	orr.w	r3, r3, #2
 800cca4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	f043 0301 	orr.w	r3, r3, #1
 800ccac:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	697a      	ldr	r2, [r7, #20]
 800ccbe:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800ccc0:	f7fe fc26 	bl	800b510 <HAL_GetTick>
 800ccc4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800ccc6:	e015      	b.n	800ccf4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800ccc8:	f7fe fc22 	bl	800b510 <HAL_GetTick>
 800cccc:	4602      	mov	r2, r0
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	1ad3      	subs	r3, r2, r3
 800ccd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccd6:	d309      	bcc.n	800ccec <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2201      	movs	r2, #1
 800ccdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2200      	movs	r2, #0
 800cce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800cce8:	2303      	movs	r3, #3
 800ccea:	e00d      	b.n	800cd08 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	691b      	ldr	r3, [r3, #16]
 800ccf2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	f003 0301 	and.w	r3, r3, #1
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d1e4      	bne.n	800ccc8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2201      	movs	r2, #1
 800cd02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800cd06:	2300      	movs	r3, #0
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3718      	adds	r7, #24
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b0b0      	sub	sp, #192	; 0xc0
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d007      	beq.n	800cd36 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd2c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800cd34:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800cd36:	2300      	movs	r3, #0
 800cd38:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800cd42:	2300      	movs	r3, #0
 800cd44:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800cd46:	2300      	movs	r3, #0
 800cd48:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	69db      	ldr	r3, [r3, #28]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d103      	bne.n	800cd5e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800cd56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd5a:	663b      	str	r3, [r7, #96]	; 0x60
 800cd5c:	e001      	b.n	800cd62 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800cd62:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd66:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800cd70:	2300      	movs	r3, #0
 800cd72:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800cd74:	2300      	movs	r3, #0
 800cd76:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800cd7c:	2340      	movs	r3, #64	; 0x40
 800cd7e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800cd80:	2300      	movs	r3, #0
 800cd82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800cd86:	2300      	movs	r3, #0
 800cd88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800cd92:	2300      	movs	r3, #0
 800cd94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800cda4:	2300      	movs	r3, #0
 800cda6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800cdb0:	2380      	movs	r3, #128	; 0x80
 800cdb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800cde4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800cde8:	4bab      	ldr	r3, [pc, #684]	; (800d098 <ETH_MACDMAConfig+0x388>)
 800cdea:	4013      	ands	r3, r2
 800cdec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800cdf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800cdf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800cdf4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800cdf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800cdf8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800cdfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800cdfc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800ce02:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800ce04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800ce06:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800ce08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800ce0a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800ce10:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800ce12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800ce14:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800ce16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800ce18:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800ce1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800ce1c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800ce1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800ce20:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800ce22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800ce24:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800ce26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ce38:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800ce44:	2001      	movs	r0, #1
 800ce46:	f7fe fb6f 	bl	800b528 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ce52:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800ce54:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800ce56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800ce58:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800ce5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800ce5c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800ce5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800ce62:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800ce64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800ce68:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800ce6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800ce6e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800ce70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800ce74:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800ce78:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800ce80:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800ce82:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800ce8e:	2001      	movs	r0, #1
 800ce90:	f7fe fb4a 	bl	800b528 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ce9c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cea6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ceb0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	699b      	ldr	r3, [r3, #24]
 800ceb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800cebc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800cec0:	f64f 7341 	movw	r3, #65345	; 0xff41
 800cec4:	4013      	ands	r3, r2
 800cec6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800ceca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cece:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800ced0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800ced4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800ced6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800ceda:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800cedc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800cee0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800cee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800cee6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800cee8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800ceec:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800ceee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800cef2:	4313      	orrs	r3, r2
 800cef4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800cf00:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	699b      	ldr	r3, [r3, #24]
 800cf08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800cf0c:	2001      	movs	r0, #1
 800cf0e:	f7fe fb0b 	bl	800b528 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800cf1a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800cf1c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800cf20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	430a      	orrs	r2, r1
 800cf2a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	69db      	ldr	r3, [r3, #28]
 800cf32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800cf36:	2001      	movs	r0, #1
 800cf38:	f7fe faf6 	bl	800b528 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800cf44:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800cf46:	2300      	movs	r3, #0
 800cf48:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800cf4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cf4e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800cf50:	2300      	movs	r3, #0
 800cf52:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800cf54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cf58:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800cf62:	2300      	movs	r3, #0
 800cf64:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800cf66:	2300      	movs	r3, #0
 800cf68:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800cf6a:	2304      	movs	r3, #4
 800cf6c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800cf6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cf72:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800cf74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cf78:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800cf7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cf7e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800cf80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cf84:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800cf86:	2380      	movs	r3, #128	; 0x80
 800cf88:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681a      	ldr	r2, [r3, #0]
 800cf96:	f241 0318 	movw	r3, #4120	; 0x1018
 800cf9a:	4413      	add	r3, r2
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800cfa2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800cfa6:	4b3d      	ldr	r3, [pc, #244]	; (800d09c <ETH_MACDMAConfig+0x38c>)
 800cfa8:	4013      	ands	r3, r2
 800cfaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800cfae:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800cfb0:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800cfb2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800cfb4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800cfb6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800cfb8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800cfba:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800cfbc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800cfbe:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800cfc0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800cfc2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800cfc4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800cfc6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800cfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800cfca:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800cfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800cfce:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800cfd0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	f241 0318 	movw	r3, #4120	; 0x1018
 800cfe2:	4413      	add	r3, r2
 800cfe4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800cfe8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	f241 0318 	movw	r3, #4120	; 0x1018
 800cff2:	4413      	add	r3, r2
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800cffa:	2001      	movs	r0, #1
 800cffc:	f7fe fa94 	bl	800b528 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	f241 0318 	movw	r3, #4120	; 0x1018
 800d008:	4413      	add	r3, r2
 800d00a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800d00e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800d010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800d012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800d014:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800d016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800d018:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800d01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800d01c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800d01e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800d020:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800d022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d024:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800d026:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800d028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800d02a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d038:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800d048:	2001      	movs	r0, #1
 800d04a:	f7fe fa6d 	bl	800b528 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d056:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800d05a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	699b      	ldr	r3, [r3, #24]
 800d060:	2b01      	cmp	r3, #1
 800d062:	d10d      	bne.n	800d080 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	f241 031c 	movw	r3, #4124	; 0x101c
 800d06c:	4413      	add	r3, r2
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	6811      	ldr	r1, [r2, #0]
 800d074:	4a0a      	ldr	r2, [pc, #40]	; (800d0a0 <ETH_MACDMAConfig+0x390>)
 800d076:	431a      	orrs	r2, r3
 800d078:	f241 031c 	movw	r3, #4124	; 0x101c
 800d07c:	440b      	add	r3, r1
 800d07e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	695b      	ldr	r3, [r3, #20]
 800d084:	461a      	mov	r2, r3
 800d086:	2100      	movs	r1, #0
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 f80b 	bl	800d0a4 <ETH_MACAddressConfig>
}
 800d08e:	bf00      	nop
 800d090:	37c0      	adds	r7, #192	; 0xc0
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
 800d096:	bf00      	nop
 800d098:	ff20810f 	.word	0xff20810f
 800d09c:	f8de3f23 	.word	0xf8de3f23
 800d0a0:	00010040 	.word	0x00010040

0800d0a4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b087      	sub	sp, #28
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	3305      	adds	r3, #5
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	021b      	lsls	r3, r3, #8
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	3204      	adds	r2, #4
 800d0bc:	7812      	ldrb	r2, [r2, #0]
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800d0c2:	68ba      	ldr	r2, [r7, #8]
 800d0c4:	4b11      	ldr	r3, [pc, #68]	; (800d10c <ETH_MACAddressConfig+0x68>)
 800d0c6:	4413      	add	r3, r2
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	3303      	adds	r3, #3
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	061a      	lsls	r2, r3, #24
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	3302      	adds	r3, #2
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	041b      	lsls	r3, r3, #16
 800d0de:	431a      	orrs	r2, r3
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	021b      	lsls	r3, r3, #8
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	7812      	ldrb	r2, [r2, #0]
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800d0f2:	68ba      	ldr	r2, [r7, #8]
 800d0f4:	4b06      	ldr	r3, [pc, #24]	; (800d110 <ETH_MACAddressConfig+0x6c>)
 800d0f6:	4413      	add	r3, r2
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	6013      	str	r3, [r2, #0]
}
 800d0fe:	bf00      	nop
 800d100:	371c      	adds	r7, #28
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop
 800d10c:	40028040 	.word	0x40028040
 800d110:	40028044 	.word	0x40028044

0800d114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d114:	b480      	push	{r7}
 800d116:	b089      	sub	sp, #36	; 0x24
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800d11e:	2300      	movs	r3, #0
 800d120:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800d122:	2300      	movs	r3, #0
 800d124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800d126:	2300      	movs	r3, #0
 800d128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800d12a:	2300      	movs	r3, #0
 800d12c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800d12e:	2300      	movs	r3, #0
 800d130:	61fb      	str	r3, [r7, #28]
 800d132:	e175      	b.n	800d420 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800d134:	2201      	movs	r2, #1
 800d136:	69fb      	ldr	r3, [r7, #28]
 800d138:	fa02 f303 	lsl.w	r3, r2, r3
 800d13c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	697a      	ldr	r2, [r7, #20]
 800d144:	4013      	ands	r3, r2
 800d146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d148:	693a      	ldr	r2, [r7, #16]
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	f040 8164 	bne.w	800d41a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	2b02      	cmp	r3, #2
 800d158:	d003      	beq.n	800d162 <HAL_GPIO_Init+0x4e>
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	2b12      	cmp	r3, #18
 800d160:	d123      	bne.n	800d1aa <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800d162:	69fb      	ldr	r3, [r7, #28]
 800d164:	08da      	lsrs	r2, r3, #3
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	3208      	adds	r2, #8
 800d16a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d16e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800d170:	69fb      	ldr	r3, [r7, #28]
 800d172:	f003 0307 	and.w	r3, r3, #7
 800d176:	009b      	lsls	r3, r3, #2
 800d178:	220f      	movs	r2, #15
 800d17a:	fa02 f303 	lsl.w	r3, r2, r3
 800d17e:	43db      	mvns	r3, r3
 800d180:	69ba      	ldr	r2, [r7, #24]
 800d182:	4013      	ands	r3, r2
 800d184:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	691a      	ldr	r2, [r3, #16]
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	f003 0307 	and.w	r3, r3, #7
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	fa02 f303 	lsl.w	r3, r2, r3
 800d196:	69ba      	ldr	r2, [r7, #24]
 800d198:	4313      	orrs	r3, r2
 800d19a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800d19c:	69fb      	ldr	r3, [r7, #28]
 800d19e:	08da      	lsrs	r2, r3, #3
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	3208      	adds	r2, #8
 800d1a4:	69b9      	ldr	r1, [r7, #24]
 800d1a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	005b      	lsls	r3, r3, #1
 800d1b4:	2203      	movs	r2, #3
 800d1b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d1ba:	43db      	mvns	r3, r3
 800d1bc:	69ba      	ldr	r2, [r7, #24]
 800d1be:	4013      	ands	r3, r2
 800d1c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	f003 0203 	and.w	r2, r3, #3
 800d1ca:	69fb      	ldr	r3, [r7, #28]
 800d1cc:	005b      	lsls	r3, r3, #1
 800d1ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d1d2:	69ba      	ldr	r2, [r7, #24]
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	69ba      	ldr	r2, [r7, #24]
 800d1dc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d00b      	beq.n	800d1fe <HAL_GPIO_Init+0xea>
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	2b02      	cmp	r3, #2
 800d1ec:	d007      	beq.n	800d1fe <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d1f2:	2b11      	cmp	r3, #17
 800d1f4:	d003      	beq.n	800d1fe <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	2b12      	cmp	r3, #18
 800d1fc:	d130      	bne.n	800d260 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	689b      	ldr	r3, [r3, #8]
 800d202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	005b      	lsls	r3, r3, #1
 800d208:	2203      	movs	r2, #3
 800d20a:	fa02 f303 	lsl.w	r3, r2, r3
 800d20e:	43db      	mvns	r3, r3
 800d210:	69ba      	ldr	r2, [r7, #24]
 800d212:	4013      	ands	r3, r2
 800d214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	68da      	ldr	r2, [r3, #12]
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	005b      	lsls	r3, r3, #1
 800d21e:	fa02 f303 	lsl.w	r3, r2, r3
 800d222:	69ba      	ldr	r2, [r7, #24]
 800d224:	4313      	orrs	r3, r2
 800d226:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	69ba      	ldr	r2, [r7, #24]
 800d22c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d234:	2201      	movs	r2, #1
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	fa02 f303 	lsl.w	r3, r2, r3
 800d23c:	43db      	mvns	r3, r3
 800d23e:	69ba      	ldr	r2, [r7, #24]
 800d240:	4013      	ands	r3, r2
 800d242:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	091b      	lsrs	r3, r3, #4
 800d24a:	f003 0201 	and.w	r2, r3, #1
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	fa02 f303 	lsl.w	r3, r2, r3
 800d254:	69ba      	ldr	r2, [r7, #24]
 800d256:	4313      	orrs	r3, r2
 800d258:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	69ba      	ldr	r2, [r7, #24]
 800d25e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	68db      	ldr	r3, [r3, #12]
 800d264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	005b      	lsls	r3, r3, #1
 800d26a:	2203      	movs	r2, #3
 800d26c:	fa02 f303 	lsl.w	r3, r2, r3
 800d270:	43db      	mvns	r3, r3
 800d272:	69ba      	ldr	r2, [r7, #24]
 800d274:	4013      	ands	r3, r2
 800d276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	689a      	ldr	r2, [r3, #8]
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	005b      	lsls	r3, r3, #1
 800d280:	fa02 f303 	lsl.w	r3, r2, r3
 800d284:	69ba      	ldr	r2, [r7, #24]
 800d286:	4313      	orrs	r3, r2
 800d288:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	69ba      	ldr	r2, [r7, #24]
 800d28e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d298:	2b00      	cmp	r3, #0
 800d29a:	f000 80be 	beq.w	800d41a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d29e:	4b65      	ldr	r3, [pc, #404]	; (800d434 <HAL_GPIO_Init+0x320>)
 800d2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2a2:	4a64      	ldr	r2, [pc, #400]	; (800d434 <HAL_GPIO_Init+0x320>)
 800d2a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d2a8:	6453      	str	r3, [r2, #68]	; 0x44
 800d2aa:	4b62      	ldr	r3, [pc, #392]	; (800d434 <HAL_GPIO_Init+0x320>)
 800d2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d2b2:	60fb      	str	r3, [r7, #12]
 800d2b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800d2b6:	4a60      	ldr	r2, [pc, #384]	; (800d438 <HAL_GPIO_Init+0x324>)
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	089b      	lsrs	r3, r3, #2
 800d2bc:	3302      	adds	r3, #2
 800d2be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800d2c4:	69fb      	ldr	r3, [r7, #28]
 800d2c6:	f003 0303 	and.w	r3, r3, #3
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	220f      	movs	r2, #15
 800d2ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d2d2:	43db      	mvns	r3, r3
 800d2d4:	69ba      	ldr	r2, [r7, #24]
 800d2d6:	4013      	ands	r3, r2
 800d2d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4a57      	ldr	r2, [pc, #348]	; (800d43c <HAL_GPIO_Init+0x328>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d037      	beq.n	800d352 <HAL_GPIO_Init+0x23e>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	4a56      	ldr	r2, [pc, #344]	; (800d440 <HAL_GPIO_Init+0x32c>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d031      	beq.n	800d34e <HAL_GPIO_Init+0x23a>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	4a55      	ldr	r2, [pc, #340]	; (800d444 <HAL_GPIO_Init+0x330>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d02b      	beq.n	800d34a <HAL_GPIO_Init+0x236>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	4a54      	ldr	r2, [pc, #336]	; (800d448 <HAL_GPIO_Init+0x334>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d025      	beq.n	800d346 <HAL_GPIO_Init+0x232>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	4a53      	ldr	r2, [pc, #332]	; (800d44c <HAL_GPIO_Init+0x338>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d01f      	beq.n	800d342 <HAL_GPIO_Init+0x22e>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	4a52      	ldr	r2, [pc, #328]	; (800d450 <HAL_GPIO_Init+0x33c>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d019      	beq.n	800d33e <HAL_GPIO_Init+0x22a>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	4a51      	ldr	r2, [pc, #324]	; (800d454 <HAL_GPIO_Init+0x340>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d013      	beq.n	800d33a <HAL_GPIO_Init+0x226>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	4a50      	ldr	r2, [pc, #320]	; (800d458 <HAL_GPIO_Init+0x344>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d00d      	beq.n	800d336 <HAL_GPIO_Init+0x222>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	4a4f      	ldr	r2, [pc, #316]	; (800d45c <HAL_GPIO_Init+0x348>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d007      	beq.n	800d332 <HAL_GPIO_Init+0x21e>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	4a4e      	ldr	r2, [pc, #312]	; (800d460 <HAL_GPIO_Init+0x34c>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d101      	bne.n	800d32e <HAL_GPIO_Init+0x21a>
 800d32a:	2309      	movs	r3, #9
 800d32c:	e012      	b.n	800d354 <HAL_GPIO_Init+0x240>
 800d32e:	230a      	movs	r3, #10
 800d330:	e010      	b.n	800d354 <HAL_GPIO_Init+0x240>
 800d332:	2308      	movs	r3, #8
 800d334:	e00e      	b.n	800d354 <HAL_GPIO_Init+0x240>
 800d336:	2307      	movs	r3, #7
 800d338:	e00c      	b.n	800d354 <HAL_GPIO_Init+0x240>
 800d33a:	2306      	movs	r3, #6
 800d33c:	e00a      	b.n	800d354 <HAL_GPIO_Init+0x240>
 800d33e:	2305      	movs	r3, #5
 800d340:	e008      	b.n	800d354 <HAL_GPIO_Init+0x240>
 800d342:	2304      	movs	r3, #4
 800d344:	e006      	b.n	800d354 <HAL_GPIO_Init+0x240>
 800d346:	2303      	movs	r3, #3
 800d348:	e004      	b.n	800d354 <HAL_GPIO_Init+0x240>
 800d34a:	2302      	movs	r3, #2
 800d34c:	e002      	b.n	800d354 <HAL_GPIO_Init+0x240>
 800d34e:	2301      	movs	r3, #1
 800d350:	e000      	b.n	800d354 <HAL_GPIO_Init+0x240>
 800d352:	2300      	movs	r3, #0
 800d354:	69fa      	ldr	r2, [r7, #28]
 800d356:	f002 0203 	and.w	r2, r2, #3
 800d35a:	0092      	lsls	r2, r2, #2
 800d35c:	4093      	lsls	r3, r2
 800d35e:	69ba      	ldr	r2, [r7, #24]
 800d360:	4313      	orrs	r3, r2
 800d362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800d364:	4934      	ldr	r1, [pc, #208]	; (800d438 <HAL_GPIO_Init+0x324>)
 800d366:	69fb      	ldr	r3, [r7, #28]
 800d368:	089b      	lsrs	r3, r3, #2
 800d36a:	3302      	adds	r3, #2
 800d36c:	69ba      	ldr	r2, [r7, #24]
 800d36e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d372:	4b3c      	ldr	r3, [pc, #240]	; (800d464 <HAL_GPIO_Init+0x350>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	43db      	mvns	r3, r3
 800d37c:	69ba      	ldr	r2, [r7, #24]
 800d37e:	4013      	ands	r3, r2
 800d380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	685b      	ldr	r3, [r3, #4]
 800d386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d003      	beq.n	800d396 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800d38e:	69ba      	ldr	r2, [r7, #24]
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	4313      	orrs	r3, r2
 800d394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d396:	4a33      	ldr	r2, [pc, #204]	; (800d464 <HAL_GPIO_Init+0x350>)
 800d398:	69bb      	ldr	r3, [r7, #24]
 800d39a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d39c:	4b31      	ldr	r3, [pc, #196]	; (800d464 <HAL_GPIO_Init+0x350>)
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	43db      	mvns	r3, r3
 800d3a6:	69ba      	ldr	r2, [r7, #24]
 800d3a8:	4013      	ands	r3, r2
 800d3aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d003      	beq.n	800d3c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800d3b8:	69ba      	ldr	r2, [r7, #24]
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d3c0:	4a28      	ldr	r2, [pc, #160]	; (800d464 <HAL_GPIO_Init+0x350>)
 800d3c2:	69bb      	ldr	r3, [r7, #24]
 800d3c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d3c6:	4b27      	ldr	r3, [pc, #156]	; (800d464 <HAL_GPIO_Init+0x350>)
 800d3c8:	689b      	ldr	r3, [r3, #8]
 800d3ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	43db      	mvns	r3, r3
 800d3d0:	69ba      	ldr	r2, [r7, #24]
 800d3d2:	4013      	ands	r3, r2
 800d3d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d003      	beq.n	800d3ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800d3e2:	69ba      	ldr	r2, [r7, #24]
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d3ea:	4a1e      	ldr	r2, [pc, #120]	; (800d464 <HAL_GPIO_Init+0x350>)
 800d3ec:	69bb      	ldr	r3, [r7, #24]
 800d3ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d3f0:	4b1c      	ldr	r3, [pc, #112]	; (800d464 <HAL_GPIO_Init+0x350>)
 800d3f2:	68db      	ldr	r3, [r3, #12]
 800d3f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	43db      	mvns	r3, r3
 800d3fa:	69ba      	ldr	r2, [r7, #24]
 800d3fc:	4013      	ands	r3, r2
 800d3fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d003      	beq.n	800d414 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800d40c:	69ba      	ldr	r2, [r7, #24]
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	4313      	orrs	r3, r2
 800d412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d414:	4a13      	ldr	r2, [pc, #76]	; (800d464 <HAL_GPIO_Init+0x350>)
 800d416:	69bb      	ldr	r3, [r7, #24]
 800d418:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800d41a:	69fb      	ldr	r3, [r7, #28]
 800d41c:	3301      	adds	r3, #1
 800d41e:	61fb      	str	r3, [r7, #28]
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	2b0f      	cmp	r3, #15
 800d424:	f67f ae86 	bls.w	800d134 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800d428:	bf00      	nop
 800d42a:	3724      	adds	r7, #36	; 0x24
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr
 800d434:	40023800 	.word	0x40023800
 800d438:	40013800 	.word	0x40013800
 800d43c:	40020000 	.word	0x40020000
 800d440:	40020400 	.word	0x40020400
 800d444:	40020800 	.word	0x40020800
 800d448:	40020c00 	.word	0x40020c00
 800d44c:	40021000 	.word	0x40021000
 800d450:	40021400 	.word	0x40021400
 800d454:	40021800 	.word	0x40021800
 800d458:	40021c00 	.word	0x40021c00
 800d45c:	40022000 	.word	0x40022000
 800d460:	40022400 	.word	0x40022400
 800d464:	40013c00 	.word	0x40013c00

0800d468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	460b      	mov	r3, r1
 800d472:	807b      	strh	r3, [r7, #2]
 800d474:	4613      	mov	r3, r2
 800d476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d478:	787b      	ldrb	r3, [r7, #1]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d003      	beq.n	800d486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d47e:	887a      	ldrh	r2, [r7, #2]
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800d484:	e003      	b.n	800d48e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800d486:	887b      	ldrh	r3, [r7, #2]
 800d488:	041a      	lsls	r2, r3, #16
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	619a      	str	r2, [r3, #24]
}
 800d48e:	bf00      	nop
 800d490:	370c      	adds	r7, #12
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr
	...

0800d49c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800d49c:	b480      	push	{r7}
 800d49e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d4a0:	4b05      	ldr	r3, [pc, #20]	; (800d4b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4a04      	ldr	r2, [pc, #16]	; (800d4b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d4a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4aa:	6013      	str	r3, [r2, #0]
}
 800d4ac:	bf00      	nop
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr
 800d4b6:	bf00      	nop
 800d4b8:	40007000 	.word	0x40007000

0800d4bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d4c6:	4b23      	ldr	r3, [pc, #140]	; (800d554 <HAL_PWREx_EnableOverDrive+0x98>)
 800d4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ca:	4a22      	ldr	r2, [pc, #136]	; (800d554 <HAL_PWREx_EnableOverDrive+0x98>)
 800d4cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4d0:	6413      	str	r3, [r2, #64]	; 0x40
 800d4d2:	4b20      	ldr	r3, [pc, #128]	; (800d554 <HAL_PWREx_EnableOverDrive+0x98>)
 800d4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4da:	603b      	str	r3, [r7, #0]
 800d4dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d4de:	4b1e      	ldr	r3, [pc, #120]	; (800d558 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	4a1d      	ldr	r2, [pc, #116]	; (800d558 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d4e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d4e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d4ea:	f7fe f811 	bl	800b510 <HAL_GetTick>
 800d4ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d4f0:	e009      	b.n	800d506 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d4f2:	f7fe f80d 	bl	800b510 <HAL_GetTick>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	1ad3      	subs	r3, r2, r3
 800d4fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d500:	d901      	bls.n	800d506 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800d502:	2303      	movs	r3, #3
 800d504:	e022      	b.n	800d54c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d506:	4b14      	ldr	r3, [pc, #80]	; (800d558 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d50e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d512:	d1ee      	bne.n	800d4f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d514:	4b10      	ldr	r3, [pc, #64]	; (800d558 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4a0f      	ldr	r2, [pc, #60]	; (800d558 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d51a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d51e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d520:	f7fd fff6 	bl	800b510 <HAL_GetTick>
 800d524:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d526:	e009      	b.n	800d53c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d528:	f7fd fff2 	bl	800b510 <HAL_GetTick>
 800d52c:	4602      	mov	r2, r0
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	1ad3      	subs	r3, r2, r3
 800d532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d536:	d901      	bls.n	800d53c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800d538:	2303      	movs	r3, #3
 800d53a:	e007      	b.n	800d54c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d53c:	4b06      	ldr	r3, [pc, #24]	; (800d558 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d53e:	685b      	ldr	r3, [r3, #4]
 800d540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d548:	d1ee      	bne.n	800d528 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800d54a:	2300      	movs	r3, #0
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3708      	adds	r7, #8
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}
 800d554:	40023800 	.word	0x40023800
 800d558:	40007000 	.word	0x40007000

0800d55c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b086      	sub	sp, #24
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800d564:	2300      	movs	r3, #0
 800d566:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d101      	bne.n	800d572 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800d56e:	2301      	movs	r3, #1
 800d570:	e25c      	b.n	800da2c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f003 0301 	and.w	r3, r3, #1
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	f000 8087 	beq.w	800d68e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d580:	4b96      	ldr	r3, [pc, #600]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d582:	689b      	ldr	r3, [r3, #8]
 800d584:	f003 030c 	and.w	r3, r3, #12
 800d588:	2b04      	cmp	r3, #4
 800d58a:	d00c      	beq.n	800d5a6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d58c:	4b93      	ldr	r3, [pc, #588]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	f003 030c 	and.w	r3, r3, #12
 800d594:	2b08      	cmp	r3, #8
 800d596:	d112      	bne.n	800d5be <HAL_RCC_OscConfig+0x62>
 800d598:	4b90      	ldr	r3, [pc, #576]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d5a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d5a4:	d10b      	bne.n	800d5be <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d5a6:	4b8d      	ldr	r3, [pc, #564]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d06c      	beq.n	800d68c <HAL_RCC_OscConfig+0x130>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d168      	bne.n	800d68c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	e236      	b.n	800da2c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5c6:	d106      	bne.n	800d5d6 <HAL_RCC_OscConfig+0x7a>
 800d5c8:	4b84      	ldr	r3, [pc, #528]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4a83      	ldr	r2, [pc, #524]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d5ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d5d2:	6013      	str	r3, [r2, #0]
 800d5d4:	e02e      	b.n	800d634 <HAL_RCC_OscConfig+0xd8>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d10c      	bne.n	800d5f8 <HAL_RCC_OscConfig+0x9c>
 800d5de:	4b7f      	ldr	r3, [pc, #508]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4a7e      	ldr	r2, [pc, #504]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d5e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d5e8:	6013      	str	r3, [r2, #0]
 800d5ea:	4b7c      	ldr	r3, [pc, #496]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	4a7b      	ldr	r2, [pc, #492]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d5f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d5f4:	6013      	str	r3, [r2, #0]
 800d5f6:	e01d      	b.n	800d634 <HAL_RCC_OscConfig+0xd8>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d600:	d10c      	bne.n	800d61c <HAL_RCC_OscConfig+0xc0>
 800d602:	4b76      	ldr	r3, [pc, #472]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	4a75      	ldr	r2, [pc, #468]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d60c:	6013      	str	r3, [r2, #0]
 800d60e:	4b73      	ldr	r3, [pc, #460]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4a72      	ldr	r2, [pc, #456]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d618:	6013      	str	r3, [r2, #0]
 800d61a:	e00b      	b.n	800d634 <HAL_RCC_OscConfig+0xd8>
 800d61c:	4b6f      	ldr	r3, [pc, #444]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4a6e      	ldr	r2, [pc, #440]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d626:	6013      	str	r3, [r2, #0]
 800d628:	4b6c      	ldr	r3, [pc, #432]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4a6b      	ldr	r2, [pc, #428]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d62e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d013      	beq.n	800d664 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d63c:	f7fd ff68 	bl	800b510 <HAL_GetTick>
 800d640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d642:	e008      	b.n	800d656 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d644:	f7fd ff64 	bl	800b510 <HAL_GetTick>
 800d648:	4602      	mov	r2, r0
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	1ad3      	subs	r3, r2, r3
 800d64e:	2b64      	cmp	r3, #100	; 0x64
 800d650:	d901      	bls.n	800d656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d652:	2303      	movs	r3, #3
 800d654:	e1ea      	b.n	800da2c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d656:	4b61      	ldr	r3, [pc, #388]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d0f0      	beq.n	800d644 <HAL_RCC_OscConfig+0xe8>
 800d662:	e014      	b.n	800d68e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d664:	f7fd ff54 	bl	800b510 <HAL_GetTick>
 800d668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d66a:	e008      	b.n	800d67e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d66c:	f7fd ff50 	bl	800b510 <HAL_GetTick>
 800d670:	4602      	mov	r2, r0
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	1ad3      	subs	r3, r2, r3
 800d676:	2b64      	cmp	r3, #100	; 0x64
 800d678:	d901      	bls.n	800d67e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d67a:	2303      	movs	r3, #3
 800d67c:	e1d6      	b.n	800da2c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d67e:	4b57      	ldr	r3, [pc, #348]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d686:	2b00      	cmp	r3, #0
 800d688:	d1f0      	bne.n	800d66c <HAL_RCC_OscConfig+0x110>
 800d68a:	e000      	b.n	800d68e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d68c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f003 0302 	and.w	r3, r3, #2
 800d696:	2b00      	cmp	r3, #0
 800d698:	d069      	beq.n	800d76e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d69a:	4b50      	ldr	r3, [pc, #320]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d69c:	689b      	ldr	r3, [r3, #8]
 800d69e:	f003 030c 	and.w	r3, r3, #12
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00b      	beq.n	800d6be <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d6a6:	4b4d      	ldr	r3, [pc, #308]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	f003 030c 	and.w	r3, r3, #12
 800d6ae:	2b08      	cmp	r3, #8
 800d6b0:	d11c      	bne.n	800d6ec <HAL_RCC_OscConfig+0x190>
 800d6b2:	4b4a      	ldr	r3, [pc, #296]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d116      	bne.n	800d6ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d6be:	4b47      	ldr	r3, [pc, #284]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f003 0302 	and.w	r3, r3, #2
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d005      	beq.n	800d6d6 <HAL_RCC_OscConfig+0x17a>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	68db      	ldr	r3, [r3, #12]
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d001      	beq.n	800d6d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	e1aa      	b.n	800da2c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d6d6:	4b41      	ldr	r3, [pc, #260]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	691b      	ldr	r3, [r3, #16]
 800d6e2:	00db      	lsls	r3, r3, #3
 800d6e4:	493d      	ldr	r1, [pc, #244]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d6ea:	e040      	b.n	800d76e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d023      	beq.n	800d73c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d6f4:	4b39      	ldr	r3, [pc, #228]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4a38      	ldr	r2, [pc, #224]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d6fa:	f043 0301 	orr.w	r3, r3, #1
 800d6fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d700:	f7fd ff06 	bl	800b510 <HAL_GetTick>
 800d704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d706:	e008      	b.n	800d71a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d708:	f7fd ff02 	bl	800b510 <HAL_GetTick>
 800d70c:	4602      	mov	r2, r0
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	1ad3      	subs	r3, r2, r3
 800d712:	2b02      	cmp	r3, #2
 800d714:	d901      	bls.n	800d71a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800d716:	2303      	movs	r3, #3
 800d718:	e188      	b.n	800da2c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d71a:	4b30      	ldr	r3, [pc, #192]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f003 0302 	and.w	r3, r3, #2
 800d722:	2b00      	cmp	r3, #0
 800d724:	d0f0      	beq.n	800d708 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d726:	4b2d      	ldr	r3, [pc, #180]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	691b      	ldr	r3, [r3, #16]
 800d732:	00db      	lsls	r3, r3, #3
 800d734:	4929      	ldr	r1, [pc, #164]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d736:	4313      	orrs	r3, r2
 800d738:	600b      	str	r3, [r1, #0]
 800d73a:	e018      	b.n	800d76e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d73c:	4b27      	ldr	r3, [pc, #156]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	4a26      	ldr	r2, [pc, #152]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d742:	f023 0301 	bic.w	r3, r3, #1
 800d746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d748:	f7fd fee2 	bl	800b510 <HAL_GetTick>
 800d74c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d74e:	e008      	b.n	800d762 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d750:	f7fd fede 	bl	800b510 <HAL_GetTick>
 800d754:	4602      	mov	r2, r0
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	1ad3      	subs	r3, r2, r3
 800d75a:	2b02      	cmp	r3, #2
 800d75c:	d901      	bls.n	800d762 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d75e:	2303      	movs	r3, #3
 800d760:	e164      	b.n	800da2c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d762:	4b1e      	ldr	r3, [pc, #120]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f003 0302 	and.w	r3, r3, #2
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d1f0      	bne.n	800d750 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f003 0308 	and.w	r3, r3, #8
 800d776:	2b00      	cmp	r3, #0
 800d778:	d038      	beq.n	800d7ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	695b      	ldr	r3, [r3, #20]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d019      	beq.n	800d7b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d782:	4b16      	ldr	r3, [pc, #88]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d786:	4a15      	ldr	r2, [pc, #84]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d788:	f043 0301 	orr.w	r3, r3, #1
 800d78c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d78e:	f7fd febf 	bl	800b510 <HAL_GetTick>
 800d792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d794:	e008      	b.n	800d7a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d796:	f7fd febb 	bl	800b510 <HAL_GetTick>
 800d79a:	4602      	mov	r2, r0
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	1ad3      	subs	r3, r2, r3
 800d7a0:	2b02      	cmp	r3, #2
 800d7a2:	d901      	bls.n	800d7a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d7a4:	2303      	movs	r3, #3
 800d7a6:	e141      	b.n	800da2c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d7a8:	4b0c      	ldr	r3, [pc, #48]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d7aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7ac:	f003 0302 	and.w	r3, r3, #2
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d0f0      	beq.n	800d796 <HAL_RCC_OscConfig+0x23a>
 800d7b4:	e01a      	b.n	800d7ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d7b6:	4b09      	ldr	r3, [pc, #36]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d7b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7ba:	4a08      	ldr	r2, [pc, #32]	; (800d7dc <HAL_RCC_OscConfig+0x280>)
 800d7bc:	f023 0301 	bic.w	r3, r3, #1
 800d7c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d7c2:	f7fd fea5 	bl	800b510 <HAL_GetTick>
 800d7c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d7c8:	e00a      	b.n	800d7e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d7ca:	f7fd fea1 	bl	800b510 <HAL_GetTick>
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	1ad3      	subs	r3, r2, r3
 800d7d4:	2b02      	cmp	r3, #2
 800d7d6:	d903      	bls.n	800d7e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d7d8:	2303      	movs	r3, #3
 800d7da:	e127      	b.n	800da2c <HAL_RCC_OscConfig+0x4d0>
 800d7dc:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d7e0:	4b94      	ldr	r3, [pc, #592]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d7e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7e4:	f003 0302 	and.w	r3, r3, #2
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d1ee      	bne.n	800d7ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f003 0304 	and.w	r3, r3, #4
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	f000 80a4 	beq.w	800d942 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d7fa:	4b8e      	ldr	r3, [pc, #568]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d802:	2b00      	cmp	r3, #0
 800d804:	d10d      	bne.n	800d822 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800d806:	4b8b      	ldr	r3, [pc, #556]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d80a:	4a8a      	ldr	r2, [pc, #552]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d80c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d810:	6413      	str	r3, [r2, #64]	; 0x40
 800d812:	4b88      	ldr	r3, [pc, #544]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d81a:	60fb      	str	r3, [r7, #12]
 800d81c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d81e:	2301      	movs	r3, #1
 800d820:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d822:	4b85      	ldr	r3, [pc, #532]	; (800da38 <HAL_RCC_OscConfig+0x4dc>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d118      	bne.n	800d860 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800d82e:	4b82      	ldr	r3, [pc, #520]	; (800da38 <HAL_RCC_OscConfig+0x4dc>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4a81      	ldr	r2, [pc, #516]	; (800da38 <HAL_RCC_OscConfig+0x4dc>)
 800d834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d83a:	f7fd fe69 	bl	800b510 <HAL_GetTick>
 800d83e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d840:	e008      	b.n	800d854 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800d842:	f7fd fe65 	bl	800b510 <HAL_GetTick>
 800d846:	4602      	mov	r2, r0
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	1ad3      	subs	r3, r2, r3
 800d84c:	2b64      	cmp	r3, #100	; 0x64
 800d84e:	d901      	bls.n	800d854 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800d850:	2303      	movs	r3, #3
 800d852:	e0eb      	b.n	800da2c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d854:	4b78      	ldr	r3, [pc, #480]	; (800da38 <HAL_RCC_OscConfig+0x4dc>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d0f0      	beq.n	800d842 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	689b      	ldr	r3, [r3, #8]
 800d864:	2b01      	cmp	r3, #1
 800d866:	d106      	bne.n	800d876 <HAL_RCC_OscConfig+0x31a>
 800d868:	4b72      	ldr	r3, [pc, #456]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d86a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d86c:	4a71      	ldr	r2, [pc, #452]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d86e:	f043 0301 	orr.w	r3, r3, #1
 800d872:	6713      	str	r3, [r2, #112]	; 0x70
 800d874:	e02d      	b.n	800d8d2 <HAL_RCC_OscConfig+0x376>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	689b      	ldr	r3, [r3, #8]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d10c      	bne.n	800d898 <HAL_RCC_OscConfig+0x33c>
 800d87e:	4b6d      	ldr	r3, [pc, #436]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d882:	4a6c      	ldr	r2, [pc, #432]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d884:	f023 0301 	bic.w	r3, r3, #1
 800d888:	6713      	str	r3, [r2, #112]	; 0x70
 800d88a:	4b6a      	ldr	r3, [pc, #424]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d88c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d88e:	4a69      	ldr	r2, [pc, #420]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d890:	f023 0304 	bic.w	r3, r3, #4
 800d894:	6713      	str	r3, [r2, #112]	; 0x70
 800d896:	e01c      	b.n	800d8d2 <HAL_RCC_OscConfig+0x376>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	2b05      	cmp	r3, #5
 800d89e:	d10c      	bne.n	800d8ba <HAL_RCC_OscConfig+0x35e>
 800d8a0:	4b64      	ldr	r3, [pc, #400]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d8a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8a4:	4a63      	ldr	r2, [pc, #396]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d8a6:	f043 0304 	orr.w	r3, r3, #4
 800d8aa:	6713      	str	r3, [r2, #112]	; 0x70
 800d8ac:	4b61      	ldr	r3, [pc, #388]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d8ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8b0:	4a60      	ldr	r2, [pc, #384]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d8b2:	f043 0301 	orr.w	r3, r3, #1
 800d8b6:	6713      	str	r3, [r2, #112]	; 0x70
 800d8b8:	e00b      	b.n	800d8d2 <HAL_RCC_OscConfig+0x376>
 800d8ba:	4b5e      	ldr	r3, [pc, #376]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d8bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8be:	4a5d      	ldr	r2, [pc, #372]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d8c0:	f023 0301 	bic.w	r3, r3, #1
 800d8c4:	6713      	str	r3, [r2, #112]	; 0x70
 800d8c6:	4b5b      	ldr	r3, [pc, #364]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d8c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8ca:	4a5a      	ldr	r2, [pc, #360]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d8cc:	f023 0304 	bic.w	r3, r3, #4
 800d8d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	689b      	ldr	r3, [r3, #8]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d015      	beq.n	800d906 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d8da:	f7fd fe19 	bl	800b510 <HAL_GetTick>
 800d8de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d8e0:	e00a      	b.n	800d8f8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d8e2:	f7fd fe15 	bl	800b510 <HAL_GetTick>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	1ad3      	subs	r3, r2, r3
 800d8ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d901      	bls.n	800d8f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800d8f4:	2303      	movs	r3, #3
 800d8f6:	e099      	b.n	800da2c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d8f8:	4b4e      	ldr	r3, [pc, #312]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d8fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8fc:	f003 0302 	and.w	r3, r3, #2
 800d900:	2b00      	cmp	r3, #0
 800d902:	d0ee      	beq.n	800d8e2 <HAL_RCC_OscConfig+0x386>
 800d904:	e014      	b.n	800d930 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d906:	f7fd fe03 	bl	800b510 <HAL_GetTick>
 800d90a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d90c:	e00a      	b.n	800d924 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d90e:	f7fd fdff 	bl	800b510 <HAL_GetTick>
 800d912:	4602      	mov	r2, r0
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	1ad3      	subs	r3, r2, r3
 800d918:	f241 3288 	movw	r2, #5000	; 0x1388
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d901      	bls.n	800d924 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800d920:	2303      	movs	r3, #3
 800d922:	e083      	b.n	800da2c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d924:	4b43      	ldr	r3, [pc, #268]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d928:	f003 0302 	and.w	r3, r3, #2
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d1ee      	bne.n	800d90e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d930:	7dfb      	ldrb	r3, [r7, #23]
 800d932:	2b01      	cmp	r3, #1
 800d934:	d105      	bne.n	800d942 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d936:	4b3f      	ldr	r3, [pc, #252]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d93a:	4a3e      	ldr	r2, [pc, #248]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d93c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d940:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	699b      	ldr	r3, [r3, #24]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d06f      	beq.n	800da2a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d94a:	4b3a      	ldr	r3, [pc, #232]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d94c:	689b      	ldr	r3, [r3, #8]
 800d94e:	f003 030c 	and.w	r3, r3, #12
 800d952:	2b08      	cmp	r3, #8
 800d954:	d067      	beq.n	800da26 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	699b      	ldr	r3, [r3, #24]
 800d95a:	2b02      	cmp	r3, #2
 800d95c:	d149      	bne.n	800d9f2 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d95e:	4b35      	ldr	r3, [pc, #212]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	4a34      	ldr	r2, [pc, #208]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d964:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d96a:	f7fd fdd1 	bl	800b510 <HAL_GetTick>
 800d96e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d970:	e008      	b.n	800d984 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d972:	f7fd fdcd 	bl	800b510 <HAL_GetTick>
 800d976:	4602      	mov	r2, r0
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	1ad3      	subs	r3, r2, r3
 800d97c:	2b02      	cmp	r3, #2
 800d97e:	d901      	bls.n	800d984 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d980:	2303      	movs	r3, #3
 800d982:	e053      	b.n	800da2c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d984:	4b2b      	ldr	r3, [pc, #172]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d1f0      	bne.n	800d972 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	69da      	ldr	r2, [r3, #28]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6a1b      	ldr	r3, [r3, #32]
 800d998:	431a      	orrs	r2, r3
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d99e:	019b      	lsls	r3, r3, #6
 800d9a0:	431a      	orrs	r2, r3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9a6:	085b      	lsrs	r3, r3, #1
 800d9a8:	3b01      	subs	r3, #1
 800d9aa:	041b      	lsls	r3, r3, #16
 800d9ac:	431a      	orrs	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b2:	061b      	lsls	r3, r3, #24
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	4a1f      	ldr	r2, [pc, #124]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d9b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d9bc:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d9be:	4b1d      	ldr	r3, [pc, #116]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4a1c      	ldr	r2, [pc, #112]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d9c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d9c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9ca:	f7fd fda1 	bl	800b510 <HAL_GetTick>
 800d9ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d9d0:	e008      	b.n	800d9e4 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d9d2:	f7fd fd9d 	bl	800b510 <HAL_GetTick>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	1ad3      	subs	r3, r2, r3
 800d9dc:	2b02      	cmp	r3, #2
 800d9de:	d901      	bls.n	800d9e4 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 800d9e0:	2303      	movs	r3, #3
 800d9e2:	e023      	b.n	800da2c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d9e4:	4b13      	ldr	r3, [pc, #76]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d0f0      	beq.n	800d9d2 <HAL_RCC_OscConfig+0x476>
 800d9f0:	e01b      	b.n	800da2a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d9f2:	4b10      	ldr	r3, [pc, #64]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4a0f      	ldr	r2, [pc, #60]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800d9f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d9fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9fe:	f7fd fd87 	bl	800b510 <HAL_GetTick>
 800da02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da04:	e008      	b.n	800da18 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800da06:	f7fd fd83 	bl	800b510 <HAL_GetTick>
 800da0a:	4602      	mov	r2, r0
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	1ad3      	subs	r3, r2, r3
 800da10:	2b02      	cmp	r3, #2
 800da12:	d901      	bls.n	800da18 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800da14:	2303      	movs	r3, #3
 800da16:	e009      	b.n	800da2c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da18:	4b06      	ldr	r3, [pc, #24]	; (800da34 <HAL_RCC_OscConfig+0x4d8>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da20:	2b00      	cmp	r3, #0
 800da22:	d1f0      	bne.n	800da06 <HAL_RCC_OscConfig+0x4aa>
 800da24:	e001      	b.n	800da2a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800da26:	2301      	movs	r3, #1
 800da28:	e000      	b.n	800da2c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800da2a:	2300      	movs	r3, #0
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3718      	adds	r7, #24
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}
 800da34:	40023800 	.word	0x40023800
 800da38:	40007000 	.word	0x40007000

0800da3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800da46:	2300      	movs	r3, #0
 800da48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d101      	bne.n	800da54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800da50:	2301      	movs	r3, #1
 800da52:	e0ce      	b.n	800dbf2 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800da54:	4b69      	ldr	r3, [pc, #420]	; (800dbfc <HAL_RCC_ClockConfig+0x1c0>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f003 030f 	and.w	r3, r3, #15
 800da5c:	683a      	ldr	r2, [r7, #0]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d910      	bls.n	800da84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da62:	4b66      	ldr	r3, [pc, #408]	; (800dbfc <HAL_RCC_ClockConfig+0x1c0>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f023 020f 	bic.w	r2, r3, #15
 800da6a:	4964      	ldr	r1, [pc, #400]	; (800dbfc <HAL_RCC_ClockConfig+0x1c0>)
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	4313      	orrs	r3, r2
 800da70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800da72:	4b62      	ldr	r3, [pc, #392]	; (800dbfc <HAL_RCC_ClockConfig+0x1c0>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f003 030f 	and.w	r3, r3, #15
 800da7a:	683a      	ldr	r2, [r7, #0]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d001      	beq.n	800da84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800da80:	2301      	movs	r3, #1
 800da82:	e0b6      	b.n	800dbf2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f003 0302 	and.w	r3, r3, #2
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d020      	beq.n	800dad2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f003 0304 	and.w	r3, r3, #4
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d005      	beq.n	800daa8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800da9c:	4b58      	ldr	r3, [pc, #352]	; (800dc00 <HAL_RCC_ClockConfig+0x1c4>)
 800da9e:	689b      	ldr	r3, [r3, #8]
 800daa0:	4a57      	ldr	r2, [pc, #348]	; (800dc00 <HAL_RCC_ClockConfig+0x1c4>)
 800daa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800daa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f003 0308 	and.w	r3, r3, #8
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d005      	beq.n	800dac0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dab4:	4b52      	ldr	r3, [pc, #328]	; (800dc00 <HAL_RCC_ClockConfig+0x1c4>)
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	4a51      	ldr	r2, [pc, #324]	; (800dc00 <HAL_RCC_ClockConfig+0x1c4>)
 800daba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dabe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dac0:	4b4f      	ldr	r3, [pc, #316]	; (800dc00 <HAL_RCC_ClockConfig+0x1c4>)
 800dac2:	689b      	ldr	r3, [r3, #8]
 800dac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	689b      	ldr	r3, [r3, #8]
 800dacc:	494c      	ldr	r1, [pc, #304]	; (800dc00 <HAL_RCC_ClockConfig+0x1c4>)
 800dace:	4313      	orrs	r3, r2
 800dad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f003 0301 	and.w	r3, r3, #1
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d040      	beq.n	800db60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d107      	bne.n	800daf6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dae6:	4b46      	ldr	r3, [pc, #280]	; (800dc00 <HAL_RCC_ClockConfig+0x1c4>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d115      	bne.n	800db1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800daf2:	2301      	movs	r3, #1
 800daf4:	e07d      	b.n	800dbf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	2b02      	cmp	r3, #2
 800dafc:	d107      	bne.n	800db0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dafe:	4b40      	ldr	r3, [pc, #256]	; (800dc00 <HAL_RCC_ClockConfig+0x1c4>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db06:	2b00      	cmp	r3, #0
 800db08:	d109      	bne.n	800db1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800db0a:	2301      	movs	r3, #1
 800db0c:	e071      	b.n	800dbf2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800db0e:	4b3c      	ldr	r3, [pc, #240]	; (800dc00 <HAL_RCC_ClockConfig+0x1c4>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	f003 0302 	and.w	r3, r3, #2
 800db16:	2b00      	cmp	r3, #0
 800db18:	d101      	bne.n	800db1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800db1a:	2301      	movs	r3, #1
 800db1c:	e069      	b.n	800dbf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800db1e:	4b38      	ldr	r3, [pc, #224]	; (800dc00 <HAL_RCC_ClockConfig+0x1c4>)
 800db20:	689b      	ldr	r3, [r3, #8]
 800db22:	f023 0203 	bic.w	r2, r3, #3
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	4935      	ldr	r1, [pc, #212]	; (800dc00 <HAL_RCC_ClockConfig+0x1c4>)
 800db2c:	4313      	orrs	r3, r2
 800db2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db30:	f7fd fcee 	bl	800b510 <HAL_GetTick>
 800db34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db36:	e00a      	b.n	800db4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800db38:	f7fd fcea 	bl	800b510 <HAL_GetTick>
 800db3c:	4602      	mov	r2, r0
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	1ad3      	subs	r3, r2, r3
 800db42:	f241 3288 	movw	r2, #5000	; 0x1388
 800db46:	4293      	cmp	r3, r2
 800db48:	d901      	bls.n	800db4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800db4a:	2303      	movs	r3, #3
 800db4c:	e051      	b.n	800dbf2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db4e:	4b2c      	ldr	r3, [pc, #176]	; (800dc00 <HAL_RCC_ClockConfig+0x1c4>)
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	f003 020c 	and.w	r2, r3, #12
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	009b      	lsls	r3, r3, #2
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d1eb      	bne.n	800db38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800db60:	4b26      	ldr	r3, [pc, #152]	; (800dbfc <HAL_RCC_ClockConfig+0x1c0>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f003 030f 	and.w	r3, r3, #15
 800db68:	683a      	ldr	r2, [r7, #0]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d210      	bcs.n	800db90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800db6e:	4b23      	ldr	r3, [pc, #140]	; (800dbfc <HAL_RCC_ClockConfig+0x1c0>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f023 020f 	bic.w	r2, r3, #15
 800db76:	4921      	ldr	r1, [pc, #132]	; (800dbfc <HAL_RCC_ClockConfig+0x1c0>)
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	4313      	orrs	r3, r2
 800db7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800db7e:	4b1f      	ldr	r3, [pc, #124]	; (800dbfc <HAL_RCC_ClockConfig+0x1c0>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f003 030f 	and.w	r3, r3, #15
 800db86:	683a      	ldr	r2, [r7, #0]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d001      	beq.n	800db90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800db8c:	2301      	movs	r3, #1
 800db8e:	e030      	b.n	800dbf2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f003 0304 	and.w	r3, r3, #4
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d008      	beq.n	800dbae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800db9c:	4b18      	ldr	r3, [pc, #96]	; (800dc00 <HAL_RCC_ClockConfig+0x1c4>)
 800db9e:	689b      	ldr	r3, [r3, #8]
 800dba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	4915      	ldr	r1, [pc, #84]	; (800dc00 <HAL_RCC_ClockConfig+0x1c4>)
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f003 0308 	and.w	r3, r3, #8
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d009      	beq.n	800dbce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800dbba:	4b11      	ldr	r3, [pc, #68]	; (800dc00 <HAL_RCC_ClockConfig+0x1c4>)
 800dbbc:	689b      	ldr	r3, [r3, #8]
 800dbbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	691b      	ldr	r3, [r3, #16]
 800dbc6:	00db      	lsls	r3, r3, #3
 800dbc8:	490d      	ldr	r1, [pc, #52]	; (800dc00 <HAL_RCC_ClockConfig+0x1c4>)
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dbce:	f000 f81d 	bl	800dc0c <HAL_RCC_GetSysClockFreq>
 800dbd2:	4601      	mov	r1, r0
 800dbd4:	4b0a      	ldr	r3, [pc, #40]	; (800dc00 <HAL_RCC_ClockConfig+0x1c4>)
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	091b      	lsrs	r3, r3, #4
 800dbda:	f003 030f 	and.w	r3, r3, #15
 800dbde:	4a09      	ldr	r2, [pc, #36]	; (800dc04 <HAL_RCC_ClockConfig+0x1c8>)
 800dbe0:	5cd3      	ldrb	r3, [r2, r3]
 800dbe2:	fa21 f303 	lsr.w	r3, r1, r3
 800dbe6:	4a08      	ldr	r2, [pc, #32]	; (800dc08 <HAL_RCC_ClockConfig+0x1cc>)
 800dbe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800dbea:	2000      	movs	r0, #0
 800dbec:	f7fd fc4c 	bl	800b488 <HAL_InitTick>

  return HAL_OK;
 800dbf0:	2300      	movs	r3, #0
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	40023c00 	.word	0x40023c00
 800dc00:	40023800 	.word	0x40023800
 800dc04:	08016a58 	.word	0x08016a58
 800dc08:	20000000 	.word	0x20000000

0800dc0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc0e:	b085      	sub	sp, #20
 800dc10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800dc12:	2300      	movs	r3, #0
 800dc14:	607b      	str	r3, [r7, #4]
 800dc16:	2300      	movs	r3, #0
 800dc18:	60fb      	str	r3, [r7, #12]
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dc22:	4b63      	ldr	r3, [pc, #396]	; (800ddb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dc24:	689b      	ldr	r3, [r3, #8]
 800dc26:	f003 030c 	and.w	r3, r3, #12
 800dc2a:	2b04      	cmp	r3, #4
 800dc2c:	d007      	beq.n	800dc3e <HAL_RCC_GetSysClockFreq+0x32>
 800dc2e:	2b08      	cmp	r3, #8
 800dc30:	d008      	beq.n	800dc44 <HAL_RCC_GetSysClockFreq+0x38>
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	f040 80b4 	bne.w	800dda0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dc38:	4b5e      	ldr	r3, [pc, #376]	; (800ddb4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800dc3a:	60bb      	str	r3, [r7, #8]
       break;
 800dc3c:	e0b3      	b.n	800dda6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800dc3e:	4b5e      	ldr	r3, [pc, #376]	; (800ddb8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800dc40:	60bb      	str	r3, [r7, #8]
      break;
 800dc42:	e0b0      	b.n	800dda6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dc44:	4b5a      	ldr	r3, [pc, #360]	; (800ddb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dc46:	685b      	ldr	r3, [r3, #4]
 800dc48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc4c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800dc4e:	4b58      	ldr	r3, [pc, #352]	; (800ddb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d04a      	beq.n	800dcf0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dc5a:	4b55      	ldr	r3, [pc, #340]	; (800ddb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	099b      	lsrs	r3, r3, #6
 800dc60:	f04f 0400 	mov.w	r4, #0
 800dc64:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dc68:	f04f 0200 	mov.w	r2, #0
 800dc6c:	ea03 0501 	and.w	r5, r3, r1
 800dc70:	ea04 0602 	and.w	r6, r4, r2
 800dc74:	4629      	mov	r1, r5
 800dc76:	4632      	mov	r2, r6
 800dc78:	f04f 0300 	mov.w	r3, #0
 800dc7c:	f04f 0400 	mov.w	r4, #0
 800dc80:	0154      	lsls	r4, r2, #5
 800dc82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800dc86:	014b      	lsls	r3, r1, #5
 800dc88:	4619      	mov	r1, r3
 800dc8a:	4622      	mov	r2, r4
 800dc8c:	1b49      	subs	r1, r1, r5
 800dc8e:	eb62 0206 	sbc.w	r2, r2, r6
 800dc92:	f04f 0300 	mov.w	r3, #0
 800dc96:	f04f 0400 	mov.w	r4, #0
 800dc9a:	0194      	lsls	r4, r2, #6
 800dc9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800dca0:	018b      	lsls	r3, r1, #6
 800dca2:	1a5b      	subs	r3, r3, r1
 800dca4:	eb64 0402 	sbc.w	r4, r4, r2
 800dca8:	f04f 0100 	mov.w	r1, #0
 800dcac:	f04f 0200 	mov.w	r2, #0
 800dcb0:	00e2      	lsls	r2, r4, #3
 800dcb2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dcb6:	00d9      	lsls	r1, r3, #3
 800dcb8:	460b      	mov	r3, r1
 800dcba:	4614      	mov	r4, r2
 800dcbc:	195b      	adds	r3, r3, r5
 800dcbe:	eb44 0406 	adc.w	r4, r4, r6
 800dcc2:	f04f 0100 	mov.w	r1, #0
 800dcc6:	f04f 0200 	mov.w	r2, #0
 800dcca:	0262      	lsls	r2, r4, #9
 800dccc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800dcd0:	0259      	lsls	r1, r3, #9
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	4614      	mov	r4, r2
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	4621      	mov	r1, r4
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f04f 0400 	mov.w	r4, #0
 800dce0:	461a      	mov	r2, r3
 800dce2:	4623      	mov	r3, r4
 800dce4:	f7f9 fba8 	bl	8007438 <__aeabi_uldivmod>
 800dce8:	4603      	mov	r3, r0
 800dcea:	460c      	mov	r4, r1
 800dcec:	60fb      	str	r3, [r7, #12]
 800dcee:	e049      	b.n	800dd84 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dcf0:	4b2f      	ldr	r3, [pc, #188]	; (800ddb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	099b      	lsrs	r3, r3, #6
 800dcf6:	f04f 0400 	mov.w	r4, #0
 800dcfa:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dcfe:	f04f 0200 	mov.w	r2, #0
 800dd02:	ea03 0501 	and.w	r5, r3, r1
 800dd06:	ea04 0602 	and.w	r6, r4, r2
 800dd0a:	4629      	mov	r1, r5
 800dd0c:	4632      	mov	r2, r6
 800dd0e:	f04f 0300 	mov.w	r3, #0
 800dd12:	f04f 0400 	mov.w	r4, #0
 800dd16:	0154      	lsls	r4, r2, #5
 800dd18:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800dd1c:	014b      	lsls	r3, r1, #5
 800dd1e:	4619      	mov	r1, r3
 800dd20:	4622      	mov	r2, r4
 800dd22:	1b49      	subs	r1, r1, r5
 800dd24:	eb62 0206 	sbc.w	r2, r2, r6
 800dd28:	f04f 0300 	mov.w	r3, #0
 800dd2c:	f04f 0400 	mov.w	r4, #0
 800dd30:	0194      	lsls	r4, r2, #6
 800dd32:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800dd36:	018b      	lsls	r3, r1, #6
 800dd38:	1a5b      	subs	r3, r3, r1
 800dd3a:	eb64 0402 	sbc.w	r4, r4, r2
 800dd3e:	f04f 0100 	mov.w	r1, #0
 800dd42:	f04f 0200 	mov.w	r2, #0
 800dd46:	00e2      	lsls	r2, r4, #3
 800dd48:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dd4c:	00d9      	lsls	r1, r3, #3
 800dd4e:	460b      	mov	r3, r1
 800dd50:	4614      	mov	r4, r2
 800dd52:	195b      	adds	r3, r3, r5
 800dd54:	eb44 0406 	adc.w	r4, r4, r6
 800dd58:	f04f 0100 	mov.w	r1, #0
 800dd5c:	f04f 0200 	mov.w	r2, #0
 800dd60:	02a2      	lsls	r2, r4, #10
 800dd62:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800dd66:	0299      	lsls	r1, r3, #10
 800dd68:	460b      	mov	r3, r1
 800dd6a:	4614      	mov	r4, r2
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	4621      	mov	r1, r4
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f04f 0400 	mov.w	r4, #0
 800dd76:	461a      	mov	r2, r3
 800dd78:	4623      	mov	r3, r4
 800dd7a:	f7f9 fb5d 	bl	8007438 <__aeabi_uldivmod>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	460c      	mov	r4, r1
 800dd82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800dd84:	4b0a      	ldr	r3, [pc, #40]	; (800ddb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	0c1b      	lsrs	r3, r3, #16
 800dd8a:	f003 0303 	and.w	r3, r3, #3
 800dd8e:	3301      	adds	r3, #1
 800dd90:	005b      	lsls	r3, r3, #1
 800dd92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800dd94:	68fa      	ldr	r2, [r7, #12]
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd9c:	60bb      	str	r3, [r7, #8]
      break;
 800dd9e:	e002      	b.n	800dda6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dda0:	4b04      	ldr	r3, [pc, #16]	; (800ddb4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800dda2:	60bb      	str	r3, [r7, #8]
      break;
 800dda4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dda6:	68bb      	ldr	r3, [r7, #8]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3714      	adds	r7, #20
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddb0:	40023800 	.word	0x40023800
 800ddb4:	00f42400 	.word	0x00f42400
 800ddb8:	007a1200 	.word	0x007a1200

0800ddbc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ddc0:	4b03      	ldr	r3, [pc, #12]	; (800ddd0 <HAL_RCC_GetHCLKFreq+0x14>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr
 800ddce:	bf00      	nop
 800ddd0:	20000000 	.word	0x20000000

0800ddd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ddd8:	f7ff fff0 	bl	800ddbc <HAL_RCC_GetHCLKFreq>
 800dddc:	4601      	mov	r1, r0
 800ddde:	4b05      	ldr	r3, [pc, #20]	; (800ddf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dde0:	689b      	ldr	r3, [r3, #8]
 800dde2:	0a9b      	lsrs	r3, r3, #10
 800dde4:	f003 0307 	and.w	r3, r3, #7
 800dde8:	4a03      	ldr	r2, [pc, #12]	; (800ddf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ddea:	5cd3      	ldrb	r3, [r2, r3]
 800ddec:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	40023800 	.word	0x40023800
 800ddf8:	08016a68 	.word	0x08016a68

0800ddfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800de00:	f7ff ffdc 	bl	800ddbc <HAL_RCC_GetHCLKFreq>
 800de04:	4601      	mov	r1, r0
 800de06:	4b05      	ldr	r3, [pc, #20]	; (800de1c <HAL_RCC_GetPCLK2Freq+0x20>)
 800de08:	689b      	ldr	r3, [r3, #8]
 800de0a:	0b5b      	lsrs	r3, r3, #13
 800de0c:	f003 0307 	and.w	r3, r3, #7
 800de10:	4a03      	ldr	r2, [pc, #12]	; (800de20 <HAL_RCC_GetPCLK2Freq+0x24>)
 800de12:	5cd3      	ldrb	r3, [r2, r3]
 800de14:	fa21 f303 	lsr.w	r3, r1, r3
}
 800de18:	4618      	mov	r0, r3
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	40023800 	.word	0x40023800
 800de20:	08016a68 	.word	0x08016a68

0800de24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b088      	sub	sp, #32
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800de2c:	2300      	movs	r3, #0
 800de2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800de30:	2300      	movs	r3, #0
 800de32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800de34:	2300      	movs	r3, #0
 800de36:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800de38:	2300      	movs	r3, #0
 800de3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800de3c:	2300      	movs	r3, #0
 800de3e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f003 0301 	and.w	r3, r3, #1
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d012      	beq.n	800de72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800de4c:	4b69      	ldr	r3, [pc, #420]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800de4e:	689b      	ldr	r3, [r3, #8]
 800de50:	4a68      	ldr	r2, [pc, #416]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800de52:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800de56:	6093      	str	r3, [r2, #8]
 800de58:	4b66      	ldr	r3, [pc, #408]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800de5a:	689a      	ldr	r2, [r3, #8]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de60:	4964      	ldr	r1, [pc, #400]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800de62:	4313      	orrs	r3, r2
 800de64:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d101      	bne.n	800de72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800de6e:	2301      	movs	r3, #1
 800de70:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d017      	beq.n	800deae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800de7e:	4b5d      	ldr	r3, [pc, #372]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800de80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de8c:	4959      	ldr	r1, [pc, #356]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800de8e:	4313      	orrs	r3, r2
 800de90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de9c:	d101      	bne.n	800dea2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800de9e:	2301      	movs	r3, #1
 800dea0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d101      	bne.n	800deae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800deaa:	2301      	movs	r3, #1
 800deac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d017      	beq.n	800deea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800deba:	4b4e      	ldr	r3, [pc, #312]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800debc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dec0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec8:	494a      	ldr	r1, [pc, #296]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800deca:	4313      	orrs	r3, r2
 800decc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ded4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ded8:	d101      	bne.n	800dede <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800deda:	2301      	movs	r3, #1
 800dedc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d101      	bne.n	800deea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800dee6:	2301      	movs	r3, #1
 800dee8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800def2:	2b00      	cmp	r3, #0
 800def4:	d001      	beq.n	800defa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800def6:	2301      	movs	r3, #1
 800def8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	f003 0320 	and.w	r3, r3, #32
 800df02:	2b00      	cmp	r3, #0
 800df04:	f000 808b 	beq.w	800e01e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800df08:	4b3a      	ldr	r3, [pc, #232]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800df0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df0c:	4a39      	ldr	r2, [pc, #228]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800df0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df12:	6413      	str	r3, [r2, #64]	; 0x40
 800df14:	4b37      	ldr	r3, [pc, #220]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800df16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df1c:	60bb      	str	r3, [r7, #8]
 800df1e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800df20:	4b35      	ldr	r3, [pc, #212]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4a34      	ldr	r2, [pc, #208]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800df26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800df2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df2c:	f7fd faf0 	bl	800b510 <HAL_GetTick>
 800df30:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800df32:	e008      	b.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800df34:	f7fd faec 	bl	800b510 <HAL_GetTick>
 800df38:	4602      	mov	r2, r0
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	2b64      	cmp	r3, #100	; 0x64
 800df40:	d901      	bls.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800df42:	2303      	movs	r3, #3
 800df44:	e355      	b.n	800e5f2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800df46:	4b2c      	ldr	r3, [pc, #176]	; (800dff8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d0f0      	beq.n	800df34 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800df52:	4b28      	ldr	r3, [pc, #160]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800df54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df5a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d035      	beq.n	800dfce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df6a:	693a      	ldr	r2, [r7, #16]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d02e      	beq.n	800dfce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800df70:	4b20      	ldr	r3, [pc, #128]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800df72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df78:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800df7a:	4b1e      	ldr	r3, [pc, #120]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800df7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df7e:	4a1d      	ldr	r2, [pc, #116]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800df80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df84:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800df86:	4b1b      	ldr	r3, [pc, #108]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800df88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df8a:	4a1a      	ldr	r2, [pc, #104]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800df8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800df90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800df92:	4a18      	ldr	r2, [pc, #96]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800df98:	4b16      	ldr	r3, [pc, #88]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800df9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df9c:	f003 0301 	and.w	r3, r3, #1
 800dfa0:	2b01      	cmp	r3, #1
 800dfa2:	d114      	bne.n	800dfce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dfa4:	f7fd fab4 	bl	800b510 <HAL_GetTick>
 800dfa8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dfaa:	e00a      	b.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dfac:	f7fd fab0 	bl	800b510 <HAL_GetTick>
 800dfb0:	4602      	mov	r2, r0
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	1ad3      	subs	r3, r2, r3
 800dfb6:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d901      	bls.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800dfbe:	2303      	movs	r3, #3
 800dfc0:	e317      	b.n	800e5f2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dfc2:	4b0c      	ldr	r3, [pc, #48]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dfc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfc6:	f003 0302 	and.w	r3, r3, #2
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d0ee      	beq.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dfd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dfda:	d111      	bne.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800dfdc:	4b05      	ldr	r3, [pc, #20]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dfde:	689b      	ldr	r3, [r3, #8]
 800dfe0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800dfe8:	4b04      	ldr	r3, [pc, #16]	; (800dffc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800dfea:	400b      	ands	r3, r1
 800dfec:	4901      	ldr	r1, [pc, #4]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dfee:	4313      	orrs	r3, r2
 800dff0:	608b      	str	r3, [r1, #8]
 800dff2:	e00b      	b.n	800e00c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800dff4:	40023800 	.word	0x40023800
 800dff8:	40007000 	.word	0x40007000
 800dffc:	0ffffcff 	.word	0x0ffffcff
 800e000:	4bb0      	ldr	r3, [pc, #704]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e002:	689b      	ldr	r3, [r3, #8]
 800e004:	4aaf      	ldr	r2, [pc, #700]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e006:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e00a:	6093      	str	r3, [r2, #8]
 800e00c:	4bad      	ldr	r3, [pc, #692]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e00e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e018:	49aa      	ldr	r1, [pc, #680]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e01a:	4313      	orrs	r3, r2
 800e01c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	f003 0310 	and.w	r3, r3, #16
 800e026:	2b00      	cmp	r3, #0
 800e028:	d010      	beq.n	800e04c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e02a:	4ba6      	ldr	r3, [pc, #664]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e02c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e030:	4aa4      	ldr	r2, [pc, #656]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e036:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800e03a:	4ba2      	ldr	r3, [pc, #648]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e03c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e044:	499f      	ldr	r1, [pc, #636]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e046:	4313      	orrs	r3, r2
 800e048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e054:	2b00      	cmp	r3, #0
 800e056:	d00a      	beq.n	800e06e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e058:	4b9a      	ldr	r3, [pc, #616]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e05a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e05e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e066:	4997      	ldr	r1, [pc, #604]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e068:	4313      	orrs	r3, r2
 800e06a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e076:	2b00      	cmp	r3, #0
 800e078:	d00a      	beq.n	800e090 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e07a:	4b92      	ldr	r3, [pc, #584]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e07c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e080:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e088:	498e      	ldr	r1, [pc, #568]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e08a:	4313      	orrs	r3, r2
 800e08c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d00a      	beq.n	800e0b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e09c:	4b89      	ldr	r3, [pc, #548]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e09e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0aa:	4986      	ldr	r1, [pc, #536]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e0ac:	4313      	orrs	r3, r2
 800e0ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d00a      	beq.n	800e0d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e0be:	4b81      	ldr	r3, [pc, #516]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0cc:	497d      	ldr	r1, [pc, #500]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e0ce:	4313      	orrs	r3, r2
 800e0d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00a      	beq.n	800e0f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e0e0:	4b78      	ldr	r3, [pc, #480]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e0e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0e6:	f023 0203 	bic.w	r2, r3, #3
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0ee:	4975      	ldr	r1, [pc, #468]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e0f0:	4313      	orrs	r3, r2
 800e0f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d00a      	beq.n	800e118 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e102:	4b70      	ldr	r3, [pc, #448]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e108:	f023 020c 	bic.w	r2, r3, #12
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e110:	496c      	ldr	r1, [pc, #432]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e112:	4313      	orrs	r3, r2
 800e114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e120:	2b00      	cmp	r3, #0
 800e122:	d00a      	beq.n	800e13a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e124:	4b67      	ldr	r3, [pc, #412]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e12a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e132:	4964      	ldr	r1, [pc, #400]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e134:	4313      	orrs	r3, r2
 800e136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e142:	2b00      	cmp	r3, #0
 800e144:	d00a      	beq.n	800e15c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e146:	4b5f      	ldr	r3, [pc, #380]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e14c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e154:	495b      	ldr	r1, [pc, #364]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e156:	4313      	orrs	r3, r2
 800e158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e164:	2b00      	cmp	r3, #0
 800e166:	d00a      	beq.n	800e17e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e168:	4b56      	ldr	r3, [pc, #344]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e16e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e176:	4953      	ldr	r1, [pc, #332]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e178:	4313      	orrs	r3, r2
 800e17a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e186:	2b00      	cmp	r3, #0
 800e188:	d00a      	beq.n	800e1a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e18a:	4b4e      	ldr	r3, [pc, #312]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e18c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e190:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e198:	494a      	ldr	r1, [pc, #296]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e19a:	4313      	orrs	r3, r2
 800e19c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d00a      	beq.n	800e1c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e1ac:	4b45      	ldr	r3, [pc, #276]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e1ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e1ba:	4942      	ldr	r1, [pc, #264]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e1bc:	4313      	orrs	r3, r2
 800e1be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d00a      	beq.n	800e1e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e1ce:	4b3d      	ldr	r3, [pc, #244]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e1d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1dc:	4939      	ldr	r1, [pc, #228]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d00a      	beq.n	800e206 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e1f0:	4b34      	ldr	r3, [pc, #208]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e1f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1fe:	4931      	ldr	r1, [pc, #196]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e200:	4313      	orrs	r3, r2
 800e202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d011      	beq.n	800e236 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e212:	4b2c      	ldr	r3, [pc, #176]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e218:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e220:	4928      	ldr	r1, [pc, #160]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e222:	4313      	orrs	r3, r2
 800e224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e22c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e230:	d101      	bne.n	800e236 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800e232:	2301      	movs	r3, #1
 800e234:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	f003 0308 	and.w	r3, r3, #8
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d001      	beq.n	800e246 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800e242:	2301      	movs	r3, #1
 800e244:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00a      	beq.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e252:	4b1c      	ldr	r3, [pc, #112]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e258:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e260:	4918      	ldr	r1, [pc, #96]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e262:	4313      	orrs	r3, r2
 800e264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e270:	2b00      	cmp	r3, #0
 800e272:	d00b      	beq.n	800e28c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e274:	4b13      	ldr	r3, [pc, #76]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e27a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e284:	490f      	ldr	r1, [pc, #60]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e286:	4313      	orrs	r3, r2
 800e288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	2b01      	cmp	r3, #1
 800e290:	d005      	beq.n	800e29e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e29a:	f040 80d8 	bne.w	800e44e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e29e:	4b09      	ldr	r3, [pc, #36]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	4a08      	ldr	r2, [pc, #32]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800e2a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e2a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e2aa:	f7fd f931 	bl	800b510 <HAL_GetTick>
 800e2ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e2b0:	e00a      	b.n	800e2c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e2b2:	f7fd f92d 	bl	800b510 <HAL_GetTick>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	1ad3      	subs	r3, r2, r3
 800e2bc:	2b64      	cmp	r3, #100	; 0x64
 800e2be:	d903      	bls.n	800e2c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e2c0:	2303      	movs	r3, #3
 800e2c2:	e196      	b.n	800e5f2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800e2c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e2c8:	4b6c      	ldr	r3, [pc, #432]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d1ee      	bne.n	800e2b2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f003 0301 	and.w	r3, r3, #1
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d021      	beq.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d11d      	bne.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e2e8:	4b64      	ldr	r3, [pc, #400]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800e2ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2ee:	0c1b      	lsrs	r3, r3, #16
 800e2f0:	f003 0303 	and.w	r3, r3, #3
 800e2f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e2f6:	4b61      	ldr	r3, [pc, #388]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800e2f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2fc:	0e1b      	lsrs	r3, r3, #24
 800e2fe:	f003 030f 	and.w	r3, r3, #15
 800e302:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	019a      	lsls	r2, r3, #6
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	041b      	lsls	r3, r3, #16
 800e30e:	431a      	orrs	r2, r3
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	061b      	lsls	r3, r3, #24
 800e314:	431a      	orrs	r2, r3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	689b      	ldr	r3, [r3, #8]
 800e31a:	071b      	lsls	r3, r3, #28
 800e31c:	4957      	ldr	r1, [pc, #348]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800e31e:	4313      	orrs	r3, r2
 800e320:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d004      	beq.n	800e33a <HAL_RCCEx_PeriphCLKConfig+0x516>
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e338:	d00a      	beq.n	800e350 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e342:	2b00      	cmp	r3, #0
 800e344:	d02e      	beq.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e34a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e34e:	d129      	bne.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e350:	4b4a      	ldr	r3, [pc, #296]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800e352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e356:	0c1b      	lsrs	r3, r3, #16
 800e358:	f003 0303 	and.w	r3, r3, #3
 800e35c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e35e:	4b47      	ldr	r3, [pc, #284]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800e360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e364:	0f1b      	lsrs	r3, r3, #28
 800e366:	f003 0307 	and.w	r3, r3, #7
 800e36a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	019a      	lsls	r2, r3, #6
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	041b      	lsls	r3, r3, #16
 800e376:	431a      	orrs	r2, r3
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	68db      	ldr	r3, [r3, #12]
 800e37c:	061b      	lsls	r3, r3, #24
 800e37e:	431a      	orrs	r2, r3
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	071b      	lsls	r3, r3, #28
 800e384:	493d      	ldr	r1, [pc, #244]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800e386:	4313      	orrs	r3, r2
 800e388:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e38c:	4b3b      	ldr	r3, [pc, #236]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800e38e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e392:	f023 021f 	bic.w	r2, r3, #31
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e39a:	3b01      	subs	r3, #1
 800e39c:	4937      	ldr	r1, [pc, #220]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800e39e:	4313      	orrs	r3, r2
 800e3a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d01d      	beq.n	800e3ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e3b0:	4b32      	ldr	r3, [pc, #200]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800e3b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3b6:	0e1b      	lsrs	r3, r3, #24
 800e3b8:	f003 030f 	and.w	r3, r3, #15
 800e3bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e3be:	4b2f      	ldr	r3, [pc, #188]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800e3c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3c4:	0f1b      	lsrs	r3, r3, #28
 800e3c6:	f003 0307 	and.w	r3, r3, #7
 800e3ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	019a      	lsls	r2, r3, #6
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	691b      	ldr	r3, [r3, #16]
 800e3d6:	041b      	lsls	r3, r3, #16
 800e3d8:	431a      	orrs	r2, r3
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	061b      	lsls	r3, r3, #24
 800e3de:	431a      	orrs	r2, r3
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	071b      	lsls	r3, r3, #28
 800e3e4:	4925      	ldr	r1, [pc, #148]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800e3e6:	4313      	orrs	r3, r2
 800e3e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d011      	beq.n	800e41c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	019a      	lsls	r2, r3, #6
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	691b      	ldr	r3, [r3, #16]
 800e402:	041b      	lsls	r3, r3, #16
 800e404:	431a      	orrs	r2, r3
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	68db      	ldr	r3, [r3, #12]
 800e40a:	061b      	lsls	r3, r3, #24
 800e40c:	431a      	orrs	r2, r3
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	689b      	ldr	r3, [r3, #8]
 800e412:	071b      	lsls	r3, r3, #28
 800e414:	4919      	ldr	r1, [pc, #100]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800e416:	4313      	orrs	r3, r2
 800e418:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e41c:	4b17      	ldr	r3, [pc, #92]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4a16      	ldr	r2, [pc, #88]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800e422:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e426:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e428:	f7fd f872 	bl	800b510 <HAL_GetTick>
 800e42c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e42e:	e008      	b.n	800e442 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e430:	f7fd f86e 	bl	800b510 <HAL_GetTick>
 800e434:	4602      	mov	r2, r0
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	1ad3      	subs	r3, r2, r3
 800e43a:	2b64      	cmp	r3, #100	; 0x64
 800e43c:	d901      	bls.n	800e442 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e43e:	2303      	movs	r3, #3
 800e440:	e0d7      	b.n	800e5f2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e442:	4b0e      	ldr	r3, [pc, #56]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d0f0      	beq.n	800e430 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e44e:	69bb      	ldr	r3, [r7, #24]
 800e450:	2b01      	cmp	r3, #1
 800e452:	f040 80cd 	bne.w	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e456:	4b09      	ldr	r3, [pc, #36]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4a08      	ldr	r2, [pc, #32]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800e45c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e462:	f7fd f855 	bl	800b510 <HAL_GetTick>
 800e466:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e468:	e00a      	b.n	800e480 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e46a:	f7fd f851 	bl	800b510 <HAL_GetTick>
 800e46e:	4602      	mov	r2, r0
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	1ad3      	subs	r3, r2, r3
 800e474:	2b64      	cmp	r3, #100	; 0x64
 800e476:	d903      	bls.n	800e480 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e478:	2303      	movs	r3, #3
 800e47a:	e0ba      	b.n	800e5f2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800e47c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e480:	4b5e      	ldr	r3, [pc, #376]	; (800e5fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e48c:	d0ed      	beq.n	800e46a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e496:	2b00      	cmp	r3, #0
 800e498:	d003      	beq.n	800e4a2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d009      	beq.n	800e4b6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d02e      	beq.n	800e50c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d12a      	bne.n	800e50c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e4b6:	4b51      	ldr	r3, [pc, #324]	; (800e5fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800e4b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4bc:	0c1b      	lsrs	r3, r3, #16
 800e4be:	f003 0303 	and.w	r3, r3, #3
 800e4c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e4c4:	4b4d      	ldr	r3, [pc, #308]	; (800e5fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800e4c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4ca:	0f1b      	lsrs	r3, r3, #28
 800e4cc:	f003 0307 	and.w	r3, r3, #7
 800e4d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	695b      	ldr	r3, [r3, #20]
 800e4d6:	019a      	lsls	r2, r3, #6
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	041b      	lsls	r3, r3, #16
 800e4dc:	431a      	orrs	r2, r3
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	699b      	ldr	r3, [r3, #24]
 800e4e2:	061b      	lsls	r3, r3, #24
 800e4e4:	431a      	orrs	r2, r3
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	071b      	lsls	r3, r3, #28
 800e4ea:	4944      	ldr	r1, [pc, #272]	; (800e5fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800e4ec:	4313      	orrs	r3, r2
 800e4ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e4f2:	4b42      	ldr	r3, [pc, #264]	; (800e5fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800e4f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e500:	3b01      	subs	r3, #1
 800e502:	021b      	lsls	r3, r3, #8
 800e504:	493d      	ldr	r1, [pc, #244]	; (800e5fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800e506:	4313      	orrs	r3, r2
 800e508:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e514:	2b00      	cmp	r3, #0
 800e516:	d022      	beq.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e51c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e520:	d11d      	bne.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e522:	4b36      	ldr	r3, [pc, #216]	; (800e5fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800e524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e528:	0e1b      	lsrs	r3, r3, #24
 800e52a:	f003 030f 	and.w	r3, r3, #15
 800e52e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e530:	4b32      	ldr	r3, [pc, #200]	; (800e5fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800e532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e536:	0f1b      	lsrs	r3, r3, #28
 800e538:	f003 0307 	and.w	r3, r3, #7
 800e53c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	695b      	ldr	r3, [r3, #20]
 800e542:	019a      	lsls	r2, r3, #6
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6a1b      	ldr	r3, [r3, #32]
 800e548:	041b      	lsls	r3, r3, #16
 800e54a:	431a      	orrs	r2, r3
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	061b      	lsls	r3, r3, #24
 800e550:	431a      	orrs	r2, r3
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	071b      	lsls	r3, r3, #28
 800e556:	4929      	ldr	r1, [pc, #164]	; (800e5fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800e558:	4313      	orrs	r3, r2
 800e55a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f003 0308 	and.w	r3, r3, #8
 800e566:	2b00      	cmp	r3, #0
 800e568:	d028      	beq.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e56a:	4b24      	ldr	r3, [pc, #144]	; (800e5fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800e56c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e570:	0e1b      	lsrs	r3, r3, #24
 800e572:	f003 030f 	and.w	r3, r3, #15
 800e576:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e578:	4b20      	ldr	r3, [pc, #128]	; (800e5fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800e57a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e57e:	0c1b      	lsrs	r3, r3, #16
 800e580:	f003 0303 	and.w	r3, r3, #3
 800e584:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	695b      	ldr	r3, [r3, #20]
 800e58a:	019a      	lsls	r2, r3, #6
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	041b      	lsls	r3, r3, #16
 800e590:	431a      	orrs	r2, r3
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	061b      	lsls	r3, r3, #24
 800e596:	431a      	orrs	r2, r3
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	69db      	ldr	r3, [r3, #28]
 800e59c:	071b      	lsls	r3, r3, #28
 800e59e:	4917      	ldr	r1, [pc, #92]	; (800e5fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800e5a0:	4313      	orrs	r3, r2
 800e5a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e5a6:	4b15      	ldr	r3, [pc, #84]	; (800e5fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800e5a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b4:	4911      	ldr	r1, [pc, #68]	; (800e5fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800e5b6:	4313      	orrs	r3, r2
 800e5b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e5bc:	4b0f      	ldr	r3, [pc, #60]	; (800e5fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a0e      	ldr	r2, [pc, #56]	; (800e5fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800e5c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e5c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e5c8:	f7fc ffa2 	bl	800b510 <HAL_GetTick>
 800e5cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e5ce:	e008      	b.n	800e5e2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e5d0:	f7fc ff9e 	bl	800b510 <HAL_GetTick>
 800e5d4:	4602      	mov	r2, r0
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	1ad3      	subs	r3, r2, r3
 800e5da:	2b64      	cmp	r3, #100	; 0x64
 800e5dc:	d901      	bls.n	800e5e2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e5de:	2303      	movs	r3, #3
 800e5e0:	e007      	b.n	800e5f2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e5e2:	4b06      	ldr	r3, [pc, #24]	; (800e5fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e5ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e5ee:	d1ef      	bne.n	800e5d0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800e5f0:	2300      	movs	r3, #0
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3720      	adds	r7, #32
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	bf00      	nop
 800e5fc:	40023800 	.word	0x40023800

0800e600 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b082      	sub	sp, #8
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d101      	bne.n	800e612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e60e:	2301      	movs	r3, #1
 800e610:	e040      	b.n	800e694 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e616:	2b00      	cmp	r3, #0
 800e618:	d106      	bne.n	800e628 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2200      	movs	r2, #0
 800e61e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f7fc fcfa 	bl	800b01c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2224      	movs	r2, #36	; 0x24
 800e62c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	681a      	ldr	r2, [r3, #0]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f022 0201 	bic.w	r2, r2, #1
 800e63c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 f8be 	bl	800e7c0 <UART_SetConfig>
 800e644:	4603      	mov	r3, r0
 800e646:	2b01      	cmp	r3, #1
 800e648:	d101      	bne.n	800e64e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e64a:	2301      	movs	r3, #1
 800e64c:	e022      	b.n	800e694 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e652:	2b00      	cmp	r3, #0
 800e654:	d002      	beq.n	800e65c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f000 fb56 	bl	800ed08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	685a      	ldr	r2, [r3, #4]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e66a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	689a      	ldr	r2, [r3, #8]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e67a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	681a      	ldr	r2, [r3, #0]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f042 0201 	orr.w	r2, r2, #1
 800e68a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f000 fbdd 	bl	800ee4c <UART_CheckIdleState>
 800e692:	4603      	mov	r3, r0
}
 800e694:	4618      	mov	r0, r3
 800e696:	3708      	adds	r7, #8
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}

0800e69c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b08a      	sub	sp, #40	; 0x28
 800e6a0:	af02      	add	r7, sp, #8
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	603b      	str	r3, [r7, #0]
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6b0:	2b20      	cmp	r3, #32
 800e6b2:	d17f      	bne.n	800e7b4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d002      	beq.n	800e6c0 <HAL_UART_Transmit+0x24>
 800e6ba:	88fb      	ldrh	r3, [r7, #6]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d101      	bne.n	800e6c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	e078      	b.n	800e7b6 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e6ca:	2b01      	cmp	r3, #1
 800e6cc:	d101      	bne.n	800e6d2 <HAL_UART_Transmit+0x36>
 800e6ce:	2302      	movs	r3, #2
 800e6d0:	e071      	b.n	800e7b6 <HAL_UART_Transmit+0x11a>
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2201      	movs	r2, #1
 800e6d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2221      	movs	r2, #33	; 0x21
 800e6e4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800e6e6:	f7fc ff13 	bl	800b510 <HAL_GetTick>
 800e6ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	88fa      	ldrh	r2, [r7, #6]
 800e6f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	88fa      	ldrh	r2, [r7, #6]
 800e6f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	689b      	ldr	r3, [r3, #8]
 800e700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e704:	d108      	bne.n	800e718 <HAL_UART_Transmit+0x7c>
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	691b      	ldr	r3, [r3, #16]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d104      	bne.n	800e718 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800e70e:	2300      	movs	r3, #0
 800e710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	61bb      	str	r3, [r7, #24]
 800e716:	e003      	b.n	800e720 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e71c:	2300      	movs	r3, #0
 800e71e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e720:	e02c      	b.n	800e77c <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	9300      	str	r3, [sp, #0]
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	2200      	movs	r2, #0
 800e72a:	2180      	movs	r1, #128	; 0x80
 800e72c:	68f8      	ldr	r0, [r7, #12]
 800e72e:	f000 fbbc 	bl	800eeaa <UART_WaitOnFlagUntilTimeout>
 800e732:	4603      	mov	r3, r0
 800e734:	2b00      	cmp	r3, #0
 800e736:	d001      	beq.n	800e73c <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 800e738:	2303      	movs	r3, #3
 800e73a:	e03c      	b.n	800e7b6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800e73c:	69fb      	ldr	r3, [r7, #28]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d10b      	bne.n	800e75a <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	881b      	ldrh	r3, [r3, #0]
 800e746:	461a      	mov	r2, r3
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e750:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	3302      	adds	r3, #2
 800e756:	61bb      	str	r3, [r7, #24]
 800e758:	e007      	b.n	800e76a <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e75a:	69fb      	ldr	r3, [r7, #28]
 800e75c:	781a      	ldrb	r2, [r3, #0]
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e764:	69fb      	ldr	r3, [r7, #28]
 800e766:	3301      	adds	r3, #1
 800e768:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e770:	b29b      	uxth	r3, r3
 800e772:	3b01      	subs	r3, #1
 800e774:	b29a      	uxth	r2, r3
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e782:	b29b      	uxth	r3, r3
 800e784:	2b00      	cmp	r3, #0
 800e786:	d1cc      	bne.n	800e722 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	9300      	str	r3, [sp, #0]
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	2200      	movs	r2, #0
 800e790:	2140      	movs	r1, #64	; 0x40
 800e792:	68f8      	ldr	r0, [r7, #12]
 800e794:	f000 fb89 	bl	800eeaa <UART_WaitOnFlagUntilTimeout>
 800e798:	4603      	mov	r3, r0
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d001      	beq.n	800e7a2 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 800e79e:	2303      	movs	r3, #3
 800e7a0:	e009      	b.n	800e7b6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2220      	movs	r2, #32
 800e7a6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	e000      	b.n	800e7b6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800e7b4:	2302      	movs	r3, #2
  }
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3720      	adds	r7, #32
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
	...

0800e7c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b088      	sub	sp, #32
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	689a      	ldr	r2, [r3, #8]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	691b      	ldr	r3, [r3, #16]
 800e7d8:	431a      	orrs	r2, r3
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	695b      	ldr	r3, [r3, #20]
 800e7de:	431a      	orrs	r2, r3
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	69db      	ldr	r3, [r3, #28]
 800e7e4:	4313      	orrs	r3, r2
 800e7e6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	4bb1      	ldr	r3, [pc, #708]	; (800eab4 <UART_SetConfig+0x2f4>)
 800e7f0:	4013      	ands	r3, r2
 800e7f2:	687a      	ldr	r2, [r7, #4]
 800e7f4:	6812      	ldr	r2, [r2, #0]
 800e7f6:	6939      	ldr	r1, [r7, #16]
 800e7f8:	430b      	orrs	r3, r1
 800e7fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	68da      	ldr	r2, [r3, #12]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	430a      	orrs	r2, r1
 800e810:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	699b      	ldr	r3, [r3, #24]
 800e816:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6a1b      	ldr	r3, [r3, #32]
 800e81c:	693a      	ldr	r2, [r7, #16]
 800e81e:	4313      	orrs	r3, r2
 800e820:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	689b      	ldr	r3, [r3, #8]
 800e828:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	693a      	ldr	r2, [r7, #16]
 800e832:	430a      	orrs	r2, r1
 800e834:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	4a9f      	ldr	r2, [pc, #636]	; (800eab8 <UART_SetConfig+0x2f8>)
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d121      	bne.n	800e884 <UART_SetConfig+0xc4>
 800e840:	4b9e      	ldr	r3, [pc, #632]	; (800eabc <UART_SetConfig+0x2fc>)
 800e842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e846:	f003 0303 	and.w	r3, r3, #3
 800e84a:	2b03      	cmp	r3, #3
 800e84c:	d816      	bhi.n	800e87c <UART_SetConfig+0xbc>
 800e84e:	a201      	add	r2, pc, #4	; (adr r2, 800e854 <UART_SetConfig+0x94>)
 800e850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e854:	0800e865 	.word	0x0800e865
 800e858:	0800e871 	.word	0x0800e871
 800e85c:	0800e86b 	.word	0x0800e86b
 800e860:	0800e877 	.word	0x0800e877
 800e864:	2301      	movs	r3, #1
 800e866:	77fb      	strb	r3, [r7, #31]
 800e868:	e151      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e86a:	2302      	movs	r3, #2
 800e86c:	77fb      	strb	r3, [r7, #31]
 800e86e:	e14e      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e870:	2304      	movs	r3, #4
 800e872:	77fb      	strb	r3, [r7, #31]
 800e874:	e14b      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e876:	2308      	movs	r3, #8
 800e878:	77fb      	strb	r3, [r7, #31]
 800e87a:	e148      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e87c:	2310      	movs	r3, #16
 800e87e:	77fb      	strb	r3, [r7, #31]
 800e880:	bf00      	nop
 800e882:	e144      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4a8d      	ldr	r2, [pc, #564]	; (800eac0 <UART_SetConfig+0x300>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d134      	bne.n	800e8f8 <UART_SetConfig+0x138>
 800e88e:	4b8b      	ldr	r3, [pc, #556]	; (800eabc <UART_SetConfig+0x2fc>)
 800e890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e894:	f003 030c 	and.w	r3, r3, #12
 800e898:	2b0c      	cmp	r3, #12
 800e89a:	d829      	bhi.n	800e8f0 <UART_SetConfig+0x130>
 800e89c:	a201      	add	r2, pc, #4	; (adr r2, 800e8a4 <UART_SetConfig+0xe4>)
 800e89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8a2:	bf00      	nop
 800e8a4:	0800e8d9 	.word	0x0800e8d9
 800e8a8:	0800e8f1 	.word	0x0800e8f1
 800e8ac:	0800e8f1 	.word	0x0800e8f1
 800e8b0:	0800e8f1 	.word	0x0800e8f1
 800e8b4:	0800e8e5 	.word	0x0800e8e5
 800e8b8:	0800e8f1 	.word	0x0800e8f1
 800e8bc:	0800e8f1 	.word	0x0800e8f1
 800e8c0:	0800e8f1 	.word	0x0800e8f1
 800e8c4:	0800e8df 	.word	0x0800e8df
 800e8c8:	0800e8f1 	.word	0x0800e8f1
 800e8cc:	0800e8f1 	.word	0x0800e8f1
 800e8d0:	0800e8f1 	.word	0x0800e8f1
 800e8d4:	0800e8eb 	.word	0x0800e8eb
 800e8d8:	2300      	movs	r3, #0
 800e8da:	77fb      	strb	r3, [r7, #31]
 800e8dc:	e117      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e8de:	2302      	movs	r3, #2
 800e8e0:	77fb      	strb	r3, [r7, #31]
 800e8e2:	e114      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e8e4:	2304      	movs	r3, #4
 800e8e6:	77fb      	strb	r3, [r7, #31]
 800e8e8:	e111      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e8ea:	2308      	movs	r3, #8
 800e8ec:	77fb      	strb	r3, [r7, #31]
 800e8ee:	e10e      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e8f0:	2310      	movs	r3, #16
 800e8f2:	77fb      	strb	r3, [r7, #31]
 800e8f4:	bf00      	nop
 800e8f6:	e10a      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4a71      	ldr	r2, [pc, #452]	; (800eac4 <UART_SetConfig+0x304>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d120      	bne.n	800e944 <UART_SetConfig+0x184>
 800e902:	4b6e      	ldr	r3, [pc, #440]	; (800eabc <UART_SetConfig+0x2fc>)
 800e904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e908:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e90c:	2b10      	cmp	r3, #16
 800e90e:	d00f      	beq.n	800e930 <UART_SetConfig+0x170>
 800e910:	2b10      	cmp	r3, #16
 800e912:	d802      	bhi.n	800e91a <UART_SetConfig+0x15a>
 800e914:	2b00      	cmp	r3, #0
 800e916:	d005      	beq.n	800e924 <UART_SetConfig+0x164>
 800e918:	e010      	b.n	800e93c <UART_SetConfig+0x17c>
 800e91a:	2b20      	cmp	r3, #32
 800e91c:	d005      	beq.n	800e92a <UART_SetConfig+0x16a>
 800e91e:	2b30      	cmp	r3, #48	; 0x30
 800e920:	d009      	beq.n	800e936 <UART_SetConfig+0x176>
 800e922:	e00b      	b.n	800e93c <UART_SetConfig+0x17c>
 800e924:	2300      	movs	r3, #0
 800e926:	77fb      	strb	r3, [r7, #31]
 800e928:	e0f1      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e92a:	2302      	movs	r3, #2
 800e92c:	77fb      	strb	r3, [r7, #31]
 800e92e:	e0ee      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e930:	2304      	movs	r3, #4
 800e932:	77fb      	strb	r3, [r7, #31]
 800e934:	e0eb      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e936:	2308      	movs	r3, #8
 800e938:	77fb      	strb	r3, [r7, #31]
 800e93a:	e0e8      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e93c:	2310      	movs	r3, #16
 800e93e:	77fb      	strb	r3, [r7, #31]
 800e940:	bf00      	nop
 800e942:	e0e4      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	4a5f      	ldr	r2, [pc, #380]	; (800eac8 <UART_SetConfig+0x308>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d120      	bne.n	800e990 <UART_SetConfig+0x1d0>
 800e94e:	4b5b      	ldr	r3, [pc, #364]	; (800eabc <UART_SetConfig+0x2fc>)
 800e950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e954:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e958:	2b40      	cmp	r3, #64	; 0x40
 800e95a:	d00f      	beq.n	800e97c <UART_SetConfig+0x1bc>
 800e95c:	2b40      	cmp	r3, #64	; 0x40
 800e95e:	d802      	bhi.n	800e966 <UART_SetConfig+0x1a6>
 800e960:	2b00      	cmp	r3, #0
 800e962:	d005      	beq.n	800e970 <UART_SetConfig+0x1b0>
 800e964:	e010      	b.n	800e988 <UART_SetConfig+0x1c8>
 800e966:	2b80      	cmp	r3, #128	; 0x80
 800e968:	d005      	beq.n	800e976 <UART_SetConfig+0x1b6>
 800e96a:	2bc0      	cmp	r3, #192	; 0xc0
 800e96c:	d009      	beq.n	800e982 <UART_SetConfig+0x1c2>
 800e96e:	e00b      	b.n	800e988 <UART_SetConfig+0x1c8>
 800e970:	2300      	movs	r3, #0
 800e972:	77fb      	strb	r3, [r7, #31]
 800e974:	e0cb      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e976:	2302      	movs	r3, #2
 800e978:	77fb      	strb	r3, [r7, #31]
 800e97a:	e0c8      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e97c:	2304      	movs	r3, #4
 800e97e:	77fb      	strb	r3, [r7, #31]
 800e980:	e0c5      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e982:	2308      	movs	r3, #8
 800e984:	77fb      	strb	r3, [r7, #31]
 800e986:	e0c2      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e988:	2310      	movs	r3, #16
 800e98a:	77fb      	strb	r3, [r7, #31]
 800e98c:	bf00      	nop
 800e98e:	e0be      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4a4d      	ldr	r2, [pc, #308]	; (800eacc <UART_SetConfig+0x30c>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d124      	bne.n	800e9e4 <UART_SetConfig+0x224>
 800e99a:	4b48      	ldr	r3, [pc, #288]	; (800eabc <UART_SetConfig+0x2fc>)
 800e99c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e9a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9a8:	d012      	beq.n	800e9d0 <UART_SetConfig+0x210>
 800e9aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9ae:	d802      	bhi.n	800e9b6 <UART_SetConfig+0x1f6>
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d007      	beq.n	800e9c4 <UART_SetConfig+0x204>
 800e9b4:	e012      	b.n	800e9dc <UART_SetConfig+0x21c>
 800e9b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9ba:	d006      	beq.n	800e9ca <UART_SetConfig+0x20a>
 800e9bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e9c0:	d009      	beq.n	800e9d6 <UART_SetConfig+0x216>
 800e9c2:	e00b      	b.n	800e9dc <UART_SetConfig+0x21c>
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	77fb      	strb	r3, [r7, #31]
 800e9c8:	e0a1      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e9ca:	2302      	movs	r3, #2
 800e9cc:	77fb      	strb	r3, [r7, #31]
 800e9ce:	e09e      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e9d0:	2304      	movs	r3, #4
 800e9d2:	77fb      	strb	r3, [r7, #31]
 800e9d4:	e09b      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e9d6:	2308      	movs	r3, #8
 800e9d8:	77fb      	strb	r3, [r7, #31]
 800e9da:	e098      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e9dc:	2310      	movs	r3, #16
 800e9de:	77fb      	strb	r3, [r7, #31]
 800e9e0:	bf00      	nop
 800e9e2:	e094      	b.n	800eb0e <UART_SetConfig+0x34e>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4a39      	ldr	r2, [pc, #228]	; (800ead0 <UART_SetConfig+0x310>)
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d124      	bne.n	800ea38 <UART_SetConfig+0x278>
 800e9ee:	4b33      	ldr	r3, [pc, #204]	; (800eabc <UART_SetConfig+0x2fc>)
 800e9f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e9f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9fc:	d012      	beq.n	800ea24 <UART_SetConfig+0x264>
 800e9fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea02:	d802      	bhi.n	800ea0a <UART_SetConfig+0x24a>
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d007      	beq.n	800ea18 <UART_SetConfig+0x258>
 800ea08:	e012      	b.n	800ea30 <UART_SetConfig+0x270>
 800ea0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea0e:	d006      	beq.n	800ea1e <UART_SetConfig+0x25e>
 800ea10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ea14:	d009      	beq.n	800ea2a <UART_SetConfig+0x26a>
 800ea16:	e00b      	b.n	800ea30 <UART_SetConfig+0x270>
 800ea18:	2301      	movs	r3, #1
 800ea1a:	77fb      	strb	r3, [r7, #31]
 800ea1c:	e077      	b.n	800eb0e <UART_SetConfig+0x34e>
 800ea1e:	2302      	movs	r3, #2
 800ea20:	77fb      	strb	r3, [r7, #31]
 800ea22:	e074      	b.n	800eb0e <UART_SetConfig+0x34e>
 800ea24:	2304      	movs	r3, #4
 800ea26:	77fb      	strb	r3, [r7, #31]
 800ea28:	e071      	b.n	800eb0e <UART_SetConfig+0x34e>
 800ea2a:	2308      	movs	r3, #8
 800ea2c:	77fb      	strb	r3, [r7, #31]
 800ea2e:	e06e      	b.n	800eb0e <UART_SetConfig+0x34e>
 800ea30:	2310      	movs	r3, #16
 800ea32:	77fb      	strb	r3, [r7, #31]
 800ea34:	bf00      	nop
 800ea36:	e06a      	b.n	800eb0e <UART_SetConfig+0x34e>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	4a25      	ldr	r2, [pc, #148]	; (800ead4 <UART_SetConfig+0x314>)
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	d124      	bne.n	800ea8c <UART_SetConfig+0x2cc>
 800ea42:	4b1e      	ldr	r3, [pc, #120]	; (800eabc <UART_SetConfig+0x2fc>)
 800ea44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea48:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ea4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea50:	d012      	beq.n	800ea78 <UART_SetConfig+0x2b8>
 800ea52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea56:	d802      	bhi.n	800ea5e <UART_SetConfig+0x29e>
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d007      	beq.n	800ea6c <UART_SetConfig+0x2ac>
 800ea5c:	e012      	b.n	800ea84 <UART_SetConfig+0x2c4>
 800ea5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea62:	d006      	beq.n	800ea72 <UART_SetConfig+0x2b2>
 800ea64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ea68:	d009      	beq.n	800ea7e <UART_SetConfig+0x2be>
 800ea6a:	e00b      	b.n	800ea84 <UART_SetConfig+0x2c4>
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	77fb      	strb	r3, [r7, #31]
 800ea70:	e04d      	b.n	800eb0e <UART_SetConfig+0x34e>
 800ea72:	2302      	movs	r3, #2
 800ea74:	77fb      	strb	r3, [r7, #31]
 800ea76:	e04a      	b.n	800eb0e <UART_SetConfig+0x34e>
 800ea78:	2304      	movs	r3, #4
 800ea7a:	77fb      	strb	r3, [r7, #31]
 800ea7c:	e047      	b.n	800eb0e <UART_SetConfig+0x34e>
 800ea7e:	2308      	movs	r3, #8
 800ea80:	77fb      	strb	r3, [r7, #31]
 800ea82:	e044      	b.n	800eb0e <UART_SetConfig+0x34e>
 800ea84:	2310      	movs	r3, #16
 800ea86:	77fb      	strb	r3, [r7, #31]
 800ea88:	bf00      	nop
 800ea8a:	e040      	b.n	800eb0e <UART_SetConfig+0x34e>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a11      	ldr	r2, [pc, #68]	; (800ead8 <UART_SetConfig+0x318>)
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d139      	bne.n	800eb0a <UART_SetConfig+0x34a>
 800ea96:	4b09      	ldr	r3, [pc, #36]	; (800eabc <UART_SetConfig+0x2fc>)
 800ea98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800eaa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eaa4:	d027      	beq.n	800eaf6 <UART_SetConfig+0x336>
 800eaa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eaaa:	d817      	bhi.n	800eadc <UART_SetConfig+0x31c>
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d01c      	beq.n	800eaea <UART_SetConfig+0x32a>
 800eab0:	e027      	b.n	800eb02 <UART_SetConfig+0x342>
 800eab2:	bf00      	nop
 800eab4:	efff69f3 	.word	0xefff69f3
 800eab8:	40011000 	.word	0x40011000
 800eabc:	40023800 	.word	0x40023800
 800eac0:	40004400 	.word	0x40004400
 800eac4:	40004800 	.word	0x40004800
 800eac8:	40004c00 	.word	0x40004c00
 800eacc:	40005000 	.word	0x40005000
 800ead0:	40011400 	.word	0x40011400
 800ead4:	40007800 	.word	0x40007800
 800ead8:	40007c00 	.word	0x40007c00
 800eadc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eae0:	d006      	beq.n	800eaf0 <UART_SetConfig+0x330>
 800eae2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800eae6:	d009      	beq.n	800eafc <UART_SetConfig+0x33c>
 800eae8:	e00b      	b.n	800eb02 <UART_SetConfig+0x342>
 800eaea:	2300      	movs	r3, #0
 800eaec:	77fb      	strb	r3, [r7, #31]
 800eaee:	e00e      	b.n	800eb0e <UART_SetConfig+0x34e>
 800eaf0:	2302      	movs	r3, #2
 800eaf2:	77fb      	strb	r3, [r7, #31]
 800eaf4:	e00b      	b.n	800eb0e <UART_SetConfig+0x34e>
 800eaf6:	2304      	movs	r3, #4
 800eaf8:	77fb      	strb	r3, [r7, #31]
 800eafa:	e008      	b.n	800eb0e <UART_SetConfig+0x34e>
 800eafc:	2308      	movs	r3, #8
 800eafe:	77fb      	strb	r3, [r7, #31]
 800eb00:	e005      	b.n	800eb0e <UART_SetConfig+0x34e>
 800eb02:	2310      	movs	r3, #16
 800eb04:	77fb      	strb	r3, [r7, #31]
 800eb06:	bf00      	nop
 800eb08:	e001      	b.n	800eb0e <UART_SetConfig+0x34e>
 800eb0a:	2310      	movs	r3, #16
 800eb0c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	69db      	ldr	r3, [r3, #28]
 800eb12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb16:	d17c      	bne.n	800ec12 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800eb18:	7ffb      	ldrb	r3, [r7, #31]
 800eb1a:	2b08      	cmp	r3, #8
 800eb1c:	d859      	bhi.n	800ebd2 <UART_SetConfig+0x412>
 800eb1e:	a201      	add	r2, pc, #4	; (adr r2, 800eb24 <UART_SetConfig+0x364>)
 800eb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb24:	0800eb49 	.word	0x0800eb49
 800eb28:	0800eb67 	.word	0x0800eb67
 800eb2c:	0800eb85 	.word	0x0800eb85
 800eb30:	0800ebd3 	.word	0x0800ebd3
 800eb34:	0800eb9d 	.word	0x0800eb9d
 800eb38:	0800ebd3 	.word	0x0800ebd3
 800eb3c:	0800ebd3 	.word	0x0800ebd3
 800eb40:	0800ebd3 	.word	0x0800ebd3
 800eb44:	0800ebbb 	.word	0x0800ebbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800eb48:	f7ff f944 	bl	800ddd4 <HAL_RCC_GetPCLK1Freq>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	005a      	lsls	r2, r3, #1
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	085b      	lsrs	r3, r3, #1
 800eb56:	441a      	add	r2, r3
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	685b      	ldr	r3, [r3, #4]
 800eb5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	61bb      	str	r3, [r7, #24]
        break;
 800eb64:	e038      	b.n	800ebd8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800eb66:	f7ff f949 	bl	800ddfc <HAL_RCC_GetPCLK2Freq>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	005a      	lsls	r2, r3, #1
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	085b      	lsrs	r3, r3, #1
 800eb74:	441a      	add	r2, r3
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	685b      	ldr	r3, [r3, #4]
 800eb7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb7e:	b29b      	uxth	r3, r3
 800eb80:	61bb      	str	r3, [r7, #24]
        break;
 800eb82:	e029      	b.n	800ebd8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	685b      	ldr	r3, [r3, #4]
 800eb88:	085a      	lsrs	r2, r3, #1
 800eb8a:	4b5d      	ldr	r3, [pc, #372]	; (800ed00 <UART_SetConfig+0x540>)
 800eb8c:	4413      	add	r3, r2
 800eb8e:	687a      	ldr	r2, [r7, #4]
 800eb90:	6852      	ldr	r2, [r2, #4]
 800eb92:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	61bb      	str	r3, [r7, #24]
        break;
 800eb9a:	e01d      	b.n	800ebd8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800eb9c:	f7ff f836 	bl	800dc0c <HAL_RCC_GetSysClockFreq>
 800eba0:	4603      	mov	r3, r0
 800eba2:	005a      	lsls	r2, r3, #1
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	685b      	ldr	r3, [r3, #4]
 800eba8:	085b      	lsrs	r3, r3, #1
 800ebaa:	441a      	add	r2, r3
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebb4:	b29b      	uxth	r3, r3
 800ebb6:	61bb      	str	r3, [r7, #24]
        break;
 800ebb8:	e00e      	b.n	800ebd8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	085b      	lsrs	r3, r3, #1
 800ebc0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	685b      	ldr	r3, [r3, #4]
 800ebc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebcc:	b29b      	uxth	r3, r3
 800ebce:	61bb      	str	r3, [r7, #24]
        break;
 800ebd0:	e002      	b.n	800ebd8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	75fb      	strb	r3, [r7, #23]
        break;
 800ebd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ebd8:	69bb      	ldr	r3, [r7, #24]
 800ebda:	2b0f      	cmp	r3, #15
 800ebdc:	d916      	bls.n	800ec0c <UART_SetConfig+0x44c>
 800ebde:	69bb      	ldr	r3, [r7, #24]
 800ebe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebe4:	d212      	bcs.n	800ec0c <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ebe6:	69bb      	ldr	r3, [r7, #24]
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	f023 030f 	bic.w	r3, r3, #15
 800ebee:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ebf0:	69bb      	ldr	r3, [r7, #24]
 800ebf2:	085b      	lsrs	r3, r3, #1
 800ebf4:	b29b      	uxth	r3, r3
 800ebf6:	f003 0307 	and.w	r3, r3, #7
 800ebfa:	b29a      	uxth	r2, r3
 800ebfc:	89fb      	ldrh	r3, [r7, #14]
 800ebfe:	4313      	orrs	r3, r2
 800ec00:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	89fa      	ldrh	r2, [r7, #14]
 800ec08:	60da      	str	r2, [r3, #12]
 800ec0a:	e06e      	b.n	800ecea <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	75fb      	strb	r3, [r7, #23]
 800ec10:	e06b      	b.n	800ecea <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800ec12:	7ffb      	ldrb	r3, [r7, #31]
 800ec14:	2b08      	cmp	r3, #8
 800ec16:	d857      	bhi.n	800ecc8 <UART_SetConfig+0x508>
 800ec18:	a201      	add	r2, pc, #4	; (adr r2, 800ec20 <UART_SetConfig+0x460>)
 800ec1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec1e:	bf00      	nop
 800ec20:	0800ec45 	.word	0x0800ec45
 800ec24:	0800ec61 	.word	0x0800ec61
 800ec28:	0800ec7d 	.word	0x0800ec7d
 800ec2c:	0800ecc9 	.word	0x0800ecc9
 800ec30:	0800ec95 	.word	0x0800ec95
 800ec34:	0800ecc9 	.word	0x0800ecc9
 800ec38:	0800ecc9 	.word	0x0800ecc9
 800ec3c:	0800ecc9 	.word	0x0800ecc9
 800ec40:	0800ecb1 	.word	0x0800ecb1
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800ec44:	f7ff f8c6 	bl	800ddd4 <HAL_RCC_GetPCLK1Freq>
 800ec48:	4602      	mov	r2, r0
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	685b      	ldr	r3, [r3, #4]
 800ec4e:	085b      	lsrs	r3, r3, #1
 800ec50:	441a      	add	r2, r3
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	61bb      	str	r3, [r7, #24]
        break;
 800ec5e:	e036      	b.n	800ecce <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800ec60:	f7ff f8cc 	bl	800ddfc <HAL_RCC_GetPCLK2Freq>
 800ec64:	4602      	mov	r2, r0
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	685b      	ldr	r3, [r3, #4]
 800ec6a:	085b      	lsrs	r3, r3, #1
 800ec6c:	441a      	add	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	61bb      	str	r3, [r7, #24]
        break;
 800ec7a:	e028      	b.n	800ecce <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	085a      	lsrs	r2, r3, #1
 800ec82:	4b20      	ldr	r3, [pc, #128]	; (800ed04 <UART_SetConfig+0x544>)
 800ec84:	4413      	add	r3, r2
 800ec86:	687a      	ldr	r2, [r7, #4]
 800ec88:	6852      	ldr	r2, [r2, #4]
 800ec8a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	61bb      	str	r3, [r7, #24]
        break;
 800ec92:	e01c      	b.n	800ecce <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800ec94:	f7fe ffba 	bl	800dc0c <HAL_RCC_GetSysClockFreq>
 800ec98:	4602      	mov	r2, r0
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	685b      	ldr	r3, [r3, #4]
 800ec9e:	085b      	lsrs	r3, r3, #1
 800eca0:	441a      	add	r2, r3
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	685b      	ldr	r3, [r3, #4]
 800eca6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecaa:	b29b      	uxth	r3, r3
 800ecac:	61bb      	str	r3, [r7, #24]
        break;
 800ecae:	e00e      	b.n	800ecce <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	685b      	ldr	r3, [r3, #4]
 800ecb4:	085b      	lsrs	r3, r3, #1
 800ecb6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	61bb      	str	r3, [r7, #24]
        break;
 800ecc6:	e002      	b.n	800ecce <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800ecc8:	2301      	movs	r3, #1
 800ecca:	75fb      	strb	r3, [r7, #23]
        break;
 800eccc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ecce:	69bb      	ldr	r3, [r7, #24]
 800ecd0:	2b0f      	cmp	r3, #15
 800ecd2:	d908      	bls.n	800ece6 <UART_SetConfig+0x526>
 800ecd4:	69bb      	ldr	r3, [r7, #24]
 800ecd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecda:	d204      	bcs.n	800ece6 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	69ba      	ldr	r2, [r7, #24]
 800ece2:	60da      	str	r2, [r3, #12]
 800ece4:	e001      	b.n	800ecea <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800ece6:	2301      	movs	r3, #1
 800ece8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2200      	movs	r2, #0
 800ecee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ecf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3720      	adds	r7, #32
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	01e84800 	.word	0x01e84800
 800ed04:	00f42400 	.word	0x00f42400

0800ed08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b083      	sub	sp, #12
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed14:	f003 0301 	and.w	r3, r3, #1
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d00a      	beq.n	800ed32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	430a      	orrs	r2, r1
 800ed30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed36:	f003 0302 	and.w	r3, r3, #2
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d00a      	beq.n	800ed54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	430a      	orrs	r2, r1
 800ed52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed58:	f003 0304 	and.w	r3, r3, #4
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d00a      	beq.n	800ed76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	685b      	ldr	r3, [r3, #4]
 800ed66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	430a      	orrs	r2, r1
 800ed74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed7a:	f003 0308 	and.w	r3, r3, #8
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d00a      	beq.n	800ed98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	685b      	ldr	r3, [r3, #4]
 800ed88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	430a      	orrs	r2, r1
 800ed96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed9c:	f003 0310 	and.w	r3, r3, #16
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d00a      	beq.n	800edba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	689b      	ldr	r3, [r3, #8]
 800edaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	430a      	orrs	r2, r1
 800edb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edbe:	f003 0320 	and.w	r3, r3, #32
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d00a      	beq.n	800eddc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	689b      	ldr	r3, [r3, #8]
 800edcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	430a      	orrs	r2, r1
 800edda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ede0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d01a      	beq.n	800ee1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	685b      	ldr	r3, [r3, #4]
 800edee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	430a      	orrs	r2, r1
 800edfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee06:	d10a      	bne.n	800ee1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	430a      	orrs	r2, r1
 800ee1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d00a      	beq.n	800ee40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	685b      	ldr	r3, [r3, #4]
 800ee30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	430a      	orrs	r2, r1
 800ee3e:	605a      	str	r2, [r3, #4]
  }
}
 800ee40:	bf00      	nop
 800ee42:	370c      	adds	r7, #12
 800ee44:	46bd      	mov	sp, r7
 800ee46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4a:	4770      	bx	lr

0800ee4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b086      	sub	sp, #24
 800ee50:	af02      	add	r7, sp, #8
 800ee52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2200      	movs	r2, #0
 800ee58:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ee5a:	f7fc fb59 	bl	800b510 <HAL_GetTick>
 800ee5e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f003 0308 	and.w	r3, r3, #8
 800ee6a:	2b08      	cmp	r3, #8
 800ee6c:	d10e      	bne.n	800ee8c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2200      	movs	r2, #0
 800ee78:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f000 f814 	bl	800eeaa <UART_WaitOnFlagUntilTimeout>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d001      	beq.n	800ee8c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee88:	2303      	movs	r3, #3
 800ee8a:	e00a      	b.n	800eea2 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2220      	movs	r2, #32
 800ee90:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2220      	movs	r2, #32
 800ee96:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800eea0:	2300      	movs	r3, #0
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3710      	adds	r7, #16
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}

0800eeaa <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800eeaa:	b580      	push	{r7, lr}
 800eeac:	b084      	sub	sp, #16
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	60f8      	str	r0, [r7, #12]
 800eeb2:	60b9      	str	r1, [r7, #8]
 800eeb4:	603b      	str	r3, [r7, #0]
 800eeb6:	4613      	mov	r3, r2
 800eeb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eeba:	e02a      	b.n	800ef12 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eebc:	69bb      	ldr	r3, [r7, #24]
 800eebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eec2:	d026      	beq.n	800ef12 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eec4:	f7fc fb24 	bl	800b510 <HAL_GetTick>
 800eec8:	4602      	mov	r2, r0
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	1ad3      	subs	r3, r2, r3
 800eece:	69ba      	ldr	r2, [r7, #24]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d302      	bcc.n	800eeda <UART_WaitOnFlagUntilTimeout+0x30>
 800eed4:	69bb      	ldr	r3, [r7, #24]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d11b      	bne.n	800ef12 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	681a      	ldr	r2, [r3, #0]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800eee8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	689a      	ldr	r2, [r3, #8]
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	f022 0201 	bic.w	r2, r2, #1
 800eef8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2220      	movs	r2, #32
 800eefe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2220      	movs	r2, #32
 800ef04:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ef0e:	2303      	movs	r3, #3
 800ef10:	e00f      	b.n	800ef32 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	69da      	ldr	r2, [r3, #28]
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	4013      	ands	r3, r2
 800ef1c:	68ba      	ldr	r2, [r7, #8]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	bf0c      	ite	eq
 800ef22:	2301      	moveq	r3, #1
 800ef24:	2300      	movne	r3, #0
 800ef26:	b2db      	uxtb	r3, r3
 800ef28:	461a      	mov	r2, r3
 800ef2a:	79fb      	ldrb	r3, [r7, #7]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d0c5      	beq.n	800eebc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ef30:	2300      	movs	r3, #0
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	3710      	adds	r7, #16
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
	...

0800ef3c <aiInit>:

/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8* activations)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b090      	sub	sp, #64	; 0x40
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
    ai_error err;

    /* 1 - Specific AI data structure to provide the references of the
     * activation/working memory chunk and the weights/bias parameters */
    const ai_network_params params = {
 800ef44:	4b28      	ldr	r3, [pc, #160]	; (800efe8 <aiInit+0xac>)
 800ef46:	60fb      	str	r3, [r7, #12]
 800ef48:	2301      	movs	r3, #1
 800ef4a:	823b      	strh	r3, [r7, #16]
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	827b      	strh	r3, [r7, #18]
 800ef50:	2301      	movs	r3, #1
 800ef52:	82bb      	strh	r3, [r7, #20]
 800ef54:	4b25      	ldr	r3, [pc, #148]	; (800efec <aiInit+0xb0>)
 800ef56:	61bb      	str	r3, [r7, #24]
            AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 800ef58:	f000 faac 	bl	800f4b4 <ai_network_data_weights_get>
 800ef5c:	4603      	mov	r3, r0
    const ai_network_params params = {
 800ef5e:	61fb      	str	r3, [r7, #28]
 800ef60:	2300      	movs	r3, #0
 800ef62:	623b      	str	r3, [r7, #32]
 800ef64:	4b22      	ldr	r3, [pc, #136]	; (800eff0 <aiInit+0xb4>)
 800ef66:	627b      	str	r3, [r7, #36]	; 0x24
 800ef68:	2301      	movs	r3, #1
 800ef6a:	853b      	strh	r3, [r7, #40]	; 0x28
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ef70:	2301      	movs	r3, #1
 800ef72:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ef74:	f44f 4359 	mov.w	r3, #55552	; 0xd900
 800ef78:	633b      	str	r3, [r7, #48]	; 0x30
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	637b      	str	r3, [r7, #52]	; 0x34
 800ef7e:	2300      	movs	r3, #0
 800ef80:	63bb      	str	r3, [r7, #56]	; 0x38
            AI_NETWORK_DATA_ACTIVATIONS(activations)
    };

    /* 2 - Create an instance of the NN */
    err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 800ef82:	2100      	movs	r1, #0
 800ef84:	481b      	ldr	r0, [pc, #108]	; (800eff4 <aiInit+0xb8>)
 800ef86:	f000 fa2f 	bl	800f3e8 <ai_network_create>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (err.type != AI_ERROR_NONE) {
 800ef8e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d002      	beq.n	800ef9c <aiInit+0x60>
	    return -1;
 800ef96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef9a:	e020      	b.n	800efde <aiInit+0xa2>
    }

    /* 3 - Initialize the NN - Ready to be used */
    if (!ai_network_init(network, &params)) {
 800ef9c:	4b15      	ldr	r3, [pc, #84]	; (800eff4 <aiInit+0xb8>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	f107 020c 	add.w	r2, r7, #12
 800efa4:	4611      	mov	r1, r2
 800efa6:	4618      	mov	r0, r3
 800efa8:	f000 fa40 	bl	800f42c <ai_network_init>
 800efac:	4603      	mov	r3, r0
 800efae:	f083 0301 	eor.w	r3, r3, #1
 800efb2:	b2db      	uxtb	r3, r3
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d011      	beq.n	800efdc <aiInit+0xa0>
        err = ai_network_get_error(network);
 800efb8:	4b0e      	ldr	r3, [pc, #56]	; (800eff4 <aiInit+0xb8>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	4618      	mov	r0, r3
 800efbe:	f000 fa07 	bl	800f3d0 <ai_network_get_error>
 800efc2:	4603      	mov	r3, r0
 800efc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ai_network_destroy(network);
 800efc6:	4b0b      	ldr	r3, [pc, #44]	; (800eff4 <aiInit+0xb8>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	4618      	mov	r0, r3
 800efcc:	f000 fa22 	bl	800f414 <ai_network_destroy>
        network = AI_HANDLE_NULL;
 800efd0:	4b08      	ldr	r3, [pc, #32]	; (800eff4 <aiInit+0xb8>)
 800efd2:	2200      	movs	r2, #0
 800efd4:	601a      	str	r2, [r3, #0]
	    return -2;
 800efd6:	f06f 0301 	mvn.w	r3, #1
 800efda:	e000      	b.n	800efde <aiInit+0xa2>
    }

    return 0;
 800efdc:	2300      	movs	r3, #0
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3740      	adds	r7, #64	; 0x40
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	40040440 	.word	0x40040440
 800efec:	0009048c 	.word	0x0009048c
 800eff0:	00040440 	.word	0x00040440
 800eff4:	20000f1c 	.word	0x20000f1c

0800eff8 <aiRun>:

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	6039      	str	r1, [r7, #0]
    ai_i32 nbatch;
    ai_error err;

    /* Parameters checking */
    if (!in_data || !out_data || !network)
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d006      	beq.n	800f016 <aiRun+0x1e>
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d003      	beq.n	800f016 <aiRun+0x1e>
 800f00e:	4b17      	ldr	r3, [pc, #92]	; (800f06c <aiRun+0x74>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d102      	bne.n	800f01c <aiRun+0x24>
        return -1;
 800f016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f01a:	e022      	b.n	800f062 <aiRun+0x6a>

    /* Initialize input/output buffer handlers */
    ai_input[0].n_batches = 1;
 800f01c:	4b14      	ldr	r3, [pc, #80]	; (800f070 <aiRun+0x78>)
 800f01e:	2201      	movs	r2, #1
 800f020:	809a      	strh	r2, [r3, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 800f022:	4a13      	ldr	r2, [pc, #76]	; (800f070 <aiRun+0x78>)
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6113      	str	r3, [r2, #16]
    ai_output[0].n_batches = 1;
 800f028:	4b12      	ldr	r3, [pc, #72]	; (800f074 <aiRun+0x7c>)
 800f02a:	2201      	movs	r2, #1
 800f02c:	809a      	strh	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 800f02e:	4a11      	ldr	r2, [pc, #68]	; (800f074 <aiRun+0x7c>)
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	6113      	str	r3, [r2, #16]

    /* 2 - Perform the inference */
    nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 800f034:	4b0d      	ldr	r3, [pc, #52]	; (800f06c <aiRun+0x74>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	4a0e      	ldr	r2, [pc, #56]	; (800f074 <aiRun+0x7c>)
 800f03a:	490d      	ldr	r1, [pc, #52]	; (800f070 <aiRun+0x78>)
 800f03c:	4618      	mov	r0, r3
 800f03e:	f000 fa28 	bl	800f492 <ai_network_run>
 800f042:	60f8      	str	r0, [r7, #12]
    if (nbatch != 1) {
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2b01      	cmp	r3, #1
 800f048:	d00a      	beq.n	800f060 <aiRun+0x68>
        err = ai_network_get_error(network);
 800f04a:	4b08      	ldr	r3, [pc, #32]	; (800f06c <aiRun+0x74>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	4618      	mov	r0, r3
 800f050:	f000 f9be 	bl	800f3d0 <ai_network_get_error>
 800f054:	4603      	mov	r3, r0
 800f056:	60bb      	str	r3, [r7, #8]
        // ...
        return err.code;
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800f05e:	e000      	b.n	800f062 <aiRun+0x6a>
    }

    return 0;
 800f060:	2300      	movs	r3, #0
}
 800f062:	4618      	mov	r0, r3
 800f064:	3710      	adds	r7, #16
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	20000f1c 	.word	0x20000f1c
 800f070:	2000000c 	.word	0x2000000c
 800f074:	20000024 	.word	0x20000024

0800f078 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	af00      	add	r7, sp, #0
    /* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_NETWORK_DATA_ACTIVATIONS_SIZE];

    aiInit(activations);
 800f07c:	4802      	ldr	r0, [pc, #8]	; (800f088 <MX_X_CUBE_AI_Init+0x10>)
 800f07e:	f7ff ff5d 	bl	800ef3c <aiInit>
    /* USER CODE END 0 */
}
 800f082:	bf00      	nop
 800f084:	bd80      	pop	{r7, pc}
 800f086:	bf00      	nop
 800f088:	20000f20 	.word	0x20000f20

0800f08c <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800f08c:	b480      	push	{r7}
 800f08e:	b085      	sub	sp, #20
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
 800f094:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	691b      	ldr	r3, [r3, #16]
 800f09a:	3303      	adds	r3, #3
 800f09c:	f023 0303 	bic.w	r3, r3, #3
 800f0a0:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    conv2d_8_scratch0_array.data = AI_PTR(activations + 29952);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800f0a8:	4a2f      	ldr	r2, [pc, #188]	; (800f168 <network_configure_activations+0xdc>)
 800f0aa:	6093      	str	r3, [r2, #8]
    conv2d_8_scratch0_array.data_start = AI_PTR(activations + 29952);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800f0b2:	4a2d      	ldr	r2, [pc, #180]	; (800f168 <network_configure_activations+0xdc>)
 800f0b4:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 800f0b6:	4b2d      	ldr	r3, [pc, #180]	; (800f16c <network_configure_activations+0xe0>)
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800f0bc:	4b2b      	ldr	r3, [pc, #172]	; (800f16c <network_configure_activations+0xe0>)
 800f0be:	2200      	movs	r2, #0
 800f0c0:	60da      	str	r2, [r3, #12]
    conv2d_5_output_array.data = AI_PTR(activations + 0);
 800f0c2:	4a2b      	ldr	r2, [pc, #172]	; (800f170 <network_configure_activations+0xe4>)
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	6093      	str	r3, [r2, #8]
    conv2d_5_output_array.data_start = AI_PTR(activations + 0);
 800f0c8:	4a29      	ldr	r2, [pc, #164]	; (800f170 <network_configure_activations+0xe4>)
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	60d3      	str	r3, [r2, #12]
    conv2d_6_output_array.data = AI_PTR(activations + 29952);
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800f0d4:	4a27      	ldr	r2, [pc, #156]	; (800f174 <network_configure_activations+0xe8>)
 800f0d6:	6093      	str	r3, [r2, #8]
    conv2d_6_output_array.data_start = AI_PTR(activations + 29952);
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800f0de:	4a25      	ldr	r2, [pc, #148]	; (800f174 <network_configure_activations+0xe8>)
 800f0e0:	60d3      	str	r3, [r2, #12]
    conv2d_7_output_array.data = AI_PTR(activations + 0);
 800f0e2:	4a25      	ldr	r2, [pc, #148]	; (800f178 <network_configure_activations+0xec>)
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	6093      	str	r3, [r2, #8]
    conv2d_7_output_array.data_start = AI_PTR(activations + 0);
 800f0e8:	4a23      	ldr	r2, [pc, #140]	; (800f178 <network_configure_activations+0xec>)
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	60d3      	str	r3, [r2, #12]
    conv2d_8_output_array.data = AI_PTR(activations + 43264);
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f503 4329 	add.w	r3, r3, #43264	; 0xa900
 800f0f4:	4a21      	ldr	r2, [pc, #132]	; (800f17c <network_configure_activations+0xf0>)
 800f0f6:	6093      	str	r3, [r2, #8]
    conv2d_8_output_array.data_start = AI_PTR(activations + 43264);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f503 4329 	add.w	r3, r3, #43264	; 0xa900
 800f0fe:	4a1f      	ldr	r2, [pc, #124]	; (800f17c <network_configure_activations+0xf0>)
 800f100:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(activations + 0);
 800f102:	4a1f      	ldr	r2, [pc, #124]	; (800f180 <network_configure_activations+0xf4>)
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(activations + 0);
 800f108:	4a1d      	ldr	r2, [pc, #116]	; (800f180 <network_configure_activations+0xf4>)
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	60d3      	str	r3, [r2, #12]
    dense_4_nl_output_array.data = AI_PTR(activations + 0);
 800f10e:	4a1d      	ldr	r2, [pc, #116]	; (800f184 <network_configure_activations+0xf8>)
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	6093      	str	r3, [r2, #8]
    dense_4_nl_output_array.data_start = AI_PTR(activations + 0);
 800f114:	4a1b      	ldr	r2, [pc, #108]	; (800f184 <network_configure_activations+0xf8>)
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	60d3      	str	r3, [r2, #12]
    dense_5_output_array.data = AI_PTR(activations + 512);
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f120:	4a19      	ldr	r2, [pc, #100]	; (800f188 <network_configure_activations+0xfc>)
 800f122:	6093      	str	r3, [r2, #8]
    dense_5_output_array.data_start = AI_PTR(activations + 512);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f12a:	4a17      	ldr	r2, [pc, #92]	; (800f188 <network_configure_activations+0xfc>)
 800f12c:	60d3      	str	r3, [r2, #12]
    dense_5_nl_output_array.data = AI_PTR(activations + 512);
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f134:	4a15      	ldr	r2, [pc, #84]	; (800f18c <network_configure_activations+0x100>)
 800f136:	6093      	str	r3, [r2, #8]
    dense_5_nl_output_array.data_start = AI_PTR(activations + 512);
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f13e:	4a13      	ldr	r2, [pc, #76]	; (800f18c <network_configure_activations+0x100>)
 800f140:	60d3      	str	r3, [r2, #12]
    dense_6_output_array.data = AI_PTR(activations + 0);
 800f142:	4a13      	ldr	r2, [pc, #76]	; (800f190 <network_configure_activations+0x104>)
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	6093      	str	r3, [r2, #8]
    dense_6_output_array.data_start = AI_PTR(activations + 0);
 800f148:	4a11      	ldr	r2, [pc, #68]	; (800f190 <network_configure_activations+0x104>)
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	60d3      	str	r3, [r2, #12]
    dense_6_nl_output_array.data = AI_PTR(NULL);
 800f14e:	4b11      	ldr	r3, [pc, #68]	; (800f194 <network_configure_activations+0x108>)
 800f150:	2200      	movs	r2, #0
 800f152:	609a      	str	r2, [r3, #8]
    dense_6_nl_output_array.data_start = AI_PTR(NULL);
 800f154:	4b0f      	ldr	r3, [pc, #60]	; (800f194 <network_configure_activations+0x108>)
 800f156:	2200      	movs	r2, #0
 800f158:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800f15a:	2301      	movs	r3, #1
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3714      	adds	r7, #20
 800f160:	46bd      	mov	sp, r7
 800f162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f166:	4770      	bx	lr
 800f168:	20000094 	.word	0x20000094
 800f16c:	20000184 	.word	0x20000184
 800f170:	20000194 	.word	0x20000194
 800f174:	200001a4 	.word	0x200001a4
 800f178:	200001b4 	.word	0x200001b4
 800f17c:	200001c4 	.word	0x200001c4
 800f180:	200001d4 	.word	0x200001d4
 800f184:	200001e4 	.word	0x200001e4
 800f188:	200001f4 	.word	0x200001f4
 800f18c:	20000204 	.word	0x20000204
 800f190:	20000214 	.word	0x20000214
 800f194:	20000224 	.word	0x20000224

0800f198 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800f198:	b480      	push	{r7}
 800f19a:	b085      	sub	sp, #20
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	691b      	ldr	r3, [r3, #16]
 800f1a6:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800f1a8:	4b71      	ldr	r3, [pc, #452]	; (800f370 <network_configure_weights+0x1d8>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f1b0:	4a6f      	ldr	r2, [pc, #444]	; (800f370 <network_configure_weights+0x1d8>)
 800f1b2:	6013      	str	r3, [r2, #0]
    dense_6_bias_array.data = AI_PTR(weights + 590976);
 800f1b4:	68fa      	ldr	r2, [r7, #12]
 800f1b6:	4b6f      	ldr	r3, [pc, #444]	; (800f374 <network_configure_weights+0x1dc>)
 800f1b8:	4413      	add	r3, r2
 800f1ba:	4a6d      	ldr	r2, [pc, #436]	; (800f370 <network_configure_weights+0x1d8>)
 800f1bc:	6093      	str	r3, [r2, #8]
    dense_6_bias_array.data_start = AI_PTR(weights + 590976);
 800f1be:	68fa      	ldr	r2, [r7, #12]
 800f1c0:	4b6c      	ldr	r3, [pc, #432]	; (800f374 <network_configure_weights+0x1dc>)
 800f1c2:	4413      	add	r3, r2
 800f1c4:	4a6a      	ldr	r2, [pc, #424]	; (800f370 <network_configure_weights+0x1d8>)
 800f1c6:	60d3      	str	r3, [r2, #12]
    dense_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800f1c8:	4b6b      	ldr	r3, [pc, #428]	; (800f378 <network_configure_weights+0x1e0>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f1d0:	4a69      	ldr	r2, [pc, #420]	; (800f378 <network_configure_weights+0x1e0>)
 800f1d2:	6013      	str	r3, [r2, #0]
    dense_6_weights_array.data = AI_PTR(weights + 590208);
 800f1d4:	68fa      	ldr	r2, [r7, #12]
 800f1d6:	4b69      	ldr	r3, [pc, #420]	; (800f37c <network_configure_weights+0x1e4>)
 800f1d8:	4413      	add	r3, r2
 800f1da:	4a67      	ldr	r2, [pc, #412]	; (800f378 <network_configure_weights+0x1e0>)
 800f1dc:	6093      	str	r3, [r2, #8]
    dense_6_weights_array.data_start = AI_PTR(weights + 590208);
 800f1de:	68fa      	ldr	r2, [r7, #12]
 800f1e0:	4b66      	ldr	r3, [pc, #408]	; (800f37c <network_configure_weights+0x1e4>)
 800f1e2:	4413      	add	r3, r2
 800f1e4:	4a64      	ldr	r2, [pc, #400]	; (800f378 <network_configure_weights+0x1e0>)
 800f1e6:	60d3      	str	r3, [r2, #12]
    dense_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800f1e8:	4b65      	ldr	r3, [pc, #404]	; (800f380 <network_configure_weights+0x1e8>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f1f0:	4a63      	ldr	r2, [pc, #396]	; (800f380 <network_configure_weights+0x1e8>)
 800f1f2:	6013      	str	r3, [r2, #0]
    dense_5_bias_array.data = AI_PTR(weights + 589952);
 800f1f4:	68fa      	ldr	r2, [r7, #12]
 800f1f6:	4b63      	ldr	r3, [pc, #396]	; (800f384 <network_configure_weights+0x1ec>)
 800f1f8:	4413      	add	r3, r2
 800f1fa:	4a61      	ldr	r2, [pc, #388]	; (800f380 <network_configure_weights+0x1e8>)
 800f1fc:	6093      	str	r3, [r2, #8]
    dense_5_bias_array.data_start = AI_PTR(weights + 589952);
 800f1fe:	68fa      	ldr	r2, [r7, #12]
 800f200:	4b60      	ldr	r3, [pc, #384]	; (800f384 <network_configure_weights+0x1ec>)
 800f202:	4413      	add	r3, r2
 800f204:	4a5e      	ldr	r2, [pc, #376]	; (800f380 <network_configure_weights+0x1e8>)
 800f206:	60d3      	str	r3, [r2, #12]
    dense_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800f208:	4b5f      	ldr	r3, [pc, #380]	; (800f388 <network_configure_weights+0x1f0>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f210:	4a5d      	ldr	r2, [pc, #372]	; (800f388 <network_configure_weights+0x1f0>)
 800f212:	6013      	str	r3, [r2, #0]
    dense_5_weights_array.data = AI_PTR(weights + 585856);
 800f214:	68fa      	ldr	r2, [r7, #12]
 800f216:	4b5d      	ldr	r3, [pc, #372]	; (800f38c <network_configure_weights+0x1f4>)
 800f218:	4413      	add	r3, r2
 800f21a:	4a5b      	ldr	r2, [pc, #364]	; (800f388 <network_configure_weights+0x1f0>)
 800f21c:	6093      	str	r3, [r2, #8]
    dense_5_weights_array.data_start = AI_PTR(weights + 585792);
 800f21e:	68fa      	ldr	r2, [r7, #12]
 800f220:	4b5b      	ldr	r3, [pc, #364]	; (800f390 <network_configure_weights+0x1f8>)
 800f222:	4413      	add	r3, r2
 800f224:	4a58      	ldr	r2, [pc, #352]	; (800f388 <network_configure_weights+0x1f0>)
 800f226:	60d3      	str	r3, [r2, #12]
    dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800f228:	4b5a      	ldr	r3, [pc, #360]	; (800f394 <network_configure_weights+0x1fc>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f230:	4a58      	ldr	r2, [pc, #352]	; (800f394 <network_configure_weights+0x1fc>)
 800f232:	6013      	str	r3, [r2, #0]
    dense_4_bias_array.data = AI_PTR(weights + 585280);
 800f234:	68fa      	ldr	r2, [r7, #12]
 800f236:	4b58      	ldr	r3, [pc, #352]	; (800f398 <network_configure_weights+0x200>)
 800f238:	4413      	add	r3, r2
 800f23a:	4a56      	ldr	r2, [pc, #344]	; (800f394 <network_configure_weights+0x1fc>)
 800f23c:	6093      	str	r3, [r2, #8]
    dense_4_bias_array.data_start = AI_PTR(weights + 585280);
 800f23e:	68fa      	ldr	r2, [r7, #12]
 800f240:	4b55      	ldr	r3, [pc, #340]	; (800f398 <network_configure_weights+0x200>)
 800f242:	4413      	add	r3, r2
 800f244:	4a53      	ldr	r2, [pc, #332]	; (800f394 <network_configure_weights+0x1fc>)
 800f246:	60d3      	str	r3, [r2, #12]
    dense_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800f248:	4b54      	ldr	r3, [pc, #336]	; (800f39c <network_configure_weights+0x204>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f250:	4a52      	ldr	r2, [pc, #328]	; (800f39c <network_configure_weights+0x204>)
 800f252:	6013      	str	r3, [r2, #0]
    dense_4_weights_array.data = AI_PTR(weights + 388672);
 800f254:	68fa      	ldr	r2, [r7, #12]
 800f256:	4b52      	ldr	r3, [pc, #328]	; (800f3a0 <network_configure_weights+0x208>)
 800f258:	4413      	add	r3, r2
 800f25a:	4a50      	ldr	r2, [pc, #320]	; (800f39c <network_configure_weights+0x204>)
 800f25c:	6093      	str	r3, [r2, #8]
    dense_4_weights_array.data_start = AI_PTR(weights + 388608);
 800f25e:	68fa      	ldr	r2, [r7, #12]
 800f260:	4b50      	ldr	r3, [pc, #320]	; (800f3a4 <network_configure_weights+0x20c>)
 800f262:	4413      	add	r3, r2
 800f264:	4a4d      	ldr	r2, [pc, #308]	; (800f39c <network_configure_weights+0x204>)
 800f266:	60d3      	str	r3, [r2, #12]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 800f268:	4b4f      	ldr	r3, [pc, #316]	; (800f3a8 <network_configure_weights+0x210>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f270:	4a4d      	ldr	r2, [pc, #308]	; (800f3a8 <network_configure_weights+0x210>)
 800f272:	6013      	str	r3, [r2, #0]
    conv2d_8_bias_array.data = AI_PTR(weights + 388096);
 800f274:	68fa      	ldr	r2, [r7, #12]
 800f276:	4b4d      	ldr	r3, [pc, #308]	; (800f3ac <network_configure_weights+0x214>)
 800f278:	4413      	add	r3, r2
 800f27a:	4a4b      	ldr	r2, [pc, #300]	; (800f3a8 <network_configure_weights+0x210>)
 800f27c:	6093      	str	r3, [r2, #8]
    conv2d_8_bias_array.data_start = AI_PTR(weights + 388096);
 800f27e:	68fa      	ldr	r2, [r7, #12]
 800f280:	4b4a      	ldr	r3, [pc, #296]	; (800f3ac <network_configure_weights+0x214>)
 800f282:	4413      	add	r3, r2
 800f284:	4a48      	ldr	r2, [pc, #288]	; (800f3a8 <network_configure_weights+0x210>)
 800f286:	60d3      	str	r3, [r2, #12]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 800f288:	4b49      	ldr	r3, [pc, #292]	; (800f3b0 <network_configure_weights+0x218>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f290:	4a47      	ldr	r2, [pc, #284]	; (800f3b0 <network_configure_weights+0x218>)
 800f292:	6013      	str	r3, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(weights + 93184);
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f503 33b6 	add.w	r3, r3, #93184	; 0x16c00
 800f29a:	4a45      	ldr	r2, [pc, #276]	; (800f3b0 <network_configure_weights+0x218>)
 800f29c:	6093      	str	r3, [r2, #8]
    conv2d_8_weights_array.data_start = AI_PTR(weights + 93184);
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	f503 33b6 	add.w	r3, r3, #93184	; 0x16c00
 800f2a4:	4a42      	ldr	r2, [pc, #264]	; (800f3b0 <network_configure_weights+0x218>)
 800f2a6:	60d3      	str	r3, [r2, #12]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 800f2a8:	4b42      	ldr	r3, [pc, #264]	; (800f3b4 <network_configure_weights+0x21c>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f2b0:	4a40      	ldr	r2, [pc, #256]	; (800f3b4 <network_configure_weights+0x21c>)
 800f2b2:	6013      	str	r3, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(weights + 92928);
 800f2b4:	68fa      	ldr	r2, [r7, #12]
 800f2b6:	4b40      	ldr	r3, [pc, #256]	; (800f3b8 <network_configure_weights+0x220>)
 800f2b8:	4413      	add	r3, r2
 800f2ba:	4a3e      	ldr	r2, [pc, #248]	; (800f3b4 <network_configure_weights+0x21c>)
 800f2bc:	6093      	str	r3, [r2, #8]
    conv2d_7_bias_array.data_start = AI_PTR(weights + 92928);
 800f2be:	68fa      	ldr	r2, [r7, #12]
 800f2c0:	4b3d      	ldr	r3, [pc, #244]	; (800f3b8 <network_configure_weights+0x220>)
 800f2c2:	4413      	add	r3, r2
 800f2c4:	4a3b      	ldr	r2, [pc, #236]	; (800f3b4 <network_configure_weights+0x21c>)
 800f2c6:	60d3      	str	r3, [r2, #12]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 800f2c8:	4b3c      	ldr	r3, [pc, #240]	; (800f3bc <network_configure_weights+0x224>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f2d0:	4a3a      	ldr	r2, [pc, #232]	; (800f3bc <network_configure_weights+0x224>)
 800f2d2:	6013      	str	r3, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(weights + 19200);
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	f503 4396 	add.w	r3, r3, #19200	; 0x4b00
 800f2da:	4a38      	ldr	r2, [pc, #224]	; (800f3bc <network_configure_weights+0x224>)
 800f2dc:	6093      	str	r3, [r2, #8]
    conv2d_7_weights_array.data_start = AI_PTR(weights + 19200);
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	f503 4396 	add.w	r3, r3, #19200	; 0x4b00
 800f2e4:	4a35      	ldr	r2, [pc, #212]	; (800f3bc <network_configure_weights+0x224>)
 800f2e6:	60d3      	str	r3, [r2, #12]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800f2e8:	4b35      	ldr	r3, [pc, #212]	; (800f3c0 <network_configure_weights+0x228>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f2f0:	4a33      	ldr	r2, [pc, #204]	; (800f3c0 <network_configure_weights+0x228>)
 800f2f2:	6013      	str	r3, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(weights + 19072);
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f503 4395 	add.w	r3, r3, #19072	; 0x4a80
 800f2fa:	4a31      	ldr	r2, [pc, #196]	; (800f3c0 <network_configure_weights+0x228>)
 800f2fc:	6093      	str	r3, [r2, #8]
    conv2d_6_bias_array.data_start = AI_PTR(weights + 19072);
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	f503 4395 	add.w	r3, r3, #19072	; 0x4a80
 800f304:	4a2e      	ldr	r2, [pc, #184]	; (800f3c0 <network_configure_weights+0x228>)
 800f306:	60d3      	str	r3, [r2, #12]
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800f308:	4b2e      	ldr	r3, [pc, #184]	; (800f3c4 <network_configure_weights+0x22c>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f310:	4a2c      	ldr	r2, [pc, #176]	; (800f3c4 <network_configure_weights+0x22c>)
 800f312:	6013      	str	r3, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(weights + 640);
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f31a:	4a2a      	ldr	r2, [pc, #168]	; (800f3c4 <network_configure_weights+0x22c>)
 800f31c:	6093      	str	r3, [r2, #8]
    conv2d_6_weights_array.data_start = AI_PTR(weights + 640);
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f324:	4a27      	ldr	r2, [pc, #156]	; (800f3c4 <network_configure_weights+0x22c>)
 800f326:	60d3      	str	r3, [r2, #12]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800f328:	4b27      	ldr	r3, [pc, #156]	; (800f3c8 <network_configure_weights+0x230>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f330:	4a25      	ldr	r2, [pc, #148]	; (800f3c8 <network_configure_weights+0x230>)
 800f332:	6013      	str	r3, [r2, #0]
    conv2d_5_bias_array.data = AI_PTR(weights + 576);
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800f33a:	4a23      	ldr	r2, [pc, #140]	; (800f3c8 <network_configure_weights+0x230>)
 800f33c:	6093      	str	r3, [r2, #8]
    conv2d_5_bias_array.data_start = AI_PTR(weights + 576);
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800f344:	4a20      	ldr	r2, [pc, #128]	; (800f3c8 <network_configure_weights+0x230>)
 800f346:	60d3      	str	r3, [r2, #12]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800f348:	4b20      	ldr	r3, [pc, #128]	; (800f3cc <network_configure_weights+0x234>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f350:	4a1e      	ldr	r2, [pc, #120]	; (800f3cc <network_configure_weights+0x234>)
 800f352:	6013      	str	r3, [r2, #0]
    conv2d_5_weights_array.data = AI_PTR(weights + 0);
 800f354:	4a1d      	ldr	r2, [pc, #116]	; (800f3cc <network_configure_weights+0x234>)
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	6093      	str	r3, [r2, #8]
    conv2d_5_weights_array.data_start = AI_PTR(weights + 0);
 800f35a:	4a1c      	ldr	r2, [pc, #112]	; (800f3cc <network_configure_weights+0x234>)
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800f360:	2301      	movs	r3, #1
}
 800f362:	4618      	mov	r0, r3
 800f364:	3714      	adds	r7, #20
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr
 800f36e:	bf00      	nop
 800f370:	200000a4 	.word	0x200000a4
 800f374:	00090480 	.word	0x00090480
 800f378:	200000b4 	.word	0x200000b4
 800f37c:	00090180 	.word	0x00090180
 800f380:	200000c4 	.word	0x200000c4
 800f384:	00090080 	.word	0x00090080
 800f388:	200000d4 	.word	0x200000d4
 800f38c:	0008f080 	.word	0x0008f080
 800f390:	0008f040 	.word	0x0008f040
 800f394:	200000e4 	.word	0x200000e4
 800f398:	0008ee40 	.word	0x0008ee40
 800f39c:	200000f4 	.word	0x200000f4
 800f3a0:	0005ee40 	.word	0x0005ee40
 800f3a4:	0005ee00 	.word	0x0005ee00
 800f3a8:	20000104 	.word	0x20000104
 800f3ac:	0005ec00 	.word	0x0005ec00
 800f3b0:	20000114 	.word	0x20000114
 800f3b4:	20000124 	.word	0x20000124
 800f3b8:	00016b00 	.word	0x00016b00
 800f3bc:	20000134 	.word	0x20000134
 800f3c0:	20000144 	.word	0x20000144
 800f3c4:	20000154 	.word	0x20000154
 800f3c8:	20000164 	.word	0x20000164
 800f3cc:	20000174 	.word	0x20000174

0800f3d0 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f7f1 f96d 	bl	80006b8 <ai_platform_network_get_error>
 800f3de:	4603      	mov	r3, r0
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3708      	adds	r7, #8
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}

0800f3e8 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b084      	sub	sp, #16
 800f3ec:	af02      	add	r7, sp, #8
 800f3ee:	6078      	str	r0, [r7, #4]
 800f3f0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	9301      	str	r3, [sp, #4]
 800f3f6:	2303      	movs	r3, #3
 800f3f8:	9300      	str	r3, [sp, #0]
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	4a04      	ldr	r2, [pc, #16]	; (800f410 <ai_network_create+0x28>)
 800f3fe:	6839      	ldr	r1, [r7, #0]
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f7f1 fa79 	bl	80008f8 <ai_platform_network_create>
 800f406:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3708      	adds	r7, #8
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}
 800f410:	2000003c 	.word	0x2000003c

0800f414 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b082      	sub	sp, #8
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f7f1 faa1 	bl	8000964 <ai_platform_network_destroy>
 800f422:	4603      	mov	r3, r0
}
 800f424:	4618      	mov	r0, r3
 800f426:	3708      	adds	r7, #8
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800f436:	6839      	ldr	r1, [r7, #0]
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f7f1 fae3 	bl	8000a04 <ai_platform_network_init>
 800f43e:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d101      	bne.n	800f44a <ai_network_init+0x1e>
 800f446:	2300      	movs	r3, #0
 800f448:	e01f      	b.n	800f48a <ai_network_init+0x5e>

  ai_bool ok = true;
 800f44a:	2301      	movs	r3, #1
 800f44c:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	4619      	mov	r1, r3
 800f452:	68f8      	ldr	r0, [r7, #12]
 800f454:	f7ff fea0 	bl	800f198 <network_configure_weights>
 800f458:	4603      	mov	r3, r0
 800f45a:	461a      	mov	r2, r3
 800f45c:	7afb      	ldrb	r3, [r7, #11]
 800f45e:	4013      	ands	r3, r2
 800f460:	2b00      	cmp	r3, #0
 800f462:	bf14      	ite	ne
 800f464:	2301      	movne	r3, #1
 800f466:	2300      	moveq	r3, #0
 800f468:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	3318      	adds	r3, #24
 800f46e:	4619      	mov	r1, r3
 800f470:	68f8      	ldr	r0, [r7, #12]
 800f472:	f7ff fe0b 	bl	800f08c <network_configure_activations>
 800f476:	4603      	mov	r3, r0
 800f478:	461a      	mov	r2, r3
 800f47a:	7afb      	ldrb	r3, [r7, #11]
 800f47c:	4013      	ands	r3, r2
 800f47e:	2b00      	cmp	r3, #0
 800f480:	bf14      	ite	ne
 800f482:	2301      	movne	r3, #1
 800f484:	2300      	moveq	r3, #0
 800f486:	72fb      	strb	r3, [r7, #11]

  return ok;
 800f488:	7afb      	ldrb	r3, [r7, #11]
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	3710      	adds	r7, #16
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}

0800f492 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800f492:	b580      	push	{r7, lr}
 800f494:	b084      	sub	sp, #16
 800f496:	af00      	add	r7, sp, #0
 800f498:	60f8      	str	r0, [r7, #12]
 800f49a:	60b9      	str	r1, [r7, #8]
 800f49c:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800f49e:	687a      	ldr	r2, [r7, #4]
 800f4a0:	68b9      	ldr	r1, [r7, #8]
 800f4a2:	68f8      	ldr	r0, [r7, #12]
 800f4a4:	f7f1 fb46 	bl	8000b34 <ai_platform_network_process>
 800f4a8:	4603      	mov	r3, r0
}
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	3710      	adds	r7, #16
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
	...

0800f4b4 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	af00      	add	r7, sp, #0
    0xba, 0xed, 0x57, 0x3e, 0x48, 0x96, 0x8c, 0x3e, 0x56, 0xc2,
    0x47, 0x3e, 0xf6, 0xb5, 0x97, 0xbe, 0xfa, 0x15, 0xab,
    0xbc, 0x08, 0x54, 0xcc, 0x3b, 0xff, 0x60, 0x65, 0x3c
  };

  return AI_HANDLE_PTR(s_network_weights);
 800f4b8:	4b02      	ldr	r3, [pc, #8]	; (800f4c4 <ai_network_data_weights_get+0x10>)
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr
 800f4c4:	08016ac8 	.word	0x08016ac8

0800f4c8 <__aeabi_memclr>:
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	f7f7 ba25 	b.w	8006918 <__aeabi_memset>

0800f4ce <__aeabi_memcpy>:
 800f4ce:	f000 b8c2 	b.w	800f656 <memcpy>
	...

0800f4d4 <calloc>:
 800f4d4:	4b02      	ldr	r3, [pc, #8]	; (800f4e0 <calloc+0xc>)
 800f4d6:	460a      	mov	r2, r1
 800f4d8:	4601      	mov	r1, r0
 800f4da:	6818      	ldr	r0, [r3, #0]
 800f4dc:	f000 b8ce 	b.w	800f67c <_calloc_r>
 800f4e0:	20000d24 	.word	0x20000d24

0800f4e4 <__errno>:
 800f4e4:	4b01      	ldr	r3, [pc, #4]	; (800f4ec <__errno+0x8>)
 800f4e6:	6818      	ldr	r0, [r3, #0]
 800f4e8:	4770      	bx	lr
 800f4ea:	bf00      	nop
 800f4ec:	20000d24 	.word	0x20000d24

0800f4f0 <exit>:
 800f4f0:	b508      	push	{r3, lr}
 800f4f2:	4b07      	ldr	r3, [pc, #28]	; (800f510 <exit+0x20>)
 800f4f4:	4604      	mov	r4, r0
 800f4f6:	b113      	cbz	r3, 800f4fe <exit+0xe>
 800f4f8:	2100      	movs	r1, #0
 800f4fa:	f3af 8000 	nop.w
 800f4fe:	4b05      	ldr	r3, [pc, #20]	; (800f514 <exit+0x24>)
 800f500:	6818      	ldr	r0, [r3, #0]
 800f502:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f504:	b103      	cbz	r3, 800f508 <exit+0x18>
 800f506:	4798      	blx	r3
 800f508:	4620      	mov	r0, r4
 800f50a:	f7fb fe13 	bl	800b134 <_exit>
 800f50e:	bf00      	nop
 800f510:	00000000 	.word	0x00000000
 800f514:	080a6f54 	.word	0x080a6f54

0800f518 <_fwrite_r>:
 800f518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f51c:	9c08      	ldr	r4, [sp, #32]
 800f51e:	4689      	mov	r9, r1
 800f520:	4617      	mov	r7, r2
 800f522:	fb02 f803 	mul.w	r8, r2, r3
 800f526:	4606      	mov	r6, r0
 800f528:	b118      	cbz	r0, 800f532 <_fwrite_r+0x1a>
 800f52a:	6983      	ldr	r3, [r0, #24]
 800f52c:	b90b      	cbnz	r3, 800f532 <_fwrite_r+0x1a>
 800f52e:	f001 fddb 	bl	80110e8 <__sinit>
 800f532:	4b1d      	ldr	r3, [pc, #116]	; (800f5a8 <_fwrite_r+0x90>)
 800f534:	429c      	cmp	r4, r3
 800f536:	d11a      	bne.n	800f56e <_fwrite_r+0x56>
 800f538:	6874      	ldr	r4, [r6, #4]
 800f53a:	89a3      	ldrh	r3, [r4, #12]
 800f53c:	071b      	lsls	r3, r3, #28
 800f53e:	d520      	bpl.n	800f582 <_fwrite_r+0x6a>
 800f540:	6923      	ldr	r3, [r4, #16]
 800f542:	b1f3      	cbz	r3, 800f582 <_fwrite_r+0x6a>
 800f544:	2500      	movs	r5, #0
 800f546:	4545      	cmp	r5, r8
 800f548:	d029      	beq.n	800f59e <_fwrite_r+0x86>
 800f54a:	68a3      	ldr	r3, [r4, #8]
 800f54c:	f819 1005 	ldrb.w	r1, [r9, r5]
 800f550:	3b01      	subs	r3, #1
 800f552:	2b00      	cmp	r3, #0
 800f554:	60a3      	str	r3, [r4, #8]
 800f556:	da04      	bge.n	800f562 <_fwrite_r+0x4a>
 800f558:	69a2      	ldr	r2, [r4, #24]
 800f55a:	4293      	cmp	r3, r2
 800f55c:	db19      	blt.n	800f592 <_fwrite_r+0x7a>
 800f55e:	290a      	cmp	r1, #10
 800f560:	d017      	beq.n	800f592 <_fwrite_r+0x7a>
 800f562:	6823      	ldr	r3, [r4, #0]
 800f564:	1c5a      	adds	r2, r3, #1
 800f566:	6022      	str	r2, [r4, #0]
 800f568:	7019      	strb	r1, [r3, #0]
 800f56a:	3501      	adds	r5, #1
 800f56c:	e7eb      	b.n	800f546 <_fwrite_r+0x2e>
 800f56e:	4b0f      	ldr	r3, [pc, #60]	; (800f5ac <_fwrite_r+0x94>)
 800f570:	429c      	cmp	r4, r3
 800f572:	d101      	bne.n	800f578 <_fwrite_r+0x60>
 800f574:	68b4      	ldr	r4, [r6, #8]
 800f576:	e7e0      	b.n	800f53a <_fwrite_r+0x22>
 800f578:	4b0d      	ldr	r3, [pc, #52]	; (800f5b0 <_fwrite_r+0x98>)
 800f57a:	429c      	cmp	r4, r3
 800f57c:	bf08      	it	eq
 800f57e:	68f4      	ldreq	r4, [r6, #12]
 800f580:	e7db      	b.n	800f53a <_fwrite_r+0x22>
 800f582:	4621      	mov	r1, r4
 800f584:	4630      	mov	r0, r6
 800f586:	f000 fe0d 	bl	80101a4 <__swsetup_r>
 800f58a:	2800      	cmp	r0, #0
 800f58c:	d0da      	beq.n	800f544 <_fwrite_r+0x2c>
 800f58e:	2500      	movs	r5, #0
 800f590:	e005      	b.n	800f59e <_fwrite_r+0x86>
 800f592:	4622      	mov	r2, r4
 800f594:	4630      	mov	r0, r6
 800f596:	f000 fdb3 	bl	8010100 <__swbuf_r>
 800f59a:	3001      	adds	r0, #1
 800f59c:	d1e5      	bne.n	800f56a <_fwrite_r+0x52>
 800f59e:	fbb5 f0f7 	udiv	r0, r5, r7
 800f5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5a6:	bf00      	nop
 800f5a8:	080a6fb8 	.word	0x080a6fb8
 800f5ac:	080a6fd8 	.word	0x080a6fd8
 800f5b0:	080a6f98 	.word	0x080a6f98

0800f5b4 <fwrite>:
 800f5b4:	b507      	push	{r0, r1, r2, lr}
 800f5b6:	9300      	str	r3, [sp, #0]
 800f5b8:	4613      	mov	r3, r2
 800f5ba:	460a      	mov	r2, r1
 800f5bc:	4601      	mov	r1, r0
 800f5be:	4803      	ldr	r0, [pc, #12]	; (800f5cc <fwrite+0x18>)
 800f5c0:	6800      	ldr	r0, [r0, #0]
 800f5c2:	f7ff ffa9 	bl	800f518 <_fwrite_r>
 800f5c6:	b003      	add	sp, #12
 800f5c8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5cc:	20000d24 	.word	0x20000d24

0800f5d0 <__libc_init_array>:
 800f5d0:	b570      	push	{r4, r5, r6, lr}
 800f5d2:	4e0d      	ldr	r6, [pc, #52]	; (800f608 <__libc_init_array+0x38>)
 800f5d4:	4c0d      	ldr	r4, [pc, #52]	; (800f60c <__libc_init_array+0x3c>)
 800f5d6:	1ba4      	subs	r4, r4, r6
 800f5d8:	10a4      	asrs	r4, r4, #2
 800f5da:	2500      	movs	r5, #0
 800f5dc:	42a5      	cmp	r5, r4
 800f5de:	d109      	bne.n	800f5f4 <__libc_init_array+0x24>
 800f5e0:	4e0b      	ldr	r6, [pc, #44]	; (800f610 <__libc_init_array+0x40>)
 800f5e2:	4c0c      	ldr	r4, [pc, #48]	; (800f614 <__libc_init_array+0x44>)
 800f5e4:	f007 f8e8 	bl	80167b8 <_init>
 800f5e8:	1ba4      	subs	r4, r4, r6
 800f5ea:	10a4      	asrs	r4, r4, #2
 800f5ec:	2500      	movs	r5, #0
 800f5ee:	42a5      	cmp	r5, r4
 800f5f0:	d105      	bne.n	800f5fe <__libc_init_array+0x2e>
 800f5f2:	bd70      	pop	{r4, r5, r6, pc}
 800f5f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f5f8:	4798      	blx	r3
 800f5fa:	3501      	adds	r5, #1
 800f5fc:	e7ee      	b.n	800f5dc <__libc_init_array+0xc>
 800f5fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f602:	4798      	blx	r3
 800f604:	3501      	adds	r5, #1
 800f606:	e7f2      	b.n	800f5ee <__libc_init_array+0x1e>
 800f608:	080a7868 	.word	0x080a7868
 800f60c:	080a7868 	.word	0x080a7868
 800f610:	080a7868 	.word	0x080a7868
 800f614:	080a786c 	.word	0x080a786c

0800f618 <malloc>:
 800f618:	4b02      	ldr	r3, [pc, #8]	; (800f624 <malloc+0xc>)
 800f61a:	4601      	mov	r1, r0
 800f61c:	6818      	ldr	r0, [r3, #0]
 800f61e:	f000 b889 	b.w	800f734 <_malloc_r>
 800f622:	bf00      	nop
 800f624:	20000d24 	.word	0x20000d24

0800f628 <free>:
 800f628:	4b02      	ldr	r3, [pc, #8]	; (800f634 <free+0xc>)
 800f62a:	4601      	mov	r1, r0
 800f62c:	6818      	ldr	r0, [r3, #0]
 800f62e:	f000 b833 	b.w	800f698 <_free_r>
 800f632:	bf00      	nop
 800f634:	20000d24 	.word	0x20000d24

0800f638 <memcmp>:
 800f638:	b530      	push	{r4, r5, lr}
 800f63a:	2400      	movs	r4, #0
 800f63c:	42a2      	cmp	r2, r4
 800f63e:	d101      	bne.n	800f644 <memcmp+0xc>
 800f640:	2000      	movs	r0, #0
 800f642:	e007      	b.n	800f654 <memcmp+0x1c>
 800f644:	5d03      	ldrb	r3, [r0, r4]
 800f646:	3401      	adds	r4, #1
 800f648:	190d      	adds	r5, r1, r4
 800f64a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800f64e:	42ab      	cmp	r3, r5
 800f650:	d0f4      	beq.n	800f63c <memcmp+0x4>
 800f652:	1b58      	subs	r0, r3, r5
 800f654:	bd30      	pop	{r4, r5, pc}

0800f656 <memcpy>:
 800f656:	b510      	push	{r4, lr}
 800f658:	1e43      	subs	r3, r0, #1
 800f65a:	440a      	add	r2, r1
 800f65c:	4291      	cmp	r1, r2
 800f65e:	d100      	bne.n	800f662 <memcpy+0xc>
 800f660:	bd10      	pop	{r4, pc}
 800f662:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f66a:	e7f7      	b.n	800f65c <memcpy+0x6>

0800f66c <memset>:
 800f66c:	4402      	add	r2, r0
 800f66e:	4603      	mov	r3, r0
 800f670:	4293      	cmp	r3, r2
 800f672:	d100      	bne.n	800f676 <memset+0xa>
 800f674:	4770      	bx	lr
 800f676:	f803 1b01 	strb.w	r1, [r3], #1
 800f67a:	e7f9      	b.n	800f670 <memset+0x4>

0800f67c <_calloc_r>:
 800f67c:	b538      	push	{r3, r4, r5, lr}
 800f67e:	fb02 f401 	mul.w	r4, r2, r1
 800f682:	4621      	mov	r1, r4
 800f684:	f000 f856 	bl	800f734 <_malloc_r>
 800f688:	4605      	mov	r5, r0
 800f68a:	b118      	cbz	r0, 800f694 <_calloc_r+0x18>
 800f68c:	4622      	mov	r2, r4
 800f68e:	2100      	movs	r1, #0
 800f690:	f7ff ffec 	bl	800f66c <memset>
 800f694:	4628      	mov	r0, r5
 800f696:	bd38      	pop	{r3, r4, r5, pc}

0800f698 <_free_r>:
 800f698:	b538      	push	{r3, r4, r5, lr}
 800f69a:	4605      	mov	r5, r0
 800f69c:	2900      	cmp	r1, #0
 800f69e:	d045      	beq.n	800f72c <_free_r+0x94>
 800f6a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6a4:	1f0c      	subs	r4, r1, #4
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	bfb8      	it	lt
 800f6aa:	18e4      	addlt	r4, r4, r3
 800f6ac:	f001 fe18 	bl	80112e0 <__malloc_lock>
 800f6b0:	4a1f      	ldr	r2, [pc, #124]	; (800f730 <_free_r+0x98>)
 800f6b2:	6813      	ldr	r3, [r2, #0]
 800f6b4:	4610      	mov	r0, r2
 800f6b6:	b933      	cbnz	r3, 800f6c6 <_free_r+0x2e>
 800f6b8:	6063      	str	r3, [r4, #4]
 800f6ba:	6014      	str	r4, [r2, #0]
 800f6bc:	4628      	mov	r0, r5
 800f6be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6c2:	f001 be0e 	b.w	80112e2 <__malloc_unlock>
 800f6c6:	42a3      	cmp	r3, r4
 800f6c8:	d90c      	bls.n	800f6e4 <_free_r+0x4c>
 800f6ca:	6821      	ldr	r1, [r4, #0]
 800f6cc:	1862      	adds	r2, r4, r1
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	bf04      	itt	eq
 800f6d2:	681a      	ldreq	r2, [r3, #0]
 800f6d4:	685b      	ldreq	r3, [r3, #4]
 800f6d6:	6063      	str	r3, [r4, #4]
 800f6d8:	bf04      	itt	eq
 800f6da:	1852      	addeq	r2, r2, r1
 800f6dc:	6022      	streq	r2, [r4, #0]
 800f6de:	6004      	str	r4, [r0, #0]
 800f6e0:	e7ec      	b.n	800f6bc <_free_r+0x24>
 800f6e2:	4613      	mov	r3, r2
 800f6e4:	685a      	ldr	r2, [r3, #4]
 800f6e6:	b10a      	cbz	r2, 800f6ec <_free_r+0x54>
 800f6e8:	42a2      	cmp	r2, r4
 800f6ea:	d9fa      	bls.n	800f6e2 <_free_r+0x4a>
 800f6ec:	6819      	ldr	r1, [r3, #0]
 800f6ee:	1858      	adds	r0, r3, r1
 800f6f0:	42a0      	cmp	r0, r4
 800f6f2:	d10b      	bne.n	800f70c <_free_r+0x74>
 800f6f4:	6820      	ldr	r0, [r4, #0]
 800f6f6:	4401      	add	r1, r0
 800f6f8:	1858      	adds	r0, r3, r1
 800f6fa:	4282      	cmp	r2, r0
 800f6fc:	6019      	str	r1, [r3, #0]
 800f6fe:	d1dd      	bne.n	800f6bc <_free_r+0x24>
 800f700:	6810      	ldr	r0, [r2, #0]
 800f702:	6852      	ldr	r2, [r2, #4]
 800f704:	605a      	str	r2, [r3, #4]
 800f706:	4401      	add	r1, r0
 800f708:	6019      	str	r1, [r3, #0]
 800f70a:	e7d7      	b.n	800f6bc <_free_r+0x24>
 800f70c:	d902      	bls.n	800f714 <_free_r+0x7c>
 800f70e:	230c      	movs	r3, #12
 800f710:	602b      	str	r3, [r5, #0]
 800f712:	e7d3      	b.n	800f6bc <_free_r+0x24>
 800f714:	6820      	ldr	r0, [r4, #0]
 800f716:	1821      	adds	r1, r4, r0
 800f718:	428a      	cmp	r2, r1
 800f71a:	bf04      	itt	eq
 800f71c:	6811      	ldreq	r1, [r2, #0]
 800f71e:	6852      	ldreq	r2, [r2, #4]
 800f720:	6062      	str	r2, [r4, #4]
 800f722:	bf04      	itt	eq
 800f724:	1809      	addeq	r1, r1, r0
 800f726:	6021      	streq	r1, [r4, #0]
 800f728:	605c      	str	r4, [r3, #4]
 800f72a:	e7c7      	b.n	800f6bc <_free_r+0x24>
 800f72c:	bd38      	pop	{r3, r4, r5, pc}
 800f72e:	bf00      	nop
 800f730:	2000e8c0 	.word	0x2000e8c0

0800f734 <_malloc_r>:
 800f734:	b570      	push	{r4, r5, r6, lr}
 800f736:	1ccd      	adds	r5, r1, #3
 800f738:	f025 0503 	bic.w	r5, r5, #3
 800f73c:	3508      	adds	r5, #8
 800f73e:	2d0c      	cmp	r5, #12
 800f740:	bf38      	it	cc
 800f742:	250c      	movcc	r5, #12
 800f744:	2d00      	cmp	r5, #0
 800f746:	4606      	mov	r6, r0
 800f748:	db01      	blt.n	800f74e <_malloc_r+0x1a>
 800f74a:	42a9      	cmp	r1, r5
 800f74c:	d903      	bls.n	800f756 <_malloc_r+0x22>
 800f74e:	230c      	movs	r3, #12
 800f750:	6033      	str	r3, [r6, #0]
 800f752:	2000      	movs	r0, #0
 800f754:	bd70      	pop	{r4, r5, r6, pc}
 800f756:	f001 fdc3 	bl	80112e0 <__malloc_lock>
 800f75a:	4a21      	ldr	r2, [pc, #132]	; (800f7e0 <_malloc_r+0xac>)
 800f75c:	6814      	ldr	r4, [r2, #0]
 800f75e:	4621      	mov	r1, r4
 800f760:	b991      	cbnz	r1, 800f788 <_malloc_r+0x54>
 800f762:	4c20      	ldr	r4, [pc, #128]	; (800f7e4 <_malloc_r+0xb0>)
 800f764:	6823      	ldr	r3, [r4, #0]
 800f766:	b91b      	cbnz	r3, 800f770 <_malloc_r+0x3c>
 800f768:	4630      	mov	r0, r6
 800f76a:	f000 fc99 	bl	80100a0 <_sbrk_r>
 800f76e:	6020      	str	r0, [r4, #0]
 800f770:	4629      	mov	r1, r5
 800f772:	4630      	mov	r0, r6
 800f774:	f000 fc94 	bl	80100a0 <_sbrk_r>
 800f778:	1c43      	adds	r3, r0, #1
 800f77a:	d124      	bne.n	800f7c6 <_malloc_r+0x92>
 800f77c:	230c      	movs	r3, #12
 800f77e:	6033      	str	r3, [r6, #0]
 800f780:	4630      	mov	r0, r6
 800f782:	f001 fdae 	bl	80112e2 <__malloc_unlock>
 800f786:	e7e4      	b.n	800f752 <_malloc_r+0x1e>
 800f788:	680b      	ldr	r3, [r1, #0]
 800f78a:	1b5b      	subs	r3, r3, r5
 800f78c:	d418      	bmi.n	800f7c0 <_malloc_r+0x8c>
 800f78e:	2b0b      	cmp	r3, #11
 800f790:	d90f      	bls.n	800f7b2 <_malloc_r+0x7e>
 800f792:	600b      	str	r3, [r1, #0]
 800f794:	50cd      	str	r5, [r1, r3]
 800f796:	18cc      	adds	r4, r1, r3
 800f798:	4630      	mov	r0, r6
 800f79a:	f001 fda2 	bl	80112e2 <__malloc_unlock>
 800f79e:	f104 000b 	add.w	r0, r4, #11
 800f7a2:	1d23      	adds	r3, r4, #4
 800f7a4:	f020 0007 	bic.w	r0, r0, #7
 800f7a8:	1ac3      	subs	r3, r0, r3
 800f7aa:	d0d3      	beq.n	800f754 <_malloc_r+0x20>
 800f7ac:	425a      	negs	r2, r3
 800f7ae:	50e2      	str	r2, [r4, r3]
 800f7b0:	e7d0      	b.n	800f754 <_malloc_r+0x20>
 800f7b2:	428c      	cmp	r4, r1
 800f7b4:	684b      	ldr	r3, [r1, #4]
 800f7b6:	bf16      	itet	ne
 800f7b8:	6063      	strne	r3, [r4, #4]
 800f7ba:	6013      	streq	r3, [r2, #0]
 800f7bc:	460c      	movne	r4, r1
 800f7be:	e7eb      	b.n	800f798 <_malloc_r+0x64>
 800f7c0:	460c      	mov	r4, r1
 800f7c2:	6849      	ldr	r1, [r1, #4]
 800f7c4:	e7cc      	b.n	800f760 <_malloc_r+0x2c>
 800f7c6:	1cc4      	adds	r4, r0, #3
 800f7c8:	f024 0403 	bic.w	r4, r4, #3
 800f7cc:	42a0      	cmp	r0, r4
 800f7ce:	d005      	beq.n	800f7dc <_malloc_r+0xa8>
 800f7d0:	1a21      	subs	r1, r4, r0
 800f7d2:	4630      	mov	r0, r6
 800f7d4:	f000 fc64 	bl	80100a0 <_sbrk_r>
 800f7d8:	3001      	adds	r0, #1
 800f7da:	d0cf      	beq.n	800f77c <_malloc_r+0x48>
 800f7dc:	6025      	str	r5, [r4, #0]
 800f7de:	e7db      	b.n	800f798 <_malloc_r+0x64>
 800f7e0:	2000e8c0 	.word	0x2000e8c0
 800f7e4:	2000e8c4 	.word	0x2000e8c4

0800f7e8 <__cvt>:
 800f7e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7ec:	ec55 4b10 	vmov	r4, r5, d0
 800f7f0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f7f2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f7f6:	2d00      	cmp	r5, #0
 800f7f8:	460e      	mov	r6, r1
 800f7fa:	4691      	mov	r9, r2
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	bfb8      	it	lt
 800f800:	4622      	movlt	r2, r4
 800f802:	462b      	mov	r3, r5
 800f804:	f027 0720 	bic.w	r7, r7, #32
 800f808:	bfbb      	ittet	lt
 800f80a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f80e:	461d      	movlt	r5, r3
 800f810:	2300      	movge	r3, #0
 800f812:	232d      	movlt	r3, #45	; 0x2d
 800f814:	bfb8      	it	lt
 800f816:	4614      	movlt	r4, r2
 800f818:	2f46      	cmp	r7, #70	; 0x46
 800f81a:	700b      	strb	r3, [r1, #0]
 800f81c:	d004      	beq.n	800f828 <__cvt+0x40>
 800f81e:	2f45      	cmp	r7, #69	; 0x45
 800f820:	d100      	bne.n	800f824 <__cvt+0x3c>
 800f822:	3601      	adds	r6, #1
 800f824:	2102      	movs	r1, #2
 800f826:	e000      	b.n	800f82a <__cvt+0x42>
 800f828:	2103      	movs	r1, #3
 800f82a:	ab03      	add	r3, sp, #12
 800f82c:	9301      	str	r3, [sp, #4]
 800f82e:	ab02      	add	r3, sp, #8
 800f830:	9300      	str	r3, [sp, #0]
 800f832:	4632      	mov	r2, r6
 800f834:	4653      	mov	r3, sl
 800f836:	ec45 4b10 	vmov	d0, r4, r5
 800f83a:	f000 fdad 	bl	8010398 <_dtoa_r>
 800f83e:	2f47      	cmp	r7, #71	; 0x47
 800f840:	4680      	mov	r8, r0
 800f842:	d102      	bne.n	800f84a <__cvt+0x62>
 800f844:	f019 0f01 	tst.w	r9, #1
 800f848:	d026      	beq.n	800f898 <__cvt+0xb0>
 800f84a:	2f46      	cmp	r7, #70	; 0x46
 800f84c:	eb08 0906 	add.w	r9, r8, r6
 800f850:	d111      	bne.n	800f876 <__cvt+0x8e>
 800f852:	f898 3000 	ldrb.w	r3, [r8]
 800f856:	2b30      	cmp	r3, #48	; 0x30
 800f858:	d10a      	bne.n	800f870 <__cvt+0x88>
 800f85a:	2200      	movs	r2, #0
 800f85c:	2300      	movs	r3, #0
 800f85e:	4620      	mov	r0, r4
 800f860:	4629      	mov	r1, r5
 800f862:	f7f7 fd29 	bl	80072b8 <__aeabi_dcmpeq>
 800f866:	b918      	cbnz	r0, 800f870 <__cvt+0x88>
 800f868:	f1c6 0601 	rsb	r6, r6, #1
 800f86c:	f8ca 6000 	str.w	r6, [sl]
 800f870:	f8da 3000 	ldr.w	r3, [sl]
 800f874:	4499      	add	r9, r3
 800f876:	2200      	movs	r2, #0
 800f878:	2300      	movs	r3, #0
 800f87a:	4620      	mov	r0, r4
 800f87c:	4629      	mov	r1, r5
 800f87e:	f7f7 fd1b 	bl	80072b8 <__aeabi_dcmpeq>
 800f882:	b938      	cbnz	r0, 800f894 <__cvt+0xac>
 800f884:	2230      	movs	r2, #48	; 0x30
 800f886:	9b03      	ldr	r3, [sp, #12]
 800f888:	454b      	cmp	r3, r9
 800f88a:	d205      	bcs.n	800f898 <__cvt+0xb0>
 800f88c:	1c59      	adds	r1, r3, #1
 800f88e:	9103      	str	r1, [sp, #12]
 800f890:	701a      	strb	r2, [r3, #0]
 800f892:	e7f8      	b.n	800f886 <__cvt+0x9e>
 800f894:	f8cd 900c 	str.w	r9, [sp, #12]
 800f898:	9b03      	ldr	r3, [sp, #12]
 800f89a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f89c:	eba3 0308 	sub.w	r3, r3, r8
 800f8a0:	4640      	mov	r0, r8
 800f8a2:	6013      	str	r3, [r2, #0]
 800f8a4:	b004      	add	sp, #16
 800f8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f8aa <__exponent>:
 800f8aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f8ac:	2900      	cmp	r1, #0
 800f8ae:	4604      	mov	r4, r0
 800f8b0:	bfba      	itte	lt
 800f8b2:	4249      	neglt	r1, r1
 800f8b4:	232d      	movlt	r3, #45	; 0x2d
 800f8b6:	232b      	movge	r3, #43	; 0x2b
 800f8b8:	2909      	cmp	r1, #9
 800f8ba:	f804 2b02 	strb.w	r2, [r4], #2
 800f8be:	7043      	strb	r3, [r0, #1]
 800f8c0:	dd20      	ble.n	800f904 <__exponent+0x5a>
 800f8c2:	f10d 0307 	add.w	r3, sp, #7
 800f8c6:	461f      	mov	r7, r3
 800f8c8:	260a      	movs	r6, #10
 800f8ca:	fb91 f5f6 	sdiv	r5, r1, r6
 800f8ce:	fb06 1115 	mls	r1, r6, r5, r1
 800f8d2:	3130      	adds	r1, #48	; 0x30
 800f8d4:	2d09      	cmp	r5, #9
 800f8d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f8da:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800f8de:	4629      	mov	r1, r5
 800f8e0:	dc09      	bgt.n	800f8f6 <__exponent+0x4c>
 800f8e2:	3130      	adds	r1, #48	; 0x30
 800f8e4:	3b02      	subs	r3, #2
 800f8e6:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f8ea:	42bb      	cmp	r3, r7
 800f8ec:	4622      	mov	r2, r4
 800f8ee:	d304      	bcc.n	800f8fa <__exponent+0x50>
 800f8f0:	1a10      	subs	r0, r2, r0
 800f8f2:	b003      	add	sp, #12
 800f8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8f6:	4613      	mov	r3, r2
 800f8f8:	e7e7      	b.n	800f8ca <__exponent+0x20>
 800f8fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8fe:	f804 2b01 	strb.w	r2, [r4], #1
 800f902:	e7f2      	b.n	800f8ea <__exponent+0x40>
 800f904:	2330      	movs	r3, #48	; 0x30
 800f906:	4419      	add	r1, r3
 800f908:	7083      	strb	r3, [r0, #2]
 800f90a:	1d02      	adds	r2, r0, #4
 800f90c:	70c1      	strb	r1, [r0, #3]
 800f90e:	e7ef      	b.n	800f8f0 <__exponent+0x46>

0800f910 <_printf_float>:
 800f910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f914:	b08d      	sub	sp, #52	; 0x34
 800f916:	460c      	mov	r4, r1
 800f918:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800f91c:	4616      	mov	r6, r2
 800f91e:	461f      	mov	r7, r3
 800f920:	4605      	mov	r5, r0
 800f922:	f001 fc6b 	bl	80111fc <_localeconv_r>
 800f926:	6803      	ldr	r3, [r0, #0]
 800f928:	9304      	str	r3, [sp, #16]
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7f7 f841 	bl	80069b2 <strlen>
 800f930:	2300      	movs	r3, #0
 800f932:	930a      	str	r3, [sp, #40]	; 0x28
 800f934:	f8d8 3000 	ldr.w	r3, [r8]
 800f938:	9005      	str	r0, [sp, #20]
 800f93a:	3307      	adds	r3, #7
 800f93c:	f023 0307 	bic.w	r3, r3, #7
 800f940:	f103 0208 	add.w	r2, r3, #8
 800f944:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f948:	f8d4 b000 	ldr.w	fp, [r4]
 800f94c:	f8c8 2000 	str.w	r2, [r8]
 800f950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f954:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f958:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f95c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f960:	9307      	str	r3, [sp, #28]
 800f962:	f8cd 8018 	str.w	r8, [sp, #24]
 800f966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f96a:	4ba7      	ldr	r3, [pc, #668]	; (800fc08 <_printf_float+0x2f8>)
 800f96c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f970:	f7f7 fcd4 	bl	800731c <__aeabi_dcmpun>
 800f974:	bb70      	cbnz	r0, 800f9d4 <_printf_float+0xc4>
 800f976:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f97a:	4ba3      	ldr	r3, [pc, #652]	; (800fc08 <_printf_float+0x2f8>)
 800f97c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f980:	f7f7 fcae 	bl	80072e0 <__aeabi_dcmple>
 800f984:	bb30      	cbnz	r0, 800f9d4 <_printf_float+0xc4>
 800f986:	2200      	movs	r2, #0
 800f988:	2300      	movs	r3, #0
 800f98a:	4640      	mov	r0, r8
 800f98c:	4649      	mov	r1, r9
 800f98e:	f7f7 fc9d 	bl	80072cc <__aeabi_dcmplt>
 800f992:	b110      	cbz	r0, 800f99a <_printf_float+0x8a>
 800f994:	232d      	movs	r3, #45	; 0x2d
 800f996:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f99a:	4a9c      	ldr	r2, [pc, #624]	; (800fc0c <_printf_float+0x2fc>)
 800f99c:	4b9c      	ldr	r3, [pc, #624]	; (800fc10 <_printf_float+0x300>)
 800f99e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f9a2:	bf8c      	ite	hi
 800f9a4:	4690      	movhi	r8, r2
 800f9a6:	4698      	movls	r8, r3
 800f9a8:	2303      	movs	r3, #3
 800f9aa:	f02b 0204 	bic.w	r2, fp, #4
 800f9ae:	6123      	str	r3, [r4, #16]
 800f9b0:	6022      	str	r2, [r4, #0]
 800f9b2:	f04f 0900 	mov.w	r9, #0
 800f9b6:	9700      	str	r7, [sp, #0]
 800f9b8:	4633      	mov	r3, r6
 800f9ba:	aa0b      	add	r2, sp, #44	; 0x2c
 800f9bc:	4621      	mov	r1, r4
 800f9be:	4628      	mov	r0, r5
 800f9c0:	f000 f9e6 	bl	800fd90 <_printf_common>
 800f9c4:	3001      	adds	r0, #1
 800f9c6:	f040 808d 	bne.w	800fae4 <_printf_float+0x1d4>
 800f9ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9ce:	b00d      	add	sp, #52	; 0x34
 800f9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9d4:	4642      	mov	r2, r8
 800f9d6:	464b      	mov	r3, r9
 800f9d8:	4640      	mov	r0, r8
 800f9da:	4649      	mov	r1, r9
 800f9dc:	f7f7 fc9e 	bl	800731c <__aeabi_dcmpun>
 800f9e0:	b110      	cbz	r0, 800f9e8 <_printf_float+0xd8>
 800f9e2:	4a8c      	ldr	r2, [pc, #560]	; (800fc14 <_printf_float+0x304>)
 800f9e4:	4b8c      	ldr	r3, [pc, #560]	; (800fc18 <_printf_float+0x308>)
 800f9e6:	e7da      	b.n	800f99e <_printf_float+0x8e>
 800f9e8:	6861      	ldr	r1, [r4, #4]
 800f9ea:	1c4b      	adds	r3, r1, #1
 800f9ec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800f9f0:	a80a      	add	r0, sp, #40	; 0x28
 800f9f2:	d13e      	bne.n	800fa72 <_printf_float+0x162>
 800f9f4:	2306      	movs	r3, #6
 800f9f6:	6063      	str	r3, [r4, #4]
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f9fe:	ab09      	add	r3, sp, #36	; 0x24
 800fa00:	9300      	str	r3, [sp, #0]
 800fa02:	ec49 8b10 	vmov	d0, r8, r9
 800fa06:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fa0a:	6022      	str	r2, [r4, #0]
 800fa0c:	f8cd a004 	str.w	sl, [sp, #4]
 800fa10:	6861      	ldr	r1, [r4, #4]
 800fa12:	4628      	mov	r0, r5
 800fa14:	f7ff fee8 	bl	800f7e8 <__cvt>
 800fa18:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800fa1c:	2b47      	cmp	r3, #71	; 0x47
 800fa1e:	4680      	mov	r8, r0
 800fa20:	d109      	bne.n	800fa36 <_printf_float+0x126>
 800fa22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa24:	1cd8      	adds	r0, r3, #3
 800fa26:	db02      	blt.n	800fa2e <_printf_float+0x11e>
 800fa28:	6862      	ldr	r2, [r4, #4]
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	dd47      	ble.n	800fabe <_printf_float+0x1ae>
 800fa2e:	f1aa 0a02 	sub.w	sl, sl, #2
 800fa32:	fa5f fa8a 	uxtb.w	sl, sl
 800fa36:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800fa3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fa3c:	d824      	bhi.n	800fa88 <_printf_float+0x178>
 800fa3e:	3901      	subs	r1, #1
 800fa40:	4652      	mov	r2, sl
 800fa42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fa46:	9109      	str	r1, [sp, #36]	; 0x24
 800fa48:	f7ff ff2f 	bl	800f8aa <__exponent>
 800fa4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa4e:	1813      	adds	r3, r2, r0
 800fa50:	2a01      	cmp	r2, #1
 800fa52:	4681      	mov	r9, r0
 800fa54:	6123      	str	r3, [r4, #16]
 800fa56:	dc02      	bgt.n	800fa5e <_printf_float+0x14e>
 800fa58:	6822      	ldr	r2, [r4, #0]
 800fa5a:	07d1      	lsls	r1, r2, #31
 800fa5c:	d501      	bpl.n	800fa62 <_printf_float+0x152>
 800fa5e:	3301      	adds	r3, #1
 800fa60:	6123      	str	r3, [r4, #16]
 800fa62:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d0a5      	beq.n	800f9b6 <_printf_float+0xa6>
 800fa6a:	232d      	movs	r3, #45	; 0x2d
 800fa6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa70:	e7a1      	b.n	800f9b6 <_printf_float+0xa6>
 800fa72:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800fa76:	f000 8177 	beq.w	800fd68 <_printf_float+0x458>
 800fa7a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800fa7e:	d1bb      	bne.n	800f9f8 <_printf_float+0xe8>
 800fa80:	2900      	cmp	r1, #0
 800fa82:	d1b9      	bne.n	800f9f8 <_printf_float+0xe8>
 800fa84:	2301      	movs	r3, #1
 800fa86:	e7b6      	b.n	800f9f6 <_printf_float+0xe6>
 800fa88:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800fa8c:	d119      	bne.n	800fac2 <_printf_float+0x1b2>
 800fa8e:	2900      	cmp	r1, #0
 800fa90:	6863      	ldr	r3, [r4, #4]
 800fa92:	dd0c      	ble.n	800faae <_printf_float+0x19e>
 800fa94:	6121      	str	r1, [r4, #16]
 800fa96:	b913      	cbnz	r3, 800fa9e <_printf_float+0x18e>
 800fa98:	6822      	ldr	r2, [r4, #0]
 800fa9a:	07d2      	lsls	r2, r2, #31
 800fa9c:	d502      	bpl.n	800faa4 <_printf_float+0x194>
 800fa9e:	3301      	adds	r3, #1
 800faa0:	440b      	add	r3, r1
 800faa2:	6123      	str	r3, [r4, #16]
 800faa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faa6:	65a3      	str	r3, [r4, #88]	; 0x58
 800faa8:	f04f 0900 	mov.w	r9, #0
 800faac:	e7d9      	b.n	800fa62 <_printf_float+0x152>
 800faae:	b913      	cbnz	r3, 800fab6 <_printf_float+0x1a6>
 800fab0:	6822      	ldr	r2, [r4, #0]
 800fab2:	07d0      	lsls	r0, r2, #31
 800fab4:	d501      	bpl.n	800faba <_printf_float+0x1aa>
 800fab6:	3302      	adds	r3, #2
 800fab8:	e7f3      	b.n	800faa2 <_printf_float+0x192>
 800faba:	2301      	movs	r3, #1
 800fabc:	e7f1      	b.n	800faa2 <_printf_float+0x192>
 800fabe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800fac2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fac6:	4293      	cmp	r3, r2
 800fac8:	db05      	blt.n	800fad6 <_printf_float+0x1c6>
 800faca:	6822      	ldr	r2, [r4, #0]
 800facc:	6123      	str	r3, [r4, #16]
 800face:	07d1      	lsls	r1, r2, #31
 800fad0:	d5e8      	bpl.n	800faa4 <_printf_float+0x194>
 800fad2:	3301      	adds	r3, #1
 800fad4:	e7e5      	b.n	800faa2 <_printf_float+0x192>
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	bfd4      	ite	le
 800fada:	f1c3 0302 	rsble	r3, r3, #2
 800fade:	2301      	movgt	r3, #1
 800fae0:	4413      	add	r3, r2
 800fae2:	e7de      	b.n	800faa2 <_printf_float+0x192>
 800fae4:	6823      	ldr	r3, [r4, #0]
 800fae6:	055a      	lsls	r2, r3, #21
 800fae8:	d407      	bmi.n	800fafa <_printf_float+0x1ea>
 800faea:	6923      	ldr	r3, [r4, #16]
 800faec:	4642      	mov	r2, r8
 800faee:	4631      	mov	r1, r6
 800faf0:	4628      	mov	r0, r5
 800faf2:	47b8      	blx	r7
 800faf4:	3001      	adds	r0, #1
 800faf6:	d12b      	bne.n	800fb50 <_printf_float+0x240>
 800faf8:	e767      	b.n	800f9ca <_printf_float+0xba>
 800fafa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800fafe:	f240 80dc 	bls.w	800fcba <_printf_float+0x3aa>
 800fb02:	2200      	movs	r2, #0
 800fb04:	2300      	movs	r3, #0
 800fb06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fb0a:	f7f7 fbd5 	bl	80072b8 <__aeabi_dcmpeq>
 800fb0e:	2800      	cmp	r0, #0
 800fb10:	d033      	beq.n	800fb7a <_printf_float+0x26a>
 800fb12:	2301      	movs	r3, #1
 800fb14:	4a41      	ldr	r2, [pc, #260]	; (800fc1c <_printf_float+0x30c>)
 800fb16:	4631      	mov	r1, r6
 800fb18:	4628      	mov	r0, r5
 800fb1a:	47b8      	blx	r7
 800fb1c:	3001      	adds	r0, #1
 800fb1e:	f43f af54 	beq.w	800f9ca <_printf_float+0xba>
 800fb22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fb26:	429a      	cmp	r2, r3
 800fb28:	db02      	blt.n	800fb30 <_printf_float+0x220>
 800fb2a:	6823      	ldr	r3, [r4, #0]
 800fb2c:	07d8      	lsls	r0, r3, #31
 800fb2e:	d50f      	bpl.n	800fb50 <_printf_float+0x240>
 800fb30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb34:	4631      	mov	r1, r6
 800fb36:	4628      	mov	r0, r5
 800fb38:	47b8      	blx	r7
 800fb3a:	3001      	adds	r0, #1
 800fb3c:	f43f af45 	beq.w	800f9ca <_printf_float+0xba>
 800fb40:	f04f 0800 	mov.w	r8, #0
 800fb44:	f104 091a 	add.w	r9, r4, #26
 800fb48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb4a:	3b01      	subs	r3, #1
 800fb4c:	4543      	cmp	r3, r8
 800fb4e:	dc09      	bgt.n	800fb64 <_printf_float+0x254>
 800fb50:	6823      	ldr	r3, [r4, #0]
 800fb52:	079b      	lsls	r3, r3, #30
 800fb54:	f100 8103 	bmi.w	800fd5e <_printf_float+0x44e>
 800fb58:	68e0      	ldr	r0, [r4, #12]
 800fb5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb5c:	4298      	cmp	r0, r3
 800fb5e:	bfb8      	it	lt
 800fb60:	4618      	movlt	r0, r3
 800fb62:	e734      	b.n	800f9ce <_printf_float+0xbe>
 800fb64:	2301      	movs	r3, #1
 800fb66:	464a      	mov	r2, r9
 800fb68:	4631      	mov	r1, r6
 800fb6a:	4628      	mov	r0, r5
 800fb6c:	47b8      	blx	r7
 800fb6e:	3001      	adds	r0, #1
 800fb70:	f43f af2b 	beq.w	800f9ca <_printf_float+0xba>
 800fb74:	f108 0801 	add.w	r8, r8, #1
 800fb78:	e7e6      	b.n	800fb48 <_printf_float+0x238>
 800fb7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	dc2b      	bgt.n	800fbd8 <_printf_float+0x2c8>
 800fb80:	2301      	movs	r3, #1
 800fb82:	4a26      	ldr	r2, [pc, #152]	; (800fc1c <_printf_float+0x30c>)
 800fb84:	4631      	mov	r1, r6
 800fb86:	4628      	mov	r0, r5
 800fb88:	47b8      	blx	r7
 800fb8a:	3001      	adds	r0, #1
 800fb8c:	f43f af1d 	beq.w	800f9ca <_printf_float+0xba>
 800fb90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb92:	b923      	cbnz	r3, 800fb9e <_printf_float+0x28e>
 800fb94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb96:	b913      	cbnz	r3, 800fb9e <_printf_float+0x28e>
 800fb98:	6823      	ldr	r3, [r4, #0]
 800fb9a:	07d9      	lsls	r1, r3, #31
 800fb9c:	d5d8      	bpl.n	800fb50 <_printf_float+0x240>
 800fb9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fba2:	4631      	mov	r1, r6
 800fba4:	4628      	mov	r0, r5
 800fba6:	47b8      	blx	r7
 800fba8:	3001      	adds	r0, #1
 800fbaa:	f43f af0e 	beq.w	800f9ca <_printf_float+0xba>
 800fbae:	f04f 0900 	mov.w	r9, #0
 800fbb2:	f104 0a1a 	add.w	sl, r4, #26
 800fbb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbb8:	425b      	negs	r3, r3
 800fbba:	454b      	cmp	r3, r9
 800fbbc:	dc01      	bgt.n	800fbc2 <_printf_float+0x2b2>
 800fbbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbc0:	e794      	b.n	800faec <_printf_float+0x1dc>
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	4652      	mov	r2, sl
 800fbc6:	4631      	mov	r1, r6
 800fbc8:	4628      	mov	r0, r5
 800fbca:	47b8      	blx	r7
 800fbcc:	3001      	adds	r0, #1
 800fbce:	f43f aefc 	beq.w	800f9ca <_printf_float+0xba>
 800fbd2:	f109 0901 	add.w	r9, r9, #1
 800fbd6:	e7ee      	b.n	800fbb6 <_printf_float+0x2a6>
 800fbd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fbda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	bfa8      	it	ge
 800fbe0:	461a      	movge	r2, r3
 800fbe2:	2a00      	cmp	r2, #0
 800fbe4:	4691      	mov	r9, r2
 800fbe6:	dd07      	ble.n	800fbf8 <_printf_float+0x2e8>
 800fbe8:	4613      	mov	r3, r2
 800fbea:	4631      	mov	r1, r6
 800fbec:	4642      	mov	r2, r8
 800fbee:	4628      	mov	r0, r5
 800fbf0:	47b8      	blx	r7
 800fbf2:	3001      	adds	r0, #1
 800fbf4:	f43f aee9 	beq.w	800f9ca <_printf_float+0xba>
 800fbf8:	f104 031a 	add.w	r3, r4, #26
 800fbfc:	f04f 0b00 	mov.w	fp, #0
 800fc00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fc04:	9306      	str	r3, [sp, #24]
 800fc06:	e015      	b.n	800fc34 <_printf_float+0x324>
 800fc08:	7fefffff 	.word	0x7fefffff
 800fc0c:	080a7244 	.word	0x080a7244
 800fc10:	080a6f58 	.word	0x080a6f58
 800fc14:	080a6f60 	.word	0x080a6f60
 800fc18:	080a6f5c 	.word	0x080a6f5c
 800fc1c:	080a6f64 	.word	0x080a6f64
 800fc20:	2301      	movs	r3, #1
 800fc22:	9a06      	ldr	r2, [sp, #24]
 800fc24:	4631      	mov	r1, r6
 800fc26:	4628      	mov	r0, r5
 800fc28:	47b8      	blx	r7
 800fc2a:	3001      	adds	r0, #1
 800fc2c:	f43f aecd 	beq.w	800f9ca <_printf_float+0xba>
 800fc30:	f10b 0b01 	add.w	fp, fp, #1
 800fc34:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800fc38:	ebaa 0309 	sub.w	r3, sl, r9
 800fc3c:	455b      	cmp	r3, fp
 800fc3e:	dcef      	bgt.n	800fc20 <_printf_float+0x310>
 800fc40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fc44:	429a      	cmp	r2, r3
 800fc46:	44d0      	add	r8, sl
 800fc48:	db15      	blt.n	800fc76 <_printf_float+0x366>
 800fc4a:	6823      	ldr	r3, [r4, #0]
 800fc4c:	07da      	lsls	r2, r3, #31
 800fc4e:	d412      	bmi.n	800fc76 <_printf_float+0x366>
 800fc50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc52:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc54:	eba3 020a 	sub.w	r2, r3, sl
 800fc58:	eba3 0a01 	sub.w	sl, r3, r1
 800fc5c:	4592      	cmp	sl, r2
 800fc5e:	bfa8      	it	ge
 800fc60:	4692      	movge	sl, r2
 800fc62:	f1ba 0f00 	cmp.w	sl, #0
 800fc66:	dc0e      	bgt.n	800fc86 <_printf_float+0x376>
 800fc68:	f04f 0800 	mov.w	r8, #0
 800fc6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc70:	f104 091a 	add.w	r9, r4, #26
 800fc74:	e019      	b.n	800fcaa <_printf_float+0x39a>
 800fc76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc7a:	4631      	mov	r1, r6
 800fc7c:	4628      	mov	r0, r5
 800fc7e:	47b8      	blx	r7
 800fc80:	3001      	adds	r0, #1
 800fc82:	d1e5      	bne.n	800fc50 <_printf_float+0x340>
 800fc84:	e6a1      	b.n	800f9ca <_printf_float+0xba>
 800fc86:	4653      	mov	r3, sl
 800fc88:	4642      	mov	r2, r8
 800fc8a:	4631      	mov	r1, r6
 800fc8c:	4628      	mov	r0, r5
 800fc8e:	47b8      	blx	r7
 800fc90:	3001      	adds	r0, #1
 800fc92:	d1e9      	bne.n	800fc68 <_printf_float+0x358>
 800fc94:	e699      	b.n	800f9ca <_printf_float+0xba>
 800fc96:	2301      	movs	r3, #1
 800fc98:	464a      	mov	r2, r9
 800fc9a:	4631      	mov	r1, r6
 800fc9c:	4628      	mov	r0, r5
 800fc9e:	47b8      	blx	r7
 800fca0:	3001      	adds	r0, #1
 800fca2:	f43f ae92 	beq.w	800f9ca <_printf_float+0xba>
 800fca6:	f108 0801 	add.w	r8, r8, #1
 800fcaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fcae:	1a9b      	subs	r3, r3, r2
 800fcb0:	eba3 030a 	sub.w	r3, r3, sl
 800fcb4:	4543      	cmp	r3, r8
 800fcb6:	dcee      	bgt.n	800fc96 <_printf_float+0x386>
 800fcb8:	e74a      	b.n	800fb50 <_printf_float+0x240>
 800fcba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fcbc:	2a01      	cmp	r2, #1
 800fcbe:	dc01      	bgt.n	800fcc4 <_printf_float+0x3b4>
 800fcc0:	07db      	lsls	r3, r3, #31
 800fcc2:	d53a      	bpl.n	800fd3a <_printf_float+0x42a>
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	4642      	mov	r2, r8
 800fcc8:	4631      	mov	r1, r6
 800fcca:	4628      	mov	r0, r5
 800fccc:	47b8      	blx	r7
 800fcce:	3001      	adds	r0, #1
 800fcd0:	f43f ae7b 	beq.w	800f9ca <_printf_float+0xba>
 800fcd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fcd8:	4631      	mov	r1, r6
 800fcda:	4628      	mov	r0, r5
 800fcdc:	47b8      	blx	r7
 800fcde:	3001      	adds	r0, #1
 800fce0:	f108 0801 	add.w	r8, r8, #1
 800fce4:	f43f ae71 	beq.w	800f9ca <_printf_float+0xba>
 800fce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcea:	2200      	movs	r2, #0
 800fcec:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800fcf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	f7f7 fadf 	bl	80072b8 <__aeabi_dcmpeq>
 800fcfa:	b9c8      	cbnz	r0, 800fd30 <_printf_float+0x420>
 800fcfc:	4653      	mov	r3, sl
 800fcfe:	4642      	mov	r2, r8
 800fd00:	4631      	mov	r1, r6
 800fd02:	4628      	mov	r0, r5
 800fd04:	47b8      	blx	r7
 800fd06:	3001      	adds	r0, #1
 800fd08:	d10e      	bne.n	800fd28 <_printf_float+0x418>
 800fd0a:	e65e      	b.n	800f9ca <_printf_float+0xba>
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	4652      	mov	r2, sl
 800fd10:	4631      	mov	r1, r6
 800fd12:	4628      	mov	r0, r5
 800fd14:	47b8      	blx	r7
 800fd16:	3001      	adds	r0, #1
 800fd18:	f43f ae57 	beq.w	800f9ca <_printf_float+0xba>
 800fd1c:	f108 0801 	add.w	r8, r8, #1
 800fd20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd22:	3b01      	subs	r3, #1
 800fd24:	4543      	cmp	r3, r8
 800fd26:	dcf1      	bgt.n	800fd0c <_printf_float+0x3fc>
 800fd28:	464b      	mov	r3, r9
 800fd2a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fd2e:	e6de      	b.n	800faee <_printf_float+0x1de>
 800fd30:	f04f 0800 	mov.w	r8, #0
 800fd34:	f104 0a1a 	add.w	sl, r4, #26
 800fd38:	e7f2      	b.n	800fd20 <_printf_float+0x410>
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	e7df      	b.n	800fcfe <_printf_float+0x3ee>
 800fd3e:	2301      	movs	r3, #1
 800fd40:	464a      	mov	r2, r9
 800fd42:	4631      	mov	r1, r6
 800fd44:	4628      	mov	r0, r5
 800fd46:	47b8      	blx	r7
 800fd48:	3001      	adds	r0, #1
 800fd4a:	f43f ae3e 	beq.w	800f9ca <_printf_float+0xba>
 800fd4e:	f108 0801 	add.w	r8, r8, #1
 800fd52:	68e3      	ldr	r3, [r4, #12]
 800fd54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fd56:	1a9b      	subs	r3, r3, r2
 800fd58:	4543      	cmp	r3, r8
 800fd5a:	dcf0      	bgt.n	800fd3e <_printf_float+0x42e>
 800fd5c:	e6fc      	b.n	800fb58 <_printf_float+0x248>
 800fd5e:	f04f 0800 	mov.w	r8, #0
 800fd62:	f104 0919 	add.w	r9, r4, #25
 800fd66:	e7f4      	b.n	800fd52 <_printf_float+0x442>
 800fd68:	2900      	cmp	r1, #0
 800fd6a:	f43f ae8b 	beq.w	800fa84 <_printf_float+0x174>
 800fd6e:	2300      	movs	r3, #0
 800fd70:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800fd74:	ab09      	add	r3, sp, #36	; 0x24
 800fd76:	9300      	str	r3, [sp, #0]
 800fd78:	ec49 8b10 	vmov	d0, r8, r9
 800fd7c:	6022      	str	r2, [r4, #0]
 800fd7e:	f8cd a004 	str.w	sl, [sp, #4]
 800fd82:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fd86:	4628      	mov	r0, r5
 800fd88:	f7ff fd2e 	bl	800f7e8 <__cvt>
 800fd8c:	4680      	mov	r8, r0
 800fd8e:	e648      	b.n	800fa22 <_printf_float+0x112>

0800fd90 <_printf_common>:
 800fd90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd94:	4691      	mov	r9, r2
 800fd96:	461f      	mov	r7, r3
 800fd98:	688a      	ldr	r2, [r1, #8]
 800fd9a:	690b      	ldr	r3, [r1, #16]
 800fd9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fda0:	4293      	cmp	r3, r2
 800fda2:	bfb8      	it	lt
 800fda4:	4613      	movlt	r3, r2
 800fda6:	f8c9 3000 	str.w	r3, [r9]
 800fdaa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fdae:	4606      	mov	r6, r0
 800fdb0:	460c      	mov	r4, r1
 800fdb2:	b112      	cbz	r2, 800fdba <_printf_common+0x2a>
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	f8c9 3000 	str.w	r3, [r9]
 800fdba:	6823      	ldr	r3, [r4, #0]
 800fdbc:	0699      	lsls	r1, r3, #26
 800fdbe:	bf42      	ittt	mi
 800fdc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800fdc4:	3302      	addmi	r3, #2
 800fdc6:	f8c9 3000 	strmi.w	r3, [r9]
 800fdca:	6825      	ldr	r5, [r4, #0]
 800fdcc:	f015 0506 	ands.w	r5, r5, #6
 800fdd0:	d107      	bne.n	800fde2 <_printf_common+0x52>
 800fdd2:	f104 0a19 	add.w	sl, r4, #25
 800fdd6:	68e3      	ldr	r3, [r4, #12]
 800fdd8:	f8d9 2000 	ldr.w	r2, [r9]
 800fddc:	1a9b      	subs	r3, r3, r2
 800fdde:	42ab      	cmp	r3, r5
 800fde0:	dc28      	bgt.n	800fe34 <_printf_common+0xa4>
 800fde2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fde6:	6822      	ldr	r2, [r4, #0]
 800fde8:	3300      	adds	r3, #0
 800fdea:	bf18      	it	ne
 800fdec:	2301      	movne	r3, #1
 800fdee:	0692      	lsls	r2, r2, #26
 800fdf0:	d42d      	bmi.n	800fe4e <_printf_common+0xbe>
 800fdf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fdf6:	4639      	mov	r1, r7
 800fdf8:	4630      	mov	r0, r6
 800fdfa:	47c0      	blx	r8
 800fdfc:	3001      	adds	r0, #1
 800fdfe:	d020      	beq.n	800fe42 <_printf_common+0xb2>
 800fe00:	6823      	ldr	r3, [r4, #0]
 800fe02:	68e5      	ldr	r5, [r4, #12]
 800fe04:	f8d9 2000 	ldr.w	r2, [r9]
 800fe08:	f003 0306 	and.w	r3, r3, #6
 800fe0c:	2b04      	cmp	r3, #4
 800fe0e:	bf08      	it	eq
 800fe10:	1aad      	subeq	r5, r5, r2
 800fe12:	68a3      	ldr	r3, [r4, #8]
 800fe14:	6922      	ldr	r2, [r4, #16]
 800fe16:	bf0c      	ite	eq
 800fe18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fe1c:	2500      	movne	r5, #0
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	bfc4      	itt	gt
 800fe22:	1a9b      	subgt	r3, r3, r2
 800fe24:	18ed      	addgt	r5, r5, r3
 800fe26:	f04f 0900 	mov.w	r9, #0
 800fe2a:	341a      	adds	r4, #26
 800fe2c:	454d      	cmp	r5, r9
 800fe2e:	d11a      	bne.n	800fe66 <_printf_common+0xd6>
 800fe30:	2000      	movs	r0, #0
 800fe32:	e008      	b.n	800fe46 <_printf_common+0xb6>
 800fe34:	2301      	movs	r3, #1
 800fe36:	4652      	mov	r2, sl
 800fe38:	4639      	mov	r1, r7
 800fe3a:	4630      	mov	r0, r6
 800fe3c:	47c0      	blx	r8
 800fe3e:	3001      	adds	r0, #1
 800fe40:	d103      	bne.n	800fe4a <_printf_common+0xba>
 800fe42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe4a:	3501      	adds	r5, #1
 800fe4c:	e7c3      	b.n	800fdd6 <_printf_common+0x46>
 800fe4e:	18e1      	adds	r1, r4, r3
 800fe50:	1c5a      	adds	r2, r3, #1
 800fe52:	2030      	movs	r0, #48	; 0x30
 800fe54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fe58:	4422      	add	r2, r4
 800fe5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fe5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fe62:	3302      	adds	r3, #2
 800fe64:	e7c5      	b.n	800fdf2 <_printf_common+0x62>
 800fe66:	2301      	movs	r3, #1
 800fe68:	4622      	mov	r2, r4
 800fe6a:	4639      	mov	r1, r7
 800fe6c:	4630      	mov	r0, r6
 800fe6e:	47c0      	blx	r8
 800fe70:	3001      	adds	r0, #1
 800fe72:	d0e6      	beq.n	800fe42 <_printf_common+0xb2>
 800fe74:	f109 0901 	add.w	r9, r9, #1
 800fe78:	e7d8      	b.n	800fe2c <_printf_common+0x9c>
	...

0800fe7c <_printf_i>:
 800fe7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800fe84:	460c      	mov	r4, r1
 800fe86:	7e09      	ldrb	r1, [r1, #24]
 800fe88:	b085      	sub	sp, #20
 800fe8a:	296e      	cmp	r1, #110	; 0x6e
 800fe8c:	4617      	mov	r7, r2
 800fe8e:	4606      	mov	r6, r0
 800fe90:	4698      	mov	r8, r3
 800fe92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fe94:	f000 80b3 	beq.w	800fffe <_printf_i+0x182>
 800fe98:	d822      	bhi.n	800fee0 <_printf_i+0x64>
 800fe9a:	2963      	cmp	r1, #99	; 0x63
 800fe9c:	d036      	beq.n	800ff0c <_printf_i+0x90>
 800fe9e:	d80a      	bhi.n	800feb6 <_printf_i+0x3a>
 800fea0:	2900      	cmp	r1, #0
 800fea2:	f000 80b9 	beq.w	8010018 <_printf_i+0x19c>
 800fea6:	2958      	cmp	r1, #88	; 0x58
 800fea8:	f000 8083 	beq.w	800ffb2 <_printf_i+0x136>
 800feac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800feb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800feb4:	e032      	b.n	800ff1c <_printf_i+0xa0>
 800feb6:	2964      	cmp	r1, #100	; 0x64
 800feb8:	d001      	beq.n	800febe <_printf_i+0x42>
 800feba:	2969      	cmp	r1, #105	; 0x69
 800febc:	d1f6      	bne.n	800feac <_printf_i+0x30>
 800febe:	6820      	ldr	r0, [r4, #0]
 800fec0:	6813      	ldr	r3, [r2, #0]
 800fec2:	0605      	lsls	r5, r0, #24
 800fec4:	f103 0104 	add.w	r1, r3, #4
 800fec8:	d52a      	bpl.n	800ff20 <_printf_i+0xa4>
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	6011      	str	r1, [r2, #0]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	da03      	bge.n	800feda <_printf_i+0x5e>
 800fed2:	222d      	movs	r2, #45	; 0x2d
 800fed4:	425b      	negs	r3, r3
 800fed6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800feda:	486f      	ldr	r0, [pc, #444]	; (8010098 <_printf_i+0x21c>)
 800fedc:	220a      	movs	r2, #10
 800fede:	e039      	b.n	800ff54 <_printf_i+0xd8>
 800fee0:	2973      	cmp	r1, #115	; 0x73
 800fee2:	f000 809d 	beq.w	8010020 <_printf_i+0x1a4>
 800fee6:	d808      	bhi.n	800fefa <_printf_i+0x7e>
 800fee8:	296f      	cmp	r1, #111	; 0x6f
 800feea:	d020      	beq.n	800ff2e <_printf_i+0xb2>
 800feec:	2970      	cmp	r1, #112	; 0x70
 800feee:	d1dd      	bne.n	800feac <_printf_i+0x30>
 800fef0:	6823      	ldr	r3, [r4, #0]
 800fef2:	f043 0320 	orr.w	r3, r3, #32
 800fef6:	6023      	str	r3, [r4, #0]
 800fef8:	e003      	b.n	800ff02 <_printf_i+0x86>
 800fefa:	2975      	cmp	r1, #117	; 0x75
 800fefc:	d017      	beq.n	800ff2e <_printf_i+0xb2>
 800fefe:	2978      	cmp	r1, #120	; 0x78
 800ff00:	d1d4      	bne.n	800feac <_printf_i+0x30>
 800ff02:	2378      	movs	r3, #120	; 0x78
 800ff04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff08:	4864      	ldr	r0, [pc, #400]	; (801009c <_printf_i+0x220>)
 800ff0a:	e055      	b.n	800ffb8 <_printf_i+0x13c>
 800ff0c:	6813      	ldr	r3, [r2, #0]
 800ff0e:	1d19      	adds	r1, r3, #4
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	6011      	str	r1, [r2, #0]
 800ff14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	e08c      	b.n	801003a <_printf_i+0x1be>
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	6011      	str	r1, [r2, #0]
 800ff24:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ff28:	bf18      	it	ne
 800ff2a:	b21b      	sxthne	r3, r3
 800ff2c:	e7cf      	b.n	800fece <_printf_i+0x52>
 800ff2e:	6813      	ldr	r3, [r2, #0]
 800ff30:	6825      	ldr	r5, [r4, #0]
 800ff32:	1d18      	adds	r0, r3, #4
 800ff34:	6010      	str	r0, [r2, #0]
 800ff36:	0628      	lsls	r0, r5, #24
 800ff38:	d501      	bpl.n	800ff3e <_printf_i+0xc2>
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	e002      	b.n	800ff44 <_printf_i+0xc8>
 800ff3e:	0668      	lsls	r0, r5, #25
 800ff40:	d5fb      	bpl.n	800ff3a <_printf_i+0xbe>
 800ff42:	881b      	ldrh	r3, [r3, #0]
 800ff44:	4854      	ldr	r0, [pc, #336]	; (8010098 <_printf_i+0x21c>)
 800ff46:	296f      	cmp	r1, #111	; 0x6f
 800ff48:	bf14      	ite	ne
 800ff4a:	220a      	movne	r2, #10
 800ff4c:	2208      	moveq	r2, #8
 800ff4e:	2100      	movs	r1, #0
 800ff50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ff54:	6865      	ldr	r5, [r4, #4]
 800ff56:	60a5      	str	r5, [r4, #8]
 800ff58:	2d00      	cmp	r5, #0
 800ff5a:	f2c0 8095 	blt.w	8010088 <_printf_i+0x20c>
 800ff5e:	6821      	ldr	r1, [r4, #0]
 800ff60:	f021 0104 	bic.w	r1, r1, #4
 800ff64:	6021      	str	r1, [r4, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d13d      	bne.n	800ffe6 <_printf_i+0x16a>
 800ff6a:	2d00      	cmp	r5, #0
 800ff6c:	f040 808e 	bne.w	801008c <_printf_i+0x210>
 800ff70:	4665      	mov	r5, ip
 800ff72:	2a08      	cmp	r2, #8
 800ff74:	d10b      	bne.n	800ff8e <_printf_i+0x112>
 800ff76:	6823      	ldr	r3, [r4, #0]
 800ff78:	07db      	lsls	r3, r3, #31
 800ff7a:	d508      	bpl.n	800ff8e <_printf_i+0x112>
 800ff7c:	6923      	ldr	r3, [r4, #16]
 800ff7e:	6862      	ldr	r2, [r4, #4]
 800ff80:	429a      	cmp	r2, r3
 800ff82:	bfde      	ittt	le
 800ff84:	2330      	movle	r3, #48	; 0x30
 800ff86:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ff8a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ff8e:	ebac 0305 	sub.w	r3, ip, r5
 800ff92:	6123      	str	r3, [r4, #16]
 800ff94:	f8cd 8000 	str.w	r8, [sp]
 800ff98:	463b      	mov	r3, r7
 800ff9a:	aa03      	add	r2, sp, #12
 800ff9c:	4621      	mov	r1, r4
 800ff9e:	4630      	mov	r0, r6
 800ffa0:	f7ff fef6 	bl	800fd90 <_printf_common>
 800ffa4:	3001      	adds	r0, #1
 800ffa6:	d14d      	bne.n	8010044 <_printf_i+0x1c8>
 800ffa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ffac:	b005      	add	sp, #20
 800ffae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffb2:	4839      	ldr	r0, [pc, #228]	; (8010098 <_printf_i+0x21c>)
 800ffb4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ffb8:	6813      	ldr	r3, [r2, #0]
 800ffba:	6821      	ldr	r1, [r4, #0]
 800ffbc:	1d1d      	adds	r5, r3, #4
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	6015      	str	r5, [r2, #0]
 800ffc2:	060a      	lsls	r2, r1, #24
 800ffc4:	d50b      	bpl.n	800ffde <_printf_i+0x162>
 800ffc6:	07ca      	lsls	r2, r1, #31
 800ffc8:	bf44      	itt	mi
 800ffca:	f041 0120 	orrmi.w	r1, r1, #32
 800ffce:	6021      	strmi	r1, [r4, #0]
 800ffd0:	b91b      	cbnz	r3, 800ffda <_printf_i+0x15e>
 800ffd2:	6822      	ldr	r2, [r4, #0]
 800ffd4:	f022 0220 	bic.w	r2, r2, #32
 800ffd8:	6022      	str	r2, [r4, #0]
 800ffda:	2210      	movs	r2, #16
 800ffdc:	e7b7      	b.n	800ff4e <_printf_i+0xd2>
 800ffde:	064d      	lsls	r5, r1, #25
 800ffe0:	bf48      	it	mi
 800ffe2:	b29b      	uxthmi	r3, r3
 800ffe4:	e7ef      	b.n	800ffc6 <_printf_i+0x14a>
 800ffe6:	4665      	mov	r5, ip
 800ffe8:	fbb3 f1f2 	udiv	r1, r3, r2
 800ffec:	fb02 3311 	mls	r3, r2, r1, r3
 800fff0:	5cc3      	ldrb	r3, [r0, r3]
 800fff2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800fff6:	460b      	mov	r3, r1
 800fff8:	2900      	cmp	r1, #0
 800fffa:	d1f5      	bne.n	800ffe8 <_printf_i+0x16c>
 800fffc:	e7b9      	b.n	800ff72 <_printf_i+0xf6>
 800fffe:	6813      	ldr	r3, [r2, #0]
 8010000:	6825      	ldr	r5, [r4, #0]
 8010002:	6961      	ldr	r1, [r4, #20]
 8010004:	1d18      	adds	r0, r3, #4
 8010006:	6010      	str	r0, [r2, #0]
 8010008:	0628      	lsls	r0, r5, #24
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	d501      	bpl.n	8010012 <_printf_i+0x196>
 801000e:	6019      	str	r1, [r3, #0]
 8010010:	e002      	b.n	8010018 <_printf_i+0x19c>
 8010012:	066a      	lsls	r2, r5, #25
 8010014:	d5fb      	bpl.n	801000e <_printf_i+0x192>
 8010016:	8019      	strh	r1, [r3, #0]
 8010018:	2300      	movs	r3, #0
 801001a:	6123      	str	r3, [r4, #16]
 801001c:	4665      	mov	r5, ip
 801001e:	e7b9      	b.n	800ff94 <_printf_i+0x118>
 8010020:	6813      	ldr	r3, [r2, #0]
 8010022:	1d19      	adds	r1, r3, #4
 8010024:	6011      	str	r1, [r2, #0]
 8010026:	681d      	ldr	r5, [r3, #0]
 8010028:	6862      	ldr	r2, [r4, #4]
 801002a:	2100      	movs	r1, #0
 801002c:	4628      	mov	r0, r5
 801002e:	f7f6 fccf 	bl	80069d0 <memchr>
 8010032:	b108      	cbz	r0, 8010038 <_printf_i+0x1bc>
 8010034:	1b40      	subs	r0, r0, r5
 8010036:	6060      	str	r0, [r4, #4]
 8010038:	6863      	ldr	r3, [r4, #4]
 801003a:	6123      	str	r3, [r4, #16]
 801003c:	2300      	movs	r3, #0
 801003e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010042:	e7a7      	b.n	800ff94 <_printf_i+0x118>
 8010044:	6923      	ldr	r3, [r4, #16]
 8010046:	462a      	mov	r2, r5
 8010048:	4639      	mov	r1, r7
 801004a:	4630      	mov	r0, r6
 801004c:	47c0      	blx	r8
 801004e:	3001      	adds	r0, #1
 8010050:	d0aa      	beq.n	800ffa8 <_printf_i+0x12c>
 8010052:	6823      	ldr	r3, [r4, #0]
 8010054:	079b      	lsls	r3, r3, #30
 8010056:	d413      	bmi.n	8010080 <_printf_i+0x204>
 8010058:	68e0      	ldr	r0, [r4, #12]
 801005a:	9b03      	ldr	r3, [sp, #12]
 801005c:	4298      	cmp	r0, r3
 801005e:	bfb8      	it	lt
 8010060:	4618      	movlt	r0, r3
 8010062:	e7a3      	b.n	800ffac <_printf_i+0x130>
 8010064:	2301      	movs	r3, #1
 8010066:	464a      	mov	r2, r9
 8010068:	4639      	mov	r1, r7
 801006a:	4630      	mov	r0, r6
 801006c:	47c0      	blx	r8
 801006e:	3001      	adds	r0, #1
 8010070:	d09a      	beq.n	800ffa8 <_printf_i+0x12c>
 8010072:	3501      	adds	r5, #1
 8010074:	68e3      	ldr	r3, [r4, #12]
 8010076:	9a03      	ldr	r2, [sp, #12]
 8010078:	1a9b      	subs	r3, r3, r2
 801007a:	42ab      	cmp	r3, r5
 801007c:	dcf2      	bgt.n	8010064 <_printf_i+0x1e8>
 801007e:	e7eb      	b.n	8010058 <_printf_i+0x1dc>
 8010080:	2500      	movs	r5, #0
 8010082:	f104 0919 	add.w	r9, r4, #25
 8010086:	e7f5      	b.n	8010074 <_printf_i+0x1f8>
 8010088:	2b00      	cmp	r3, #0
 801008a:	d1ac      	bne.n	800ffe6 <_printf_i+0x16a>
 801008c:	7803      	ldrb	r3, [r0, #0]
 801008e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010092:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010096:	e76c      	b.n	800ff72 <_printf_i+0xf6>
 8010098:	080a6f66 	.word	0x080a6f66
 801009c:	080a6f77 	.word	0x080a6f77

080100a0 <_sbrk_r>:
 80100a0:	b538      	push	{r3, r4, r5, lr}
 80100a2:	4c06      	ldr	r4, [pc, #24]	; (80100bc <_sbrk_r+0x1c>)
 80100a4:	2300      	movs	r3, #0
 80100a6:	4605      	mov	r5, r0
 80100a8:	4608      	mov	r0, r1
 80100aa:	6023      	str	r3, [r4, #0]
 80100ac:	f7fb f8ba 	bl	800b224 <_sbrk>
 80100b0:	1c43      	adds	r3, r0, #1
 80100b2:	d102      	bne.n	80100ba <_sbrk_r+0x1a>
 80100b4:	6823      	ldr	r3, [r4, #0]
 80100b6:	b103      	cbz	r3, 80100ba <_sbrk_r+0x1a>
 80100b8:	602b      	str	r3, [r5, #0]
 80100ba:	bd38      	pop	{r3, r4, r5, pc}
 80100bc:	2002efc8 	.word	0x2002efc8

080100c0 <siprintf>:
 80100c0:	b40e      	push	{r1, r2, r3}
 80100c2:	b500      	push	{lr}
 80100c4:	b09c      	sub	sp, #112	; 0x70
 80100c6:	ab1d      	add	r3, sp, #116	; 0x74
 80100c8:	9002      	str	r0, [sp, #8]
 80100ca:	9006      	str	r0, [sp, #24]
 80100cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80100d0:	4809      	ldr	r0, [pc, #36]	; (80100f8 <siprintf+0x38>)
 80100d2:	9107      	str	r1, [sp, #28]
 80100d4:	9104      	str	r1, [sp, #16]
 80100d6:	4909      	ldr	r1, [pc, #36]	; (80100fc <siprintf+0x3c>)
 80100d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80100dc:	9105      	str	r1, [sp, #20]
 80100de:	6800      	ldr	r0, [r0, #0]
 80100e0:	9301      	str	r3, [sp, #4]
 80100e2:	a902      	add	r1, sp, #8
 80100e4:	f001 fc34 	bl	8011950 <_svfiprintf_r>
 80100e8:	9b02      	ldr	r3, [sp, #8]
 80100ea:	2200      	movs	r2, #0
 80100ec:	701a      	strb	r2, [r3, #0]
 80100ee:	b01c      	add	sp, #112	; 0x70
 80100f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80100f4:	b003      	add	sp, #12
 80100f6:	4770      	bx	lr
 80100f8:	20000d24 	.word	0x20000d24
 80100fc:	ffff0208 	.word	0xffff0208

08010100 <__swbuf_r>:
 8010100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010102:	460e      	mov	r6, r1
 8010104:	4614      	mov	r4, r2
 8010106:	4605      	mov	r5, r0
 8010108:	b118      	cbz	r0, 8010112 <__swbuf_r+0x12>
 801010a:	6983      	ldr	r3, [r0, #24]
 801010c:	b90b      	cbnz	r3, 8010112 <__swbuf_r+0x12>
 801010e:	f000 ffeb 	bl	80110e8 <__sinit>
 8010112:	4b21      	ldr	r3, [pc, #132]	; (8010198 <__swbuf_r+0x98>)
 8010114:	429c      	cmp	r4, r3
 8010116:	d12a      	bne.n	801016e <__swbuf_r+0x6e>
 8010118:	686c      	ldr	r4, [r5, #4]
 801011a:	69a3      	ldr	r3, [r4, #24]
 801011c:	60a3      	str	r3, [r4, #8]
 801011e:	89a3      	ldrh	r3, [r4, #12]
 8010120:	071a      	lsls	r2, r3, #28
 8010122:	d52e      	bpl.n	8010182 <__swbuf_r+0x82>
 8010124:	6923      	ldr	r3, [r4, #16]
 8010126:	b363      	cbz	r3, 8010182 <__swbuf_r+0x82>
 8010128:	6923      	ldr	r3, [r4, #16]
 801012a:	6820      	ldr	r0, [r4, #0]
 801012c:	1ac0      	subs	r0, r0, r3
 801012e:	6963      	ldr	r3, [r4, #20]
 8010130:	b2f6      	uxtb	r6, r6
 8010132:	4283      	cmp	r3, r0
 8010134:	4637      	mov	r7, r6
 8010136:	dc04      	bgt.n	8010142 <__swbuf_r+0x42>
 8010138:	4621      	mov	r1, r4
 801013a:	4628      	mov	r0, r5
 801013c:	f000 ff6a 	bl	8011014 <_fflush_r>
 8010140:	bb28      	cbnz	r0, 801018e <__swbuf_r+0x8e>
 8010142:	68a3      	ldr	r3, [r4, #8]
 8010144:	3b01      	subs	r3, #1
 8010146:	60a3      	str	r3, [r4, #8]
 8010148:	6823      	ldr	r3, [r4, #0]
 801014a:	1c5a      	adds	r2, r3, #1
 801014c:	6022      	str	r2, [r4, #0]
 801014e:	701e      	strb	r6, [r3, #0]
 8010150:	6963      	ldr	r3, [r4, #20]
 8010152:	3001      	adds	r0, #1
 8010154:	4283      	cmp	r3, r0
 8010156:	d004      	beq.n	8010162 <__swbuf_r+0x62>
 8010158:	89a3      	ldrh	r3, [r4, #12]
 801015a:	07db      	lsls	r3, r3, #31
 801015c:	d519      	bpl.n	8010192 <__swbuf_r+0x92>
 801015e:	2e0a      	cmp	r6, #10
 8010160:	d117      	bne.n	8010192 <__swbuf_r+0x92>
 8010162:	4621      	mov	r1, r4
 8010164:	4628      	mov	r0, r5
 8010166:	f000 ff55 	bl	8011014 <_fflush_r>
 801016a:	b190      	cbz	r0, 8010192 <__swbuf_r+0x92>
 801016c:	e00f      	b.n	801018e <__swbuf_r+0x8e>
 801016e:	4b0b      	ldr	r3, [pc, #44]	; (801019c <__swbuf_r+0x9c>)
 8010170:	429c      	cmp	r4, r3
 8010172:	d101      	bne.n	8010178 <__swbuf_r+0x78>
 8010174:	68ac      	ldr	r4, [r5, #8]
 8010176:	e7d0      	b.n	801011a <__swbuf_r+0x1a>
 8010178:	4b09      	ldr	r3, [pc, #36]	; (80101a0 <__swbuf_r+0xa0>)
 801017a:	429c      	cmp	r4, r3
 801017c:	bf08      	it	eq
 801017e:	68ec      	ldreq	r4, [r5, #12]
 8010180:	e7cb      	b.n	801011a <__swbuf_r+0x1a>
 8010182:	4621      	mov	r1, r4
 8010184:	4628      	mov	r0, r5
 8010186:	f000 f80d 	bl	80101a4 <__swsetup_r>
 801018a:	2800      	cmp	r0, #0
 801018c:	d0cc      	beq.n	8010128 <__swbuf_r+0x28>
 801018e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010192:	4638      	mov	r0, r7
 8010194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010196:	bf00      	nop
 8010198:	080a6fb8 	.word	0x080a6fb8
 801019c:	080a6fd8 	.word	0x080a6fd8
 80101a0:	080a6f98 	.word	0x080a6f98

080101a4 <__swsetup_r>:
 80101a4:	4b32      	ldr	r3, [pc, #200]	; (8010270 <__swsetup_r+0xcc>)
 80101a6:	b570      	push	{r4, r5, r6, lr}
 80101a8:	681d      	ldr	r5, [r3, #0]
 80101aa:	4606      	mov	r6, r0
 80101ac:	460c      	mov	r4, r1
 80101ae:	b125      	cbz	r5, 80101ba <__swsetup_r+0x16>
 80101b0:	69ab      	ldr	r3, [r5, #24]
 80101b2:	b913      	cbnz	r3, 80101ba <__swsetup_r+0x16>
 80101b4:	4628      	mov	r0, r5
 80101b6:	f000 ff97 	bl	80110e8 <__sinit>
 80101ba:	4b2e      	ldr	r3, [pc, #184]	; (8010274 <__swsetup_r+0xd0>)
 80101bc:	429c      	cmp	r4, r3
 80101be:	d10f      	bne.n	80101e0 <__swsetup_r+0x3c>
 80101c0:	686c      	ldr	r4, [r5, #4]
 80101c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101c6:	b29a      	uxth	r2, r3
 80101c8:	0715      	lsls	r5, r2, #28
 80101ca:	d42c      	bmi.n	8010226 <__swsetup_r+0x82>
 80101cc:	06d0      	lsls	r0, r2, #27
 80101ce:	d411      	bmi.n	80101f4 <__swsetup_r+0x50>
 80101d0:	2209      	movs	r2, #9
 80101d2:	6032      	str	r2, [r6, #0]
 80101d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101d8:	81a3      	strh	r3, [r4, #12]
 80101da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101de:	e03e      	b.n	801025e <__swsetup_r+0xba>
 80101e0:	4b25      	ldr	r3, [pc, #148]	; (8010278 <__swsetup_r+0xd4>)
 80101e2:	429c      	cmp	r4, r3
 80101e4:	d101      	bne.n	80101ea <__swsetup_r+0x46>
 80101e6:	68ac      	ldr	r4, [r5, #8]
 80101e8:	e7eb      	b.n	80101c2 <__swsetup_r+0x1e>
 80101ea:	4b24      	ldr	r3, [pc, #144]	; (801027c <__swsetup_r+0xd8>)
 80101ec:	429c      	cmp	r4, r3
 80101ee:	bf08      	it	eq
 80101f0:	68ec      	ldreq	r4, [r5, #12]
 80101f2:	e7e6      	b.n	80101c2 <__swsetup_r+0x1e>
 80101f4:	0751      	lsls	r1, r2, #29
 80101f6:	d512      	bpl.n	801021e <__swsetup_r+0x7a>
 80101f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101fa:	b141      	cbz	r1, 801020e <__swsetup_r+0x6a>
 80101fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010200:	4299      	cmp	r1, r3
 8010202:	d002      	beq.n	801020a <__swsetup_r+0x66>
 8010204:	4630      	mov	r0, r6
 8010206:	f7ff fa47 	bl	800f698 <_free_r>
 801020a:	2300      	movs	r3, #0
 801020c:	6363      	str	r3, [r4, #52]	; 0x34
 801020e:	89a3      	ldrh	r3, [r4, #12]
 8010210:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010214:	81a3      	strh	r3, [r4, #12]
 8010216:	2300      	movs	r3, #0
 8010218:	6063      	str	r3, [r4, #4]
 801021a:	6923      	ldr	r3, [r4, #16]
 801021c:	6023      	str	r3, [r4, #0]
 801021e:	89a3      	ldrh	r3, [r4, #12]
 8010220:	f043 0308 	orr.w	r3, r3, #8
 8010224:	81a3      	strh	r3, [r4, #12]
 8010226:	6923      	ldr	r3, [r4, #16]
 8010228:	b94b      	cbnz	r3, 801023e <__swsetup_r+0x9a>
 801022a:	89a3      	ldrh	r3, [r4, #12]
 801022c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010234:	d003      	beq.n	801023e <__swsetup_r+0x9a>
 8010236:	4621      	mov	r1, r4
 8010238:	4630      	mov	r0, r6
 801023a:	f001 f811 	bl	8011260 <__smakebuf_r>
 801023e:	89a2      	ldrh	r2, [r4, #12]
 8010240:	f012 0301 	ands.w	r3, r2, #1
 8010244:	d00c      	beq.n	8010260 <__swsetup_r+0xbc>
 8010246:	2300      	movs	r3, #0
 8010248:	60a3      	str	r3, [r4, #8]
 801024a:	6963      	ldr	r3, [r4, #20]
 801024c:	425b      	negs	r3, r3
 801024e:	61a3      	str	r3, [r4, #24]
 8010250:	6923      	ldr	r3, [r4, #16]
 8010252:	b953      	cbnz	r3, 801026a <__swsetup_r+0xc6>
 8010254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010258:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801025c:	d1ba      	bne.n	80101d4 <__swsetup_r+0x30>
 801025e:	bd70      	pop	{r4, r5, r6, pc}
 8010260:	0792      	lsls	r2, r2, #30
 8010262:	bf58      	it	pl
 8010264:	6963      	ldrpl	r3, [r4, #20]
 8010266:	60a3      	str	r3, [r4, #8]
 8010268:	e7f2      	b.n	8010250 <__swsetup_r+0xac>
 801026a:	2000      	movs	r0, #0
 801026c:	e7f7      	b.n	801025e <__swsetup_r+0xba>
 801026e:	bf00      	nop
 8010270:	20000d24 	.word	0x20000d24
 8010274:	080a6fb8 	.word	0x080a6fb8
 8010278:	080a6fd8 	.word	0x080a6fd8
 801027c:	080a6f98 	.word	0x080a6f98

08010280 <quorem>:
 8010280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010284:	6903      	ldr	r3, [r0, #16]
 8010286:	690c      	ldr	r4, [r1, #16]
 8010288:	42a3      	cmp	r3, r4
 801028a:	4680      	mov	r8, r0
 801028c:	f2c0 8082 	blt.w	8010394 <quorem+0x114>
 8010290:	3c01      	subs	r4, #1
 8010292:	f101 0714 	add.w	r7, r1, #20
 8010296:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801029a:	f100 0614 	add.w	r6, r0, #20
 801029e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80102a2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80102a6:	eb06 030c 	add.w	r3, r6, ip
 80102aa:	3501      	adds	r5, #1
 80102ac:	eb07 090c 	add.w	r9, r7, ip
 80102b0:	9301      	str	r3, [sp, #4]
 80102b2:	fbb0 f5f5 	udiv	r5, r0, r5
 80102b6:	b395      	cbz	r5, 801031e <quorem+0x9e>
 80102b8:	f04f 0a00 	mov.w	sl, #0
 80102bc:	4638      	mov	r0, r7
 80102be:	46b6      	mov	lr, r6
 80102c0:	46d3      	mov	fp, sl
 80102c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80102c6:	b293      	uxth	r3, r2
 80102c8:	fb05 a303 	mla	r3, r5, r3, sl
 80102cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80102d0:	b29b      	uxth	r3, r3
 80102d2:	ebab 0303 	sub.w	r3, fp, r3
 80102d6:	0c12      	lsrs	r2, r2, #16
 80102d8:	f8de b000 	ldr.w	fp, [lr]
 80102dc:	fb05 a202 	mla	r2, r5, r2, sl
 80102e0:	fa13 f38b 	uxtah	r3, r3, fp
 80102e4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80102e8:	fa1f fb82 	uxth.w	fp, r2
 80102ec:	f8de 2000 	ldr.w	r2, [lr]
 80102f0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80102f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80102f8:	b29b      	uxth	r3, r3
 80102fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102fe:	4581      	cmp	r9, r0
 8010300:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8010304:	f84e 3b04 	str.w	r3, [lr], #4
 8010308:	d2db      	bcs.n	80102c2 <quorem+0x42>
 801030a:	f856 300c 	ldr.w	r3, [r6, ip]
 801030e:	b933      	cbnz	r3, 801031e <quorem+0x9e>
 8010310:	9b01      	ldr	r3, [sp, #4]
 8010312:	3b04      	subs	r3, #4
 8010314:	429e      	cmp	r6, r3
 8010316:	461a      	mov	r2, r3
 8010318:	d330      	bcc.n	801037c <quorem+0xfc>
 801031a:	f8c8 4010 	str.w	r4, [r8, #16]
 801031e:	4640      	mov	r0, r8
 8010320:	f001 f9f6 	bl	8011710 <__mcmp>
 8010324:	2800      	cmp	r0, #0
 8010326:	db25      	blt.n	8010374 <quorem+0xf4>
 8010328:	3501      	adds	r5, #1
 801032a:	4630      	mov	r0, r6
 801032c:	f04f 0c00 	mov.w	ip, #0
 8010330:	f857 2b04 	ldr.w	r2, [r7], #4
 8010334:	f8d0 e000 	ldr.w	lr, [r0]
 8010338:	b293      	uxth	r3, r2
 801033a:	ebac 0303 	sub.w	r3, ip, r3
 801033e:	0c12      	lsrs	r2, r2, #16
 8010340:	fa13 f38e 	uxtah	r3, r3, lr
 8010344:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010348:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801034c:	b29b      	uxth	r3, r3
 801034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010352:	45b9      	cmp	r9, r7
 8010354:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010358:	f840 3b04 	str.w	r3, [r0], #4
 801035c:	d2e8      	bcs.n	8010330 <quorem+0xb0>
 801035e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8010362:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010366:	b92a      	cbnz	r2, 8010374 <quorem+0xf4>
 8010368:	3b04      	subs	r3, #4
 801036a:	429e      	cmp	r6, r3
 801036c:	461a      	mov	r2, r3
 801036e:	d30b      	bcc.n	8010388 <quorem+0x108>
 8010370:	f8c8 4010 	str.w	r4, [r8, #16]
 8010374:	4628      	mov	r0, r5
 8010376:	b003      	add	sp, #12
 8010378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801037c:	6812      	ldr	r2, [r2, #0]
 801037e:	3b04      	subs	r3, #4
 8010380:	2a00      	cmp	r2, #0
 8010382:	d1ca      	bne.n	801031a <quorem+0x9a>
 8010384:	3c01      	subs	r4, #1
 8010386:	e7c5      	b.n	8010314 <quorem+0x94>
 8010388:	6812      	ldr	r2, [r2, #0]
 801038a:	3b04      	subs	r3, #4
 801038c:	2a00      	cmp	r2, #0
 801038e:	d1ef      	bne.n	8010370 <quorem+0xf0>
 8010390:	3c01      	subs	r4, #1
 8010392:	e7ea      	b.n	801036a <quorem+0xea>
 8010394:	2000      	movs	r0, #0
 8010396:	e7ee      	b.n	8010376 <quorem+0xf6>

08010398 <_dtoa_r>:
 8010398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801039c:	ec57 6b10 	vmov	r6, r7, d0
 80103a0:	b097      	sub	sp, #92	; 0x5c
 80103a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80103a4:	9106      	str	r1, [sp, #24]
 80103a6:	4604      	mov	r4, r0
 80103a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80103aa:	9312      	str	r3, [sp, #72]	; 0x48
 80103ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80103b0:	e9cd 6700 	strd	r6, r7, [sp]
 80103b4:	b93d      	cbnz	r5, 80103c6 <_dtoa_r+0x2e>
 80103b6:	2010      	movs	r0, #16
 80103b8:	f7ff f92e 	bl	800f618 <malloc>
 80103bc:	6260      	str	r0, [r4, #36]	; 0x24
 80103be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80103c2:	6005      	str	r5, [r0, #0]
 80103c4:	60c5      	str	r5, [r0, #12]
 80103c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103c8:	6819      	ldr	r1, [r3, #0]
 80103ca:	b151      	cbz	r1, 80103e2 <_dtoa_r+0x4a>
 80103cc:	685a      	ldr	r2, [r3, #4]
 80103ce:	604a      	str	r2, [r1, #4]
 80103d0:	2301      	movs	r3, #1
 80103d2:	4093      	lsls	r3, r2
 80103d4:	608b      	str	r3, [r1, #8]
 80103d6:	4620      	mov	r0, r4
 80103d8:	f000 ffb8 	bl	801134c <_Bfree>
 80103dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103de:	2200      	movs	r2, #0
 80103e0:	601a      	str	r2, [r3, #0]
 80103e2:	1e3b      	subs	r3, r7, #0
 80103e4:	bfbb      	ittet	lt
 80103e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80103ea:	9301      	strlt	r3, [sp, #4]
 80103ec:	2300      	movge	r3, #0
 80103ee:	2201      	movlt	r2, #1
 80103f0:	bfac      	ite	ge
 80103f2:	f8c8 3000 	strge.w	r3, [r8]
 80103f6:	f8c8 2000 	strlt.w	r2, [r8]
 80103fa:	4baf      	ldr	r3, [pc, #700]	; (80106b8 <_dtoa_r+0x320>)
 80103fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010400:	ea33 0308 	bics.w	r3, r3, r8
 8010404:	d114      	bne.n	8010430 <_dtoa_r+0x98>
 8010406:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010408:	f242 730f 	movw	r3, #9999	; 0x270f
 801040c:	6013      	str	r3, [r2, #0]
 801040e:	9b00      	ldr	r3, [sp, #0]
 8010410:	b923      	cbnz	r3, 801041c <_dtoa_r+0x84>
 8010412:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8010416:	2800      	cmp	r0, #0
 8010418:	f000 8542 	beq.w	8010ea0 <_dtoa_r+0xb08>
 801041c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801041e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80106cc <_dtoa_r+0x334>
 8010422:	2b00      	cmp	r3, #0
 8010424:	f000 8544 	beq.w	8010eb0 <_dtoa_r+0xb18>
 8010428:	f10b 0303 	add.w	r3, fp, #3
 801042c:	f000 bd3e 	b.w	8010eac <_dtoa_r+0xb14>
 8010430:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010434:	2200      	movs	r2, #0
 8010436:	2300      	movs	r3, #0
 8010438:	4630      	mov	r0, r6
 801043a:	4639      	mov	r1, r7
 801043c:	f7f6 ff3c 	bl	80072b8 <__aeabi_dcmpeq>
 8010440:	4681      	mov	r9, r0
 8010442:	b168      	cbz	r0, 8010460 <_dtoa_r+0xc8>
 8010444:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010446:	2301      	movs	r3, #1
 8010448:	6013      	str	r3, [r2, #0]
 801044a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801044c:	2b00      	cmp	r3, #0
 801044e:	f000 8524 	beq.w	8010e9a <_dtoa_r+0xb02>
 8010452:	4b9a      	ldr	r3, [pc, #616]	; (80106bc <_dtoa_r+0x324>)
 8010454:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010456:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 801045a:	6013      	str	r3, [r2, #0]
 801045c:	f000 bd28 	b.w	8010eb0 <_dtoa_r+0xb18>
 8010460:	aa14      	add	r2, sp, #80	; 0x50
 8010462:	a915      	add	r1, sp, #84	; 0x54
 8010464:	ec47 6b10 	vmov	d0, r6, r7
 8010468:	4620      	mov	r0, r4
 801046a:	f001 f9c8 	bl	80117fe <__d2b>
 801046e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010472:	9004      	str	r0, [sp, #16]
 8010474:	2d00      	cmp	r5, #0
 8010476:	d07c      	beq.n	8010572 <_dtoa_r+0x1da>
 8010478:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801047c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8010480:	46b2      	mov	sl, r6
 8010482:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8010486:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801048a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801048e:	2200      	movs	r2, #0
 8010490:	4b8b      	ldr	r3, [pc, #556]	; (80106c0 <_dtoa_r+0x328>)
 8010492:	4650      	mov	r0, sl
 8010494:	4659      	mov	r1, fp
 8010496:	f7f6 faef 	bl	8006a78 <__aeabi_dsub>
 801049a:	a381      	add	r3, pc, #516	; (adr r3, 80106a0 <_dtoa_r+0x308>)
 801049c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a0:	f7f6 fca2 	bl	8006de8 <__aeabi_dmul>
 80104a4:	a380      	add	r3, pc, #512	; (adr r3, 80106a8 <_dtoa_r+0x310>)
 80104a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104aa:	f7f6 fae7 	bl	8006a7c <__adddf3>
 80104ae:	4606      	mov	r6, r0
 80104b0:	4628      	mov	r0, r5
 80104b2:	460f      	mov	r7, r1
 80104b4:	f7f6 fc2e 	bl	8006d14 <__aeabi_i2d>
 80104b8:	a37d      	add	r3, pc, #500	; (adr r3, 80106b0 <_dtoa_r+0x318>)
 80104ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104be:	f7f6 fc93 	bl	8006de8 <__aeabi_dmul>
 80104c2:	4602      	mov	r2, r0
 80104c4:	460b      	mov	r3, r1
 80104c6:	4630      	mov	r0, r6
 80104c8:	4639      	mov	r1, r7
 80104ca:	f7f6 fad7 	bl	8006a7c <__adddf3>
 80104ce:	4606      	mov	r6, r0
 80104d0:	460f      	mov	r7, r1
 80104d2:	f7f6 ff39 	bl	8007348 <__aeabi_d2iz>
 80104d6:	2200      	movs	r2, #0
 80104d8:	4682      	mov	sl, r0
 80104da:	2300      	movs	r3, #0
 80104dc:	4630      	mov	r0, r6
 80104de:	4639      	mov	r1, r7
 80104e0:	f7f6 fef4 	bl	80072cc <__aeabi_dcmplt>
 80104e4:	b148      	cbz	r0, 80104fa <_dtoa_r+0x162>
 80104e6:	4650      	mov	r0, sl
 80104e8:	f7f6 fc14 	bl	8006d14 <__aeabi_i2d>
 80104ec:	4632      	mov	r2, r6
 80104ee:	463b      	mov	r3, r7
 80104f0:	f7f6 fee2 	bl	80072b8 <__aeabi_dcmpeq>
 80104f4:	b908      	cbnz	r0, 80104fa <_dtoa_r+0x162>
 80104f6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80104fa:	f1ba 0f16 	cmp.w	sl, #22
 80104fe:	d859      	bhi.n	80105b4 <_dtoa_r+0x21c>
 8010500:	4970      	ldr	r1, [pc, #448]	; (80106c4 <_dtoa_r+0x32c>)
 8010502:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010506:	e9dd 2300 	ldrd	r2, r3, [sp]
 801050a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801050e:	f7f6 fefb 	bl	8007308 <__aeabi_dcmpgt>
 8010512:	2800      	cmp	r0, #0
 8010514:	d050      	beq.n	80105b8 <_dtoa_r+0x220>
 8010516:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801051a:	2300      	movs	r3, #0
 801051c:	930f      	str	r3, [sp, #60]	; 0x3c
 801051e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010520:	1b5d      	subs	r5, r3, r5
 8010522:	f1b5 0801 	subs.w	r8, r5, #1
 8010526:	bf49      	itett	mi
 8010528:	f1c5 0301 	rsbmi	r3, r5, #1
 801052c:	2300      	movpl	r3, #0
 801052e:	9305      	strmi	r3, [sp, #20]
 8010530:	f04f 0800 	movmi.w	r8, #0
 8010534:	bf58      	it	pl
 8010536:	9305      	strpl	r3, [sp, #20]
 8010538:	f1ba 0f00 	cmp.w	sl, #0
 801053c:	db3e      	blt.n	80105bc <_dtoa_r+0x224>
 801053e:	2300      	movs	r3, #0
 8010540:	44d0      	add	r8, sl
 8010542:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8010546:	9307      	str	r3, [sp, #28]
 8010548:	9b06      	ldr	r3, [sp, #24]
 801054a:	2b09      	cmp	r3, #9
 801054c:	f200 8090 	bhi.w	8010670 <_dtoa_r+0x2d8>
 8010550:	2b05      	cmp	r3, #5
 8010552:	bfc4      	itt	gt
 8010554:	3b04      	subgt	r3, #4
 8010556:	9306      	strgt	r3, [sp, #24]
 8010558:	9b06      	ldr	r3, [sp, #24]
 801055a:	f1a3 0302 	sub.w	r3, r3, #2
 801055e:	bfcc      	ite	gt
 8010560:	2500      	movgt	r5, #0
 8010562:	2501      	movle	r5, #1
 8010564:	2b03      	cmp	r3, #3
 8010566:	f200 808f 	bhi.w	8010688 <_dtoa_r+0x2f0>
 801056a:	e8df f003 	tbb	[pc, r3]
 801056e:	7f7d      	.short	0x7f7d
 8010570:	7131      	.short	0x7131
 8010572:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8010576:	441d      	add	r5, r3
 8010578:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801057c:	2820      	cmp	r0, #32
 801057e:	dd13      	ble.n	80105a8 <_dtoa_r+0x210>
 8010580:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8010584:	9b00      	ldr	r3, [sp, #0]
 8010586:	fa08 f800 	lsl.w	r8, r8, r0
 801058a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801058e:	fa23 f000 	lsr.w	r0, r3, r0
 8010592:	ea48 0000 	orr.w	r0, r8, r0
 8010596:	f7f6 fbad 	bl	8006cf4 <__aeabi_ui2d>
 801059a:	2301      	movs	r3, #1
 801059c:	4682      	mov	sl, r0
 801059e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80105a2:	3d01      	subs	r5, #1
 80105a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80105a6:	e772      	b.n	801048e <_dtoa_r+0xf6>
 80105a8:	9b00      	ldr	r3, [sp, #0]
 80105aa:	f1c0 0020 	rsb	r0, r0, #32
 80105ae:	fa03 f000 	lsl.w	r0, r3, r0
 80105b2:	e7f0      	b.n	8010596 <_dtoa_r+0x1fe>
 80105b4:	2301      	movs	r3, #1
 80105b6:	e7b1      	b.n	801051c <_dtoa_r+0x184>
 80105b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80105ba:	e7b0      	b.n	801051e <_dtoa_r+0x186>
 80105bc:	9b05      	ldr	r3, [sp, #20]
 80105be:	eba3 030a 	sub.w	r3, r3, sl
 80105c2:	9305      	str	r3, [sp, #20]
 80105c4:	f1ca 0300 	rsb	r3, sl, #0
 80105c8:	9307      	str	r3, [sp, #28]
 80105ca:	2300      	movs	r3, #0
 80105cc:	930e      	str	r3, [sp, #56]	; 0x38
 80105ce:	e7bb      	b.n	8010548 <_dtoa_r+0x1b0>
 80105d0:	2301      	movs	r3, #1
 80105d2:	930a      	str	r3, [sp, #40]	; 0x28
 80105d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	dd59      	ble.n	801068e <_dtoa_r+0x2f6>
 80105da:	9302      	str	r3, [sp, #8]
 80105dc:	4699      	mov	r9, r3
 80105de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80105e0:	2200      	movs	r2, #0
 80105e2:	6072      	str	r2, [r6, #4]
 80105e4:	2204      	movs	r2, #4
 80105e6:	f102 0014 	add.w	r0, r2, #20
 80105ea:	4298      	cmp	r0, r3
 80105ec:	6871      	ldr	r1, [r6, #4]
 80105ee:	d953      	bls.n	8010698 <_dtoa_r+0x300>
 80105f0:	4620      	mov	r0, r4
 80105f2:	f000 fe77 	bl	80112e4 <_Balloc>
 80105f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80105f8:	6030      	str	r0, [r6, #0]
 80105fa:	f1b9 0f0e 	cmp.w	r9, #14
 80105fe:	f8d3 b000 	ldr.w	fp, [r3]
 8010602:	f200 80e6 	bhi.w	80107d2 <_dtoa_r+0x43a>
 8010606:	2d00      	cmp	r5, #0
 8010608:	f000 80e3 	beq.w	80107d2 <_dtoa_r+0x43a>
 801060c:	ed9d 7b00 	vldr	d7, [sp]
 8010610:	f1ba 0f00 	cmp.w	sl, #0
 8010614:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8010618:	dd74      	ble.n	8010704 <_dtoa_r+0x36c>
 801061a:	4a2a      	ldr	r2, [pc, #168]	; (80106c4 <_dtoa_r+0x32c>)
 801061c:	f00a 030f 	and.w	r3, sl, #15
 8010620:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010624:	ed93 7b00 	vldr	d7, [r3]
 8010628:	ea4f 162a 	mov.w	r6, sl, asr #4
 801062c:	06f0      	lsls	r0, r6, #27
 801062e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010632:	d565      	bpl.n	8010700 <_dtoa_r+0x368>
 8010634:	4b24      	ldr	r3, [pc, #144]	; (80106c8 <_dtoa_r+0x330>)
 8010636:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801063a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801063e:	f7f6 fcfd 	bl	800703c <__aeabi_ddiv>
 8010642:	e9cd 0100 	strd	r0, r1, [sp]
 8010646:	f006 060f 	and.w	r6, r6, #15
 801064a:	2503      	movs	r5, #3
 801064c:	4f1e      	ldr	r7, [pc, #120]	; (80106c8 <_dtoa_r+0x330>)
 801064e:	e04c      	b.n	80106ea <_dtoa_r+0x352>
 8010650:	2301      	movs	r3, #1
 8010652:	930a      	str	r3, [sp, #40]	; 0x28
 8010654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010656:	4453      	add	r3, sl
 8010658:	f103 0901 	add.w	r9, r3, #1
 801065c:	9302      	str	r3, [sp, #8]
 801065e:	464b      	mov	r3, r9
 8010660:	2b01      	cmp	r3, #1
 8010662:	bfb8      	it	lt
 8010664:	2301      	movlt	r3, #1
 8010666:	e7ba      	b.n	80105de <_dtoa_r+0x246>
 8010668:	2300      	movs	r3, #0
 801066a:	e7b2      	b.n	80105d2 <_dtoa_r+0x23a>
 801066c:	2300      	movs	r3, #0
 801066e:	e7f0      	b.n	8010652 <_dtoa_r+0x2ba>
 8010670:	2501      	movs	r5, #1
 8010672:	2300      	movs	r3, #0
 8010674:	9306      	str	r3, [sp, #24]
 8010676:	950a      	str	r5, [sp, #40]	; 0x28
 8010678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801067c:	9302      	str	r3, [sp, #8]
 801067e:	4699      	mov	r9, r3
 8010680:	2200      	movs	r2, #0
 8010682:	2312      	movs	r3, #18
 8010684:	920b      	str	r2, [sp, #44]	; 0x2c
 8010686:	e7aa      	b.n	80105de <_dtoa_r+0x246>
 8010688:	2301      	movs	r3, #1
 801068a:	930a      	str	r3, [sp, #40]	; 0x28
 801068c:	e7f4      	b.n	8010678 <_dtoa_r+0x2e0>
 801068e:	2301      	movs	r3, #1
 8010690:	9302      	str	r3, [sp, #8]
 8010692:	4699      	mov	r9, r3
 8010694:	461a      	mov	r2, r3
 8010696:	e7f5      	b.n	8010684 <_dtoa_r+0x2ec>
 8010698:	3101      	adds	r1, #1
 801069a:	6071      	str	r1, [r6, #4]
 801069c:	0052      	lsls	r2, r2, #1
 801069e:	e7a2      	b.n	80105e6 <_dtoa_r+0x24e>
 80106a0:	636f4361 	.word	0x636f4361
 80106a4:	3fd287a7 	.word	0x3fd287a7
 80106a8:	8b60c8b3 	.word	0x8b60c8b3
 80106ac:	3fc68a28 	.word	0x3fc68a28
 80106b0:	509f79fb 	.word	0x509f79fb
 80106b4:	3fd34413 	.word	0x3fd34413
 80106b8:	7ff00000 	.word	0x7ff00000
 80106bc:	080a6f65 	.word	0x080a6f65
 80106c0:	3ff80000 	.word	0x3ff80000
 80106c4:	080a7020 	.word	0x080a7020
 80106c8:	080a6ff8 	.word	0x080a6ff8
 80106cc:	080a6f91 	.word	0x080a6f91
 80106d0:	07f1      	lsls	r1, r6, #31
 80106d2:	d508      	bpl.n	80106e6 <_dtoa_r+0x34e>
 80106d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80106d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106dc:	f7f6 fb84 	bl	8006de8 <__aeabi_dmul>
 80106e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80106e4:	3501      	adds	r5, #1
 80106e6:	1076      	asrs	r6, r6, #1
 80106e8:	3708      	adds	r7, #8
 80106ea:	2e00      	cmp	r6, #0
 80106ec:	d1f0      	bne.n	80106d0 <_dtoa_r+0x338>
 80106ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80106f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106f6:	f7f6 fca1 	bl	800703c <__aeabi_ddiv>
 80106fa:	e9cd 0100 	strd	r0, r1, [sp]
 80106fe:	e01a      	b.n	8010736 <_dtoa_r+0x39e>
 8010700:	2502      	movs	r5, #2
 8010702:	e7a3      	b.n	801064c <_dtoa_r+0x2b4>
 8010704:	f000 80a0 	beq.w	8010848 <_dtoa_r+0x4b0>
 8010708:	f1ca 0600 	rsb	r6, sl, #0
 801070c:	4b9f      	ldr	r3, [pc, #636]	; (801098c <_dtoa_r+0x5f4>)
 801070e:	4fa0      	ldr	r7, [pc, #640]	; (8010990 <_dtoa_r+0x5f8>)
 8010710:	f006 020f 	and.w	r2, r6, #15
 8010714:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801071c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010720:	f7f6 fb62 	bl	8006de8 <__aeabi_dmul>
 8010724:	e9cd 0100 	strd	r0, r1, [sp]
 8010728:	1136      	asrs	r6, r6, #4
 801072a:	2300      	movs	r3, #0
 801072c:	2502      	movs	r5, #2
 801072e:	2e00      	cmp	r6, #0
 8010730:	d17f      	bne.n	8010832 <_dtoa_r+0x49a>
 8010732:	2b00      	cmp	r3, #0
 8010734:	d1e1      	bne.n	80106fa <_dtoa_r+0x362>
 8010736:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010738:	2b00      	cmp	r3, #0
 801073a:	f000 8087 	beq.w	801084c <_dtoa_r+0x4b4>
 801073e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010742:	2200      	movs	r2, #0
 8010744:	4b93      	ldr	r3, [pc, #588]	; (8010994 <_dtoa_r+0x5fc>)
 8010746:	4630      	mov	r0, r6
 8010748:	4639      	mov	r1, r7
 801074a:	f7f6 fdbf 	bl	80072cc <__aeabi_dcmplt>
 801074e:	2800      	cmp	r0, #0
 8010750:	d07c      	beq.n	801084c <_dtoa_r+0x4b4>
 8010752:	f1b9 0f00 	cmp.w	r9, #0
 8010756:	d079      	beq.n	801084c <_dtoa_r+0x4b4>
 8010758:	9b02      	ldr	r3, [sp, #8]
 801075a:	2b00      	cmp	r3, #0
 801075c:	dd35      	ble.n	80107ca <_dtoa_r+0x432>
 801075e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8010762:	9308      	str	r3, [sp, #32]
 8010764:	4639      	mov	r1, r7
 8010766:	2200      	movs	r2, #0
 8010768:	4b8b      	ldr	r3, [pc, #556]	; (8010998 <_dtoa_r+0x600>)
 801076a:	4630      	mov	r0, r6
 801076c:	f7f6 fb3c 	bl	8006de8 <__aeabi_dmul>
 8010770:	e9cd 0100 	strd	r0, r1, [sp]
 8010774:	9f02      	ldr	r7, [sp, #8]
 8010776:	3501      	adds	r5, #1
 8010778:	4628      	mov	r0, r5
 801077a:	f7f6 facb 	bl	8006d14 <__aeabi_i2d>
 801077e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010782:	f7f6 fb31 	bl	8006de8 <__aeabi_dmul>
 8010786:	2200      	movs	r2, #0
 8010788:	4b84      	ldr	r3, [pc, #528]	; (801099c <_dtoa_r+0x604>)
 801078a:	f7f6 f977 	bl	8006a7c <__adddf3>
 801078e:	4605      	mov	r5, r0
 8010790:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010794:	2f00      	cmp	r7, #0
 8010796:	d15d      	bne.n	8010854 <_dtoa_r+0x4bc>
 8010798:	2200      	movs	r2, #0
 801079a:	4b81      	ldr	r3, [pc, #516]	; (80109a0 <_dtoa_r+0x608>)
 801079c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80107a0:	f7f6 f96a 	bl	8006a78 <__aeabi_dsub>
 80107a4:	462a      	mov	r2, r5
 80107a6:	4633      	mov	r3, r6
 80107a8:	e9cd 0100 	strd	r0, r1, [sp]
 80107ac:	f7f6 fdac 	bl	8007308 <__aeabi_dcmpgt>
 80107b0:	2800      	cmp	r0, #0
 80107b2:	f040 8288 	bne.w	8010cc6 <_dtoa_r+0x92e>
 80107b6:	462a      	mov	r2, r5
 80107b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80107bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80107c0:	f7f6 fd84 	bl	80072cc <__aeabi_dcmplt>
 80107c4:	2800      	cmp	r0, #0
 80107c6:	f040 827c 	bne.w	8010cc2 <_dtoa_r+0x92a>
 80107ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80107ce:	e9cd 2300 	strd	r2, r3, [sp]
 80107d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	f2c0 8150 	blt.w	8010a7a <_dtoa_r+0x6e2>
 80107da:	f1ba 0f0e 	cmp.w	sl, #14
 80107de:	f300 814c 	bgt.w	8010a7a <_dtoa_r+0x6e2>
 80107e2:	4b6a      	ldr	r3, [pc, #424]	; (801098c <_dtoa_r+0x5f4>)
 80107e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80107e8:	ed93 7b00 	vldr	d7, [r3]
 80107ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80107f4:	f280 80d8 	bge.w	80109a8 <_dtoa_r+0x610>
 80107f8:	f1b9 0f00 	cmp.w	r9, #0
 80107fc:	f300 80d4 	bgt.w	80109a8 <_dtoa_r+0x610>
 8010800:	f040 825e 	bne.w	8010cc0 <_dtoa_r+0x928>
 8010804:	2200      	movs	r2, #0
 8010806:	4b66      	ldr	r3, [pc, #408]	; (80109a0 <_dtoa_r+0x608>)
 8010808:	ec51 0b17 	vmov	r0, r1, d7
 801080c:	f7f6 faec 	bl	8006de8 <__aeabi_dmul>
 8010810:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010814:	f7f6 fd6e 	bl	80072f4 <__aeabi_dcmpge>
 8010818:	464f      	mov	r7, r9
 801081a:	464e      	mov	r6, r9
 801081c:	2800      	cmp	r0, #0
 801081e:	f040 8234 	bne.w	8010c8a <_dtoa_r+0x8f2>
 8010822:	2331      	movs	r3, #49	; 0x31
 8010824:	f10b 0501 	add.w	r5, fp, #1
 8010828:	f88b 3000 	strb.w	r3, [fp]
 801082c:	f10a 0a01 	add.w	sl, sl, #1
 8010830:	e22f      	b.n	8010c92 <_dtoa_r+0x8fa>
 8010832:	07f2      	lsls	r2, r6, #31
 8010834:	d505      	bpl.n	8010842 <_dtoa_r+0x4aa>
 8010836:	e9d7 2300 	ldrd	r2, r3, [r7]
 801083a:	f7f6 fad5 	bl	8006de8 <__aeabi_dmul>
 801083e:	3501      	adds	r5, #1
 8010840:	2301      	movs	r3, #1
 8010842:	1076      	asrs	r6, r6, #1
 8010844:	3708      	adds	r7, #8
 8010846:	e772      	b.n	801072e <_dtoa_r+0x396>
 8010848:	2502      	movs	r5, #2
 801084a:	e774      	b.n	8010736 <_dtoa_r+0x39e>
 801084c:	f8cd a020 	str.w	sl, [sp, #32]
 8010850:	464f      	mov	r7, r9
 8010852:	e791      	b.n	8010778 <_dtoa_r+0x3e0>
 8010854:	4b4d      	ldr	r3, [pc, #308]	; (801098c <_dtoa_r+0x5f4>)
 8010856:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801085a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801085e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010860:	2b00      	cmp	r3, #0
 8010862:	d047      	beq.n	80108f4 <_dtoa_r+0x55c>
 8010864:	4602      	mov	r2, r0
 8010866:	460b      	mov	r3, r1
 8010868:	2000      	movs	r0, #0
 801086a:	494e      	ldr	r1, [pc, #312]	; (80109a4 <_dtoa_r+0x60c>)
 801086c:	f7f6 fbe6 	bl	800703c <__aeabi_ddiv>
 8010870:	462a      	mov	r2, r5
 8010872:	4633      	mov	r3, r6
 8010874:	f7f6 f900 	bl	8006a78 <__aeabi_dsub>
 8010878:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801087c:	465d      	mov	r5, fp
 801087e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010882:	f7f6 fd61 	bl	8007348 <__aeabi_d2iz>
 8010886:	4606      	mov	r6, r0
 8010888:	f7f6 fa44 	bl	8006d14 <__aeabi_i2d>
 801088c:	4602      	mov	r2, r0
 801088e:	460b      	mov	r3, r1
 8010890:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010894:	f7f6 f8f0 	bl	8006a78 <__aeabi_dsub>
 8010898:	3630      	adds	r6, #48	; 0x30
 801089a:	f805 6b01 	strb.w	r6, [r5], #1
 801089e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80108a2:	e9cd 0100 	strd	r0, r1, [sp]
 80108a6:	f7f6 fd11 	bl	80072cc <__aeabi_dcmplt>
 80108aa:	2800      	cmp	r0, #0
 80108ac:	d163      	bne.n	8010976 <_dtoa_r+0x5de>
 80108ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108b2:	2000      	movs	r0, #0
 80108b4:	4937      	ldr	r1, [pc, #220]	; (8010994 <_dtoa_r+0x5fc>)
 80108b6:	f7f6 f8df 	bl	8006a78 <__aeabi_dsub>
 80108ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80108be:	f7f6 fd05 	bl	80072cc <__aeabi_dcmplt>
 80108c2:	2800      	cmp	r0, #0
 80108c4:	f040 80b7 	bne.w	8010a36 <_dtoa_r+0x69e>
 80108c8:	eba5 030b 	sub.w	r3, r5, fp
 80108cc:	429f      	cmp	r7, r3
 80108ce:	f77f af7c 	ble.w	80107ca <_dtoa_r+0x432>
 80108d2:	2200      	movs	r2, #0
 80108d4:	4b30      	ldr	r3, [pc, #192]	; (8010998 <_dtoa_r+0x600>)
 80108d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80108da:	f7f6 fa85 	bl	8006de8 <__aeabi_dmul>
 80108de:	2200      	movs	r2, #0
 80108e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80108e4:	4b2c      	ldr	r3, [pc, #176]	; (8010998 <_dtoa_r+0x600>)
 80108e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80108ea:	f7f6 fa7d 	bl	8006de8 <__aeabi_dmul>
 80108ee:	e9cd 0100 	strd	r0, r1, [sp]
 80108f2:	e7c4      	b.n	801087e <_dtoa_r+0x4e6>
 80108f4:	462a      	mov	r2, r5
 80108f6:	4633      	mov	r3, r6
 80108f8:	f7f6 fa76 	bl	8006de8 <__aeabi_dmul>
 80108fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010900:	eb0b 0507 	add.w	r5, fp, r7
 8010904:	465e      	mov	r6, fp
 8010906:	e9dd 0100 	ldrd	r0, r1, [sp]
 801090a:	f7f6 fd1d 	bl	8007348 <__aeabi_d2iz>
 801090e:	4607      	mov	r7, r0
 8010910:	f7f6 fa00 	bl	8006d14 <__aeabi_i2d>
 8010914:	3730      	adds	r7, #48	; 0x30
 8010916:	4602      	mov	r2, r0
 8010918:	460b      	mov	r3, r1
 801091a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801091e:	f7f6 f8ab 	bl	8006a78 <__aeabi_dsub>
 8010922:	f806 7b01 	strb.w	r7, [r6], #1
 8010926:	42ae      	cmp	r6, r5
 8010928:	e9cd 0100 	strd	r0, r1, [sp]
 801092c:	f04f 0200 	mov.w	r2, #0
 8010930:	d126      	bne.n	8010980 <_dtoa_r+0x5e8>
 8010932:	4b1c      	ldr	r3, [pc, #112]	; (80109a4 <_dtoa_r+0x60c>)
 8010934:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010938:	f7f6 f8a0 	bl	8006a7c <__adddf3>
 801093c:	4602      	mov	r2, r0
 801093e:	460b      	mov	r3, r1
 8010940:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010944:	f7f6 fce0 	bl	8007308 <__aeabi_dcmpgt>
 8010948:	2800      	cmp	r0, #0
 801094a:	d174      	bne.n	8010a36 <_dtoa_r+0x69e>
 801094c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010950:	2000      	movs	r0, #0
 8010952:	4914      	ldr	r1, [pc, #80]	; (80109a4 <_dtoa_r+0x60c>)
 8010954:	f7f6 f890 	bl	8006a78 <__aeabi_dsub>
 8010958:	4602      	mov	r2, r0
 801095a:	460b      	mov	r3, r1
 801095c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010960:	f7f6 fcb4 	bl	80072cc <__aeabi_dcmplt>
 8010964:	2800      	cmp	r0, #0
 8010966:	f43f af30 	beq.w	80107ca <_dtoa_r+0x432>
 801096a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801096e:	2b30      	cmp	r3, #48	; 0x30
 8010970:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010974:	d002      	beq.n	801097c <_dtoa_r+0x5e4>
 8010976:	f8dd a020 	ldr.w	sl, [sp, #32]
 801097a:	e04a      	b.n	8010a12 <_dtoa_r+0x67a>
 801097c:	4615      	mov	r5, r2
 801097e:	e7f4      	b.n	801096a <_dtoa_r+0x5d2>
 8010980:	4b05      	ldr	r3, [pc, #20]	; (8010998 <_dtoa_r+0x600>)
 8010982:	f7f6 fa31 	bl	8006de8 <__aeabi_dmul>
 8010986:	e9cd 0100 	strd	r0, r1, [sp]
 801098a:	e7bc      	b.n	8010906 <_dtoa_r+0x56e>
 801098c:	080a7020 	.word	0x080a7020
 8010990:	080a6ff8 	.word	0x080a6ff8
 8010994:	3ff00000 	.word	0x3ff00000
 8010998:	40240000 	.word	0x40240000
 801099c:	401c0000 	.word	0x401c0000
 80109a0:	40140000 	.word	0x40140000
 80109a4:	3fe00000 	.word	0x3fe00000
 80109a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80109ac:	465d      	mov	r5, fp
 80109ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80109b2:	4630      	mov	r0, r6
 80109b4:	4639      	mov	r1, r7
 80109b6:	f7f6 fb41 	bl	800703c <__aeabi_ddiv>
 80109ba:	f7f6 fcc5 	bl	8007348 <__aeabi_d2iz>
 80109be:	4680      	mov	r8, r0
 80109c0:	f7f6 f9a8 	bl	8006d14 <__aeabi_i2d>
 80109c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80109c8:	f7f6 fa0e 	bl	8006de8 <__aeabi_dmul>
 80109cc:	4602      	mov	r2, r0
 80109ce:	460b      	mov	r3, r1
 80109d0:	4630      	mov	r0, r6
 80109d2:	4639      	mov	r1, r7
 80109d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80109d8:	f7f6 f84e 	bl	8006a78 <__aeabi_dsub>
 80109dc:	f805 6b01 	strb.w	r6, [r5], #1
 80109e0:	eba5 060b 	sub.w	r6, r5, fp
 80109e4:	45b1      	cmp	r9, r6
 80109e6:	4602      	mov	r2, r0
 80109e8:	460b      	mov	r3, r1
 80109ea:	d139      	bne.n	8010a60 <_dtoa_r+0x6c8>
 80109ec:	f7f6 f846 	bl	8006a7c <__adddf3>
 80109f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80109f4:	4606      	mov	r6, r0
 80109f6:	460f      	mov	r7, r1
 80109f8:	f7f6 fc86 	bl	8007308 <__aeabi_dcmpgt>
 80109fc:	b9c8      	cbnz	r0, 8010a32 <_dtoa_r+0x69a>
 80109fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a02:	4630      	mov	r0, r6
 8010a04:	4639      	mov	r1, r7
 8010a06:	f7f6 fc57 	bl	80072b8 <__aeabi_dcmpeq>
 8010a0a:	b110      	cbz	r0, 8010a12 <_dtoa_r+0x67a>
 8010a0c:	f018 0f01 	tst.w	r8, #1
 8010a10:	d10f      	bne.n	8010a32 <_dtoa_r+0x69a>
 8010a12:	9904      	ldr	r1, [sp, #16]
 8010a14:	4620      	mov	r0, r4
 8010a16:	f000 fc99 	bl	801134c <_Bfree>
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010a1e:	702b      	strb	r3, [r5, #0]
 8010a20:	f10a 0301 	add.w	r3, sl, #1
 8010a24:	6013      	str	r3, [r2, #0]
 8010a26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	f000 8241 	beq.w	8010eb0 <_dtoa_r+0xb18>
 8010a2e:	601d      	str	r5, [r3, #0]
 8010a30:	e23e      	b.n	8010eb0 <_dtoa_r+0xb18>
 8010a32:	f8cd a020 	str.w	sl, [sp, #32]
 8010a36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010a3a:	2a39      	cmp	r2, #57	; 0x39
 8010a3c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8010a40:	d108      	bne.n	8010a54 <_dtoa_r+0x6bc>
 8010a42:	459b      	cmp	fp, r3
 8010a44:	d10a      	bne.n	8010a5c <_dtoa_r+0x6c4>
 8010a46:	9b08      	ldr	r3, [sp, #32]
 8010a48:	3301      	adds	r3, #1
 8010a4a:	9308      	str	r3, [sp, #32]
 8010a4c:	2330      	movs	r3, #48	; 0x30
 8010a4e:	f88b 3000 	strb.w	r3, [fp]
 8010a52:	465b      	mov	r3, fp
 8010a54:	781a      	ldrb	r2, [r3, #0]
 8010a56:	3201      	adds	r2, #1
 8010a58:	701a      	strb	r2, [r3, #0]
 8010a5a:	e78c      	b.n	8010976 <_dtoa_r+0x5de>
 8010a5c:	461d      	mov	r5, r3
 8010a5e:	e7ea      	b.n	8010a36 <_dtoa_r+0x69e>
 8010a60:	2200      	movs	r2, #0
 8010a62:	4b9b      	ldr	r3, [pc, #620]	; (8010cd0 <_dtoa_r+0x938>)
 8010a64:	f7f6 f9c0 	bl	8006de8 <__aeabi_dmul>
 8010a68:	2200      	movs	r2, #0
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	4606      	mov	r6, r0
 8010a6e:	460f      	mov	r7, r1
 8010a70:	f7f6 fc22 	bl	80072b8 <__aeabi_dcmpeq>
 8010a74:	2800      	cmp	r0, #0
 8010a76:	d09a      	beq.n	80109ae <_dtoa_r+0x616>
 8010a78:	e7cb      	b.n	8010a12 <_dtoa_r+0x67a>
 8010a7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a7c:	2a00      	cmp	r2, #0
 8010a7e:	f000 808b 	beq.w	8010b98 <_dtoa_r+0x800>
 8010a82:	9a06      	ldr	r2, [sp, #24]
 8010a84:	2a01      	cmp	r2, #1
 8010a86:	dc6e      	bgt.n	8010b66 <_dtoa_r+0x7ce>
 8010a88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010a8a:	2a00      	cmp	r2, #0
 8010a8c:	d067      	beq.n	8010b5e <_dtoa_r+0x7c6>
 8010a8e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010a92:	9f07      	ldr	r7, [sp, #28]
 8010a94:	9d05      	ldr	r5, [sp, #20]
 8010a96:	9a05      	ldr	r2, [sp, #20]
 8010a98:	2101      	movs	r1, #1
 8010a9a:	441a      	add	r2, r3
 8010a9c:	4620      	mov	r0, r4
 8010a9e:	9205      	str	r2, [sp, #20]
 8010aa0:	4498      	add	r8, r3
 8010aa2:	f000 fcf3 	bl	801148c <__i2b>
 8010aa6:	4606      	mov	r6, r0
 8010aa8:	2d00      	cmp	r5, #0
 8010aaa:	dd0c      	ble.n	8010ac6 <_dtoa_r+0x72e>
 8010aac:	f1b8 0f00 	cmp.w	r8, #0
 8010ab0:	dd09      	ble.n	8010ac6 <_dtoa_r+0x72e>
 8010ab2:	4545      	cmp	r5, r8
 8010ab4:	9a05      	ldr	r2, [sp, #20]
 8010ab6:	462b      	mov	r3, r5
 8010ab8:	bfa8      	it	ge
 8010aba:	4643      	movge	r3, r8
 8010abc:	1ad2      	subs	r2, r2, r3
 8010abe:	9205      	str	r2, [sp, #20]
 8010ac0:	1aed      	subs	r5, r5, r3
 8010ac2:	eba8 0803 	sub.w	r8, r8, r3
 8010ac6:	9b07      	ldr	r3, [sp, #28]
 8010ac8:	b1eb      	cbz	r3, 8010b06 <_dtoa_r+0x76e>
 8010aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d067      	beq.n	8010ba0 <_dtoa_r+0x808>
 8010ad0:	b18f      	cbz	r7, 8010af6 <_dtoa_r+0x75e>
 8010ad2:	4631      	mov	r1, r6
 8010ad4:	463a      	mov	r2, r7
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f000 fd78 	bl	80115cc <__pow5mult>
 8010adc:	9a04      	ldr	r2, [sp, #16]
 8010ade:	4601      	mov	r1, r0
 8010ae0:	4606      	mov	r6, r0
 8010ae2:	4620      	mov	r0, r4
 8010ae4:	f000 fcdb 	bl	801149e <__multiply>
 8010ae8:	9904      	ldr	r1, [sp, #16]
 8010aea:	9008      	str	r0, [sp, #32]
 8010aec:	4620      	mov	r0, r4
 8010aee:	f000 fc2d 	bl	801134c <_Bfree>
 8010af2:	9b08      	ldr	r3, [sp, #32]
 8010af4:	9304      	str	r3, [sp, #16]
 8010af6:	9b07      	ldr	r3, [sp, #28]
 8010af8:	1bda      	subs	r2, r3, r7
 8010afa:	d004      	beq.n	8010b06 <_dtoa_r+0x76e>
 8010afc:	9904      	ldr	r1, [sp, #16]
 8010afe:	4620      	mov	r0, r4
 8010b00:	f000 fd64 	bl	80115cc <__pow5mult>
 8010b04:	9004      	str	r0, [sp, #16]
 8010b06:	2101      	movs	r1, #1
 8010b08:	4620      	mov	r0, r4
 8010b0a:	f000 fcbf 	bl	801148c <__i2b>
 8010b0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b10:	4607      	mov	r7, r0
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	f000 81d0 	beq.w	8010eb8 <_dtoa_r+0xb20>
 8010b18:	461a      	mov	r2, r3
 8010b1a:	4601      	mov	r1, r0
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	f000 fd55 	bl	80115cc <__pow5mult>
 8010b22:	9b06      	ldr	r3, [sp, #24]
 8010b24:	2b01      	cmp	r3, #1
 8010b26:	4607      	mov	r7, r0
 8010b28:	dc40      	bgt.n	8010bac <_dtoa_r+0x814>
 8010b2a:	9b00      	ldr	r3, [sp, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d139      	bne.n	8010ba4 <_dtoa_r+0x80c>
 8010b30:	9b01      	ldr	r3, [sp, #4]
 8010b32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d136      	bne.n	8010ba8 <_dtoa_r+0x810>
 8010b3a:	9b01      	ldr	r3, [sp, #4]
 8010b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010b40:	0d1b      	lsrs	r3, r3, #20
 8010b42:	051b      	lsls	r3, r3, #20
 8010b44:	b12b      	cbz	r3, 8010b52 <_dtoa_r+0x7ba>
 8010b46:	9b05      	ldr	r3, [sp, #20]
 8010b48:	3301      	adds	r3, #1
 8010b4a:	9305      	str	r3, [sp, #20]
 8010b4c:	f108 0801 	add.w	r8, r8, #1
 8010b50:	2301      	movs	r3, #1
 8010b52:	9307      	str	r3, [sp, #28]
 8010b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d12a      	bne.n	8010bb0 <_dtoa_r+0x818>
 8010b5a:	2001      	movs	r0, #1
 8010b5c:	e030      	b.n	8010bc0 <_dtoa_r+0x828>
 8010b5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010b60:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010b64:	e795      	b.n	8010a92 <_dtoa_r+0x6fa>
 8010b66:	9b07      	ldr	r3, [sp, #28]
 8010b68:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8010b6c:	42bb      	cmp	r3, r7
 8010b6e:	bfbf      	itttt	lt
 8010b70:	9b07      	ldrlt	r3, [sp, #28]
 8010b72:	9707      	strlt	r7, [sp, #28]
 8010b74:	1afa      	sublt	r2, r7, r3
 8010b76:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010b78:	bfbb      	ittet	lt
 8010b7a:	189b      	addlt	r3, r3, r2
 8010b7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010b7e:	1bdf      	subge	r7, r3, r7
 8010b80:	2700      	movlt	r7, #0
 8010b82:	f1b9 0f00 	cmp.w	r9, #0
 8010b86:	bfb5      	itete	lt
 8010b88:	9b05      	ldrlt	r3, [sp, #20]
 8010b8a:	9d05      	ldrge	r5, [sp, #20]
 8010b8c:	eba3 0509 	sublt.w	r5, r3, r9
 8010b90:	464b      	movge	r3, r9
 8010b92:	bfb8      	it	lt
 8010b94:	2300      	movlt	r3, #0
 8010b96:	e77e      	b.n	8010a96 <_dtoa_r+0x6fe>
 8010b98:	9f07      	ldr	r7, [sp, #28]
 8010b9a:	9d05      	ldr	r5, [sp, #20]
 8010b9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010b9e:	e783      	b.n	8010aa8 <_dtoa_r+0x710>
 8010ba0:	9a07      	ldr	r2, [sp, #28]
 8010ba2:	e7ab      	b.n	8010afc <_dtoa_r+0x764>
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	e7d4      	b.n	8010b52 <_dtoa_r+0x7ba>
 8010ba8:	9b00      	ldr	r3, [sp, #0]
 8010baa:	e7d2      	b.n	8010b52 <_dtoa_r+0x7ba>
 8010bac:	2300      	movs	r3, #0
 8010bae:	9307      	str	r3, [sp, #28]
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8010bb6:	6918      	ldr	r0, [r3, #16]
 8010bb8:	f000 fc1a 	bl	80113f0 <__hi0bits>
 8010bbc:	f1c0 0020 	rsb	r0, r0, #32
 8010bc0:	4440      	add	r0, r8
 8010bc2:	f010 001f 	ands.w	r0, r0, #31
 8010bc6:	d047      	beq.n	8010c58 <_dtoa_r+0x8c0>
 8010bc8:	f1c0 0320 	rsb	r3, r0, #32
 8010bcc:	2b04      	cmp	r3, #4
 8010bce:	dd3b      	ble.n	8010c48 <_dtoa_r+0x8b0>
 8010bd0:	9b05      	ldr	r3, [sp, #20]
 8010bd2:	f1c0 001c 	rsb	r0, r0, #28
 8010bd6:	4403      	add	r3, r0
 8010bd8:	9305      	str	r3, [sp, #20]
 8010bda:	4405      	add	r5, r0
 8010bdc:	4480      	add	r8, r0
 8010bde:	9b05      	ldr	r3, [sp, #20]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	dd05      	ble.n	8010bf0 <_dtoa_r+0x858>
 8010be4:	461a      	mov	r2, r3
 8010be6:	9904      	ldr	r1, [sp, #16]
 8010be8:	4620      	mov	r0, r4
 8010bea:	f000 fd3d 	bl	8011668 <__lshift>
 8010bee:	9004      	str	r0, [sp, #16]
 8010bf0:	f1b8 0f00 	cmp.w	r8, #0
 8010bf4:	dd05      	ble.n	8010c02 <_dtoa_r+0x86a>
 8010bf6:	4639      	mov	r1, r7
 8010bf8:	4642      	mov	r2, r8
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	f000 fd34 	bl	8011668 <__lshift>
 8010c00:	4607      	mov	r7, r0
 8010c02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c04:	b353      	cbz	r3, 8010c5c <_dtoa_r+0x8c4>
 8010c06:	4639      	mov	r1, r7
 8010c08:	9804      	ldr	r0, [sp, #16]
 8010c0a:	f000 fd81 	bl	8011710 <__mcmp>
 8010c0e:	2800      	cmp	r0, #0
 8010c10:	da24      	bge.n	8010c5c <_dtoa_r+0x8c4>
 8010c12:	2300      	movs	r3, #0
 8010c14:	220a      	movs	r2, #10
 8010c16:	9904      	ldr	r1, [sp, #16]
 8010c18:	4620      	mov	r0, r4
 8010c1a:	f000 fbae 	bl	801137a <__multadd>
 8010c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c20:	9004      	str	r0, [sp, #16]
 8010c22:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	f000 814d 	beq.w	8010ec6 <_dtoa_r+0xb2e>
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	4631      	mov	r1, r6
 8010c30:	220a      	movs	r2, #10
 8010c32:	4620      	mov	r0, r4
 8010c34:	f000 fba1 	bl	801137a <__multadd>
 8010c38:	9b02      	ldr	r3, [sp, #8]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	4606      	mov	r6, r0
 8010c3e:	dc4f      	bgt.n	8010ce0 <_dtoa_r+0x948>
 8010c40:	9b06      	ldr	r3, [sp, #24]
 8010c42:	2b02      	cmp	r3, #2
 8010c44:	dd4c      	ble.n	8010ce0 <_dtoa_r+0x948>
 8010c46:	e011      	b.n	8010c6c <_dtoa_r+0x8d4>
 8010c48:	d0c9      	beq.n	8010bde <_dtoa_r+0x846>
 8010c4a:	9a05      	ldr	r2, [sp, #20]
 8010c4c:	331c      	adds	r3, #28
 8010c4e:	441a      	add	r2, r3
 8010c50:	9205      	str	r2, [sp, #20]
 8010c52:	441d      	add	r5, r3
 8010c54:	4498      	add	r8, r3
 8010c56:	e7c2      	b.n	8010bde <_dtoa_r+0x846>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	e7f6      	b.n	8010c4a <_dtoa_r+0x8b2>
 8010c5c:	f1b9 0f00 	cmp.w	r9, #0
 8010c60:	dc38      	bgt.n	8010cd4 <_dtoa_r+0x93c>
 8010c62:	9b06      	ldr	r3, [sp, #24]
 8010c64:	2b02      	cmp	r3, #2
 8010c66:	dd35      	ble.n	8010cd4 <_dtoa_r+0x93c>
 8010c68:	f8cd 9008 	str.w	r9, [sp, #8]
 8010c6c:	9b02      	ldr	r3, [sp, #8]
 8010c6e:	b963      	cbnz	r3, 8010c8a <_dtoa_r+0x8f2>
 8010c70:	4639      	mov	r1, r7
 8010c72:	2205      	movs	r2, #5
 8010c74:	4620      	mov	r0, r4
 8010c76:	f000 fb80 	bl	801137a <__multadd>
 8010c7a:	4601      	mov	r1, r0
 8010c7c:	4607      	mov	r7, r0
 8010c7e:	9804      	ldr	r0, [sp, #16]
 8010c80:	f000 fd46 	bl	8011710 <__mcmp>
 8010c84:	2800      	cmp	r0, #0
 8010c86:	f73f adcc 	bgt.w	8010822 <_dtoa_r+0x48a>
 8010c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c8c:	465d      	mov	r5, fp
 8010c8e:	ea6f 0a03 	mvn.w	sl, r3
 8010c92:	f04f 0900 	mov.w	r9, #0
 8010c96:	4639      	mov	r1, r7
 8010c98:	4620      	mov	r0, r4
 8010c9a:	f000 fb57 	bl	801134c <_Bfree>
 8010c9e:	2e00      	cmp	r6, #0
 8010ca0:	f43f aeb7 	beq.w	8010a12 <_dtoa_r+0x67a>
 8010ca4:	f1b9 0f00 	cmp.w	r9, #0
 8010ca8:	d005      	beq.n	8010cb6 <_dtoa_r+0x91e>
 8010caa:	45b1      	cmp	r9, r6
 8010cac:	d003      	beq.n	8010cb6 <_dtoa_r+0x91e>
 8010cae:	4649      	mov	r1, r9
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	f000 fb4b 	bl	801134c <_Bfree>
 8010cb6:	4631      	mov	r1, r6
 8010cb8:	4620      	mov	r0, r4
 8010cba:	f000 fb47 	bl	801134c <_Bfree>
 8010cbe:	e6a8      	b.n	8010a12 <_dtoa_r+0x67a>
 8010cc0:	2700      	movs	r7, #0
 8010cc2:	463e      	mov	r6, r7
 8010cc4:	e7e1      	b.n	8010c8a <_dtoa_r+0x8f2>
 8010cc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010cca:	463e      	mov	r6, r7
 8010ccc:	e5a9      	b.n	8010822 <_dtoa_r+0x48a>
 8010cce:	bf00      	nop
 8010cd0:	40240000 	.word	0x40240000
 8010cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cd6:	f8cd 9008 	str.w	r9, [sp, #8]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	f000 80fa 	beq.w	8010ed4 <_dtoa_r+0xb3c>
 8010ce0:	2d00      	cmp	r5, #0
 8010ce2:	dd05      	ble.n	8010cf0 <_dtoa_r+0x958>
 8010ce4:	4631      	mov	r1, r6
 8010ce6:	462a      	mov	r2, r5
 8010ce8:	4620      	mov	r0, r4
 8010cea:	f000 fcbd 	bl	8011668 <__lshift>
 8010cee:	4606      	mov	r6, r0
 8010cf0:	9b07      	ldr	r3, [sp, #28]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d04c      	beq.n	8010d90 <_dtoa_r+0x9f8>
 8010cf6:	6871      	ldr	r1, [r6, #4]
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	f000 faf3 	bl	80112e4 <_Balloc>
 8010cfe:	6932      	ldr	r2, [r6, #16]
 8010d00:	3202      	adds	r2, #2
 8010d02:	4605      	mov	r5, r0
 8010d04:	0092      	lsls	r2, r2, #2
 8010d06:	f106 010c 	add.w	r1, r6, #12
 8010d0a:	300c      	adds	r0, #12
 8010d0c:	f7fe fca3 	bl	800f656 <memcpy>
 8010d10:	2201      	movs	r2, #1
 8010d12:	4629      	mov	r1, r5
 8010d14:	4620      	mov	r0, r4
 8010d16:	f000 fca7 	bl	8011668 <__lshift>
 8010d1a:	9b00      	ldr	r3, [sp, #0]
 8010d1c:	f8cd b014 	str.w	fp, [sp, #20]
 8010d20:	f003 0301 	and.w	r3, r3, #1
 8010d24:	46b1      	mov	r9, r6
 8010d26:	9307      	str	r3, [sp, #28]
 8010d28:	4606      	mov	r6, r0
 8010d2a:	4639      	mov	r1, r7
 8010d2c:	9804      	ldr	r0, [sp, #16]
 8010d2e:	f7ff faa7 	bl	8010280 <quorem>
 8010d32:	4649      	mov	r1, r9
 8010d34:	4605      	mov	r5, r0
 8010d36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010d3a:	9804      	ldr	r0, [sp, #16]
 8010d3c:	f000 fce8 	bl	8011710 <__mcmp>
 8010d40:	4632      	mov	r2, r6
 8010d42:	9000      	str	r0, [sp, #0]
 8010d44:	4639      	mov	r1, r7
 8010d46:	4620      	mov	r0, r4
 8010d48:	f000 fcfc 	bl	8011744 <__mdiff>
 8010d4c:	68c3      	ldr	r3, [r0, #12]
 8010d4e:	4602      	mov	r2, r0
 8010d50:	bb03      	cbnz	r3, 8010d94 <_dtoa_r+0x9fc>
 8010d52:	4601      	mov	r1, r0
 8010d54:	9008      	str	r0, [sp, #32]
 8010d56:	9804      	ldr	r0, [sp, #16]
 8010d58:	f000 fcda 	bl	8011710 <__mcmp>
 8010d5c:	9a08      	ldr	r2, [sp, #32]
 8010d5e:	4603      	mov	r3, r0
 8010d60:	4611      	mov	r1, r2
 8010d62:	4620      	mov	r0, r4
 8010d64:	9308      	str	r3, [sp, #32]
 8010d66:	f000 faf1 	bl	801134c <_Bfree>
 8010d6a:	9b08      	ldr	r3, [sp, #32]
 8010d6c:	b9a3      	cbnz	r3, 8010d98 <_dtoa_r+0xa00>
 8010d6e:	9a06      	ldr	r2, [sp, #24]
 8010d70:	b992      	cbnz	r2, 8010d98 <_dtoa_r+0xa00>
 8010d72:	9a07      	ldr	r2, [sp, #28]
 8010d74:	b982      	cbnz	r2, 8010d98 <_dtoa_r+0xa00>
 8010d76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010d7a:	d029      	beq.n	8010dd0 <_dtoa_r+0xa38>
 8010d7c:	9b00      	ldr	r3, [sp, #0]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	dd01      	ble.n	8010d86 <_dtoa_r+0x9ee>
 8010d82:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8010d86:	9b05      	ldr	r3, [sp, #20]
 8010d88:	1c5d      	adds	r5, r3, #1
 8010d8a:	f883 8000 	strb.w	r8, [r3]
 8010d8e:	e782      	b.n	8010c96 <_dtoa_r+0x8fe>
 8010d90:	4630      	mov	r0, r6
 8010d92:	e7c2      	b.n	8010d1a <_dtoa_r+0x982>
 8010d94:	2301      	movs	r3, #1
 8010d96:	e7e3      	b.n	8010d60 <_dtoa_r+0x9c8>
 8010d98:	9a00      	ldr	r2, [sp, #0]
 8010d9a:	2a00      	cmp	r2, #0
 8010d9c:	db04      	blt.n	8010da8 <_dtoa_r+0xa10>
 8010d9e:	d125      	bne.n	8010dec <_dtoa_r+0xa54>
 8010da0:	9a06      	ldr	r2, [sp, #24]
 8010da2:	bb1a      	cbnz	r2, 8010dec <_dtoa_r+0xa54>
 8010da4:	9a07      	ldr	r2, [sp, #28]
 8010da6:	bb0a      	cbnz	r2, 8010dec <_dtoa_r+0xa54>
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	ddec      	ble.n	8010d86 <_dtoa_r+0x9ee>
 8010dac:	2201      	movs	r2, #1
 8010dae:	9904      	ldr	r1, [sp, #16]
 8010db0:	4620      	mov	r0, r4
 8010db2:	f000 fc59 	bl	8011668 <__lshift>
 8010db6:	4639      	mov	r1, r7
 8010db8:	9004      	str	r0, [sp, #16]
 8010dba:	f000 fca9 	bl	8011710 <__mcmp>
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	dc03      	bgt.n	8010dca <_dtoa_r+0xa32>
 8010dc2:	d1e0      	bne.n	8010d86 <_dtoa_r+0x9ee>
 8010dc4:	f018 0f01 	tst.w	r8, #1
 8010dc8:	d0dd      	beq.n	8010d86 <_dtoa_r+0x9ee>
 8010dca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010dce:	d1d8      	bne.n	8010d82 <_dtoa_r+0x9ea>
 8010dd0:	9b05      	ldr	r3, [sp, #20]
 8010dd2:	9a05      	ldr	r2, [sp, #20]
 8010dd4:	1c5d      	adds	r5, r3, #1
 8010dd6:	2339      	movs	r3, #57	; 0x39
 8010dd8:	7013      	strb	r3, [r2, #0]
 8010dda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010dde:	2b39      	cmp	r3, #57	; 0x39
 8010de0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010de4:	d04f      	beq.n	8010e86 <_dtoa_r+0xaee>
 8010de6:	3301      	adds	r3, #1
 8010de8:	7013      	strb	r3, [r2, #0]
 8010dea:	e754      	b.n	8010c96 <_dtoa_r+0x8fe>
 8010dec:	9a05      	ldr	r2, [sp, #20]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	f102 0501 	add.w	r5, r2, #1
 8010df4:	dd06      	ble.n	8010e04 <_dtoa_r+0xa6c>
 8010df6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010dfa:	d0e9      	beq.n	8010dd0 <_dtoa_r+0xa38>
 8010dfc:	f108 0801 	add.w	r8, r8, #1
 8010e00:	9b05      	ldr	r3, [sp, #20]
 8010e02:	e7c2      	b.n	8010d8a <_dtoa_r+0x9f2>
 8010e04:	9a02      	ldr	r2, [sp, #8]
 8010e06:	f805 8c01 	strb.w	r8, [r5, #-1]
 8010e0a:	eba5 030b 	sub.w	r3, r5, fp
 8010e0e:	4293      	cmp	r3, r2
 8010e10:	d021      	beq.n	8010e56 <_dtoa_r+0xabe>
 8010e12:	2300      	movs	r3, #0
 8010e14:	220a      	movs	r2, #10
 8010e16:	9904      	ldr	r1, [sp, #16]
 8010e18:	4620      	mov	r0, r4
 8010e1a:	f000 faae 	bl	801137a <__multadd>
 8010e1e:	45b1      	cmp	r9, r6
 8010e20:	9004      	str	r0, [sp, #16]
 8010e22:	f04f 0300 	mov.w	r3, #0
 8010e26:	f04f 020a 	mov.w	r2, #10
 8010e2a:	4649      	mov	r1, r9
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	d105      	bne.n	8010e3c <_dtoa_r+0xaa4>
 8010e30:	f000 faa3 	bl	801137a <__multadd>
 8010e34:	4681      	mov	r9, r0
 8010e36:	4606      	mov	r6, r0
 8010e38:	9505      	str	r5, [sp, #20]
 8010e3a:	e776      	b.n	8010d2a <_dtoa_r+0x992>
 8010e3c:	f000 fa9d 	bl	801137a <__multadd>
 8010e40:	4631      	mov	r1, r6
 8010e42:	4681      	mov	r9, r0
 8010e44:	2300      	movs	r3, #0
 8010e46:	220a      	movs	r2, #10
 8010e48:	4620      	mov	r0, r4
 8010e4a:	f000 fa96 	bl	801137a <__multadd>
 8010e4e:	4606      	mov	r6, r0
 8010e50:	e7f2      	b.n	8010e38 <_dtoa_r+0xaa0>
 8010e52:	f04f 0900 	mov.w	r9, #0
 8010e56:	2201      	movs	r2, #1
 8010e58:	9904      	ldr	r1, [sp, #16]
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	f000 fc04 	bl	8011668 <__lshift>
 8010e60:	4639      	mov	r1, r7
 8010e62:	9004      	str	r0, [sp, #16]
 8010e64:	f000 fc54 	bl	8011710 <__mcmp>
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	dcb6      	bgt.n	8010dda <_dtoa_r+0xa42>
 8010e6c:	d102      	bne.n	8010e74 <_dtoa_r+0xadc>
 8010e6e:	f018 0f01 	tst.w	r8, #1
 8010e72:	d1b2      	bne.n	8010dda <_dtoa_r+0xa42>
 8010e74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010e78:	2b30      	cmp	r3, #48	; 0x30
 8010e7a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010e7e:	f47f af0a 	bne.w	8010c96 <_dtoa_r+0x8fe>
 8010e82:	4615      	mov	r5, r2
 8010e84:	e7f6      	b.n	8010e74 <_dtoa_r+0xadc>
 8010e86:	4593      	cmp	fp, r2
 8010e88:	d105      	bne.n	8010e96 <_dtoa_r+0xafe>
 8010e8a:	2331      	movs	r3, #49	; 0x31
 8010e8c:	f10a 0a01 	add.w	sl, sl, #1
 8010e90:	f88b 3000 	strb.w	r3, [fp]
 8010e94:	e6ff      	b.n	8010c96 <_dtoa_r+0x8fe>
 8010e96:	4615      	mov	r5, r2
 8010e98:	e79f      	b.n	8010dda <_dtoa_r+0xa42>
 8010e9a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010f00 <_dtoa_r+0xb68>
 8010e9e:	e007      	b.n	8010eb0 <_dtoa_r+0xb18>
 8010ea0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ea2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010f04 <_dtoa_r+0xb6c>
 8010ea6:	b11b      	cbz	r3, 8010eb0 <_dtoa_r+0xb18>
 8010ea8:	f10b 0308 	add.w	r3, fp, #8
 8010eac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010eae:	6013      	str	r3, [r2, #0]
 8010eb0:	4658      	mov	r0, fp
 8010eb2:	b017      	add	sp, #92	; 0x5c
 8010eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eb8:	9b06      	ldr	r3, [sp, #24]
 8010eba:	2b01      	cmp	r3, #1
 8010ebc:	f77f ae35 	ble.w	8010b2a <_dtoa_r+0x792>
 8010ec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ec2:	9307      	str	r3, [sp, #28]
 8010ec4:	e649      	b.n	8010b5a <_dtoa_r+0x7c2>
 8010ec6:	9b02      	ldr	r3, [sp, #8]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	dc03      	bgt.n	8010ed4 <_dtoa_r+0xb3c>
 8010ecc:	9b06      	ldr	r3, [sp, #24]
 8010ece:	2b02      	cmp	r3, #2
 8010ed0:	f73f aecc 	bgt.w	8010c6c <_dtoa_r+0x8d4>
 8010ed4:	465d      	mov	r5, fp
 8010ed6:	4639      	mov	r1, r7
 8010ed8:	9804      	ldr	r0, [sp, #16]
 8010eda:	f7ff f9d1 	bl	8010280 <quorem>
 8010ede:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010ee2:	f805 8b01 	strb.w	r8, [r5], #1
 8010ee6:	9a02      	ldr	r2, [sp, #8]
 8010ee8:	eba5 030b 	sub.w	r3, r5, fp
 8010eec:	429a      	cmp	r2, r3
 8010eee:	ddb0      	ble.n	8010e52 <_dtoa_r+0xaba>
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	220a      	movs	r2, #10
 8010ef4:	9904      	ldr	r1, [sp, #16]
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f000 fa3f 	bl	801137a <__multadd>
 8010efc:	9004      	str	r0, [sp, #16]
 8010efe:	e7ea      	b.n	8010ed6 <_dtoa_r+0xb3e>
 8010f00:	080a6f64 	.word	0x080a6f64
 8010f04:	080a6f88 	.word	0x080a6f88

08010f08 <__sflush_r>:
 8010f08:	898a      	ldrh	r2, [r1, #12]
 8010f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f0e:	4605      	mov	r5, r0
 8010f10:	0710      	lsls	r0, r2, #28
 8010f12:	460c      	mov	r4, r1
 8010f14:	d458      	bmi.n	8010fc8 <__sflush_r+0xc0>
 8010f16:	684b      	ldr	r3, [r1, #4]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	dc05      	bgt.n	8010f28 <__sflush_r+0x20>
 8010f1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	dc02      	bgt.n	8010f28 <__sflush_r+0x20>
 8010f22:	2000      	movs	r0, #0
 8010f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f2a:	2e00      	cmp	r6, #0
 8010f2c:	d0f9      	beq.n	8010f22 <__sflush_r+0x1a>
 8010f2e:	2300      	movs	r3, #0
 8010f30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010f34:	682f      	ldr	r7, [r5, #0]
 8010f36:	6a21      	ldr	r1, [r4, #32]
 8010f38:	602b      	str	r3, [r5, #0]
 8010f3a:	d032      	beq.n	8010fa2 <__sflush_r+0x9a>
 8010f3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010f3e:	89a3      	ldrh	r3, [r4, #12]
 8010f40:	075a      	lsls	r2, r3, #29
 8010f42:	d505      	bpl.n	8010f50 <__sflush_r+0x48>
 8010f44:	6863      	ldr	r3, [r4, #4]
 8010f46:	1ac0      	subs	r0, r0, r3
 8010f48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010f4a:	b10b      	cbz	r3, 8010f50 <__sflush_r+0x48>
 8010f4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010f4e:	1ac0      	subs	r0, r0, r3
 8010f50:	2300      	movs	r3, #0
 8010f52:	4602      	mov	r2, r0
 8010f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f56:	6a21      	ldr	r1, [r4, #32]
 8010f58:	4628      	mov	r0, r5
 8010f5a:	47b0      	blx	r6
 8010f5c:	1c43      	adds	r3, r0, #1
 8010f5e:	89a3      	ldrh	r3, [r4, #12]
 8010f60:	d106      	bne.n	8010f70 <__sflush_r+0x68>
 8010f62:	6829      	ldr	r1, [r5, #0]
 8010f64:	291d      	cmp	r1, #29
 8010f66:	d848      	bhi.n	8010ffa <__sflush_r+0xf2>
 8010f68:	4a29      	ldr	r2, [pc, #164]	; (8011010 <__sflush_r+0x108>)
 8010f6a:	40ca      	lsrs	r2, r1
 8010f6c:	07d6      	lsls	r6, r2, #31
 8010f6e:	d544      	bpl.n	8010ffa <__sflush_r+0xf2>
 8010f70:	2200      	movs	r2, #0
 8010f72:	6062      	str	r2, [r4, #4]
 8010f74:	04d9      	lsls	r1, r3, #19
 8010f76:	6922      	ldr	r2, [r4, #16]
 8010f78:	6022      	str	r2, [r4, #0]
 8010f7a:	d504      	bpl.n	8010f86 <__sflush_r+0x7e>
 8010f7c:	1c42      	adds	r2, r0, #1
 8010f7e:	d101      	bne.n	8010f84 <__sflush_r+0x7c>
 8010f80:	682b      	ldr	r3, [r5, #0]
 8010f82:	b903      	cbnz	r3, 8010f86 <__sflush_r+0x7e>
 8010f84:	6560      	str	r0, [r4, #84]	; 0x54
 8010f86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f88:	602f      	str	r7, [r5, #0]
 8010f8a:	2900      	cmp	r1, #0
 8010f8c:	d0c9      	beq.n	8010f22 <__sflush_r+0x1a>
 8010f8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f92:	4299      	cmp	r1, r3
 8010f94:	d002      	beq.n	8010f9c <__sflush_r+0x94>
 8010f96:	4628      	mov	r0, r5
 8010f98:	f7fe fb7e 	bl	800f698 <_free_r>
 8010f9c:	2000      	movs	r0, #0
 8010f9e:	6360      	str	r0, [r4, #52]	; 0x34
 8010fa0:	e7c0      	b.n	8010f24 <__sflush_r+0x1c>
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	4628      	mov	r0, r5
 8010fa6:	47b0      	blx	r6
 8010fa8:	1c41      	adds	r1, r0, #1
 8010faa:	d1c8      	bne.n	8010f3e <__sflush_r+0x36>
 8010fac:	682b      	ldr	r3, [r5, #0]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d0c5      	beq.n	8010f3e <__sflush_r+0x36>
 8010fb2:	2b1d      	cmp	r3, #29
 8010fb4:	d001      	beq.n	8010fba <__sflush_r+0xb2>
 8010fb6:	2b16      	cmp	r3, #22
 8010fb8:	d101      	bne.n	8010fbe <__sflush_r+0xb6>
 8010fba:	602f      	str	r7, [r5, #0]
 8010fbc:	e7b1      	b.n	8010f22 <__sflush_r+0x1a>
 8010fbe:	89a3      	ldrh	r3, [r4, #12]
 8010fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fc4:	81a3      	strh	r3, [r4, #12]
 8010fc6:	e7ad      	b.n	8010f24 <__sflush_r+0x1c>
 8010fc8:	690f      	ldr	r7, [r1, #16]
 8010fca:	2f00      	cmp	r7, #0
 8010fcc:	d0a9      	beq.n	8010f22 <__sflush_r+0x1a>
 8010fce:	0793      	lsls	r3, r2, #30
 8010fd0:	680e      	ldr	r6, [r1, #0]
 8010fd2:	bf08      	it	eq
 8010fd4:	694b      	ldreq	r3, [r1, #20]
 8010fd6:	600f      	str	r7, [r1, #0]
 8010fd8:	bf18      	it	ne
 8010fda:	2300      	movne	r3, #0
 8010fdc:	eba6 0807 	sub.w	r8, r6, r7
 8010fe0:	608b      	str	r3, [r1, #8]
 8010fe2:	f1b8 0f00 	cmp.w	r8, #0
 8010fe6:	dd9c      	ble.n	8010f22 <__sflush_r+0x1a>
 8010fe8:	4643      	mov	r3, r8
 8010fea:	463a      	mov	r2, r7
 8010fec:	6a21      	ldr	r1, [r4, #32]
 8010fee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010ff0:	4628      	mov	r0, r5
 8010ff2:	47b0      	blx	r6
 8010ff4:	2800      	cmp	r0, #0
 8010ff6:	dc06      	bgt.n	8011006 <__sflush_r+0xfe>
 8010ff8:	89a3      	ldrh	r3, [r4, #12]
 8010ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ffe:	81a3      	strh	r3, [r4, #12]
 8011000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011004:	e78e      	b.n	8010f24 <__sflush_r+0x1c>
 8011006:	4407      	add	r7, r0
 8011008:	eba8 0800 	sub.w	r8, r8, r0
 801100c:	e7e9      	b.n	8010fe2 <__sflush_r+0xda>
 801100e:	bf00      	nop
 8011010:	20400001 	.word	0x20400001

08011014 <_fflush_r>:
 8011014:	b538      	push	{r3, r4, r5, lr}
 8011016:	690b      	ldr	r3, [r1, #16]
 8011018:	4605      	mov	r5, r0
 801101a:	460c      	mov	r4, r1
 801101c:	b1db      	cbz	r3, 8011056 <_fflush_r+0x42>
 801101e:	b118      	cbz	r0, 8011028 <_fflush_r+0x14>
 8011020:	6983      	ldr	r3, [r0, #24]
 8011022:	b90b      	cbnz	r3, 8011028 <_fflush_r+0x14>
 8011024:	f000 f860 	bl	80110e8 <__sinit>
 8011028:	4b0c      	ldr	r3, [pc, #48]	; (801105c <_fflush_r+0x48>)
 801102a:	429c      	cmp	r4, r3
 801102c:	d109      	bne.n	8011042 <_fflush_r+0x2e>
 801102e:	686c      	ldr	r4, [r5, #4]
 8011030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011034:	b17b      	cbz	r3, 8011056 <_fflush_r+0x42>
 8011036:	4621      	mov	r1, r4
 8011038:	4628      	mov	r0, r5
 801103a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801103e:	f7ff bf63 	b.w	8010f08 <__sflush_r>
 8011042:	4b07      	ldr	r3, [pc, #28]	; (8011060 <_fflush_r+0x4c>)
 8011044:	429c      	cmp	r4, r3
 8011046:	d101      	bne.n	801104c <_fflush_r+0x38>
 8011048:	68ac      	ldr	r4, [r5, #8]
 801104a:	e7f1      	b.n	8011030 <_fflush_r+0x1c>
 801104c:	4b05      	ldr	r3, [pc, #20]	; (8011064 <_fflush_r+0x50>)
 801104e:	429c      	cmp	r4, r3
 8011050:	bf08      	it	eq
 8011052:	68ec      	ldreq	r4, [r5, #12]
 8011054:	e7ec      	b.n	8011030 <_fflush_r+0x1c>
 8011056:	2000      	movs	r0, #0
 8011058:	bd38      	pop	{r3, r4, r5, pc}
 801105a:	bf00      	nop
 801105c:	080a6fb8 	.word	0x080a6fb8
 8011060:	080a6fd8 	.word	0x080a6fd8
 8011064:	080a6f98 	.word	0x080a6f98

08011068 <std>:
 8011068:	2300      	movs	r3, #0
 801106a:	b510      	push	{r4, lr}
 801106c:	4604      	mov	r4, r0
 801106e:	e9c0 3300 	strd	r3, r3, [r0]
 8011072:	6083      	str	r3, [r0, #8]
 8011074:	8181      	strh	r1, [r0, #12]
 8011076:	6643      	str	r3, [r0, #100]	; 0x64
 8011078:	81c2      	strh	r2, [r0, #14]
 801107a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801107e:	6183      	str	r3, [r0, #24]
 8011080:	4619      	mov	r1, r3
 8011082:	2208      	movs	r2, #8
 8011084:	305c      	adds	r0, #92	; 0x5c
 8011086:	f7fe faf1 	bl	800f66c <memset>
 801108a:	4b05      	ldr	r3, [pc, #20]	; (80110a0 <std+0x38>)
 801108c:	6263      	str	r3, [r4, #36]	; 0x24
 801108e:	4b05      	ldr	r3, [pc, #20]	; (80110a4 <std+0x3c>)
 8011090:	62a3      	str	r3, [r4, #40]	; 0x28
 8011092:	4b05      	ldr	r3, [pc, #20]	; (80110a8 <std+0x40>)
 8011094:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011096:	4b05      	ldr	r3, [pc, #20]	; (80110ac <std+0x44>)
 8011098:	6224      	str	r4, [r4, #32]
 801109a:	6323      	str	r3, [r4, #48]	; 0x30
 801109c:	bd10      	pop	{r4, pc}
 801109e:	bf00      	nop
 80110a0:	08011b41 	.word	0x08011b41
 80110a4:	08011b63 	.word	0x08011b63
 80110a8:	08011b9b 	.word	0x08011b9b
 80110ac:	08011bbf 	.word	0x08011bbf

080110b0 <_cleanup_r>:
 80110b0:	4901      	ldr	r1, [pc, #4]	; (80110b8 <_cleanup_r+0x8>)
 80110b2:	f000 b885 	b.w	80111c0 <_fwalk_reent>
 80110b6:	bf00      	nop
 80110b8:	08011015 	.word	0x08011015

080110bc <__sfmoreglue>:
 80110bc:	b570      	push	{r4, r5, r6, lr}
 80110be:	1e4a      	subs	r2, r1, #1
 80110c0:	2568      	movs	r5, #104	; 0x68
 80110c2:	4355      	muls	r5, r2
 80110c4:	460e      	mov	r6, r1
 80110c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80110ca:	f7fe fb33 	bl	800f734 <_malloc_r>
 80110ce:	4604      	mov	r4, r0
 80110d0:	b140      	cbz	r0, 80110e4 <__sfmoreglue+0x28>
 80110d2:	2100      	movs	r1, #0
 80110d4:	e9c0 1600 	strd	r1, r6, [r0]
 80110d8:	300c      	adds	r0, #12
 80110da:	60a0      	str	r0, [r4, #8]
 80110dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80110e0:	f7fe fac4 	bl	800f66c <memset>
 80110e4:	4620      	mov	r0, r4
 80110e6:	bd70      	pop	{r4, r5, r6, pc}

080110e8 <__sinit>:
 80110e8:	6983      	ldr	r3, [r0, #24]
 80110ea:	b510      	push	{r4, lr}
 80110ec:	4604      	mov	r4, r0
 80110ee:	bb33      	cbnz	r3, 801113e <__sinit+0x56>
 80110f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80110f4:	6503      	str	r3, [r0, #80]	; 0x50
 80110f6:	4b12      	ldr	r3, [pc, #72]	; (8011140 <__sinit+0x58>)
 80110f8:	4a12      	ldr	r2, [pc, #72]	; (8011144 <__sinit+0x5c>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	6282      	str	r2, [r0, #40]	; 0x28
 80110fe:	4298      	cmp	r0, r3
 8011100:	bf04      	itt	eq
 8011102:	2301      	moveq	r3, #1
 8011104:	6183      	streq	r3, [r0, #24]
 8011106:	f000 f81f 	bl	8011148 <__sfp>
 801110a:	6060      	str	r0, [r4, #4]
 801110c:	4620      	mov	r0, r4
 801110e:	f000 f81b 	bl	8011148 <__sfp>
 8011112:	60a0      	str	r0, [r4, #8]
 8011114:	4620      	mov	r0, r4
 8011116:	f000 f817 	bl	8011148 <__sfp>
 801111a:	2200      	movs	r2, #0
 801111c:	60e0      	str	r0, [r4, #12]
 801111e:	2104      	movs	r1, #4
 8011120:	6860      	ldr	r0, [r4, #4]
 8011122:	f7ff ffa1 	bl	8011068 <std>
 8011126:	2201      	movs	r2, #1
 8011128:	2109      	movs	r1, #9
 801112a:	68a0      	ldr	r0, [r4, #8]
 801112c:	f7ff ff9c 	bl	8011068 <std>
 8011130:	2202      	movs	r2, #2
 8011132:	2112      	movs	r1, #18
 8011134:	68e0      	ldr	r0, [r4, #12]
 8011136:	f7ff ff97 	bl	8011068 <std>
 801113a:	2301      	movs	r3, #1
 801113c:	61a3      	str	r3, [r4, #24]
 801113e:	bd10      	pop	{r4, pc}
 8011140:	080a6f54 	.word	0x080a6f54
 8011144:	080110b1 	.word	0x080110b1

08011148 <__sfp>:
 8011148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801114a:	4b1b      	ldr	r3, [pc, #108]	; (80111b8 <__sfp+0x70>)
 801114c:	681e      	ldr	r6, [r3, #0]
 801114e:	69b3      	ldr	r3, [r6, #24]
 8011150:	4607      	mov	r7, r0
 8011152:	b913      	cbnz	r3, 801115a <__sfp+0x12>
 8011154:	4630      	mov	r0, r6
 8011156:	f7ff ffc7 	bl	80110e8 <__sinit>
 801115a:	3648      	adds	r6, #72	; 0x48
 801115c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011160:	3b01      	subs	r3, #1
 8011162:	d503      	bpl.n	801116c <__sfp+0x24>
 8011164:	6833      	ldr	r3, [r6, #0]
 8011166:	b133      	cbz	r3, 8011176 <__sfp+0x2e>
 8011168:	6836      	ldr	r6, [r6, #0]
 801116a:	e7f7      	b.n	801115c <__sfp+0x14>
 801116c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011170:	b16d      	cbz	r5, 801118e <__sfp+0x46>
 8011172:	3468      	adds	r4, #104	; 0x68
 8011174:	e7f4      	b.n	8011160 <__sfp+0x18>
 8011176:	2104      	movs	r1, #4
 8011178:	4638      	mov	r0, r7
 801117a:	f7ff ff9f 	bl	80110bc <__sfmoreglue>
 801117e:	6030      	str	r0, [r6, #0]
 8011180:	2800      	cmp	r0, #0
 8011182:	d1f1      	bne.n	8011168 <__sfp+0x20>
 8011184:	230c      	movs	r3, #12
 8011186:	603b      	str	r3, [r7, #0]
 8011188:	4604      	mov	r4, r0
 801118a:	4620      	mov	r0, r4
 801118c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801118e:	4b0b      	ldr	r3, [pc, #44]	; (80111bc <__sfp+0x74>)
 8011190:	6665      	str	r5, [r4, #100]	; 0x64
 8011192:	e9c4 5500 	strd	r5, r5, [r4]
 8011196:	60a5      	str	r5, [r4, #8]
 8011198:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801119c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80111a0:	2208      	movs	r2, #8
 80111a2:	4629      	mov	r1, r5
 80111a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80111a8:	f7fe fa60 	bl	800f66c <memset>
 80111ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80111b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80111b4:	e7e9      	b.n	801118a <__sfp+0x42>
 80111b6:	bf00      	nop
 80111b8:	080a6f54 	.word	0x080a6f54
 80111bc:	ffff0001 	.word	0xffff0001

080111c0 <_fwalk_reent>:
 80111c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111c4:	4680      	mov	r8, r0
 80111c6:	4689      	mov	r9, r1
 80111c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80111cc:	2600      	movs	r6, #0
 80111ce:	b914      	cbnz	r4, 80111d6 <_fwalk_reent+0x16>
 80111d0:	4630      	mov	r0, r6
 80111d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80111da:	3f01      	subs	r7, #1
 80111dc:	d501      	bpl.n	80111e2 <_fwalk_reent+0x22>
 80111de:	6824      	ldr	r4, [r4, #0]
 80111e0:	e7f5      	b.n	80111ce <_fwalk_reent+0xe>
 80111e2:	89ab      	ldrh	r3, [r5, #12]
 80111e4:	2b01      	cmp	r3, #1
 80111e6:	d907      	bls.n	80111f8 <_fwalk_reent+0x38>
 80111e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80111ec:	3301      	adds	r3, #1
 80111ee:	d003      	beq.n	80111f8 <_fwalk_reent+0x38>
 80111f0:	4629      	mov	r1, r5
 80111f2:	4640      	mov	r0, r8
 80111f4:	47c8      	blx	r9
 80111f6:	4306      	orrs	r6, r0
 80111f8:	3568      	adds	r5, #104	; 0x68
 80111fa:	e7ee      	b.n	80111da <_fwalk_reent+0x1a>

080111fc <_localeconv_r>:
 80111fc:	4b04      	ldr	r3, [pc, #16]	; (8011210 <_localeconv_r+0x14>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	6a18      	ldr	r0, [r3, #32]
 8011202:	4b04      	ldr	r3, [pc, #16]	; (8011214 <_localeconv_r+0x18>)
 8011204:	2800      	cmp	r0, #0
 8011206:	bf08      	it	eq
 8011208:	4618      	moveq	r0, r3
 801120a:	30f0      	adds	r0, #240	; 0xf0
 801120c:	4770      	bx	lr
 801120e:	bf00      	nop
 8011210:	20000d24 	.word	0x20000d24
 8011214:	20000d88 	.word	0x20000d88

08011218 <__swhatbuf_r>:
 8011218:	b570      	push	{r4, r5, r6, lr}
 801121a:	460e      	mov	r6, r1
 801121c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011220:	2900      	cmp	r1, #0
 8011222:	b096      	sub	sp, #88	; 0x58
 8011224:	4614      	mov	r4, r2
 8011226:	461d      	mov	r5, r3
 8011228:	da07      	bge.n	801123a <__swhatbuf_r+0x22>
 801122a:	2300      	movs	r3, #0
 801122c:	602b      	str	r3, [r5, #0]
 801122e:	89b3      	ldrh	r3, [r6, #12]
 8011230:	061a      	lsls	r2, r3, #24
 8011232:	d410      	bmi.n	8011256 <__swhatbuf_r+0x3e>
 8011234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011238:	e00e      	b.n	8011258 <__swhatbuf_r+0x40>
 801123a:	466a      	mov	r2, sp
 801123c:	f000 fce6 	bl	8011c0c <_fstat_r>
 8011240:	2800      	cmp	r0, #0
 8011242:	dbf2      	blt.n	801122a <__swhatbuf_r+0x12>
 8011244:	9a01      	ldr	r2, [sp, #4]
 8011246:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801124a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801124e:	425a      	negs	r2, r3
 8011250:	415a      	adcs	r2, r3
 8011252:	602a      	str	r2, [r5, #0]
 8011254:	e7ee      	b.n	8011234 <__swhatbuf_r+0x1c>
 8011256:	2340      	movs	r3, #64	; 0x40
 8011258:	2000      	movs	r0, #0
 801125a:	6023      	str	r3, [r4, #0]
 801125c:	b016      	add	sp, #88	; 0x58
 801125e:	bd70      	pop	{r4, r5, r6, pc}

08011260 <__smakebuf_r>:
 8011260:	898b      	ldrh	r3, [r1, #12]
 8011262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011264:	079d      	lsls	r5, r3, #30
 8011266:	4606      	mov	r6, r0
 8011268:	460c      	mov	r4, r1
 801126a:	d507      	bpl.n	801127c <__smakebuf_r+0x1c>
 801126c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011270:	6023      	str	r3, [r4, #0]
 8011272:	6123      	str	r3, [r4, #16]
 8011274:	2301      	movs	r3, #1
 8011276:	6163      	str	r3, [r4, #20]
 8011278:	b002      	add	sp, #8
 801127a:	bd70      	pop	{r4, r5, r6, pc}
 801127c:	ab01      	add	r3, sp, #4
 801127e:	466a      	mov	r2, sp
 8011280:	f7ff ffca 	bl	8011218 <__swhatbuf_r>
 8011284:	9900      	ldr	r1, [sp, #0]
 8011286:	4605      	mov	r5, r0
 8011288:	4630      	mov	r0, r6
 801128a:	f7fe fa53 	bl	800f734 <_malloc_r>
 801128e:	b948      	cbnz	r0, 80112a4 <__smakebuf_r+0x44>
 8011290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011294:	059a      	lsls	r2, r3, #22
 8011296:	d4ef      	bmi.n	8011278 <__smakebuf_r+0x18>
 8011298:	f023 0303 	bic.w	r3, r3, #3
 801129c:	f043 0302 	orr.w	r3, r3, #2
 80112a0:	81a3      	strh	r3, [r4, #12]
 80112a2:	e7e3      	b.n	801126c <__smakebuf_r+0xc>
 80112a4:	4b0d      	ldr	r3, [pc, #52]	; (80112dc <__smakebuf_r+0x7c>)
 80112a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80112a8:	89a3      	ldrh	r3, [r4, #12]
 80112aa:	6020      	str	r0, [r4, #0]
 80112ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112b0:	81a3      	strh	r3, [r4, #12]
 80112b2:	9b00      	ldr	r3, [sp, #0]
 80112b4:	6163      	str	r3, [r4, #20]
 80112b6:	9b01      	ldr	r3, [sp, #4]
 80112b8:	6120      	str	r0, [r4, #16]
 80112ba:	b15b      	cbz	r3, 80112d4 <__smakebuf_r+0x74>
 80112bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112c0:	4630      	mov	r0, r6
 80112c2:	f000 fcb5 	bl	8011c30 <_isatty_r>
 80112c6:	b128      	cbz	r0, 80112d4 <__smakebuf_r+0x74>
 80112c8:	89a3      	ldrh	r3, [r4, #12]
 80112ca:	f023 0303 	bic.w	r3, r3, #3
 80112ce:	f043 0301 	orr.w	r3, r3, #1
 80112d2:	81a3      	strh	r3, [r4, #12]
 80112d4:	89a3      	ldrh	r3, [r4, #12]
 80112d6:	431d      	orrs	r5, r3
 80112d8:	81a5      	strh	r5, [r4, #12]
 80112da:	e7cd      	b.n	8011278 <__smakebuf_r+0x18>
 80112dc:	080110b1 	.word	0x080110b1

080112e0 <__malloc_lock>:
 80112e0:	4770      	bx	lr

080112e2 <__malloc_unlock>:
 80112e2:	4770      	bx	lr

080112e4 <_Balloc>:
 80112e4:	b570      	push	{r4, r5, r6, lr}
 80112e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80112e8:	4604      	mov	r4, r0
 80112ea:	460e      	mov	r6, r1
 80112ec:	b93d      	cbnz	r5, 80112fe <_Balloc+0x1a>
 80112ee:	2010      	movs	r0, #16
 80112f0:	f7fe f992 	bl	800f618 <malloc>
 80112f4:	6260      	str	r0, [r4, #36]	; 0x24
 80112f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80112fa:	6005      	str	r5, [r0, #0]
 80112fc:	60c5      	str	r5, [r0, #12]
 80112fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011300:	68eb      	ldr	r3, [r5, #12]
 8011302:	b183      	cbz	r3, 8011326 <_Balloc+0x42>
 8011304:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011306:	68db      	ldr	r3, [r3, #12]
 8011308:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801130c:	b9b8      	cbnz	r0, 801133e <_Balloc+0x5a>
 801130e:	2101      	movs	r1, #1
 8011310:	fa01 f506 	lsl.w	r5, r1, r6
 8011314:	1d6a      	adds	r2, r5, #5
 8011316:	0092      	lsls	r2, r2, #2
 8011318:	4620      	mov	r0, r4
 801131a:	f7fe f9af 	bl	800f67c <_calloc_r>
 801131e:	b160      	cbz	r0, 801133a <_Balloc+0x56>
 8011320:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8011324:	e00e      	b.n	8011344 <_Balloc+0x60>
 8011326:	2221      	movs	r2, #33	; 0x21
 8011328:	2104      	movs	r1, #4
 801132a:	4620      	mov	r0, r4
 801132c:	f7fe f9a6 	bl	800f67c <_calloc_r>
 8011330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011332:	60e8      	str	r0, [r5, #12]
 8011334:	68db      	ldr	r3, [r3, #12]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d1e4      	bne.n	8011304 <_Balloc+0x20>
 801133a:	2000      	movs	r0, #0
 801133c:	bd70      	pop	{r4, r5, r6, pc}
 801133e:	6802      	ldr	r2, [r0, #0]
 8011340:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8011344:	2300      	movs	r3, #0
 8011346:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801134a:	e7f7      	b.n	801133c <_Balloc+0x58>

0801134c <_Bfree>:
 801134c:	b570      	push	{r4, r5, r6, lr}
 801134e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011350:	4606      	mov	r6, r0
 8011352:	460d      	mov	r5, r1
 8011354:	b93c      	cbnz	r4, 8011366 <_Bfree+0x1a>
 8011356:	2010      	movs	r0, #16
 8011358:	f7fe f95e 	bl	800f618 <malloc>
 801135c:	6270      	str	r0, [r6, #36]	; 0x24
 801135e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011362:	6004      	str	r4, [r0, #0]
 8011364:	60c4      	str	r4, [r0, #12]
 8011366:	b13d      	cbz	r5, 8011378 <_Bfree+0x2c>
 8011368:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801136a:	686a      	ldr	r2, [r5, #4]
 801136c:	68db      	ldr	r3, [r3, #12]
 801136e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011372:	6029      	str	r1, [r5, #0]
 8011374:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011378:	bd70      	pop	{r4, r5, r6, pc}

0801137a <__multadd>:
 801137a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801137e:	690d      	ldr	r5, [r1, #16]
 8011380:	461f      	mov	r7, r3
 8011382:	4606      	mov	r6, r0
 8011384:	460c      	mov	r4, r1
 8011386:	f101 0c14 	add.w	ip, r1, #20
 801138a:	2300      	movs	r3, #0
 801138c:	f8dc 0000 	ldr.w	r0, [ip]
 8011390:	b281      	uxth	r1, r0
 8011392:	fb02 7101 	mla	r1, r2, r1, r7
 8011396:	0c0f      	lsrs	r7, r1, #16
 8011398:	0c00      	lsrs	r0, r0, #16
 801139a:	fb02 7000 	mla	r0, r2, r0, r7
 801139e:	b289      	uxth	r1, r1
 80113a0:	3301      	adds	r3, #1
 80113a2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80113a6:	429d      	cmp	r5, r3
 80113a8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80113ac:	f84c 1b04 	str.w	r1, [ip], #4
 80113b0:	dcec      	bgt.n	801138c <__multadd+0x12>
 80113b2:	b1d7      	cbz	r7, 80113ea <__multadd+0x70>
 80113b4:	68a3      	ldr	r3, [r4, #8]
 80113b6:	42ab      	cmp	r3, r5
 80113b8:	dc12      	bgt.n	80113e0 <__multadd+0x66>
 80113ba:	6861      	ldr	r1, [r4, #4]
 80113bc:	4630      	mov	r0, r6
 80113be:	3101      	adds	r1, #1
 80113c0:	f7ff ff90 	bl	80112e4 <_Balloc>
 80113c4:	6922      	ldr	r2, [r4, #16]
 80113c6:	3202      	adds	r2, #2
 80113c8:	f104 010c 	add.w	r1, r4, #12
 80113cc:	4680      	mov	r8, r0
 80113ce:	0092      	lsls	r2, r2, #2
 80113d0:	300c      	adds	r0, #12
 80113d2:	f7fe f940 	bl	800f656 <memcpy>
 80113d6:	4621      	mov	r1, r4
 80113d8:	4630      	mov	r0, r6
 80113da:	f7ff ffb7 	bl	801134c <_Bfree>
 80113de:	4644      	mov	r4, r8
 80113e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80113e4:	3501      	adds	r5, #1
 80113e6:	615f      	str	r7, [r3, #20]
 80113e8:	6125      	str	r5, [r4, #16]
 80113ea:	4620      	mov	r0, r4
 80113ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080113f0 <__hi0bits>:
 80113f0:	0c02      	lsrs	r2, r0, #16
 80113f2:	0412      	lsls	r2, r2, #16
 80113f4:	4603      	mov	r3, r0
 80113f6:	b9b2      	cbnz	r2, 8011426 <__hi0bits+0x36>
 80113f8:	0403      	lsls	r3, r0, #16
 80113fa:	2010      	movs	r0, #16
 80113fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011400:	bf04      	itt	eq
 8011402:	021b      	lsleq	r3, r3, #8
 8011404:	3008      	addeq	r0, #8
 8011406:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801140a:	bf04      	itt	eq
 801140c:	011b      	lsleq	r3, r3, #4
 801140e:	3004      	addeq	r0, #4
 8011410:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011414:	bf04      	itt	eq
 8011416:	009b      	lsleq	r3, r3, #2
 8011418:	3002      	addeq	r0, #2
 801141a:	2b00      	cmp	r3, #0
 801141c:	db06      	blt.n	801142c <__hi0bits+0x3c>
 801141e:	005b      	lsls	r3, r3, #1
 8011420:	d503      	bpl.n	801142a <__hi0bits+0x3a>
 8011422:	3001      	adds	r0, #1
 8011424:	4770      	bx	lr
 8011426:	2000      	movs	r0, #0
 8011428:	e7e8      	b.n	80113fc <__hi0bits+0xc>
 801142a:	2020      	movs	r0, #32
 801142c:	4770      	bx	lr

0801142e <__lo0bits>:
 801142e:	6803      	ldr	r3, [r0, #0]
 8011430:	f013 0207 	ands.w	r2, r3, #7
 8011434:	4601      	mov	r1, r0
 8011436:	d00b      	beq.n	8011450 <__lo0bits+0x22>
 8011438:	07da      	lsls	r2, r3, #31
 801143a:	d423      	bmi.n	8011484 <__lo0bits+0x56>
 801143c:	0798      	lsls	r0, r3, #30
 801143e:	bf49      	itett	mi
 8011440:	085b      	lsrmi	r3, r3, #1
 8011442:	089b      	lsrpl	r3, r3, #2
 8011444:	2001      	movmi	r0, #1
 8011446:	600b      	strmi	r3, [r1, #0]
 8011448:	bf5c      	itt	pl
 801144a:	600b      	strpl	r3, [r1, #0]
 801144c:	2002      	movpl	r0, #2
 801144e:	4770      	bx	lr
 8011450:	b298      	uxth	r0, r3
 8011452:	b9a8      	cbnz	r0, 8011480 <__lo0bits+0x52>
 8011454:	0c1b      	lsrs	r3, r3, #16
 8011456:	2010      	movs	r0, #16
 8011458:	f013 0fff 	tst.w	r3, #255	; 0xff
 801145c:	bf04      	itt	eq
 801145e:	0a1b      	lsreq	r3, r3, #8
 8011460:	3008      	addeq	r0, #8
 8011462:	071a      	lsls	r2, r3, #28
 8011464:	bf04      	itt	eq
 8011466:	091b      	lsreq	r3, r3, #4
 8011468:	3004      	addeq	r0, #4
 801146a:	079a      	lsls	r2, r3, #30
 801146c:	bf04      	itt	eq
 801146e:	089b      	lsreq	r3, r3, #2
 8011470:	3002      	addeq	r0, #2
 8011472:	07da      	lsls	r2, r3, #31
 8011474:	d402      	bmi.n	801147c <__lo0bits+0x4e>
 8011476:	085b      	lsrs	r3, r3, #1
 8011478:	d006      	beq.n	8011488 <__lo0bits+0x5a>
 801147a:	3001      	adds	r0, #1
 801147c:	600b      	str	r3, [r1, #0]
 801147e:	4770      	bx	lr
 8011480:	4610      	mov	r0, r2
 8011482:	e7e9      	b.n	8011458 <__lo0bits+0x2a>
 8011484:	2000      	movs	r0, #0
 8011486:	4770      	bx	lr
 8011488:	2020      	movs	r0, #32
 801148a:	4770      	bx	lr

0801148c <__i2b>:
 801148c:	b510      	push	{r4, lr}
 801148e:	460c      	mov	r4, r1
 8011490:	2101      	movs	r1, #1
 8011492:	f7ff ff27 	bl	80112e4 <_Balloc>
 8011496:	2201      	movs	r2, #1
 8011498:	6144      	str	r4, [r0, #20]
 801149a:	6102      	str	r2, [r0, #16]
 801149c:	bd10      	pop	{r4, pc}

0801149e <__multiply>:
 801149e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114a2:	4614      	mov	r4, r2
 80114a4:	690a      	ldr	r2, [r1, #16]
 80114a6:	6923      	ldr	r3, [r4, #16]
 80114a8:	429a      	cmp	r2, r3
 80114aa:	bfb8      	it	lt
 80114ac:	460b      	movlt	r3, r1
 80114ae:	4688      	mov	r8, r1
 80114b0:	bfbc      	itt	lt
 80114b2:	46a0      	movlt	r8, r4
 80114b4:	461c      	movlt	r4, r3
 80114b6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80114ba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80114be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80114c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80114c6:	eb07 0609 	add.w	r6, r7, r9
 80114ca:	42b3      	cmp	r3, r6
 80114cc:	bfb8      	it	lt
 80114ce:	3101      	addlt	r1, #1
 80114d0:	f7ff ff08 	bl	80112e4 <_Balloc>
 80114d4:	f100 0514 	add.w	r5, r0, #20
 80114d8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80114dc:	462b      	mov	r3, r5
 80114de:	2200      	movs	r2, #0
 80114e0:	4573      	cmp	r3, lr
 80114e2:	d316      	bcc.n	8011512 <__multiply+0x74>
 80114e4:	f104 0214 	add.w	r2, r4, #20
 80114e8:	f108 0114 	add.w	r1, r8, #20
 80114ec:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80114f0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80114f4:	9300      	str	r3, [sp, #0]
 80114f6:	9b00      	ldr	r3, [sp, #0]
 80114f8:	9201      	str	r2, [sp, #4]
 80114fa:	4293      	cmp	r3, r2
 80114fc:	d80c      	bhi.n	8011518 <__multiply+0x7a>
 80114fe:	2e00      	cmp	r6, #0
 8011500:	dd03      	ble.n	801150a <__multiply+0x6c>
 8011502:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011506:	2b00      	cmp	r3, #0
 8011508:	d05d      	beq.n	80115c6 <__multiply+0x128>
 801150a:	6106      	str	r6, [r0, #16]
 801150c:	b003      	add	sp, #12
 801150e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011512:	f843 2b04 	str.w	r2, [r3], #4
 8011516:	e7e3      	b.n	80114e0 <__multiply+0x42>
 8011518:	f8b2 b000 	ldrh.w	fp, [r2]
 801151c:	f1bb 0f00 	cmp.w	fp, #0
 8011520:	d023      	beq.n	801156a <__multiply+0xcc>
 8011522:	4689      	mov	r9, r1
 8011524:	46ac      	mov	ip, r5
 8011526:	f04f 0800 	mov.w	r8, #0
 801152a:	f859 4b04 	ldr.w	r4, [r9], #4
 801152e:	f8dc a000 	ldr.w	sl, [ip]
 8011532:	b2a3      	uxth	r3, r4
 8011534:	fa1f fa8a 	uxth.w	sl, sl
 8011538:	fb0b a303 	mla	r3, fp, r3, sl
 801153c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011540:	f8dc 4000 	ldr.w	r4, [ip]
 8011544:	4443      	add	r3, r8
 8011546:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801154a:	fb0b 840a 	mla	r4, fp, sl, r8
 801154e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8011552:	46e2      	mov	sl, ip
 8011554:	b29b      	uxth	r3, r3
 8011556:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801155a:	454f      	cmp	r7, r9
 801155c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011560:	f84a 3b04 	str.w	r3, [sl], #4
 8011564:	d82b      	bhi.n	80115be <__multiply+0x120>
 8011566:	f8cc 8004 	str.w	r8, [ip, #4]
 801156a:	9b01      	ldr	r3, [sp, #4]
 801156c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8011570:	3204      	adds	r2, #4
 8011572:	f1ba 0f00 	cmp.w	sl, #0
 8011576:	d020      	beq.n	80115ba <__multiply+0x11c>
 8011578:	682b      	ldr	r3, [r5, #0]
 801157a:	4689      	mov	r9, r1
 801157c:	46a8      	mov	r8, r5
 801157e:	f04f 0b00 	mov.w	fp, #0
 8011582:	f8b9 c000 	ldrh.w	ip, [r9]
 8011586:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801158a:	fb0a 440c 	mla	r4, sl, ip, r4
 801158e:	445c      	add	r4, fp
 8011590:	46c4      	mov	ip, r8
 8011592:	b29b      	uxth	r3, r3
 8011594:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011598:	f84c 3b04 	str.w	r3, [ip], #4
 801159c:	f859 3b04 	ldr.w	r3, [r9], #4
 80115a0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80115a4:	0c1b      	lsrs	r3, r3, #16
 80115a6:	fb0a b303 	mla	r3, sl, r3, fp
 80115aa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80115ae:	454f      	cmp	r7, r9
 80115b0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80115b4:	d805      	bhi.n	80115c2 <__multiply+0x124>
 80115b6:	f8c8 3004 	str.w	r3, [r8, #4]
 80115ba:	3504      	adds	r5, #4
 80115bc:	e79b      	b.n	80114f6 <__multiply+0x58>
 80115be:	46d4      	mov	ip, sl
 80115c0:	e7b3      	b.n	801152a <__multiply+0x8c>
 80115c2:	46e0      	mov	r8, ip
 80115c4:	e7dd      	b.n	8011582 <__multiply+0xe4>
 80115c6:	3e01      	subs	r6, #1
 80115c8:	e799      	b.n	80114fe <__multiply+0x60>
	...

080115cc <__pow5mult>:
 80115cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115d0:	4615      	mov	r5, r2
 80115d2:	f012 0203 	ands.w	r2, r2, #3
 80115d6:	4606      	mov	r6, r0
 80115d8:	460f      	mov	r7, r1
 80115da:	d007      	beq.n	80115ec <__pow5mult+0x20>
 80115dc:	3a01      	subs	r2, #1
 80115de:	4c21      	ldr	r4, [pc, #132]	; (8011664 <__pow5mult+0x98>)
 80115e0:	2300      	movs	r3, #0
 80115e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80115e6:	f7ff fec8 	bl	801137a <__multadd>
 80115ea:	4607      	mov	r7, r0
 80115ec:	10ad      	asrs	r5, r5, #2
 80115ee:	d035      	beq.n	801165c <__pow5mult+0x90>
 80115f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80115f2:	b93c      	cbnz	r4, 8011604 <__pow5mult+0x38>
 80115f4:	2010      	movs	r0, #16
 80115f6:	f7fe f80f 	bl	800f618 <malloc>
 80115fa:	6270      	str	r0, [r6, #36]	; 0x24
 80115fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011600:	6004      	str	r4, [r0, #0]
 8011602:	60c4      	str	r4, [r0, #12]
 8011604:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011608:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801160c:	b94c      	cbnz	r4, 8011622 <__pow5mult+0x56>
 801160e:	f240 2171 	movw	r1, #625	; 0x271
 8011612:	4630      	mov	r0, r6
 8011614:	f7ff ff3a 	bl	801148c <__i2b>
 8011618:	2300      	movs	r3, #0
 801161a:	f8c8 0008 	str.w	r0, [r8, #8]
 801161e:	4604      	mov	r4, r0
 8011620:	6003      	str	r3, [r0, #0]
 8011622:	f04f 0800 	mov.w	r8, #0
 8011626:	07eb      	lsls	r3, r5, #31
 8011628:	d50a      	bpl.n	8011640 <__pow5mult+0x74>
 801162a:	4639      	mov	r1, r7
 801162c:	4622      	mov	r2, r4
 801162e:	4630      	mov	r0, r6
 8011630:	f7ff ff35 	bl	801149e <__multiply>
 8011634:	4639      	mov	r1, r7
 8011636:	4681      	mov	r9, r0
 8011638:	4630      	mov	r0, r6
 801163a:	f7ff fe87 	bl	801134c <_Bfree>
 801163e:	464f      	mov	r7, r9
 8011640:	106d      	asrs	r5, r5, #1
 8011642:	d00b      	beq.n	801165c <__pow5mult+0x90>
 8011644:	6820      	ldr	r0, [r4, #0]
 8011646:	b938      	cbnz	r0, 8011658 <__pow5mult+0x8c>
 8011648:	4622      	mov	r2, r4
 801164a:	4621      	mov	r1, r4
 801164c:	4630      	mov	r0, r6
 801164e:	f7ff ff26 	bl	801149e <__multiply>
 8011652:	6020      	str	r0, [r4, #0]
 8011654:	f8c0 8000 	str.w	r8, [r0]
 8011658:	4604      	mov	r4, r0
 801165a:	e7e4      	b.n	8011626 <__pow5mult+0x5a>
 801165c:	4638      	mov	r0, r7
 801165e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011662:	bf00      	nop
 8011664:	080a70e8 	.word	0x080a70e8

08011668 <__lshift>:
 8011668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801166c:	460c      	mov	r4, r1
 801166e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011672:	6923      	ldr	r3, [r4, #16]
 8011674:	6849      	ldr	r1, [r1, #4]
 8011676:	eb0a 0903 	add.w	r9, sl, r3
 801167a:	68a3      	ldr	r3, [r4, #8]
 801167c:	4607      	mov	r7, r0
 801167e:	4616      	mov	r6, r2
 8011680:	f109 0501 	add.w	r5, r9, #1
 8011684:	42ab      	cmp	r3, r5
 8011686:	db32      	blt.n	80116ee <__lshift+0x86>
 8011688:	4638      	mov	r0, r7
 801168a:	f7ff fe2b 	bl	80112e4 <_Balloc>
 801168e:	2300      	movs	r3, #0
 8011690:	4680      	mov	r8, r0
 8011692:	f100 0114 	add.w	r1, r0, #20
 8011696:	461a      	mov	r2, r3
 8011698:	4553      	cmp	r3, sl
 801169a:	db2b      	blt.n	80116f4 <__lshift+0x8c>
 801169c:	6920      	ldr	r0, [r4, #16]
 801169e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80116a2:	f104 0314 	add.w	r3, r4, #20
 80116a6:	f016 021f 	ands.w	r2, r6, #31
 80116aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80116ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80116b2:	d025      	beq.n	8011700 <__lshift+0x98>
 80116b4:	f1c2 0e20 	rsb	lr, r2, #32
 80116b8:	2000      	movs	r0, #0
 80116ba:	681e      	ldr	r6, [r3, #0]
 80116bc:	468a      	mov	sl, r1
 80116be:	4096      	lsls	r6, r2
 80116c0:	4330      	orrs	r0, r6
 80116c2:	f84a 0b04 	str.w	r0, [sl], #4
 80116c6:	f853 0b04 	ldr.w	r0, [r3], #4
 80116ca:	459c      	cmp	ip, r3
 80116cc:	fa20 f00e 	lsr.w	r0, r0, lr
 80116d0:	d814      	bhi.n	80116fc <__lshift+0x94>
 80116d2:	6048      	str	r0, [r1, #4]
 80116d4:	b108      	cbz	r0, 80116da <__lshift+0x72>
 80116d6:	f109 0502 	add.w	r5, r9, #2
 80116da:	3d01      	subs	r5, #1
 80116dc:	4638      	mov	r0, r7
 80116de:	f8c8 5010 	str.w	r5, [r8, #16]
 80116e2:	4621      	mov	r1, r4
 80116e4:	f7ff fe32 	bl	801134c <_Bfree>
 80116e8:	4640      	mov	r0, r8
 80116ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116ee:	3101      	adds	r1, #1
 80116f0:	005b      	lsls	r3, r3, #1
 80116f2:	e7c7      	b.n	8011684 <__lshift+0x1c>
 80116f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80116f8:	3301      	adds	r3, #1
 80116fa:	e7cd      	b.n	8011698 <__lshift+0x30>
 80116fc:	4651      	mov	r1, sl
 80116fe:	e7dc      	b.n	80116ba <__lshift+0x52>
 8011700:	3904      	subs	r1, #4
 8011702:	f853 2b04 	ldr.w	r2, [r3], #4
 8011706:	f841 2f04 	str.w	r2, [r1, #4]!
 801170a:	459c      	cmp	ip, r3
 801170c:	d8f9      	bhi.n	8011702 <__lshift+0x9a>
 801170e:	e7e4      	b.n	80116da <__lshift+0x72>

08011710 <__mcmp>:
 8011710:	6903      	ldr	r3, [r0, #16]
 8011712:	690a      	ldr	r2, [r1, #16]
 8011714:	1a9b      	subs	r3, r3, r2
 8011716:	b530      	push	{r4, r5, lr}
 8011718:	d10c      	bne.n	8011734 <__mcmp+0x24>
 801171a:	0092      	lsls	r2, r2, #2
 801171c:	3014      	adds	r0, #20
 801171e:	3114      	adds	r1, #20
 8011720:	1884      	adds	r4, r0, r2
 8011722:	4411      	add	r1, r2
 8011724:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011728:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801172c:	4295      	cmp	r5, r2
 801172e:	d003      	beq.n	8011738 <__mcmp+0x28>
 8011730:	d305      	bcc.n	801173e <__mcmp+0x2e>
 8011732:	2301      	movs	r3, #1
 8011734:	4618      	mov	r0, r3
 8011736:	bd30      	pop	{r4, r5, pc}
 8011738:	42a0      	cmp	r0, r4
 801173a:	d3f3      	bcc.n	8011724 <__mcmp+0x14>
 801173c:	e7fa      	b.n	8011734 <__mcmp+0x24>
 801173e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011742:	e7f7      	b.n	8011734 <__mcmp+0x24>

08011744 <__mdiff>:
 8011744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011748:	460d      	mov	r5, r1
 801174a:	4607      	mov	r7, r0
 801174c:	4611      	mov	r1, r2
 801174e:	4628      	mov	r0, r5
 8011750:	4614      	mov	r4, r2
 8011752:	f7ff ffdd 	bl	8011710 <__mcmp>
 8011756:	1e06      	subs	r6, r0, #0
 8011758:	d108      	bne.n	801176c <__mdiff+0x28>
 801175a:	4631      	mov	r1, r6
 801175c:	4638      	mov	r0, r7
 801175e:	f7ff fdc1 	bl	80112e4 <_Balloc>
 8011762:	2301      	movs	r3, #1
 8011764:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801176c:	bfa4      	itt	ge
 801176e:	4623      	movge	r3, r4
 8011770:	462c      	movge	r4, r5
 8011772:	4638      	mov	r0, r7
 8011774:	6861      	ldr	r1, [r4, #4]
 8011776:	bfa6      	itte	ge
 8011778:	461d      	movge	r5, r3
 801177a:	2600      	movge	r6, #0
 801177c:	2601      	movlt	r6, #1
 801177e:	f7ff fdb1 	bl	80112e4 <_Balloc>
 8011782:	692b      	ldr	r3, [r5, #16]
 8011784:	60c6      	str	r6, [r0, #12]
 8011786:	6926      	ldr	r6, [r4, #16]
 8011788:	f105 0914 	add.w	r9, r5, #20
 801178c:	f104 0214 	add.w	r2, r4, #20
 8011790:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011794:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011798:	f100 0514 	add.w	r5, r0, #20
 801179c:	f04f 0e00 	mov.w	lr, #0
 80117a0:	f852 ab04 	ldr.w	sl, [r2], #4
 80117a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80117a8:	fa1e f18a 	uxtah	r1, lr, sl
 80117ac:	b2a3      	uxth	r3, r4
 80117ae:	1ac9      	subs	r1, r1, r3
 80117b0:	0c23      	lsrs	r3, r4, #16
 80117b2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80117b6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80117ba:	b289      	uxth	r1, r1
 80117bc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80117c0:	45c8      	cmp	r8, r9
 80117c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80117c6:	4694      	mov	ip, r2
 80117c8:	f845 3b04 	str.w	r3, [r5], #4
 80117cc:	d8e8      	bhi.n	80117a0 <__mdiff+0x5c>
 80117ce:	45bc      	cmp	ip, r7
 80117d0:	d304      	bcc.n	80117dc <__mdiff+0x98>
 80117d2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80117d6:	b183      	cbz	r3, 80117fa <__mdiff+0xb6>
 80117d8:	6106      	str	r6, [r0, #16]
 80117da:	e7c5      	b.n	8011768 <__mdiff+0x24>
 80117dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80117e0:	fa1e f381 	uxtah	r3, lr, r1
 80117e4:	141a      	asrs	r2, r3, #16
 80117e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80117ea:	b29b      	uxth	r3, r3
 80117ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80117f0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80117f4:	f845 3b04 	str.w	r3, [r5], #4
 80117f8:	e7e9      	b.n	80117ce <__mdiff+0x8a>
 80117fa:	3e01      	subs	r6, #1
 80117fc:	e7e9      	b.n	80117d2 <__mdiff+0x8e>

080117fe <__d2b>:
 80117fe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011802:	460e      	mov	r6, r1
 8011804:	2101      	movs	r1, #1
 8011806:	ec59 8b10 	vmov	r8, r9, d0
 801180a:	4615      	mov	r5, r2
 801180c:	f7ff fd6a 	bl	80112e4 <_Balloc>
 8011810:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011814:	4607      	mov	r7, r0
 8011816:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801181a:	bb34      	cbnz	r4, 801186a <__d2b+0x6c>
 801181c:	9301      	str	r3, [sp, #4]
 801181e:	f1b8 0300 	subs.w	r3, r8, #0
 8011822:	d027      	beq.n	8011874 <__d2b+0x76>
 8011824:	a802      	add	r0, sp, #8
 8011826:	f840 3d08 	str.w	r3, [r0, #-8]!
 801182a:	f7ff fe00 	bl	801142e <__lo0bits>
 801182e:	9900      	ldr	r1, [sp, #0]
 8011830:	b1f0      	cbz	r0, 8011870 <__d2b+0x72>
 8011832:	9a01      	ldr	r2, [sp, #4]
 8011834:	f1c0 0320 	rsb	r3, r0, #32
 8011838:	fa02 f303 	lsl.w	r3, r2, r3
 801183c:	430b      	orrs	r3, r1
 801183e:	40c2      	lsrs	r2, r0
 8011840:	617b      	str	r3, [r7, #20]
 8011842:	9201      	str	r2, [sp, #4]
 8011844:	9b01      	ldr	r3, [sp, #4]
 8011846:	61bb      	str	r3, [r7, #24]
 8011848:	2b00      	cmp	r3, #0
 801184a:	bf14      	ite	ne
 801184c:	2102      	movne	r1, #2
 801184e:	2101      	moveq	r1, #1
 8011850:	6139      	str	r1, [r7, #16]
 8011852:	b1c4      	cbz	r4, 8011886 <__d2b+0x88>
 8011854:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011858:	4404      	add	r4, r0
 801185a:	6034      	str	r4, [r6, #0]
 801185c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011860:	6028      	str	r0, [r5, #0]
 8011862:	4638      	mov	r0, r7
 8011864:	b003      	add	sp, #12
 8011866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801186a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801186e:	e7d5      	b.n	801181c <__d2b+0x1e>
 8011870:	6179      	str	r1, [r7, #20]
 8011872:	e7e7      	b.n	8011844 <__d2b+0x46>
 8011874:	a801      	add	r0, sp, #4
 8011876:	f7ff fdda 	bl	801142e <__lo0bits>
 801187a:	9b01      	ldr	r3, [sp, #4]
 801187c:	617b      	str	r3, [r7, #20]
 801187e:	2101      	movs	r1, #1
 8011880:	6139      	str	r1, [r7, #16]
 8011882:	3020      	adds	r0, #32
 8011884:	e7e5      	b.n	8011852 <__d2b+0x54>
 8011886:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801188a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801188e:	6030      	str	r0, [r6, #0]
 8011890:	6918      	ldr	r0, [r3, #16]
 8011892:	f7ff fdad 	bl	80113f0 <__hi0bits>
 8011896:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801189a:	e7e1      	b.n	8011860 <__d2b+0x62>

0801189c <__ssputs_r>:
 801189c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118a0:	688e      	ldr	r6, [r1, #8]
 80118a2:	429e      	cmp	r6, r3
 80118a4:	4682      	mov	sl, r0
 80118a6:	460c      	mov	r4, r1
 80118a8:	4690      	mov	r8, r2
 80118aa:	4699      	mov	r9, r3
 80118ac:	d837      	bhi.n	801191e <__ssputs_r+0x82>
 80118ae:	898a      	ldrh	r2, [r1, #12]
 80118b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80118b4:	d031      	beq.n	801191a <__ssputs_r+0x7e>
 80118b6:	6825      	ldr	r5, [r4, #0]
 80118b8:	6909      	ldr	r1, [r1, #16]
 80118ba:	1a6f      	subs	r7, r5, r1
 80118bc:	6965      	ldr	r5, [r4, #20]
 80118be:	2302      	movs	r3, #2
 80118c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80118c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80118c8:	f109 0301 	add.w	r3, r9, #1
 80118cc:	443b      	add	r3, r7
 80118ce:	429d      	cmp	r5, r3
 80118d0:	bf38      	it	cc
 80118d2:	461d      	movcc	r5, r3
 80118d4:	0553      	lsls	r3, r2, #21
 80118d6:	d530      	bpl.n	801193a <__ssputs_r+0x9e>
 80118d8:	4629      	mov	r1, r5
 80118da:	f7fd ff2b 	bl	800f734 <_malloc_r>
 80118de:	4606      	mov	r6, r0
 80118e0:	b950      	cbnz	r0, 80118f8 <__ssputs_r+0x5c>
 80118e2:	230c      	movs	r3, #12
 80118e4:	f8ca 3000 	str.w	r3, [sl]
 80118e8:	89a3      	ldrh	r3, [r4, #12]
 80118ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118ee:	81a3      	strh	r3, [r4, #12]
 80118f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118f8:	463a      	mov	r2, r7
 80118fa:	6921      	ldr	r1, [r4, #16]
 80118fc:	f7fd feab 	bl	800f656 <memcpy>
 8011900:	89a3      	ldrh	r3, [r4, #12]
 8011902:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801190a:	81a3      	strh	r3, [r4, #12]
 801190c:	6126      	str	r6, [r4, #16]
 801190e:	6165      	str	r5, [r4, #20]
 8011910:	443e      	add	r6, r7
 8011912:	1bed      	subs	r5, r5, r7
 8011914:	6026      	str	r6, [r4, #0]
 8011916:	60a5      	str	r5, [r4, #8]
 8011918:	464e      	mov	r6, r9
 801191a:	454e      	cmp	r6, r9
 801191c:	d900      	bls.n	8011920 <__ssputs_r+0x84>
 801191e:	464e      	mov	r6, r9
 8011920:	4632      	mov	r2, r6
 8011922:	4641      	mov	r1, r8
 8011924:	6820      	ldr	r0, [r4, #0]
 8011926:	f000 f9b7 	bl	8011c98 <memmove>
 801192a:	68a3      	ldr	r3, [r4, #8]
 801192c:	1b9b      	subs	r3, r3, r6
 801192e:	60a3      	str	r3, [r4, #8]
 8011930:	6823      	ldr	r3, [r4, #0]
 8011932:	441e      	add	r6, r3
 8011934:	6026      	str	r6, [r4, #0]
 8011936:	2000      	movs	r0, #0
 8011938:	e7dc      	b.n	80118f4 <__ssputs_r+0x58>
 801193a:	462a      	mov	r2, r5
 801193c:	f000 f9c5 	bl	8011cca <_realloc_r>
 8011940:	4606      	mov	r6, r0
 8011942:	2800      	cmp	r0, #0
 8011944:	d1e2      	bne.n	801190c <__ssputs_r+0x70>
 8011946:	6921      	ldr	r1, [r4, #16]
 8011948:	4650      	mov	r0, sl
 801194a:	f7fd fea5 	bl	800f698 <_free_r>
 801194e:	e7c8      	b.n	80118e2 <__ssputs_r+0x46>

08011950 <_svfiprintf_r>:
 8011950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011954:	461d      	mov	r5, r3
 8011956:	898b      	ldrh	r3, [r1, #12]
 8011958:	061f      	lsls	r7, r3, #24
 801195a:	b09d      	sub	sp, #116	; 0x74
 801195c:	4680      	mov	r8, r0
 801195e:	460c      	mov	r4, r1
 8011960:	4616      	mov	r6, r2
 8011962:	d50f      	bpl.n	8011984 <_svfiprintf_r+0x34>
 8011964:	690b      	ldr	r3, [r1, #16]
 8011966:	b96b      	cbnz	r3, 8011984 <_svfiprintf_r+0x34>
 8011968:	2140      	movs	r1, #64	; 0x40
 801196a:	f7fd fee3 	bl	800f734 <_malloc_r>
 801196e:	6020      	str	r0, [r4, #0]
 8011970:	6120      	str	r0, [r4, #16]
 8011972:	b928      	cbnz	r0, 8011980 <_svfiprintf_r+0x30>
 8011974:	230c      	movs	r3, #12
 8011976:	f8c8 3000 	str.w	r3, [r8]
 801197a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801197e:	e0c8      	b.n	8011b12 <_svfiprintf_r+0x1c2>
 8011980:	2340      	movs	r3, #64	; 0x40
 8011982:	6163      	str	r3, [r4, #20]
 8011984:	2300      	movs	r3, #0
 8011986:	9309      	str	r3, [sp, #36]	; 0x24
 8011988:	2320      	movs	r3, #32
 801198a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801198e:	2330      	movs	r3, #48	; 0x30
 8011990:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011994:	9503      	str	r5, [sp, #12]
 8011996:	f04f 0b01 	mov.w	fp, #1
 801199a:	4637      	mov	r7, r6
 801199c:	463d      	mov	r5, r7
 801199e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80119a2:	b10b      	cbz	r3, 80119a8 <_svfiprintf_r+0x58>
 80119a4:	2b25      	cmp	r3, #37	; 0x25
 80119a6:	d13e      	bne.n	8011a26 <_svfiprintf_r+0xd6>
 80119a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80119ac:	d00b      	beq.n	80119c6 <_svfiprintf_r+0x76>
 80119ae:	4653      	mov	r3, sl
 80119b0:	4632      	mov	r2, r6
 80119b2:	4621      	mov	r1, r4
 80119b4:	4640      	mov	r0, r8
 80119b6:	f7ff ff71 	bl	801189c <__ssputs_r>
 80119ba:	3001      	adds	r0, #1
 80119bc:	f000 80a4 	beq.w	8011b08 <_svfiprintf_r+0x1b8>
 80119c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119c2:	4453      	add	r3, sl
 80119c4:	9309      	str	r3, [sp, #36]	; 0x24
 80119c6:	783b      	ldrb	r3, [r7, #0]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	f000 809d 	beq.w	8011b08 <_svfiprintf_r+0x1b8>
 80119ce:	2300      	movs	r3, #0
 80119d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80119d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80119d8:	9304      	str	r3, [sp, #16]
 80119da:	9307      	str	r3, [sp, #28]
 80119dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80119e0:	931a      	str	r3, [sp, #104]	; 0x68
 80119e2:	462f      	mov	r7, r5
 80119e4:	2205      	movs	r2, #5
 80119e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80119ea:	4850      	ldr	r0, [pc, #320]	; (8011b2c <_svfiprintf_r+0x1dc>)
 80119ec:	f7f4 fff0 	bl	80069d0 <memchr>
 80119f0:	9b04      	ldr	r3, [sp, #16]
 80119f2:	b9d0      	cbnz	r0, 8011a2a <_svfiprintf_r+0xda>
 80119f4:	06d9      	lsls	r1, r3, #27
 80119f6:	bf44      	itt	mi
 80119f8:	2220      	movmi	r2, #32
 80119fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80119fe:	071a      	lsls	r2, r3, #28
 8011a00:	bf44      	itt	mi
 8011a02:	222b      	movmi	r2, #43	; 0x2b
 8011a04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011a08:	782a      	ldrb	r2, [r5, #0]
 8011a0a:	2a2a      	cmp	r2, #42	; 0x2a
 8011a0c:	d015      	beq.n	8011a3a <_svfiprintf_r+0xea>
 8011a0e:	9a07      	ldr	r2, [sp, #28]
 8011a10:	462f      	mov	r7, r5
 8011a12:	2000      	movs	r0, #0
 8011a14:	250a      	movs	r5, #10
 8011a16:	4639      	mov	r1, r7
 8011a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a1c:	3b30      	subs	r3, #48	; 0x30
 8011a1e:	2b09      	cmp	r3, #9
 8011a20:	d94d      	bls.n	8011abe <_svfiprintf_r+0x16e>
 8011a22:	b1b8      	cbz	r0, 8011a54 <_svfiprintf_r+0x104>
 8011a24:	e00f      	b.n	8011a46 <_svfiprintf_r+0xf6>
 8011a26:	462f      	mov	r7, r5
 8011a28:	e7b8      	b.n	801199c <_svfiprintf_r+0x4c>
 8011a2a:	4a40      	ldr	r2, [pc, #256]	; (8011b2c <_svfiprintf_r+0x1dc>)
 8011a2c:	1a80      	subs	r0, r0, r2
 8011a2e:	fa0b f000 	lsl.w	r0, fp, r0
 8011a32:	4318      	orrs	r0, r3
 8011a34:	9004      	str	r0, [sp, #16]
 8011a36:	463d      	mov	r5, r7
 8011a38:	e7d3      	b.n	80119e2 <_svfiprintf_r+0x92>
 8011a3a:	9a03      	ldr	r2, [sp, #12]
 8011a3c:	1d11      	adds	r1, r2, #4
 8011a3e:	6812      	ldr	r2, [r2, #0]
 8011a40:	9103      	str	r1, [sp, #12]
 8011a42:	2a00      	cmp	r2, #0
 8011a44:	db01      	blt.n	8011a4a <_svfiprintf_r+0xfa>
 8011a46:	9207      	str	r2, [sp, #28]
 8011a48:	e004      	b.n	8011a54 <_svfiprintf_r+0x104>
 8011a4a:	4252      	negs	r2, r2
 8011a4c:	f043 0302 	orr.w	r3, r3, #2
 8011a50:	9207      	str	r2, [sp, #28]
 8011a52:	9304      	str	r3, [sp, #16]
 8011a54:	783b      	ldrb	r3, [r7, #0]
 8011a56:	2b2e      	cmp	r3, #46	; 0x2e
 8011a58:	d10c      	bne.n	8011a74 <_svfiprintf_r+0x124>
 8011a5a:	787b      	ldrb	r3, [r7, #1]
 8011a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8011a5e:	d133      	bne.n	8011ac8 <_svfiprintf_r+0x178>
 8011a60:	9b03      	ldr	r3, [sp, #12]
 8011a62:	1d1a      	adds	r2, r3, #4
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	9203      	str	r2, [sp, #12]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	bfb8      	it	lt
 8011a6c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011a70:	3702      	adds	r7, #2
 8011a72:	9305      	str	r3, [sp, #20]
 8011a74:	4d2e      	ldr	r5, [pc, #184]	; (8011b30 <_svfiprintf_r+0x1e0>)
 8011a76:	7839      	ldrb	r1, [r7, #0]
 8011a78:	2203      	movs	r2, #3
 8011a7a:	4628      	mov	r0, r5
 8011a7c:	f7f4 ffa8 	bl	80069d0 <memchr>
 8011a80:	b138      	cbz	r0, 8011a92 <_svfiprintf_r+0x142>
 8011a82:	2340      	movs	r3, #64	; 0x40
 8011a84:	1b40      	subs	r0, r0, r5
 8011a86:	fa03 f000 	lsl.w	r0, r3, r0
 8011a8a:	9b04      	ldr	r3, [sp, #16]
 8011a8c:	4303      	orrs	r3, r0
 8011a8e:	3701      	adds	r7, #1
 8011a90:	9304      	str	r3, [sp, #16]
 8011a92:	7839      	ldrb	r1, [r7, #0]
 8011a94:	4827      	ldr	r0, [pc, #156]	; (8011b34 <_svfiprintf_r+0x1e4>)
 8011a96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011a9a:	2206      	movs	r2, #6
 8011a9c:	1c7e      	adds	r6, r7, #1
 8011a9e:	f7f4 ff97 	bl	80069d0 <memchr>
 8011aa2:	2800      	cmp	r0, #0
 8011aa4:	d038      	beq.n	8011b18 <_svfiprintf_r+0x1c8>
 8011aa6:	4b24      	ldr	r3, [pc, #144]	; (8011b38 <_svfiprintf_r+0x1e8>)
 8011aa8:	bb13      	cbnz	r3, 8011af0 <_svfiprintf_r+0x1a0>
 8011aaa:	9b03      	ldr	r3, [sp, #12]
 8011aac:	3307      	adds	r3, #7
 8011aae:	f023 0307 	bic.w	r3, r3, #7
 8011ab2:	3308      	adds	r3, #8
 8011ab4:	9303      	str	r3, [sp, #12]
 8011ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ab8:	444b      	add	r3, r9
 8011aba:	9309      	str	r3, [sp, #36]	; 0x24
 8011abc:	e76d      	b.n	801199a <_svfiprintf_r+0x4a>
 8011abe:	fb05 3202 	mla	r2, r5, r2, r3
 8011ac2:	2001      	movs	r0, #1
 8011ac4:	460f      	mov	r7, r1
 8011ac6:	e7a6      	b.n	8011a16 <_svfiprintf_r+0xc6>
 8011ac8:	2300      	movs	r3, #0
 8011aca:	3701      	adds	r7, #1
 8011acc:	9305      	str	r3, [sp, #20]
 8011ace:	4619      	mov	r1, r3
 8011ad0:	250a      	movs	r5, #10
 8011ad2:	4638      	mov	r0, r7
 8011ad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ad8:	3a30      	subs	r2, #48	; 0x30
 8011ada:	2a09      	cmp	r2, #9
 8011adc:	d903      	bls.n	8011ae6 <_svfiprintf_r+0x196>
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d0c8      	beq.n	8011a74 <_svfiprintf_r+0x124>
 8011ae2:	9105      	str	r1, [sp, #20]
 8011ae4:	e7c6      	b.n	8011a74 <_svfiprintf_r+0x124>
 8011ae6:	fb05 2101 	mla	r1, r5, r1, r2
 8011aea:	2301      	movs	r3, #1
 8011aec:	4607      	mov	r7, r0
 8011aee:	e7f0      	b.n	8011ad2 <_svfiprintf_r+0x182>
 8011af0:	ab03      	add	r3, sp, #12
 8011af2:	9300      	str	r3, [sp, #0]
 8011af4:	4622      	mov	r2, r4
 8011af6:	4b11      	ldr	r3, [pc, #68]	; (8011b3c <_svfiprintf_r+0x1ec>)
 8011af8:	a904      	add	r1, sp, #16
 8011afa:	4640      	mov	r0, r8
 8011afc:	f7fd ff08 	bl	800f910 <_printf_float>
 8011b00:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8011b04:	4681      	mov	r9, r0
 8011b06:	d1d6      	bne.n	8011ab6 <_svfiprintf_r+0x166>
 8011b08:	89a3      	ldrh	r3, [r4, #12]
 8011b0a:	065b      	lsls	r3, r3, #25
 8011b0c:	f53f af35 	bmi.w	801197a <_svfiprintf_r+0x2a>
 8011b10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b12:	b01d      	add	sp, #116	; 0x74
 8011b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b18:	ab03      	add	r3, sp, #12
 8011b1a:	9300      	str	r3, [sp, #0]
 8011b1c:	4622      	mov	r2, r4
 8011b1e:	4b07      	ldr	r3, [pc, #28]	; (8011b3c <_svfiprintf_r+0x1ec>)
 8011b20:	a904      	add	r1, sp, #16
 8011b22:	4640      	mov	r0, r8
 8011b24:	f7fe f9aa 	bl	800fe7c <_printf_i>
 8011b28:	e7ea      	b.n	8011b00 <_svfiprintf_r+0x1b0>
 8011b2a:	bf00      	nop
 8011b2c:	080a70f4 	.word	0x080a70f4
 8011b30:	080a70fa 	.word	0x080a70fa
 8011b34:	080a70fe 	.word	0x080a70fe
 8011b38:	0800f911 	.word	0x0800f911
 8011b3c:	0801189d 	.word	0x0801189d

08011b40 <__sread>:
 8011b40:	b510      	push	{r4, lr}
 8011b42:	460c      	mov	r4, r1
 8011b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b48:	f000 f8e6 	bl	8011d18 <_read_r>
 8011b4c:	2800      	cmp	r0, #0
 8011b4e:	bfab      	itete	ge
 8011b50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011b52:	89a3      	ldrhlt	r3, [r4, #12]
 8011b54:	181b      	addge	r3, r3, r0
 8011b56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011b5a:	bfac      	ite	ge
 8011b5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8011b5e:	81a3      	strhlt	r3, [r4, #12]
 8011b60:	bd10      	pop	{r4, pc}

08011b62 <__swrite>:
 8011b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b66:	461f      	mov	r7, r3
 8011b68:	898b      	ldrh	r3, [r1, #12]
 8011b6a:	05db      	lsls	r3, r3, #23
 8011b6c:	4605      	mov	r5, r0
 8011b6e:	460c      	mov	r4, r1
 8011b70:	4616      	mov	r6, r2
 8011b72:	d505      	bpl.n	8011b80 <__swrite+0x1e>
 8011b74:	2302      	movs	r3, #2
 8011b76:	2200      	movs	r2, #0
 8011b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b7c:	f000 f868 	bl	8011c50 <_lseek_r>
 8011b80:	89a3      	ldrh	r3, [r4, #12]
 8011b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011b8a:	81a3      	strh	r3, [r4, #12]
 8011b8c:	4632      	mov	r2, r6
 8011b8e:	463b      	mov	r3, r7
 8011b90:	4628      	mov	r0, r5
 8011b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b96:	f000 b817 	b.w	8011bc8 <_write_r>

08011b9a <__sseek>:
 8011b9a:	b510      	push	{r4, lr}
 8011b9c:	460c      	mov	r4, r1
 8011b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ba2:	f000 f855 	bl	8011c50 <_lseek_r>
 8011ba6:	1c43      	adds	r3, r0, #1
 8011ba8:	89a3      	ldrh	r3, [r4, #12]
 8011baa:	bf15      	itete	ne
 8011bac:	6560      	strne	r0, [r4, #84]	; 0x54
 8011bae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011bb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011bb6:	81a3      	strheq	r3, [r4, #12]
 8011bb8:	bf18      	it	ne
 8011bba:	81a3      	strhne	r3, [r4, #12]
 8011bbc:	bd10      	pop	{r4, pc}

08011bbe <__sclose>:
 8011bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bc2:	f000 b813 	b.w	8011bec <_close_r>
	...

08011bc8 <_write_r>:
 8011bc8:	b538      	push	{r3, r4, r5, lr}
 8011bca:	4c07      	ldr	r4, [pc, #28]	; (8011be8 <_write_r+0x20>)
 8011bcc:	4605      	mov	r5, r0
 8011bce:	4608      	mov	r0, r1
 8011bd0:	4611      	mov	r1, r2
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	6022      	str	r2, [r4, #0]
 8011bd6:	461a      	mov	r2, r3
 8011bd8:	f7f9 fad3 	bl	800b182 <_write>
 8011bdc:	1c43      	adds	r3, r0, #1
 8011bde:	d102      	bne.n	8011be6 <_write_r+0x1e>
 8011be0:	6823      	ldr	r3, [r4, #0]
 8011be2:	b103      	cbz	r3, 8011be6 <_write_r+0x1e>
 8011be4:	602b      	str	r3, [r5, #0]
 8011be6:	bd38      	pop	{r3, r4, r5, pc}
 8011be8:	2002efc8 	.word	0x2002efc8

08011bec <_close_r>:
 8011bec:	b538      	push	{r3, r4, r5, lr}
 8011bee:	4c06      	ldr	r4, [pc, #24]	; (8011c08 <_close_r+0x1c>)
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	4605      	mov	r5, r0
 8011bf4:	4608      	mov	r0, r1
 8011bf6:	6023      	str	r3, [r4, #0]
 8011bf8:	f7f9 fadf 	bl	800b1ba <_close>
 8011bfc:	1c43      	adds	r3, r0, #1
 8011bfe:	d102      	bne.n	8011c06 <_close_r+0x1a>
 8011c00:	6823      	ldr	r3, [r4, #0]
 8011c02:	b103      	cbz	r3, 8011c06 <_close_r+0x1a>
 8011c04:	602b      	str	r3, [r5, #0]
 8011c06:	bd38      	pop	{r3, r4, r5, pc}
 8011c08:	2002efc8 	.word	0x2002efc8

08011c0c <_fstat_r>:
 8011c0c:	b538      	push	{r3, r4, r5, lr}
 8011c0e:	4c07      	ldr	r4, [pc, #28]	; (8011c2c <_fstat_r+0x20>)
 8011c10:	2300      	movs	r3, #0
 8011c12:	4605      	mov	r5, r0
 8011c14:	4608      	mov	r0, r1
 8011c16:	4611      	mov	r1, r2
 8011c18:	6023      	str	r3, [r4, #0]
 8011c1a:	f7f9 fada 	bl	800b1d2 <_fstat>
 8011c1e:	1c43      	adds	r3, r0, #1
 8011c20:	d102      	bne.n	8011c28 <_fstat_r+0x1c>
 8011c22:	6823      	ldr	r3, [r4, #0]
 8011c24:	b103      	cbz	r3, 8011c28 <_fstat_r+0x1c>
 8011c26:	602b      	str	r3, [r5, #0]
 8011c28:	bd38      	pop	{r3, r4, r5, pc}
 8011c2a:	bf00      	nop
 8011c2c:	2002efc8 	.word	0x2002efc8

08011c30 <_isatty_r>:
 8011c30:	b538      	push	{r3, r4, r5, lr}
 8011c32:	4c06      	ldr	r4, [pc, #24]	; (8011c4c <_isatty_r+0x1c>)
 8011c34:	2300      	movs	r3, #0
 8011c36:	4605      	mov	r5, r0
 8011c38:	4608      	mov	r0, r1
 8011c3a:	6023      	str	r3, [r4, #0]
 8011c3c:	f7f9 fad9 	bl	800b1f2 <_isatty>
 8011c40:	1c43      	adds	r3, r0, #1
 8011c42:	d102      	bne.n	8011c4a <_isatty_r+0x1a>
 8011c44:	6823      	ldr	r3, [r4, #0]
 8011c46:	b103      	cbz	r3, 8011c4a <_isatty_r+0x1a>
 8011c48:	602b      	str	r3, [r5, #0]
 8011c4a:	bd38      	pop	{r3, r4, r5, pc}
 8011c4c:	2002efc8 	.word	0x2002efc8

08011c50 <_lseek_r>:
 8011c50:	b538      	push	{r3, r4, r5, lr}
 8011c52:	4c07      	ldr	r4, [pc, #28]	; (8011c70 <_lseek_r+0x20>)
 8011c54:	4605      	mov	r5, r0
 8011c56:	4608      	mov	r0, r1
 8011c58:	4611      	mov	r1, r2
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	6022      	str	r2, [r4, #0]
 8011c5e:	461a      	mov	r2, r3
 8011c60:	f7f9 fad2 	bl	800b208 <_lseek>
 8011c64:	1c43      	adds	r3, r0, #1
 8011c66:	d102      	bne.n	8011c6e <_lseek_r+0x1e>
 8011c68:	6823      	ldr	r3, [r4, #0]
 8011c6a:	b103      	cbz	r3, 8011c6e <_lseek_r+0x1e>
 8011c6c:	602b      	str	r3, [r5, #0]
 8011c6e:	bd38      	pop	{r3, r4, r5, pc}
 8011c70:	2002efc8 	.word	0x2002efc8

08011c74 <__ascii_mbtowc>:
 8011c74:	b082      	sub	sp, #8
 8011c76:	b901      	cbnz	r1, 8011c7a <__ascii_mbtowc+0x6>
 8011c78:	a901      	add	r1, sp, #4
 8011c7a:	b142      	cbz	r2, 8011c8e <__ascii_mbtowc+0x1a>
 8011c7c:	b14b      	cbz	r3, 8011c92 <__ascii_mbtowc+0x1e>
 8011c7e:	7813      	ldrb	r3, [r2, #0]
 8011c80:	600b      	str	r3, [r1, #0]
 8011c82:	7812      	ldrb	r2, [r2, #0]
 8011c84:	1c10      	adds	r0, r2, #0
 8011c86:	bf18      	it	ne
 8011c88:	2001      	movne	r0, #1
 8011c8a:	b002      	add	sp, #8
 8011c8c:	4770      	bx	lr
 8011c8e:	4610      	mov	r0, r2
 8011c90:	e7fb      	b.n	8011c8a <__ascii_mbtowc+0x16>
 8011c92:	f06f 0001 	mvn.w	r0, #1
 8011c96:	e7f8      	b.n	8011c8a <__ascii_mbtowc+0x16>

08011c98 <memmove>:
 8011c98:	4288      	cmp	r0, r1
 8011c9a:	b510      	push	{r4, lr}
 8011c9c:	eb01 0302 	add.w	r3, r1, r2
 8011ca0:	d807      	bhi.n	8011cb2 <memmove+0x1a>
 8011ca2:	1e42      	subs	r2, r0, #1
 8011ca4:	4299      	cmp	r1, r3
 8011ca6:	d00a      	beq.n	8011cbe <memmove+0x26>
 8011ca8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011cac:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011cb0:	e7f8      	b.n	8011ca4 <memmove+0xc>
 8011cb2:	4283      	cmp	r3, r0
 8011cb4:	d9f5      	bls.n	8011ca2 <memmove+0xa>
 8011cb6:	1881      	adds	r1, r0, r2
 8011cb8:	1ad2      	subs	r2, r2, r3
 8011cba:	42d3      	cmn	r3, r2
 8011cbc:	d100      	bne.n	8011cc0 <memmove+0x28>
 8011cbe:	bd10      	pop	{r4, pc}
 8011cc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011cc4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011cc8:	e7f7      	b.n	8011cba <memmove+0x22>

08011cca <_realloc_r>:
 8011cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ccc:	4607      	mov	r7, r0
 8011cce:	4614      	mov	r4, r2
 8011cd0:	460e      	mov	r6, r1
 8011cd2:	b921      	cbnz	r1, 8011cde <_realloc_r+0x14>
 8011cd4:	4611      	mov	r1, r2
 8011cd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011cda:	f7fd bd2b 	b.w	800f734 <_malloc_r>
 8011cde:	b922      	cbnz	r2, 8011cea <_realloc_r+0x20>
 8011ce0:	f7fd fcda 	bl	800f698 <_free_r>
 8011ce4:	4625      	mov	r5, r4
 8011ce6:	4628      	mov	r0, r5
 8011ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cea:	f000 f834 	bl	8011d56 <_malloc_usable_size_r>
 8011cee:	42a0      	cmp	r0, r4
 8011cf0:	d20f      	bcs.n	8011d12 <_realloc_r+0x48>
 8011cf2:	4621      	mov	r1, r4
 8011cf4:	4638      	mov	r0, r7
 8011cf6:	f7fd fd1d 	bl	800f734 <_malloc_r>
 8011cfa:	4605      	mov	r5, r0
 8011cfc:	2800      	cmp	r0, #0
 8011cfe:	d0f2      	beq.n	8011ce6 <_realloc_r+0x1c>
 8011d00:	4631      	mov	r1, r6
 8011d02:	4622      	mov	r2, r4
 8011d04:	f7fd fca7 	bl	800f656 <memcpy>
 8011d08:	4631      	mov	r1, r6
 8011d0a:	4638      	mov	r0, r7
 8011d0c:	f7fd fcc4 	bl	800f698 <_free_r>
 8011d10:	e7e9      	b.n	8011ce6 <_realloc_r+0x1c>
 8011d12:	4635      	mov	r5, r6
 8011d14:	e7e7      	b.n	8011ce6 <_realloc_r+0x1c>
	...

08011d18 <_read_r>:
 8011d18:	b538      	push	{r3, r4, r5, lr}
 8011d1a:	4c07      	ldr	r4, [pc, #28]	; (8011d38 <_read_r+0x20>)
 8011d1c:	4605      	mov	r5, r0
 8011d1e:	4608      	mov	r0, r1
 8011d20:	4611      	mov	r1, r2
 8011d22:	2200      	movs	r2, #0
 8011d24:	6022      	str	r2, [r4, #0]
 8011d26:	461a      	mov	r2, r3
 8011d28:	f7f9 fa0e 	bl	800b148 <_read>
 8011d2c:	1c43      	adds	r3, r0, #1
 8011d2e:	d102      	bne.n	8011d36 <_read_r+0x1e>
 8011d30:	6823      	ldr	r3, [r4, #0]
 8011d32:	b103      	cbz	r3, 8011d36 <_read_r+0x1e>
 8011d34:	602b      	str	r3, [r5, #0]
 8011d36:	bd38      	pop	{r3, r4, r5, pc}
 8011d38:	2002efc8 	.word	0x2002efc8

08011d3c <__ascii_wctomb>:
 8011d3c:	b149      	cbz	r1, 8011d52 <__ascii_wctomb+0x16>
 8011d3e:	2aff      	cmp	r2, #255	; 0xff
 8011d40:	bf85      	ittet	hi
 8011d42:	238a      	movhi	r3, #138	; 0x8a
 8011d44:	6003      	strhi	r3, [r0, #0]
 8011d46:	700a      	strbls	r2, [r1, #0]
 8011d48:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011d4c:	bf98      	it	ls
 8011d4e:	2001      	movls	r0, #1
 8011d50:	4770      	bx	lr
 8011d52:	4608      	mov	r0, r1
 8011d54:	4770      	bx	lr

08011d56 <_malloc_usable_size_r>:
 8011d56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d5a:	1f18      	subs	r0, r3, #4
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	bfbc      	itt	lt
 8011d60:	580b      	ldrlt	r3, [r1, r0]
 8011d62:	18c0      	addlt	r0, r0, r3
 8011d64:	4770      	bx	lr
	...

08011d68 <cos>:
 8011d68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d6a:	ec51 0b10 	vmov	r0, r1, d0
 8011d6e:	4a1e      	ldr	r2, [pc, #120]	; (8011de8 <cos+0x80>)
 8011d70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011d74:	4293      	cmp	r3, r2
 8011d76:	dc06      	bgt.n	8011d86 <cos+0x1e>
 8011d78:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011de0 <cos+0x78>
 8011d7c:	f003 f9b0 	bl	80150e0 <__kernel_cos>
 8011d80:	ec51 0b10 	vmov	r0, r1, d0
 8011d84:	e007      	b.n	8011d96 <cos+0x2e>
 8011d86:	4a19      	ldr	r2, [pc, #100]	; (8011dec <cos+0x84>)
 8011d88:	4293      	cmp	r3, r2
 8011d8a:	dd09      	ble.n	8011da0 <cos+0x38>
 8011d8c:	ee10 2a10 	vmov	r2, s0
 8011d90:	460b      	mov	r3, r1
 8011d92:	f7f4 fe71 	bl	8006a78 <__aeabi_dsub>
 8011d96:	ec41 0b10 	vmov	d0, r0, r1
 8011d9a:	b005      	add	sp, #20
 8011d9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011da0:	4668      	mov	r0, sp
 8011da2:	f001 fd19 	bl	80137d8 <__ieee754_rem_pio2>
 8011da6:	f000 0003 	and.w	r0, r0, #3
 8011daa:	2801      	cmp	r0, #1
 8011dac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011db0:	ed9d 0b00 	vldr	d0, [sp]
 8011db4:	d007      	beq.n	8011dc6 <cos+0x5e>
 8011db6:	2802      	cmp	r0, #2
 8011db8:	d00e      	beq.n	8011dd8 <cos+0x70>
 8011dba:	2800      	cmp	r0, #0
 8011dbc:	d0de      	beq.n	8011d7c <cos+0x14>
 8011dbe:	2001      	movs	r0, #1
 8011dc0:	f003 fd96 	bl	80158f0 <__kernel_sin>
 8011dc4:	e7dc      	b.n	8011d80 <cos+0x18>
 8011dc6:	f003 fd93 	bl	80158f0 <__kernel_sin>
 8011dca:	ec53 2b10 	vmov	r2, r3, d0
 8011dce:	ee10 0a10 	vmov	r0, s0
 8011dd2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011dd6:	e7de      	b.n	8011d96 <cos+0x2e>
 8011dd8:	f003 f982 	bl	80150e0 <__kernel_cos>
 8011ddc:	e7f5      	b.n	8011dca <cos+0x62>
 8011dde:	bf00      	nop
	...
 8011de8:	3fe921fb 	.word	0x3fe921fb
 8011dec:	7fefffff 	.word	0x7fefffff

08011df0 <floor>:
 8011df0:	ec51 0b10 	vmov	r0, r1, d0
 8011df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011df8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8011dfc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011e00:	2e13      	cmp	r6, #19
 8011e02:	460c      	mov	r4, r1
 8011e04:	ee10 5a10 	vmov	r5, s0
 8011e08:	4680      	mov	r8, r0
 8011e0a:	dc34      	bgt.n	8011e76 <floor+0x86>
 8011e0c:	2e00      	cmp	r6, #0
 8011e0e:	da16      	bge.n	8011e3e <floor+0x4e>
 8011e10:	a335      	add	r3, pc, #212	; (adr r3, 8011ee8 <floor+0xf8>)
 8011e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e16:	f7f4 fe31 	bl	8006a7c <__adddf3>
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	f7f5 fa73 	bl	8007308 <__aeabi_dcmpgt>
 8011e22:	b148      	cbz	r0, 8011e38 <floor+0x48>
 8011e24:	2c00      	cmp	r4, #0
 8011e26:	da59      	bge.n	8011edc <floor+0xec>
 8011e28:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011e2c:	4a30      	ldr	r2, [pc, #192]	; (8011ef0 <floor+0x100>)
 8011e2e:	432b      	orrs	r3, r5
 8011e30:	2500      	movs	r5, #0
 8011e32:	42ab      	cmp	r3, r5
 8011e34:	bf18      	it	ne
 8011e36:	4614      	movne	r4, r2
 8011e38:	4621      	mov	r1, r4
 8011e3a:	4628      	mov	r0, r5
 8011e3c:	e025      	b.n	8011e8a <floor+0x9a>
 8011e3e:	4f2d      	ldr	r7, [pc, #180]	; (8011ef4 <floor+0x104>)
 8011e40:	4137      	asrs	r7, r6
 8011e42:	ea01 0307 	and.w	r3, r1, r7
 8011e46:	4303      	orrs	r3, r0
 8011e48:	d01f      	beq.n	8011e8a <floor+0x9a>
 8011e4a:	a327      	add	r3, pc, #156	; (adr r3, 8011ee8 <floor+0xf8>)
 8011e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e50:	f7f4 fe14 	bl	8006a7c <__adddf3>
 8011e54:	2200      	movs	r2, #0
 8011e56:	2300      	movs	r3, #0
 8011e58:	f7f5 fa56 	bl	8007308 <__aeabi_dcmpgt>
 8011e5c:	2800      	cmp	r0, #0
 8011e5e:	d0eb      	beq.n	8011e38 <floor+0x48>
 8011e60:	2c00      	cmp	r4, #0
 8011e62:	bfbe      	ittt	lt
 8011e64:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011e68:	fa43 f606 	asrlt.w	r6, r3, r6
 8011e6c:	19a4      	addlt	r4, r4, r6
 8011e6e:	ea24 0407 	bic.w	r4, r4, r7
 8011e72:	2500      	movs	r5, #0
 8011e74:	e7e0      	b.n	8011e38 <floor+0x48>
 8011e76:	2e33      	cmp	r6, #51	; 0x33
 8011e78:	dd0b      	ble.n	8011e92 <floor+0xa2>
 8011e7a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011e7e:	d104      	bne.n	8011e8a <floor+0x9a>
 8011e80:	ee10 2a10 	vmov	r2, s0
 8011e84:	460b      	mov	r3, r1
 8011e86:	f7f4 fdf9 	bl	8006a7c <__adddf3>
 8011e8a:	ec41 0b10 	vmov	d0, r0, r1
 8011e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e92:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8011e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e9a:	fa23 f707 	lsr.w	r7, r3, r7
 8011e9e:	4207      	tst	r7, r0
 8011ea0:	d0f3      	beq.n	8011e8a <floor+0x9a>
 8011ea2:	a311      	add	r3, pc, #68	; (adr r3, 8011ee8 <floor+0xf8>)
 8011ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea8:	f7f4 fde8 	bl	8006a7c <__adddf3>
 8011eac:	2200      	movs	r2, #0
 8011eae:	2300      	movs	r3, #0
 8011eb0:	f7f5 fa2a 	bl	8007308 <__aeabi_dcmpgt>
 8011eb4:	2800      	cmp	r0, #0
 8011eb6:	d0bf      	beq.n	8011e38 <floor+0x48>
 8011eb8:	2c00      	cmp	r4, #0
 8011eba:	da02      	bge.n	8011ec2 <floor+0xd2>
 8011ebc:	2e14      	cmp	r6, #20
 8011ebe:	d103      	bne.n	8011ec8 <floor+0xd8>
 8011ec0:	3401      	adds	r4, #1
 8011ec2:	ea25 0507 	bic.w	r5, r5, r7
 8011ec6:	e7b7      	b.n	8011e38 <floor+0x48>
 8011ec8:	2301      	movs	r3, #1
 8011eca:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011ece:	fa03 f606 	lsl.w	r6, r3, r6
 8011ed2:	4435      	add	r5, r6
 8011ed4:	4545      	cmp	r5, r8
 8011ed6:	bf38      	it	cc
 8011ed8:	18e4      	addcc	r4, r4, r3
 8011eda:	e7f2      	b.n	8011ec2 <floor+0xd2>
 8011edc:	2500      	movs	r5, #0
 8011ede:	462c      	mov	r4, r5
 8011ee0:	e7aa      	b.n	8011e38 <floor+0x48>
 8011ee2:	bf00      	nop
 8011ee4:	f3af 8000 	nop.w
 8011ee8:	8800759c 	.word	0x8800759c
 8011eec:	7e37e43c 	.word	0x7e37e43c
 8011ef0:	bff00000 	.word	0xbff00000
 8011ef4:	000fffff 	.word	0x000fffff

08011ef8 <round>:
 8011ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011efa:	ec57 6b10 	vmov	r6, r7, d0
 8011efe:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8011f02:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8011f06:	2c13      	cmp	r4, #19
 8011f08:	463b      	mov	r3, r7
 8011f0a:	463d      	mov	r5, r7
 8011f0c:	dc17      	bgt.n	8011f3e <round+0x46>
 8011f0e:	2c00      	cmp	r4, #0
 8011f10:	da09      	bge.n	8011f26 <round+0x2e>
 8011f12:	3401      	adds	r4, #1
 8011f14:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8011f18:	d103      	bne.n	8011f22 <round+0x2a>
 8011f1a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011f1e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011f22:	2100      	movs	r1, #0
 8011f24:	e02c      	b.n	8011f80 <round+0x88>
 8011f26:	4a18      	ldr	r2, [pc, #96]	; (8011f88 <round+0x90>)
 8011f28:	4122      	asrs	r2, r4
 8011f2a:	4217      	tst	r7, r2
 8011f2c:	d100      	bne.n	8011f30 <round+0x38>
 8011f2e:	b19e      	cbz	r6, 8011f58 <round+0x60>
 8011f30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011f34:	4123      	asrs	r3, r4
 8011f36:	442b      	add	r3, r5
 8011f38:	ea23 0302 	bic.w	r3, r3, r2
 8011f3c:	e7f1      	b.n	8011f22 <round+0x2a>
 8011f3e:	2c33      	cmp	r4, #51	; 0x33
 8011f40:	dd0d      	ble.n	8011f5e <round+0x66>
 8011f42:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8011f46:	d107      	bne.n	8011f58 <round+0x60>
 8011f48:	4630      	mov	r0, r6
 8011f4a:	4639      	mov	r1, r7
 8011f4c:	ee10 2a10 	vmov	r2, s0
 8011f50:	f7f4 fd94 	bl	8006a7c <__adddf3>
 8011f54:	4606      	mov	r6, r0
 8011f56:	460f      	mov	r7, r1
 8011f58:	ec47 6b10 	vmov	d0, r6, r7
 8011f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f5e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8011f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f66:	40d0      	lsrs	r0, r2
 8011f68:	4206      	tst	r6, r0
 8011f6a:	d0f5      	beq.n	8011f58 <round+0x60>
 8011f6c:	2201      	movs	r2, #1
 8011f6e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8011f72:	fa02 f404 	lsl.w	r4, r2, r4
 8011f76:	1931      	adds	r1, r6, r4
 8011f78:	bf28      	it	cs
 8011f7a:	189b      	addcs	r3, r3, r2
 8011f7c:	ea21 0100 	bic.w	r1, r1, r0
 8011f80:	461f      	mov	r7, r3
 8011f82:	460e      	mov	r6, r1
 8011f84:	e7e8      	b.n	8011f58 <round+0x60>
 8011f86:	bf00      	nop
 8011f88:	000fffff 	.word	0x000fffff
 8011f8c:	00000000 	.word	0x00000000

08011f90 <sin>:
 8011f90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f92:	ec51 0b10 	vmov	r0, r1, d0
 8011f96:	4a20      	ldr	r2, [pc, #128]	; (8012018 <sin+0x88>)
 8011f98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011f9c:	4293      	cmp	r3, r2
 8011f9e:	dc07      	bgt.n	8011fb0 <sin+0x20>
 8011fa0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8012010 <sin+0x80>
 8011fa4:	2000      	movs	r0, #0
 8011fa6:	f003 fca3 	bl	80158f0 <__kernel_sin>
 8011faa:	ec51 0b10 	vmov	r0, r1, d0
 8011fae:	e007      	b.n	8011fc0 <sin+0x30>
 8011fb0:	4a1a      	ldr	r2, [pc, #104]	; (801201c <sin+0x8c>)
 8011fb2:	4293      	cmp	r3, r2
 8011fb4:	dd09      	ble.n	8011fca <sin+0x3a>
 8011fb6:	ee10 2a10 	vmov	r2, s0
 8011fba:	460b      	mov	r3, r1
 8011fbc:	f7f4 fd5c 	bl	8006a78 <__aeabi_dsub>
 8011fc0:	ec41 0b10 	vmov	d0, r0, r1
 8011fc4:	b005      	add	sp, #20
 8011fc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8011fca:	4668      	mov	r0, sp
 8011fcc:	f001 fc04 	bl	80137d8 <__ieee754_rem_pio2>
 8011fd0:	f000 0003 	and.w	r0, r0, #3
 8011fd4:	2801      	cmp	r0, #1
 8011fd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011fda:	ed9d 0b00 	vldr	d0, [sp]
 8011fde:	d004      	beq.n	8011fea <sin+0x5a>
 8011fe0:	2802      	cmp	r0, #2
 8011fe2:	d005      	beq.n	8011ff0 <sin+0x60>
 8011fe4:	b970      	cbnz	r0, 8012004 <sin+0x74>
 8011fe6:	2001      	movs	r0, #1
 8011fe8:	e7dd      	b.n	8011fa6 <sin+0x16>
 8011fea:	f003 f879 	bl	80150e0 <__kernel_cos>
 8011fee:	e7dc      	b.n	8011faa <sin+0x1a>
 8011ff0:	2001      	movs	r0, #1
 8011ff2:	f003 fc7d 	bl	80158f0 <__kernel_sin>
 8011ff6:	ec53 2b10 	vmov	r2, r3, d0
 8011ffa:	ee10 0a10 	vmov	r0, s0
 8011ffe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012002:	e7dd      	b.n	8011fc0 <sin+0x30>
 8012004:	f003 f86c 	bl	80150e0 <__kernel_cos>
 8012008:	e7f5      	b.n	8011ff6 <sin+0x66>
 801200a:	bf00      	nop
 801200c:	f3af 8000 	nop.w
	...
 8012018:	3fe921fb 	.word	0x3fe921fb
 801201c:	7fefffff 	.word	0x7fefffff

08012020 <asinhf>:
 8012020:	b510      	push	{r4, lr}
 8012022:	ee10 4a10 	vmov	r4, s0
 8012026:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801202a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801202e:	ed2d 8b04 	vpush	{d8-d9}
 8012032:	eeb0 8a40 	vmov.f32	s16, s0
 8012036:	db06      	blt.n	8012046 <asinhf+0x26>
 8012038:	ee30 8a00 	vadd.f32	s16, s0, s0
 801203c:	eeb0 0a48 	vmov.f32	s0, s16
 8012040:	ecbd 8b04 	vpop	{d8-d9}
 8012044:	bd10      	pop	{r4, pc}
 8012046:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 801204a:	da21      	bge.n	8012090 <asinhf+0x70>
 801204c:	eddf 7a26 	vldr	s15, [pc, #152]	; 80120e8 <asinhf+0xc8>
 8012050:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012054:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012058:	eef4 7ac7 	vcmpe.f32	s15, s14
 801205c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012060:	dcec      	bgt.n	801203c <asinhf+0x1c>
 8012062:	eeb0 0a48 	vmov.f32	s0, s16
 8012066:	f000 fb77 	bl	8012758 <fabsf>
 801206a:	ee68 8a08 	vmul.f32	s17, s16, s16
 801206e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8012072:	eeb0 9a40 	vmov.f32	s18, s0
 8012076:	ee38 0a88 	vadd.f32	s0, s17, s16
 801207a:	f003 f82b 	bl	80150d4 <__ieee754_sqrtf>
 801207e:	ee30 8a08 	vadd.f32	s16, s0, s16
 8012082:	ee88 0a88 	vdiv.f32	s0, s17, s16
 8012086:	ee30 0a09 	vadd.f32	s0, s0, s18
 801208a:	f000 fbaf 	bl	80127ec <log1pf>
 801208e:	e028      	b.n	80120e2 <asinhf+0xc2>
 8012090:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 8012094:	dd0c      	ble.n	80120b0 <asinhf+0x90>
 8012096:	f000 fb5f 	bl	8012758 <fabsf>
 801209a:	f002 fa7d 	bl	8014598 <__ieee754_logf>
 801209e:	ed9f 8a13 	vldr	s16, [pc, #76]	; 80120ec <asinhf+0xcc>
 80120a2:	ee30 8a08 	vadd.f32	s16, s0, s16
 80120a6:	2c00      	cmp	r4, #0
 80120a8:	bfd8      	it	le
 80120aa:	eeb1 8a48 	vnegle.f32	s16, s16
 80120ae:	e7c5      	b.n	801203c <asinhf+0x1c>
 80120b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80120b4:	ddd5      	ble.n	8012062 <asinhf+0x42>
 80120b6:	f000 fb4f 	bl	8012758 <fabsf>
 80120ba:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80120be:	eef0 8a40 	vmov.f32	s17, s0
 80120c2:	eeb0 0a49 	vmov.f32	s0, s18
 80120c6:	eea8 0a08 	vfma.f32	s0, s16, s16
 80120ca:	f003 f803 	bl	80150d4 <__ieee754_sqrtf>
 80120ce:	ee70 7a28 	vadd.f32	s15, s0, s17
 80120d2:	ee89 0a27 	vdiv.f32	s0, s18, s15
 80120d6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80120da:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80120de:	f002 fa5b 	bl	8014598 <__ieee754_logf>
 80120e2:	eeb0 8a40 	vmov.f32	s16, s0
 80120e6:	e7de      	b.n	80120a6 <asinhf+0x86>
 80120e8:	7149f2ca 	.word	0x7149f2ca
 80120ec:	3f317218 	.word	0x3f317218

080120f0 <atanf>:
 80120f0:	b538      	push	{r3, r4, r5, lr}
 80120f2:	ee10 5a10 	vmov	r5, s0
 80120f6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80120fa:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80120fe:	eef0 7a40 	vmov.f32	s15, s0
 8012102:	db10      	blt.n	8012126 <atanf+0x36>
 8012104:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012108:	dd04      	ble.n	8012114 <atanf+0x24>
 801210a:	ee70 7a00 	vadd.f32	s15, s0, s0
 801210e:	eeb0 0a67 	vmov.f32	s0, s15
 8012112:	bd38      	pop	{r3, r4, r5, pc}
 8012114:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801224c <atanf+0x15c>
 8012118:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8012250 <atanf+0x160>
 801211c:	2d00      	cmp	r5, #0
 801211e:	bfd8      	it	le
 8012120:	eef0 7a47 	vmovle.f32	s15, s14
 8012124:	e7f3      	b.n	801210e <atanf+0x1e>
 8012126:	4b4b      	ldr	r3, [pc, #300]	; (8012254 <atanf+0x164>)
 8012128:	429c      	cmp	r4, r3
 801212a:	dc10      	bgt.n	801214e <atanf+0x5e>
 801212c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8012130:	da0a      	bge.n	8012148 <atanf+0x58>
 8012132:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8012258 <atanf+0x168>
 8012136:	ee30 7a07 	vadd.f32	s14, s0, s14
 801213a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801213e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012146:	dce2      	bgt.n	801210e <atanf+0x1e>
 8012148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801214c:	e013      	b.n	8012176 <atanf+0x86>
 801214e:	f000 fb03 	bl	8012758 <fabsf>
 8012152:	4b42      	ldr	r3, [pc, #264]	; (801225c <atanf+0x16c>)
 8012154:	429c      	cmp	r4, r3
 8012156:	dc4f      	bgt.n	80121f8 <atanf+0x108>
 8012158:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801215c:	429c      	cmp	r4, r3
 801215e:	dc41      	bgt.n	80121e4 <atanf+0xf4>
 8012160:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012164:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012168:	eea0 7a27 	vfma.f32	s14, s0, s15
 801216c:	2300      	movs	r3, #0
 801216e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012172:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012176:	1c5a      	adds	r2, r3, #1
 8012178:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801217c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8012260 <atanf+0x170>
 8012180:	eddf 5a38 	vldr	s11, [pc, #224]	; 8012264 <atanf+0x174>
 8012184:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8012268 <atanf+0x178>
 8012188:	ee66 6a06 	vmul.f32	s13, s12, s12
 801218c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012190:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801226c <atanf+0x17c>
 8012194:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012198:	eddf 5a35 	vldr	s11, [pc, #212]	; 8012270 <atanf+0x180>
 801219c:	eee7 5a26 	vfma.f32	s11, s14, s13
 80121a0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8012274 <atanf+0x184>
 80121a4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80121a8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8012278 <atanf+0x188>
 80121ac:	eee7 5a26 	vfma.f32	s11, s14, s13
 80121b0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801227c <atanf+0x18c>
 80121b4:	eea6 5a87 	vfma.f32	s10, s13, s14
 80121b8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8012280 <atanf+0x190>
 80121bc:	eea5 7a26 	vfma.f32	s14, s10, s13
 80121c0:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8012284 <atanf+0x194>
 80121c4:	eea7 5a26 	vfma.f32	s10, s14, s13
 80121c8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8012288 <atanf+0x198>
 80121cc:	eea5 7a26 	vfma.f32	s14, s10, s13
 80121d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80121d4:	eea5 7a86 	vfma.f32	s14, s11, s12
 80121d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80121dc:	d121      	bne.n	8012222 <atanf+0x132>
 80121de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80121e2:	e794      	b.n	801210e <atanf+0x1e>
 80121e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80121e8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80121ec:	ee30 0a27 	vadd.f32	s0, s0, s15
 80121f0:	2301      	movs	r3, #1
 80121f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80121f6:	e7be      	b.n	8012176 <atanf+0x86>
 80121f8:	4b24      	ldr	r3, [pc, #144]	; (801228c <atanf+0x19c>)
 80121fa:	429c      	cmp	r4, r3
 80121fc:	dc0b      	bgt.n	8012216 <atanf+0x126>
 80121fe:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8012202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012206:	eea0 7a27 	vfma.f32	s14, s0, s15
 801220a:	2302      	movs	r3, #2
 801220c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012214:	e7af      	b.n	8012176 <atanf+0x86>
 8012216:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801221a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801221e:	2303      	movs	r3, #3
 8012220:	e7a9      	b.n	8012176 <atanf+0x86>
 8012222:	4a1b      	ldr	r2, [pc, #108]	; (8012290 <atanf+0x1a0>)
 8012224:	491b      	ldr	r1, [pc, #108]	; (8012294 <atanf+0x1a4>)
 8012226:	009b      	lsls	r3, r3, #2
 8012228:	441a      	add	r2, r3
 801222a:	440b      	add	r3, r1
 801222c:	edd3 6a00 	vldr	s13, [r3]
 8012230:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012234:	2d00      	cmp	r5, #0
 8012236:	ee77 7a67 	vsub.f32	s15, s14, s15
 801223a:	ed92 7a00 	vldr	s14, [r2]
 801223e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012242:	bfb8      	it	lt
 8012244:	eef1 7a67 	vneglt.f32	s15, s15
 8012248:	e761      	b.n	801210e <atanf+0x1e>
 801224a:	bf00      	nop
 801224c:	bfc90fdb 	.word	0xbfc90fdb
 8012250:	3fc90fdb 	.word	0x3fc90fdb
 8012254:	3edfffff 	.word	0x3edfffff
 8012258:	7149f2ca 	.word	0x7149f2ca
 801225c:	3f97ffff 	.word	0x3f97ffff
 8012260:	3c8569d7 	.word	0x3c8569d7
 8012264:	3d4bda59 	.word	0x3d4bda59
 8012268:	bd6ef16b 	.word	0xbd6ef16b
 801226c:	3d886b35 	.word	0x3d886b35
 8012270:	3dba2e6e 	.word	0x3dba2e6e
 8012274:	3e124925 	.word	0x3e124925
 8012278:	3eaaaaab 	.word	0x3eaaaaab
 801227c:	bd15a221 	.word	0xbd15a221
 8012280:	bd9d8795 	.word	0xbd9d8795
 8012284:	bde38e38 	.word	0xbde38e38
 8012288:	be4ccccd 	.word	0xbe4ccccd
 801228c:	401bffff 	.word	0x401bffff
 8012290:	080a7210 	.word	0x080a7210
 8012294:	080a7220 	.word	0x080a7220

08012298 <ceilf>:
 8012298:	ee10 3a10 	vmov	r3, s0
 801229c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80122a0:	0dca      	lsrs	r2, r1, #23
 80122a2:	3a7f      	subs	r2, #127	; 0x7f
 80122a4:	2a16      	cmp	r2, #22
 80122a6:	dc2a      	bgt.n	80122fe <ceilf+0x66>
 80122a8:	2a00      	cmp	r2, #0
 80122aa:	da11      	bge.n	80122d0 <ceilf+0x38>
 80122ac:	eddf 7a18 	vldr	s15, [pc, #96]	; 8012310 <ceilf+0x78>
 80122b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80122b4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80122b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122bc:	dd05      	ble.n	80122ca <ceilf+0x32>
 80122be:	2b00      	cmp	r3, #0
 80122c0:	db23      	blt.n	801230a <ceilf+0x72>
 80122c2:	2900      	cmp	r1, #0
 80122c4:	bf18      	it	ne
 80122c6:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 80122ca:	ee00 3a10 	vmov	s0, r3
 80122ce:	4770      	bx	lr
 80122d0:	4910      	ldr	r1, [pc, #64]	; (8012314 <ceilf+0x7c>)
 80122d2:	4111      	asrs	r1, r2
 80122d4:	420b      	tst	r3, r1
 80122d6:	d0fa      	beq.n	80122ce <ceilf+0x36>
 80122d8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8012310 <ceilf+0x78>
 80122dc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80122e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80122e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122e8:	ddef      	ble.n	80122ca <ceilf+0x32>
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	bfc2      	ittt	gt
 80122ee:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 80122f2:	fa40 f202 	asrgt.w	r2, r0, r2
 80122f6:	189b      	addgt	r3, r3, r2
 80122f8:	ea23 0301 	bic.w	r3, r3, r1
 80122fc:	e7e5      	b.n	80122ca <ceilf+0x32>
 80122fe:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012302:	d3e4      	bcc.n	80122ce <ceilf+0x36>
 8012304:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012308:	4770      	bx	lr
 801230a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801230e:	e7dc      	b.n	80122ca <ceilf+0x32>
 8012310:	7149f2ca 	.word	0x7149f2ca
 8012314:	007fffff 	.word	0x007fffff

08012318 <cosf>:
 8012318:	ee10 3a10 	vmov	r3, s0
 801231c:	b507      	push	{r0, r1, r2, lr}
 801231e:	4a1c      	ldr	r2, [pc, #112]	; (8012390 <cosf+0x78>)
 8012320:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012324:	4293      	cmp	r3, r2
 8012326:	dc04      	bgt.n	8012332 <cosf+0x1a>
 8012328:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8012394 <cosf+0x7c>
 801232c:	f003 fb9a 	bl	8015a64 <__kernel_cosf>
 8012330:	e004      	b.n	801233c <cosf+0x24>
 8012332:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012336:	db04      	blt.n	8012342 <cosf+0x2a>
 8012338:	ee30 0a40 	vsub.f32	s0, s0, s0
 801233c:	b003      	add	sp, #12
 801233e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012342:	4668      	mov	r0, sp
 8012344:	f002 fd2c 	bl	8014da0 <__ieee754_rem_pio2f>
 8012348:	f000 0003 	and.w	r0, r0, #3
 801234c:	2801      	cmp	r0, #1
 801234e:	d007      	beq.n	8012360 <cosf+0x48>
 8012350:	2802      	cmp	r0, #2
 8012352:	d00e      	beq.n	8012372 <cosf+0x5a>
 8012354:	b9a0      	cbnz	r0, 8012380 <cosf+0x68>
 8012356:	eddd 0a01 	vldr	s1, [sp, #4]
 801235a:	ed9d 0a00 	vldr	s0, [sp]
 801235e:	e7e5      	b.n	801232c <cosf+0x14>
 8012360:	eddd 0a01 	vldr	s1, [sp, #4]
 8012364:	ed9d 0a00 	vldr	s0, [sp]
 8012368:	f003 fe5c 	bl	8016024 <__kernel_sinf>
 801236c:	eeb1 0a40 	vneg.f32	s0, s0
 8012370:	e7e4      	b.n	801233c <cosf+0x24>
 8012372:	eddd 0a01 	vldr	s1, [sp, #4]
 8012376:	ed9d 0a00 	vldr	s0, [sp]
 801237a:	f003 fb73 	bl	8015a64 <__kernel_cosf>
 801237e:	e7f5      	b.n	801236c <cosf+0x54>
 8012380:	2001      	movs	r0, #1
 8012382:	eddd 0a01 	vldr	s1, [sp, #4]
 8012386:	ed9d 0a00 	vldr	s0, [sp]
 801238a:	f003 fe4b 	bl	8016024 <__kernel_sinf>
 801238e:	e7d5      	b.n	801233c <cosf+0x24>
 8012390:	3f490fd8 	.word	0x3f490fd8
 8012394:	00000000 	.word	0x00000000

08012398 <erff>:
 8012398:	b538      	push	{r3, r4, r5, lr}
 801239a:	ee10 4a10 	vmov	r4, s0
 801239e:	f024 4500 	bic.w	r5, r4, #2147483648	; 0x80000000
 80123a2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80123a6:	ed2d 8b06 	vpush	{d8-d10}
 80123aa:	eef0 7a40 	vmov.f32	s15, s0
 80123ae:	db12      	blt.n	80123d6 <erff+0x3e>
 80123b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80123b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80123b8:	0fe4      	lsrs	r4, r4, #31
 80123ba:	0064      	lsls	r4, r4, #1
 80123bc:	f1c4 0301 	rsb	r3, r4, #1
 80123c0:	ee00 3a10 	vmov	s0, r3
 80123c4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80123c8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80123cc:	ecbd 8b06 	vpop	{d8-d10}
 80123d0:	eeb0 0a67 	vmov.f32	s0, s15
 80123d4:	bd38      	pop	{r3, r4, r5, pc}
 80123d6:	4ba4      	ldr	r3, [pc, #656]	; (8012668 <erff+0x2d0>)
 80123d8:	429d      	cmp	r5, r3
 80123da:	dc4a      	bgt.n	8012472 <erff+0xda>
 80123dc:	f1b5 5f46 	cmp.w	r5, #830472192	; 0x31800000
 80123e0:	da16      	bge.n	8012410 <erff+0x78>
 80123e2:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 80123e6:	da0e      	bge.n	8012406 <erff+0x6e>
 80123e8:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 801266c <erff+0x2d4>
 80123ec:	ee27 0a80 	vmul.f32	s0, s15, s0
 80123f0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80123f4:	eea7 0a87 	vfma.f32	s0, s15, s14
 80123f8:	eef0 7a40 	vmov.f32	s15, s0
 80123fc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8012400:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012404:	e7e2      	b.n	80123cc <erff+0x34>
 8012406:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8012670 <erff+0x2d8>
 801240a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801240e:	e7dd      	b.n	80123cc <erff+0x34>
 8012410:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012414:	ed9f 6a97 	vldr	s12, [pc, #604]	; 8012674 <erff+0x2dc>
 8012418:	eddf 6a97 	vldr	s13, [pc, #604]	; 8012678 <erff+0x2e0>
 801241c:	eddf 5a97 	vldr	s11, [pc, #604]	; 801267c <erff+0x2e4>
 8012420:	eee7 6a06 	vfma.f32	s13, s14, s12
 8012424:	ed9f 6a96 	vldr	s12, [pc, #600]	; 8012680 <erff+0x2e8>
 8012428:	eea6 6a87 	vfma.f32	s12, s13, s14
 801242c:	eddf 6a95 	vldr	s13, [pc, #596]	; 8012684 <erff+0x2ec>
 8012430:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012434:	ed9f 6a8e 	vldr	s12, [pc, #568]	; 8012670 <erff+0x2d8>
 8012438:	eea6 6a87 	vfma.f32	s12, s13, s14
 801243c:	eddf 6a92 	vldr	s13, [pc, #584]	; 8012688 <erff+0x2f0>
 8012440:	eee7 6a25 	vfma.f32	s13, s14, s11
 8012444:	eddf 5a91 	vldr	s11, [pc, #580]	; 801268c <erff+0x2f4>
 8012448:	eee6 5a87 	vfma.f32	s11, s13, s14
 801244c:	eddf 6a90 	vldr	s13, [pc, #576]	; 8012690 <erff+0x2f8>
 8012450:	eee5 6a87 	vfma.f32	s13, s11, s14
 8012454:	eddf 5a8f 	vldr	s11, [pc, #572]	; 8012694 <erff+0x2fc>
 8012458:	eee6 5a87 	vfma.f32	s11, s13, s14
 801245c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012460:	eee5 6a87 	vfma.f32	s13, s11, s14
 8012464:	eeb0 7a66 	vmov.f32	s14, s13
 8012468:	eec6 6a07 	vdiv.f32	s13, s12, s14
 801246c:	eee0 7a26 	vfma.f32	s15, s0, s13
 8012470:	e7ac      	b.n	80123cc <erff+0x34>
 8012472:	4b89      	ldr	r3, [pc, #548]	; (8012698 <erff+0x300>)
 8012474:	429d      	cmp	r5, r3
 8012476:	dc44      	bgt.n	8012502 <erff+0x16a>
 8012478:	f000 f96e 	bl	8012758 <fabsf>
 801247c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012480:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012484:	ed9f 7a85 	vldr	s14, [pc, #532]	; 801269c <erff+0x304>
 8012488:	eddf 6a85 	vldr	s13, [pc, #532]	; 80126a0 <erff+0x308>
 801248c:	ed9f 6a85 	vldr	s12, [pc, #532]	; 80126a4 <erff+0x30c>
 8012490:	eee0 6a07 	vfma.f32	s13, s0, s14
 8012494:	2c00      	cmp	r4, #0
 8012496:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80126a8 <erff+0x310>
 801249a:	eea6 7a80 	vfma.f32	s14, s13, s0
 801249e:	eddf 6a83 	vldr	s13, [pc, #524]	; 80126ac <erff+0x314>
 80124a2:	eee7 6a00 	vfma.f32	s13, s14, s0
 80124a6:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80126b0 <erff+0x318>
 80124aa:	eea6 7a80 	vfma.f32	s14, s13, s0
 80124ae:	eddf 6a81 	vldr	s13, [pc, #516]	; 80126b4 <erff+0x31c>
 80124b2:	eee7 6a00 	vfma.f32	s13, s14, s0
 80124b6:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80126b8 <erff+0x320>
 80124ba:	eea6 7a80 	vfma.f32	s14, s13, s0
 80124be:	eddf 6a7f 	vldr	s13, [pc, #508]	; 80126bc <erff+0x324>
 80124c2:	eee0 6a06 	vfma.f32	s13, s0, s12
 80124c6:	ed9f 6a7e 	vldr	s12, [pc, #504]	; 80126c0 <erff+0x328>
 80124ca:	eea6 6a80 	vfma.f32	s12, s13, s0
 80124ce:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80126c4 <erff+0x32c>
 80124d2:	eee6 6a00 	vfma.f32	s13, s12, s0
 80124d6:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 80126c8 <erff+0x330>
 80124da:	eea6 6a80 	vfma.f32	s12, s13, s0
 80124de:	eddf 6a7b 	vldr	s13, [pc, #492]	; 80126cc <erff+0x334>
 80124e2:	eee6 6a00 	vfma.f32	s13, s12, s0
 80124e6:	eee6 7a80 	vfma.f32	s15, s13, s0
 80124ea:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80124ee:	bfab      	itete	ge
 80124f0:	eddf 7a77 	vldrge	s15, [pc, #476]	; 80126d0 <erff+0x338>
 80124f4:	eddf 7a77 	vldrlt	s15, [pc, #476]	; 80126d4 <erff+0x33c>
 80124f8:	ee70 7a27 	vaddge.f32	s15, s0, s15
 80124fc:	ee77 7ac0 	vsublt.f32	s15, s15, s0
 8012500:	e764      	b.n	80123cc <erff+0x34>
 8012502:	4b75      	ldr	r3, [pc, #468]	; (80126d8 <erff+0x340>)
 8012504:	429d      	cmp	r5, r3
 8012506:	dd08      	ble.n	801251a <erff+0x182>
 8012508:	2c00      	cmp	r4, #0
 801250a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801250e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8012512:	bfa8      	it	ge
 8012514:	eef0 7a40 	vmovge.f32	s15, s0
 8012518:	e758      	b.n	80123cc <erff+0x34>
 801251a:	f000 f91d 	bl	8012758 <fabsf>
 801251e:	4b6f      	ldr	r3, [pc, #444]	; (80126dc <erff+0x344>)
 8012520:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012524:	eeb0 9a40 	vmov.f32	s18, s0
 8012528:	429d      	cmp	r5, r3
 801252a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801252e:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8012532:	eef0 8a40 	vmov.f32	s17, s0
 8012536:	dc64      	bgt.n	8012602 <erff+0x26a>
 8012538:	eddf 7a69 	vldr	s15, [pc, #420]	; 80126e0 <erff+0x348>
 801253c:	eddf 6a69 	vldr	s13, [pc, #420]	; 80126e4 <erff+0x34c>
 8012540:	eddf 9a69 	vldr	s19, [pc, #420]	; 80126e8 <erff+0x350>
 8012544:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012548:	eddf 7a68 	vldr	s15, [pc, #416]	; 80126ec <erff+0x354>
 801254c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012550:	eddf 6a67 	vldr	s13, [pc, #412]	; 80126f0 <erff+0x358>
 8012554:	eee7 6a87 	vfma.f32	s13, s15, s14
 8012558:	eddf 7a66 	vldr	s15, [pc, #408]	; 80126f4 <erff+0x35c>
 801255c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012560:	eddf 6a65 	vldr	s13, [pc, #404]	; 80126f8 <erff+0x360>
 8012564:	eee7 6a87 	vfma.f32	s13, s15, s14
 8012568:	eddf 7a64 	vldr	s15, [pc, #400]	; 80126fc <erff+0x364>
 801256c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012570:	eddf 6a63 	vldr	s13, [pc, #396]	; 8012700 <erff+0x368>
 8012574:	eee7 9a87 	vfma.f32	s19, s15, s14
 8012578:	eddf 7a62 	vldr	s15, [pc, #392]	; 8012704 <erff+0x36c>
 801257c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8012580:	eddf 6a61 	vldr	s13, [pc, #388]	; 8012708 <erff+0x370>
 8012584:	eee7 6a87 	vfma.f32	s13, s15, s14
 8012588:	eddf 7a60 	vldr	s15, [pc, #384]	; 801270c <erff+0x374>
 801258c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012590:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012710 <erff+0x378>
 8012594:	eee7 6a87 	vfma.f32	s13, s15, s14
 8012598:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8012714 <erff+0x37c>
 801259c:	eee6 7a87 	vfma.f32	s15, s13, s14
 80125a0:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8012718 <erff+0x380>
 80125a4:	eee7 6a87 	vfma.f32	s13, s15, s14
 80125a8:	eddf 7a5c 	vldr	s15, [pc, #368]	; 801271c <erff+0x384>
 80125ac:	ee19 3a10 	vmov	r3, s18
 80125b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80125b4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80125b8:	f023 030f 	bic.w	r3, r3, #15
 80125bc:	ee08 3a10 	vmov	s16, r3
 80125c0:	eef0 aa68 	vmov.f32	s21, s17
 80125c4:	eebe 0a02 	vmov.f32	s0, #226	; 0xbf100000 -0.5625000
 80125c8:	eee7 aa87 	vfma.f32	s21, s15, s14
 80125cc:	eea8 0a48 	vfms.f32	s0, s16, s16
 80125d0:	f001 fe86 	bl	80142e0 <__ieee754_expf>
 80125d4:	eeb0 aa40 	vmov.f32	s20, s0
 80125d8:	ee89 0aaa 	vdiv.f32	s0, s19, s21
 80125dc:	ee78 7a49 	vsub.f32	s15, s16, s18
 80125e0:	ee38 8a09 	vadd.f32	s16, s16, s18
 80125e4:	eea7 0a88 	vfma.f32	s0, s15, s16
 80125e8:	f001 fe7a 	bl	80142e0 <__ieee754_expf>
 80125ec:	ee2a 0a00 	vmul.f32	s0, s20, s0
 80125f0:	2c00      	cmp	r4, #0
 80125f2:	eec0 7a09 	vdiv.f32	s15, s0, s18
 80125f6:	bfac      	ite	ge
 80125f8:	ee78 7ae7 	vsubge.f32	s15, s17, s15
 80125fc:	ee77 7ae8 	vsublt.f32	s15, s15, s17
 8012600:	e6e4      	b.n	80123cc <erff+0x34>
 8012602:	eddf 6a47 	vldr	s13, [pc, #284]	; 8012720 <erff+0x388>
 8012606:	eddf 7a47 	vldr	s15, [pc, #284]	; 8012724 <erff+0x38c>
 801260a:	eddf 9a47 	vldr	s19, [pc, #284]	; 8012728 <erff+0x390>
 801260e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8012612:	eddf 6a46 	vldr	s13, [pc, #280]	; 801272c <erff+0x394>
 8012616:	eee7 6a87 	vfma.f32	s13, s15, s14
 801261a:	eddf 7a45 	vldr	s15, [pc, #276]	; 8012730 <erff+0x398>
 801261e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012622:	eddf 6a44 	vldr	s13, [pc, #272]	; 8012734 <erff+0x39c>
 8012626:	eee7 6a87 	vfma.f32	s13, s15, s14
 801262a:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012738 <erff+0x3a0>
 801262e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012632:	eddf 6a42 	vldr	s13, [pc, #264]	; 801273c <erff+0x3a4>
 8012636:	eee7 9a87 	vfma.f32	s19, s15, s14
 801263a:	eddf 7a41 	vldr	s15, [pc, #260]	; 8012740 <erff+0x3a8>
 801263e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012642:	eddf 7a40 	vldr	s15, [pc, #256]	; 8012744 <erff+0x3ac>
 8012646:	eee6 7a87 	vfma.f32	s15, s13, s14
 801264a:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8012748 <erff+0x3b0>
 801264e:	eee7 6a87 	vfma.f32	s13, s15, s14
 8012652:	eddf 7a3e 	vldr	s15, [pc, #248]	; 801274c <erff+0x3b4>
 8012656:	eee6 7a87 	vfma.f32	s15, s13, s14
 801265a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012750 <erff+0x3b8>
 801265e:	eee7 6a87 	vfma.f32	s13, s15, s14
 8012662:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8012754 <erff+0x3bc>
 8012666:	e7a1      	b.n	80125ac <erff+0x214>
 8012668:	3f57ffff 	.word	0x3f57ffff
 801266c:	3f8375d4 	.word	0x3f8375d4
 8012670:	3e0375d4 	.word	0x3e0375d4
 8012674:	b7c756b1 	.word	0xb7c756b1
 8012678:	bbbd1489 	.word	0xbbbd1489
 801267c:	b684e21a 	.word	0xb684e21a
 8012680:	bce9528f 	.word	0xbce9528f
 8012684:	bea66beb 	.word	0xbea66beb
 8012688:	390aee49 	.word	0x390aee49
 801268c:	3ba68116 	.word	0x3ba68116
 8012690:	3d852a63 	.word	0x3d852a63
 8012694:	3ecbbbce 	.word	0x3ecbbbce
 8012698:	3f9fffff 	.word	0x3f9fffff
 801269c:	bb0df9c0 	.word	0xbb0df9c0
 80126a0:	3d1151b3 	.word	0x3d1151b3
 80126a4:	3c445aa3 	.word	0x3c445aa3
 80126a8:	bde31cc2 	.word	0xbde31cc2
 80126ac:	3ea2fe54 	.word	0x3ea2fe54
 80126b0:	bebe9208 	.word	0xbebe9208
 80126b4:	3ed46805 	.word	0x3ed46805
 80126b8:	bb1acdc6 	.word	0xbb1acdc6
 80126bc:	3c5f6e13 	.word	0x3c5f6e13
 80126c0:	3e013307 	.word	0x3e013307
 80126c4:	3d931ae7 	.word	0x3d931ae7
 80126c8:	3f0a5785 	.word	0x3f0a5785
 80126cc:	3dd9f331 	.word	0x3dd9f331
 80126d0:	3f58560b 	.word	0x3f58560b
 80126d4:	bf58560b 	.word	0xbf58560b
 80126d8:	40bfffff 	.word	0x40bfffff
 80126dc:	4036db6d 	.word	0x4036db6d
 80126e0:	c11d077e 	.word	0xc11d077e
 80126e4:	c2a2932b 	.word	0xc2a2932b
 80126e8:	bc21a093 	.word	0xbc21a093
 80126ec:	c3389ae7 	.word	0xc3389ae7
 80126f0:	c322658c 	.word	0xc322658c
 80126f4:	c2798057 	.word	0xc2798057
 80126f8:	c128f022 	.word	0xc128f022
 80126fc:	bf31a0b7 	.word	0xbf31a0b7
 8012700:	bd777f97 	.word	0xbd777f97
 8012704:	40d23f7c 	.word	0x40d23f7c
 8012708:	42d9451f 	.word	0x42d9451f
 801270c:	43d6810b 	.word	0x43d6810b
 8012710:	442158c9 	.word	0x442158c9
 8012714:	43d9486f 	.word	0x43d9486f
 8012718:	4309a863 	.word	0x4309a863
 801271c:	419d35ce 	.word	0x419d35ce
 8012720:	c3f1c275 	.word	0xc3f1c275
 8012724:	c480230b 	.word	0xc480230b
 8012728:	bc21a092 	.word	0xbc21a092
 801272c:	c41f6441 	.word	0xc41f6441
 8012730:	c320a2ea 	.word	0xc320a2ea
 8012734:	c18e104b 	.word	0xc18e104b
 8012738:	bf4c9dd4 	.word	0xbf4c9dd4
 801273c:	43ed43a7 	.word	0x43ed43a7
 8012740:	c1b38712 	.word	0xc1b38712
 8012744:	451f90ce 	.word	0x451f90ce
 8012748:	4547fdbb 	.word	0x4547fdbb
 801274c:	44c01759 	.word	0x44c01759
 8012750:	43a2e571 	.word	0x43a2e571
 8012754:	41f2b459 	.word	0x41f2b459

08012758 <fabsf>:
 8012758:	ee10 3a10 	vmov	r3, s0
 801275c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012760:	ee00 3a10 	vmov	s0, r3
 8012764:	4770      	bx	lr
	...

08012768 <floorf>:
 8012768:	ee10 3a10 	vmov	r3, s0
 801276c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012770:	0dca      	lsrs	r2, r1, #23
 8012772:	3a7f      	subs	r2, #127	; 0x7f
 8012774:	2a16      	cmp	r2, #22
 8012776:	dc2a      	bgt.n	80127ce <floorf+0x66>
 8012778:	2a00      	cmp	r2, #0
 801277a:	da11      	bge.n	80127a0 <floorf+0x38>
 801277c:	eddf 7a18 	vldr	s15, [pc, #96]	; 80127e0 <floorf+0x78>
 8012780:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012784:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801278c:	dd05      	ble.n	801279a <floorf+0x32>
 801278e:	2b00      	cmp	r3, #0
 8012790:	da23      	bge.n	80127da <floorf+0x72>
 8012792:	4a14      	ldr	r2, [pc, #80]	; (80127e4 <floorf+0x7c>)
 8012794:	2900      	cmp	r1, #0
 8012796:	bf18      	it	ne
 8012798:	4613      	movne	r3, r2
 801279a:	ee00 3a10 	vmov	s0, r3
 801279e:	4770      	bx	lr
 80127a0:	4911      	ldr	r1, [pc, #68]	; (80127e8 <floorf+0x80>)
 80127a2:	4111      	asrs	r1, r2
 80127a4:	420b      	tst	r3, r1
 80127a6:	d0fa      	beq.n	801279e <floorf+0x36>
 80127a8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80127e0 <floorf+0x78>
 80127ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 80127b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80127b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127b8:	ddef      	ble.n	801279a <floorf+0x32>
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	bfbe      	ittt	lt
 80127be:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80127c2:	fa40 f202 	asrlt.w	r2, r0, r2
 80127c6:	189b      	addlt	r3, r3, r2
 80127c8:	ea23 0301 	bic.w	r3, r3, r1
 80127cc:	e7e5      	b.n	801279a <floorf+0x32>
 80127ce:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80127d2:	d3e4      	bcc.n	801279e <floorf+0x36>
 80127d4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80127d8:	4770      	bx	lr
 80127da:	2300      	movs	r3, #0
 80127dc:	e7dd      	b.n	801279a <floorf+0x32>
 80127de:	bf00      	nop
 80127e0:	7149f2ca 	.word	0x7149f2ca
 80127e4:	bf800000 	.word	0xbf800000
 80127e8:	007fffff 	.word	0x007fffff

080127ec <log1pf>:
 80127ec:	ee10 2a10 	vmov	r2, s0
 80127f0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80127f4:	db02      	blt.n	80127fc <log1pf+0x10>
 80127f6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80127fa:	4770      	bx	lr
 80127fc:	4b70      	ldr	r3, [pc, #448]	; (80129c0 <log1pf+0x1d4>)
 80127fe:	429a      	cmp	r2, r3
 8012800:	dc78      	bgt.n	80128f4 <log1pf+0x108>
 8012802:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8012806:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801280a:	db12      	blt.n	8012832 <log1pf+0x46>
 801280c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8012810:	eeb4 0a67 	vcmp.f32	s0, s15
 8012814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012818:	bf05      	ittet	eq
 801281a:	ed9f 7a6a 	vldreq	s14, [pc, #424]	; 80129c4 <log1pf+0x1d8>
 801281e:	eddf 7a6a 	vldreq	s15, [pc, #424]	; 80129c8 <log1pf+0x1dc>
 8012822:	ee70 7a40 	vsubne.f32	s15, s0, s0
 8012826:	ee87 0a27 	vdiveq.f32	s0, s14, s15
 801282a:	bf18      	it	ne
 801282c:	ee87 0aa7 	vdivne.f32	s0, s15, s15
 8012830:	4770      	bx	lr
 8012832:	f1b3 5f44 	cmp.w	r3, #822083584	; 0x31000000
 8012836:	da13      	bge.n	8012860 <log1pf+0x74>
 8012838:	eddf 7a64 	vldr	s15, [pc, #400]	; 80129cc <log1pf+0x1e0>
 801283c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012840:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012848:	dd03      	ble.n	8012852 <log1pf+0x66>
 801284a:	f1b3 5f12 	cmp.w	r3, #612368384	; 0x24800000
 801284e:	f2c0 80b6 	blt.w	80129be <log1pf+0x1d2>
 8012852:	ee20 7a40 	vnmul.f32	s14, s0, s0
 8012856:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801285a:	eea7 0a27 	vfma.f32	s0, s14, s15
 801285e:	4770      	bx	lr
 8012860:	4b5b      	ldr	r3, [pc, #364]	; (80129d0 <log1pf+0x1e4>)
 8012862:	441a      	add	r2, r3
 8012864:	429a      	cmp	r2, r3
 8012866:	d84d      	bhi.n	8012904 <log1pf+0x118>
 8012868:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801286c:	ee30 7a27 	vadd.f32	s14, s0, s15
 8012870:	ee17 2a10 	vmov	r2, s14
 8012874:	15d3      	asrs	r3, r2, #23
 8012876:	3b7f      	subs	r3, #127	; 0x7f
 8012878:	2b00      	cmp	r3, #0
 801287a:	bfcb      	itete	gt
 801287c:	ee37 0a40 	vsubgt.f32	s0, s14, s0
 8012880:	ee77 7a67 	vsuble.f32	s15, s14, s15
 8012884:	ee37 0ac0 	vsubgt.f32	s0, s15, s0
 8012888:	ee30 0a67 	vsuble.f32	s0, s0, s15
 801288c:	eec0 6a07 	vdiv.f32	s13, s0, s14
 8012890:	4950      	ldr	r1, [pc, #320]	; (80129d4 <log1pf+0x1e8>)
 8012892:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8012896:	428a      	cmp	r2, r1
 8012898:	bfc9      	itett	gt
 801289a:	f042 517c 	orrgt.w	r1, r2, #1056964608	; 0x3f000000
 801289e:	f042 517e 	orrle.w	r1, r2, #1065353216	; 0x3f800000
 80128a2:	f5c2 0200 	rsbgt	r2, r2, #8388608	; 0x800000
 80128a6:	3301      	addgt	r3, #1
 80128a8:	bfc8      	it	gt
 80128aa:	1092      	asrgt	r2, r2, #2
 80128ac:	ee07 1a90 	vmov	s15, r1
 80128b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80128b4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80128b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80128bc:	ee20 7a07 	vmul.f32	s14, s0, s14
 80128c0:	ee27 7a00 	vmul.f32	s14, s14, s0
 80128c4:	2a00      	cmp	r2, #0
 80128c6:	d13d      	bne.n	8012944 <log1pf+0x158>
 80128c8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80128cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128d0:	d11b      	bne.n	801290a <log1pf+0x11e>
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d071      	beq.n	80129ba <log1pf+0x1ce>
 80128d6:	ee07 3a90 	vmov	s15, r3
 80128da:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80129d8 <log1pf+0x1ec>
 80128de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80128e2:	eee7 6a87 	vfma.f32	s13, s15, s14
 80128e6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80129dc <log1pf+0x1f0>
 80128ea:	eeb0 0a66 	vmov.f32	s0, s13
 80128ee:	eea7 0a87 	vfma.f32	s0, s15, s14
 80128f2:	4770      	bx	lr
 80128f4:	f1b2 4fb4 	cmp.w	r2, #1509949440	; 0x5a000000
 80128f8:	dbb6      	blt.n	8012868 <log1pf+0x7c>
 80128fa:	15d3      	asrs	r3, r2, #23
 80128fc:	3b7f      	subs	r3, #127	; 0x7f
 80128fe:	eddf 6a32 	vldr	s13, [pc, #200]	; 80129c8 <log1pf+0x1dc>
 8012902:	e7c5      	b.n	8012890 <log1pf+0xa4>
 8012904:	2201      	movs	r2, #1
 8012906:	2300      	movs	r3, #0
 8012908:	e7d6      	b.n	80128b8 <log1pf+0xcc>
 801290a:	eddf 7a35 	vldr	s15, [pc, #212]	; 80129e0 <log1pf+0x1f4>
 801290e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8012912:	eea0 6a67 	vfms.f32	s12, s0, s15
 8012916:	ee26 6a07 	vmul.f32	s12, s12, s14
 801291a:	b913      	cbnz	r3, 8012922 <log1pf+0x136>
 801291c:	ee30 0a46 	vsub.f32	s0, s0, s12
 8012920:	4770      	bx	lr
 8012922:	ee07 3a90 	vmov	s15, r3
 8012926:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80129d8 <log1pf+0x1ec>
 801292a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801292e:	eee7 6a87 	vfma.f32	s13, s15, s14
 8012932:	ee36 7a66 	vsub.f32	s14, s12, s13
 8012936:	ee37 0a40 	vsub.f32	s0, s14, s0
 801293a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80129dc <log1pf+0x1f0>
 801293e:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8012942:	4770      	bx	lr
 8012944:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012948:	ee70 7a27 	vadd.f32	s15, s0, s15
 801294c:	ed9f 6a25 	vldr	s12, [pc, #148]	; 80129e4 <log1pf+0x1f8>
 8012950:	ed9f 5a25 	vldr	s10, [pc, #148]	; 80129e8 <log1pf+0x1fc>
 8012954:	eec0 5a27 	vdiv.f32	s11, s0, s15
 8012958:	ee65 7aa5 	vmul.f32	s15, s11, s11
 801295c:	eea7 5a86 	vfma.f32	s10, s15, s12
 8012960:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80129ec <log1pf+0x200>
 8012964:	eea5 6a27 	vfma.f32	s12, s10, s15
 8012968:	ed9f 5a21 	vldr	s10, [pc, #132]	; 80129f0 <log1pf+0x204>
 801296c:	eea6 5a27 	vfma.f32	s10, s12, s15
 8012970:	ed9f 6a20 	vldr	s12, [pc, #128]	; 80129f4 <log1pf+0x208>
 8012974:	eea5 6a27 	vfma.f32	s12, s10, s15
 8012978:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 80129f8 <log1pf+0x20c>
 801297c:	eea6 5a27 	vfma.f32	s10, s12, s15
 8012980:	ed9f 6a17 	vldr	s12, [pc, #92]	; 80129e0 <log1pf+0x1f4>
 8012984:	eea5 6a27 	vfma.f32	s12, s10, s15
 8012988:	eeb0 5a47 	vmov.f32	s10, s14
 801298c:	eea6 5a27 	vfma.f32	s10, s12, s15
 8012990:	ee25 6a25 	vmul.f32	s12, s10, s11
 8012994:	b923      	cbnz	r3, 80129a0 <log1pf+0x1b4>
 8012996:	ee37 7a46 	vsub.f32	s14, s14, s12
 801299a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801299e:	4770      	bx	lr
 80129a0:	ee07 3a90 	vmov	s15, r3
 80129a4:	eddf 5a0c 	vldr	s11, [pc, #48]	; 80129d8 <log1pf+0x1ec>
 80129a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80129ac:	eee7 6aa5 	vfma.f32	s13, s15, s11
 80129b0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80129b4:	ee37 7a66 	vsub.f32	s14, s14, s13
 80129b8:	e7bd      	b.n	8012936 <log1pf+0x14a>
 80129ba:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80129c8 <log1pf+0x1dc>
 80129be:	4770      	bx	lr
 80129c0:	3ed413d6 	.word	0x3ed413d6
 80129c4:	cc000000 	.word	0xcc000000
 80129c8:	00000000 	.word	0x00000000
 80129cc:	4c000000 	.word	0x4c000000
 80129d0:	416a09e0 	.word	0x416a09e0
 80129d4:	003504f6 	.word	0x003504f6
 80129d8:	3717f7d1 	.word	0x3717f7d1
 80129dc:	3f317180 	.word	0x3f317180
 80129e0:	3f2aaaab 	.word	0x3f2aaaab
 80129e4:	3e178897 	.word	0x3e178897
 80129e8:	3e1cd04f 	.word	0x3e1cd04f
 80129ec:	3e3a3325 	.word	0x3e3a3325
 80129f0:	3e638e29 	.word	0x3e638e29
 80129f4:	3e924925 	.word	0x3e924925
 80129f8:	3ecccccd 	.word	0x3ecccccd

080129fc <roundf>:
 80129fc:	ee10 0a10 	vmov	r0, s0
 8012a00:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8012a04:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8012a08:	2a16      	cmp	r2, #22
 8012a0a:	dc15      	bgt.n	8012a38 <roundf+0x3c>
 8012a0c:	2a00      	cmp	r2, #0
 8012a0e:	da08      	bge.n	8012a22 <roundf+0x26>
 8012a10:	3201      	adds	r2, #1
 8012a12:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8012a16:	d101      	bne.n	8012a1c <roundf+0x20>
 8012a18:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8012a1c:	ee00 3a10 	vmov	s0, r3
 8012a20:	4770      	bx	lr
 8012a22:	4908      	ldr	r1, [pc, #32]	; (8012a44 <roundf+0x48>)
 8012a24:	4111      	asrs	r1, r2
 8012a26:	4208      	tst	r0, r1
 8012a28:	d0fa      	beq.n	8012a20 <roundf+0x24>
 8012a2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012a2e:	4113      	asrs	r3, r2
 8012a30:	4403      	add	r3, r0
 8012a32:	ea23 0301 	bic.w	r3, r3, r1
 8012a36:	e7f1      	b.n	8012a1c <roundf+0x20>
 8012a38:	2a80      	cmp	r2, #128	; 0x80
 8012a3a:	d1f1      	bne.n	8012a20 <roundf+0x24>
 8012a3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012a40:	4770      	bx	lr
 8012a42:	bf00      	nop
 8012a44:	007fffff 	.word	0x007fffff

08012a48 <sinf>:
 8012a48:	ee10 3a10 	vmov	r3, s0
 8012a4c:	b507      	push	{r0, r1, r2, lr}
 8012a4e:	4a1d      	ldr	r2, [pc, #116]	; (8012ac4 <sinf+0x7c>)
 8012a50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012a54:	4293      	cmp	r3, r2
 8012a56:	dc05      	bgt.n	8012a64 <sinf+0x1c>
 8012a58:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8012ac8 <sinf+0x80>
 8012a5c:	2000      	movs	r0, #0
 8012a5e:	f003 fae1 	bl	8016024 <__kernel_sinf>
 8012a62:	e004      	b.n	8012a6e <sinf+0x26>
 8012a64:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012a68:	db04      	blt.n	8012a74 <sinf+0x2c>
 8012a6a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012a6e:	b003      	add	sp, #12
 8012a70:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a74:	4668      	mov	r0, sp
 8012a76:	f002 f993 	bl	8014da0 <__ieee754_rem_pio2f>
 8012a7a:	f000 0003 	and.w	r0, r0, #3
 8012a7e:	2801      	cmp	r0, #1
 8012a80:	d008      	beq.n	8012a94 <sinf+0x4c>
 8012a82:	2802      	cmp	r0, #2
 8012a84:	d00d      	beq.n	8012aa2 <sinf+0x5a>
 8012a86:	b9b0      	cbnz	r0, 8012ab6 <sinf+0x6e>
 8012a88:	2001      	movs	r0, #1
 8012a8a:	eddd 0a01 	vldr	s1, [sp, #4]
 8012a8e:	ed9d 0a00 	vldr	s0, [sp]
 8012a92:	e7e4      	b.n	8012a5e <sinf+0x16>
 8012a94:	eddd 0a01 	vldr	s1, [sp, #4]
 8012a98:	ed9d 0a00 	vldr	s0, [sp]
 8012a9c:	f002 ffe2 	bl	8015a64 <__kernel_cosf>
 8012aa0:	e7e5      	b.n	8012a6e <sinf+0x26>
 8012aa2:	2001      	movs	r0, #1
 8012aa4:	eddd 0a01 	vldr	s1, [sp, #4]
 8012aa8:	ed9d 0a00 	vldr	s0, [sp]
 8012aac:	f003 faba 	bl	8016024 <__kernel_sinf>
 8012ab0:	eeb1 0a40 	vneg.f32	s0, s0
 8012ab4:	e7db      	b.n	8012a6e <sinf+0x26>
 8012ab6:	eddd 0a01 	vldr	s1, [sp, #4]
 8012aba:	ed9d 0a00 	vldr	s0, [sp]
 8012abe:	f002 ffd1 	bl	8015a64 <__kernel_cosf>
 8012ac2:	e7f5      	b.n	8012ab0 <sinf+0x68>
 8012ac4:	3f490fd8 	.word	0x3f490fd8
 8012ac8:	00000000 	.word	0x00000000

08012acc <tanf>:
 8012acc:	ee10 3a10 	vmov	r3, s0
 8012ad0:	b507      	push	{r0, r1, r2, lr}
 8012ad2:	4a10      	ldr	r2, [pc, #64]	; (8012b14 <tanf+0x48>)
 8012ad4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012ad8:	4293      	cmp	r3, r2
 8012ada:	dc05      	bgt.n	8012ae8 <tanf+0x1c>
 8012adc:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8012b18 <tanf+0x4c>
 8012ae0:	2001      	movs	r0, #1
 8012ae2:	f003 fae7 	bl	80160b4 <__kernel_tanf>
 8012ae6:	e004      	b.n	8012af2 <tanf+0x26>
 8012ae8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012aec:	db04      	blt.n	8012af8 <tanf+0x2c>
 8012aee:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012af2:	b003      	add	sp, #12
 8012af4:	f85d fb04 	ldr.w	pc, [sp], #4
 8012af8:	4668      	mov	r0, sp
 8012afa:	f002 f951 	bl	8014da0 <__ieee754_rem_pio2f>
 8012afe:	0040      	lsls	r0, r0, #1
 8012b00:	f000 0002 	and.w	r0, r0, #2
 8012b04:	f1c0 0001 	rsb	r0, r0, #1
 8012b08:	eddd 0a01 	vldr	s1, [sp, #4]
 8012b0c:	ed9d 0a00 	vldr	s0, [sp]
 8012b10:	e7e7      	b.n	8012ae2 <tanf+0x16>
 8012b12:	bf00      	nop
 8012b14:	3f490fda 	.word	0x3f490fda
 8012b18:	00000000 	.word	0x00000000

08012b1c <tanhf>:
 8012b1c:	b510      	push	{r4, lr}
 8012b1e:	ee10 4a10 	vmov	r4, s0
 8012b22:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012b26:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012b2a:	ed2d 8b02 	vpush	{d8}
 8012b2e:	eef0 7a40 	vmov.f32	s15, s0
 8012b32:	db0c      	blt.n	8012b4e <tanhf+0x32>
 8012b34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012b38:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8012b3c:	2c00      	cmp	r4, #0
 8012b3e:	bfac      	ite	ge
 8012b40:	ee30 0a07 	vaddge.f32	s0, s0, s14
 8012b44:	ee30 0a47 	vsublt.f32	s0, s0, s14
 8012b48:	ecbd 8b02 	vpop	{d8}
 8012b4c:	bd10      	pop	{r4, pc}
 8012b4e:	4a1b      	ldr	r2, [pc, #108]	; (8012bbc <tanhf+0xa0>)
 8012b50:	4293      	cmp	r3, r2
 8012b52:	dc30      	bgt.n	8012bb6 <tanhf+0x9a>
 8012b54:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8012b58:	da06      	bge.n	8012b68 <tanhf+0x4c>
 8012b5a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012b5e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012b62:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012b66:	e7ef      	b.n	8012b48 <tanhf+0x2c>
 8012b68:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8012b6c:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8012b70:	db12      	blt.n	8012b98 <tanhf+0x7c>
 8012b72:	f7ff fdf1 	bl	8012758 <fabsf>
 8012b76:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012b7a:	f003 fc0b 	bl	8016394 <expm1f>
 8012b7e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8012b82:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8012b86:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012b8a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012b8e:	2c00      	cmp	r4, #0
 8012b90:	bfb8      	it	lt
 8012b92:	eeb1 0a40 	vneglt.f32	s0, s0
 8012b96:	e7d7      	b.n	8012b48 <tanhf+0x2c>
 8012b98:	f7ff fdde 	bl	8012758 <fabsf>
 8012b9c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8012ba0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012ba4:	f003 fbf6 	bl	8016394 <expm1f>
 8012ba8:	ee70 7a08 	vadd.f32	s15, s0, s16
 8012bac:	eeb1 7a40 	vneg.f32	s14, s0
 8012bb0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8012bb4:	e7eb      	b.n	8012b8e <tanhf+0x72>
 8012bb6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012bba:	e7e8      	b.n	8012b8e <tanhf+0x72>
 8012bbc:	41afffff 	.word	0x41afffff

08012bc0 <sqrt>:
 8012bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bc4:	ed2d 8b02 	vpush	{d8}
 8012bc8:	b08b      	sub	sp, #44	; 0x2c
 8012bca:	ec55 4b10 	vmov	r4, r5, d0
 8012bce:	f000 fff5 	bl	8013bbc <__ieee754_sqrt>
 8012bd2:	4b26      	ldr	r3, [pc, #152]	; (8012c6c <sqrt+0xac>)
 8012bd4:	eeb0 8a40 	vmov.f32	s16, s0
 8012bd8:	eef0 8a60 	vmov.f32	s17, s1
 8012bdc:	f993 6000 	ldrsb.w	r6, [r3]
 8012be0:	1c73      	adds	r3, r6, #1
 8012be2:	d02a      	beq.n	8012c3a <sqrt+0x7a>
 8012be4:	4622      	mov	r2, r4
 8012be6:	462b      	mov	r3, r5
 8012be8:	4620      	mov	r0, r4
 8012bea:	4629      	mov	r1, r5
 8012bec:	f7f4 fb96 	bl	800731c <__aeabi_dcmpun>
 8012bf0:	4607      	mov	r7, r0
 8012bf2:	bb10      	cbnz	r0, 8012c3a <sqrt+0x7a>
 8012bf4:	f04f 0800 	mov.w	r8, #0
 8012bf8:	f04f 0900 	mov.w	r9, #0
 8012bfc:	4642      	mov	r2, r8
 8012bfe:	464b      	mov	r3, r9
 8012c00:	4620      	mov	r0, r4
 8012c02:	4629      	mov	r1, r5
 8012c04:	f7f4 fb62 	bl	80072cc <__aeabi_dcmplt>
 8012c08:	b1b8      	cbz	r0, 8012c3a <sqrt+0x7a>
 8012c0a:	2301      	movs	r3, #1
 8012c0c:	9300      	str	r3, [sp, #0]
 8012c0e:	4b18      	ldr	r3, [pc, #96]	; (8012c70 <sqrt+0xb0>)
 8012c10:	9301      	str	r3, [sp, #4]
 8012c12:	9708      	str	r7, [sp, #32]
 8012c14:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8012c18:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8012c1c:	b9b6      	cbnz	r6, 8012c4c <sqrt+0x8c>
 8012c1e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8012c22:	4668      	mov	r0, sp
 8012c24:	f003 fb33 	bl	801628e <matherr>
 8012c28:	b1d0      	cbz	r0, 8012c60 <sqrt+0xa0>
 8012c2a:	9b08      	ldr	r3, [sp, #32]
 8012c2c:	b11b      	cbz	r3, 8012c36 <sqrt+0x76>
 8012c2e:	f7fc fc59 	bl	800f4e4 <__errno>
 8012c32:	9b08      	ldr	r3, [sp, #32]
 8012c34:	6003      	str	r3, [r0, #0]
 8012c36:	ed9d 8b06 	vldr	d8, [sp, #24]
 8012c3a:	eeb0 0a48 	vmov.f32	s0, s16
 8012c3e:	eef0 0a68 	vmov.f32	s1, s17
 8012c42:	b00b      	add	sp, #44	; 0x2c
 8012c44:	ecbd 8b02 	vpop	{d8}
 8012c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c4c:	4642      	mov	r2, r8
 8012c4e:	464b      	mov	r3, r9
 8012c50:	4640      	mov	r0, r8
 8012c52:	4649      	mov	r1, r9
 8012c54:	f7f4 f9f2 	bl	800703c <__aeabi_ddiv>
 8012c58:	2e02      	cmp	r6, #2
 8012c5a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012c5e:	d1e0      	bne.n	8012c22 <sqrt+0x62>
 8012c60:	f7fc fc40 	bl	800f4e4 <__errno>
 8012c64:	2321      	movs	r3, #33	; 0x21
 8012c66:	6003      	str	r3, [r0, #0]
 8012c68:	e7df      	b.n	8012c2a <sqrt+0x6a>
 8012c6a:	bf00      	nop
 8012c6c:	20000ef4 	.word	0x20000ef4
 8012c70:	080a7230 	.word	0x080a7230

08012c74 <acosf>:
 8012c74:	b510      	push	{r4, lr}
 8012c76:	ed2d 8b02 	vpush	{d8}
 8012c7a:	4c27      	ldr	r4, [pc, #156]	; (8012d18 <acosf+0xa4>)
 8012c7c:	b08a      	sub	sp, #40	; 0x28
 8012c7e:	eeb0 8a40 	vmov.f32	s16, s0
 8012c82:	f001 f84b 	bl	8013d1c <__ieee754_acosf>
 8012c86:	f994 3000 	ldrsb.w	r3, [r4]
 8012c8a:	3301      	adds	r3, #1
 8012c8c:	eef0 8a40 	vmov.f32	s17, s0
 8012c90:	d03c      	beq.n	8012d0c <acosf+0x98>
 8012c92:	eeb4 8a48 	vcmp.f32	s16, s16
 8012c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c9a:	d637      	bvs.n	8012d0c <acosf+0x98>
 8012c9c:	eeb0 0a48 	vmov.f32	s0, s16
 8012ca0:	f7ff fd5a 	bl	8012758 <fabsf>
 8012ca4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012ca8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cb0:	dd2c      	ble.n	8012d0c <acosf+0x98>
 8012cb2:	2301      	movs	r3, #1
 8012cb4:	9300      	str	r3, [sp, #0]
 8012cb6:	4b19      	ldr	r3, [pc, #100]	; (8012d1c <acosf+0xa8>)
 8012cb8:	9301      	str	r3, [sp, #4]
 8012cba:	ee18 0a10 	vmov	r0, s16
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	9308      	str	r3, [sp, #32]
 8012cc2:	f7f4 f839 	bl	8006d38 <__aeabi_f2d>
 8012cc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012cca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012cce:	4814      	ldr	r0, [pc, #80]	; (8012d20 <acosf+0xac>)
 8012cd0:	f003 fae2 	bl	8016298 <nan>
 8012cd4:	f994 3000 	ldrsb.w	r3, [r4]
 8012cd8:	2b02      	cmp	r3, #2
 8012cda:	ed8d 0b06 	vstr	d0, [sp, #24]
 8012cde:	d104      	bne.n	8012cea <acosf+0x76>
 8012ce0:	f7fc fc00 	bl	800f4e4 <__errno>
 8012ce4:	2321      	movs	r3, #33	; 0x21
 8012ce6:	6003      	str	r3, [r0, #0]
 8012ce8:	e004      	b.n	8012cf4 <acosf+0x80>
 8012cea:	4668      	mov	r0, sp
 8012cec:	f003 facf 	bl	801628e <matherr>
 8012cf0:	2800      	cmp	r0, #0
 8012cf2:	d0f5      	beq.n	8012ce0 <acosf+0x6c>
 8012cf4:	9b08      	ldr	r3, [sp, #32]
 8012cf6:	b11b      	cbz	r3, 8012d00 <acosf+0x8c>
 8012cf8:	f7fc fbf4 	bl	800f4e4 <__errno>
 8012cfc:	9b08      	ldr	r3, [sp, #32]
 8012cfe:	6003      	str	r3, [r0, #0]
 8012d00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d04:	f7f4 fb48 	bl	8007398 <__aeabi_d2f>
 8012d08:	ee08 0a90 	vmov	s17, r0
 8012d0c:	eeb0 0a68 	vmov.f32	s0, s17
 8012d10:	b00a      	add	sp, #40	; 0x28
 8012d12:	ecbd 8b02 	vpop	{d8}
 8012d16:	bd10      	pop	{r4, pc}
 8012d18:	20000ef4 	.word	0x20000ef4
 8012d1c:	080a7235 	.word	0x080a7235
 8012d20:	080a70f9 	.word	0x080a70f9

08012d24 <acoshf>:
 8012d24:	b510      	push	{r4, lr}
 8012d26:	ed2d 8b02 	vpush	{d8}
 8012d2a:	b08a      	sub	sp, #40	; 0x28
 8012d2c:	eeb0 8a40 	vmov.f32	s16, s0
 8012d30:	f001 f8f0 	bl	8013f14 <__ieee754_acoshf>
 8012d34:	4b21      	ldr	r3, [pc, #132]	; (8012dbc <acoshf+0x98>)
 8012d36:	f993 4000 	ldrsb.w	r4, [r3]
 8012d3a:	1c63      	adds	r3, r4, #1
 8012d3c:	d039      	beq.n	8012db2 <acoshf+0x8e>
 8012d3e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d46:	d634      	bvs.n	8012db2 <acoshf+0x8e>
 8012d48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012d4c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d54:	d52d      	bpl.n	8012db2 <acoshf+0x8e>
 8012d56:	2301      	movs	r3, #1
 8012d58:	9300      	str	r3, [sp, #0]
 8012d5a:	4b19      	ldr	r3, [pc, #100]	; (8012dc0 <acoshf+0x9c>)
 8012d5c:	9301      	str	r3, [sp, #4]
 8012d5e:	ee18 0a10 	vmov	r0, s16
 8012d62:	2300      	movs	r3, #0
 8012d64:	9308      	str	r3, [sp, #32]
 8012d66:	f7f3 ffe7 	bl	8006d38 <__aeabi_f2d>
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012d72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d76:	4610      	mov	r0, r2
 8012d78:	4619      	mov	r1, r3
 8012d7a:	f7f4 f95f 	bl	800703c <__aeabi_ddiv>
 8012d7e:	2c02      	cmp	r4, #2
 8012d80:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012d84:	d104      	bne.n	8012d90 <acoshf+0x6c>
 8012d86:	f7fc fbad 	bl	800f4e4 <__errno>
 8012d8a:	2321      	movs	r3, #33	; 0x21
 8012d8c:	6003      	str	r3, [r0, #0]
 8012d8e:	e004      	b.n	8012d9a <acoshf+0x76>
 8012d90:	4668      	mov	r0, sp
 8012d92:	f003 fa7c 	bl	801628e <matherr>
 8012d96:	2800      	cmp	r0, #0
 8012d98:	d0f5      	beq.n	8012d86 <acoshf+0x62>
 8012d9a:	9b08      	ldr	r3, [sp, #32]
 8012d9c:	b11b      	cbz	r3, 8012da6 <acoshf+0x82>
 8012d9e:	f7fc fba1 	bl	800f4e4 <__errno>
 8012da2:	9b08      	ldr	r3, [sp, #32]
 8012da4:	6003      	str	r3, [r0, #0]
 8012da6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012daa:	f7f4 faf5 	bl	8007398 <__aeabi_d2f>
 8012dae:	ee00 0a10 	vmov	s0, r0
 8012db2:	b00a      	add	sp, #40	; 0x28
 8012db4:	ecbd 8b02 	vpop	{d8}
 8012db8:	bd10      	pop	{r4, pc}
 8012dba:	bf00      	nop
 8012dbc:	20000ef4 	.word	0x20000ef4
 8012dc0:	080a723b 	.word	0x080a723b

08012dc4 <asinf>:
 8012dc4:	b510      	push	{r4, lr}
 8012dc6:	ed2d 8b02 	vpush	{d8}
 8012dca:	4c27      	ldr	r4, [pc, #156]	; (8012e68 <asinf+0xa4>)
 8012dcc:	b08a      	sub	sp, #40	; 0x28
 8012dce:	eeb0 8a40 	vmov.f32	s16, s0
 8012dd2:	f001 f8f3 	bl	8013fbc <__ieee754_asinf>
 8012dd6:	f994 3000 	ldrsb.w	r3, [r4]
 8012dda:	3301      	adds	r3, #1
 8012ddc:	eef0 8a40 	vmov.f32	s17, s0
 8012de0:	d03c      	beq.n	8012e5c <asinf+0x98>
 8012de2:	eeb4 8a48 	vcmp.f32	s16, s16
 8012de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dea:	d637      	bvs.n	8012e5c <asinf+0x98>
 8012dec:	eeb0 0a48 	vmov.f32	s0, s16
 8012df0:	f7ff fcb2 	bl	8012758 <fabsf>
 8012df4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012df8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e00:	dd2c      	ble.n	8012e5c <asinf+0x98>
 8012e02:	2301      	movs	r3, #1
 8012e04:	9300      	str	r3, [sp, #0]
 8012e06:	4b19      	ldr	r3, [pc, #100]	; (8012e6c <asinf+0xa8>)
 8012e08:	9301      	str	r3, [sp, #4]
 8012e0a:	ee18 0a10 	vmov	r0, s16
 8012e0e:	2300      	movs	r3, #0
 8012e10:	9308      	str	r3, [sp, #32]
 8012e12:	f7f3 ff91 	bl	8006d38 <__aeabi_f2d>
 8012e16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012e1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e1e:	4814      	ldr	r0, [pc, #80]	; (8012e70 <asinf+0xac>)
 8012e20:	f003 fa3a 	bl	8016298 <nan>
 8012e24:	f994 3000 	ldrsb.w	r3, [r4]
 8012e28:	2b02      	cmp	r3, #2
 8012e2a:	ed8d 0b06 	vstr	d0, [sp, #24]
 8012e2e:	d104      	bne.n	8012e3a <asinf+0x76>
 8012e30:	f7fc fb58 	bl	800f4e4 <__errno>
 8012e34:	2321      	movs	r3, #33	; 0x21
 8012e36:	6003      	str	r3, [r0, #0]
 8012e38:	e004      	b.n	8012e44 <asinf+0x80>
 8012e3a:	4668      	mov	r0, sp
 8012e3c:	f003 fa27 	bl	801628e <matherr>
 8012e40:	2800      	cmp	r0, #0
 8012e42:	d0f5      	beq.n	8012e30 <asinf+0x6c>
 8012e44:	9b08      	ldr	r3, [sp, #32]
 8012e46:	b11b      	cbz	r3, 8012e50 <asinf+0x8c>
 8012e48:	f7fc fb4c 	bl	800f4e4 <__errno>
 8012e4c:	9b08      	ldr	r3, [sp, #32]
 8012e4e:	6003      	str	r3, [r0, #0]
 8012e50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012e54:	f7f4 faa0 	bl	8007398 <__aeabi_d2f>
 8012e58:	ee08 0a90 	vmov	s17, r0
 8012e5c:	eeb0 0a68 	vmov.f32	s0, s17
 8012e60:	b00a      	add	sp, #40	; 0x28
 8012e62:	ecbd 8b02 	vpop	{d8}
 8012e66:	bd10      	pop	{r4, pc}
 8012e68:	20000ef4 	.word	0x20000ef4
 8012e6c:	080a7242 	.word	0x080a7242
 8012e70:	080a70f9 	.word	0x080a70f9

08012e74 <atanhf>:
 8012e74:	b570      	push	{r4, r5, r6, lr}
 8012e76:	ed2d 8b04 	vpush	{d8-d9}
 8012e7a:	4c36      	ldr	r4, [pc, #216]	; (8012f54 <atanhf+0xe0>)
 8012e7c:	b08a      	sub	sp, #40	; 0x28
 8012e7e:	eeb0 8a40 	vmov.f32	s16, s0
 8012e82:	f001 f983 	bl	801418c <__ieee754_atanhf>
 8012e86:	f994 3000 	ldrsb.w	r3, [r4]
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	eef0 8a40 	vmov.f32	s17, s0
 8012e90:	d059      	beq.n	8012f46 <atanhf+0xd2>
 8012e92:	eeb4 8a48 	vcmp.f32	s16, s16
 8012e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e9a:	d654      	bvs.n	8012f46 <atanhf+0xd2>
 8012e9c:	eeb0 0a48 	vmov.f32	s0, s16
 8012ea0:	f7ff fc5a 	bl	8012758 <fabsf>
 8012ea4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8012ea8:	eeb4 0ac9 	vcmpe.f32	s0, s18
 8012eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eb0:	eef0 9a40 	vmov.f32	s19, s0
 8012eb4:	db47      	blt.n	8012f46 <atanhf+0xd2>
 8012eb6:	ee18 0a10 	vmov	r0, s16
 8012eba:	f7f3 ff3d 	bl	8006d38 <__aeabi_f2d>
 8012ebe:	eef4 9ac9 	vcmpe.f32	s19, s18
 8012ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ec6:	4602      	mov	r2, r0
 8012ec8:	460b      	mov	r3, r1
 8012eca:	f994 4000 	ldrsb.w	r4, [r4]
 8012ece:	4d22      	ldr	r5, [pc, #136]	; (8012f58 <atanhf+0xe4>)
 8012ed0:	dd17      	ble.n	8012f02 <atanhf+0x8e>
 8012ed2:	2101      	movs	r1, #1
 8012ed4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012ed8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012edc:	e9cd 1500 	strd	r1, r5, [sp]
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	2100      	movs	r1, #0
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	9108      	str	r1, [sp, #32]
 8012ee8:	4610      	mov	r0, r2
 8012eea:	4619      	mov	r1, r3
 8012eec:	f7f4 f8a6 	bl	800703c <__aeabi_ddiv>
 8012ef0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012ef4:	2c02      	cmp	r4, #2
 8012ef6:	d115      	bne.n	8012f24 <atanhf+0xb0>
 8012ef8:	f7fc faf4 	bl	800f4e4 <__errno>
 8012efc:	2321      	movs	r3, #33	; 0x21
 8012efe:	6003      	str	r3, [r0, #0]
 8012f00:	e015      	b.n	8012f2e <atanhf+0xba>
 8012f02:	2602      	movs	r6, #2
 8012f04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012f08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012f0c:	e9cd 6500 	strd	r6, r5, [sp]
 8012f10:	2200      	movs	r2, #0
 8012f12:	2500      	movs	r5, #0
 8012f14:	2300      	movs	r3, #0
 8012f16:	9508      	str	r5, [sp, #32]
 8012f18:	f7f4 f890 	bl	800703c <__aeabi_ddiv>
 8012f1c:	42b4      	cmp	r4, r6
 8012f1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012f22:	e7e8      	b.n	8012ef6 <atanhf+0x82>
 8012f24:	4668      	mov	r0, sp
 8012f26:	f003 f9b2 	bl	801628e <matherr>
 8012f2a:	2800      	cmp	r0, #0
 8012f2c:	d0e4      	beq.n	8012ef8 <atanhf+0x84>
 8012f2e:	9b08      	ldr	r3, [sp, #32]
 8012f30:	b11b      	cbz	r3, 8012f3a <atanhf+0xc6>
 8012f32:	f7fc fad7 	bl	800f4e4 <__errno>
 8012f36:	9b08      	ldr	r3, [sp, #32]
 8012f38:	6003      	str	r3, [r0, #0]
 8012f3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012f3e:	f7f4 fa2b 	bl	8007398 <__aeabi_d2f>
 8012f42:	ee08 0a90 	vmov	s17, r0
 8012f46:	eeb0 0a68 	vmov.f32	s0, s17
 8012f4a:	b00a      	add	sp, #40	; 0x28
 8012f4c:	ecbd 8b04 	vpop	{d8-d9}
 8012f50:	bd70      	pop	{r4, r5, r6, pc}
 8012f52:	bf00      	nop
 8012f54:	20000ef4 	.word	0x20000ef4
 8012f58:	080a7248 	.word	0x080a7248

08012f5c <coshf>:
 8012f5c:	b510      	push	{r4, lr}
 8012f5e:	ed2d 8b02 	vpush	{d8}
 8012f62:	4c29      	ldr	r4, [pc, #164]	; (8013008 <coshf+0xac>)
 8012f64:	b08a      	sub	sp, #40	; 0x28
 8012f66:	eeb0 8a40 	vmov.f32	s16, s0
 8012f6a:	f001 f955 	bl	8014218 <__ieee754_coshf>
 8012f6e:	f994 3000 	ldrsb.w	r3, [r4]
 8012f72:	3301      	adds	r3, #1
 8012f74:	eef0 8a40 	vmov.f32	s17, s0
 8012f78:	d035      	beq.n	8012fe6 <coshf+0x8a>
 8012f7a:	eeb4 8a48 	vcmp.f32	s16, s16
 8012f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f82:	d630      	bvs.n	8012fe6 <coshf+0x8a>
 8012f84:	eeb0 0a48 	vmov.f32	s0, s16
 8012f88:	f7ff fbe6 	bl	8012758 <fabsf>
 8012f8c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801300c <coshf+0xb0>
 8012f90:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f98:	dd25      	ble.n	8012fe6 <coshf+0x8a>
 8012f9a:	2303      	movs	r3, #3
 8012f9c:	9300      	str	r3, [sp, #0]
 8012f9e:	4b1c      	ldr	r3, [pc, #112]	; (8013010 <coshf+0xb4>)
 8012fa0:	9301      	str	r3, [sp, #4]
 8012fa2:	ee18 0a10 	vmov	r0, s16
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	9308      	str	r3, [sp, #32]
 8012faa:	f7f3 fec5 	bl	8006d38 <__aeabi_f2d>
 8012fae:	f994 3000 	ldrsb.w	r3, [r4]
 8012fb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012fb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fba:	b9d3      	cbnz	r3, 8012ff2 <coshf+0x96>
 8012fbc:	4b15      	ldr	r3, [pc, #84]	; (8013014 <coshf+0xb8>)
 8012fbe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012fc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012fc6:	4668      	mov	r0, sp
 8012fc8:	f003 f961 	bl	801628e <matherr>
 8012fcc:	b1b8      	cbz	r0, 8012ffe <coshf+0xa2>
 8012fce:	9b08      	ldr	r3, [sp, #32]
 8012fd0:	b11b      	cbz	r3, 8012fda <coshf+0x7e>
 8012fd2:	f7fc fa87 	bl	800f4e4 <__errno>
 8012fd6:	9b08      	ldr	r3, [sp, #32]
 8012fd8:	6003      	str	r3, [r0, #0]
 8012fda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012fde:	f7f4 f9db 	bl	8007398 <__aeabi_d2f>
 8012fe2:	ee08 0a90 	vmov	s17, r0
 8012fe6:	eeb0 0a68 	vmov.f32	s0, s17
 8012fea:	b00a      	add	sp, #40	; 0x28
 8012fec:	ecbd 8b02 	vpop	{d8}
 8012ff0:	bd10      	pop	{r4, pc}
 8012ff2:	4909      	ldr	r1, [pc, #36]	; (8013018 <coshf+0xbc>)
 8012ff4:	2000      	movs	r0, #0
 8012ff6:	2b02      	cmp	r3, #2
 8012ff8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012ffc:	d1e3      	bne.n	8012fc6 <coshf+0x6a>
 8012ffe:	f7fc fa71 	bl	800f4e4 <__errno>
 8013002:	2322      	movs	r3, #34	; 0x22
 8013004:	6003      	str	r3, [r0, #0]
 8013006:	e7e2      	b.n	8012fce <coshf+0x72>
 8013008:	20000ef4 	.word	0x20000ef4
 801300c:	42b2d4fc 	.word	0x42b2d4fc
 8013010:	080a723c 	.word	0x080a723c
 8013014:	47efffff 	.word	0x47efffff
 8013018:	7ff00000 	.word	0x7ff00000

0801301c <expf>:
 801301c:	b530      	push	{r4, r5, lr}
 801301e:	ed2d 8b02 	vpush	{d8}
 8013022:	4d35      	ldr	r5, [pc, #212]	; (80130f8 <expf+0xdc>)
 8013024:	b08b      	sub	sp, #44	; 0x2c
 8013026:	eeb0 8a40 	vmov.f32	s16, s0
 801302a:	f001 f959 	bl	80142e0 <__ieee754_expf>
 801302e:	f995 3000 	ldrsb.w	r3, [r5]
 8013032:	3301      	adds	r3, #1
 8013034:	ee10 4a10 	vmov	r4, s0
 8013038:	d030      	beq.n	801309c <expf+0x80>
 801303a:	eeb0 0a48 	vmov.f32	s0, s16
 801303e:	f003 fad5 	bl	80165ec <finitef>
 8013042:	b358      	cbz	r0, 801309c <expf+0x80>
 8013044:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80130fc <expf+0xe0>
 8013048:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801304c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013050:	dd35      	ble.n	80130be <expf+0xa2>
 8013052:	2303      	movs	r3, #3
 8013054:	9300      	str	r3, [sp, #0]
 8013056:	4b2a      	ldr	r3, [pc, #168]	; (8013100 <expf+0xe4>)
 8013058:	9301      	str	r3, [sp, #4]
 801305a:	ee18 0a10 	vmov	r0, s16
 801305e:	2300      	movs	r3, #0
 8013060:	9308      	str	r3, [sp, #32]
 8013062:	f7f3 fe69 	bl	8006d38 <__aeabi_f2d>
 8013066:	f995 3000 	ldrsb.w	r3, [r5]
 801306a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801306e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013072:	b9cb      	cbnz	r3, 80130a8 <expf+0x8c>
 8013074:	4b23      	ldr	r3, [pc, #140]	; (8013104 <expf+0xe8>)
 8013076:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801307a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801307e:	4668      	mov	r0, sp
 8013080:	f003 f905 	bl	801628e <matherr>
 8013084:	b1b0      	cbz	r0, 80130b4 <expf+0x98>
 8013086:	9b08      	ldr	r3, [sp, #32]
 8013088:	b11b      	cbz	r3, 8013092 <expf+0x76>
 801308a:	f7fc fa2b 	bl	800f4e4 <__errno>
 801308e:	9b08      	ldr	r3, [sp, #32]
 8013090:	6003      	str	r3, [r0, #0]
 8013092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013096:	f7f4 f97f 	bl	8007398 <__aeabi_d2f>
 801309a:	4604      	mov	r4, r0
 801309c:	ee00 4a10 	vmov	s0, r4
 80130a0:	b00b      	add	sp, #44	; 0x2c
 80130a2:	ecbd 8b02 	vpop	{d8}
 80130a6:	bd30      	pop	{r4, r5, pc}
 80130a8:	4917      	ldr	r1, [pc, #92]	; (8013108 <expf+0xec>)
 80130aa:	2000      	movs	r0, #0
 80130ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80130b0:	2b02      	cmp	r3, #2
 80130b2:	d1e4      	bne.n	801307e <expf+0x62>
 80130b4:	f7fc fa16 	bl	800f4e4 <__errno>
 80130b8:	2322      	movs	r3, #34	; 0x22
 80130ba:	6003      	str	r3, [r0, #0]
 80130bc:	e7e3      	b.n	8013086 <expf+0x6a>
 80130be:	eddf 7a13 	vldr	s15, [pc, #76]	; 801310c <expf+0xf0>
 80130c2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80130c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ca:	d5e7      	bpl.n	801309c <expf+0x80>
 80130cc:	2304      	movs	r3, #4
 80130ce:	9300      	str	r3, [sp, #0]
 80130d0:	4b0b      	ldr	r3, [pc, #44]	; (8013100 <expf+0xe4>)
 80130d2:	9301      	str	r3, [sp, #4]
 80130d4:	ee18 0a10 	vmov	r0, s16
 80130d8:	2300      	movs	r3, #0
 80130da:	9308      	str	r3, [sp, #32]
 80130dc:	f7f3 fe2c 	bl	8006d38 <__aeabi_f2d>
 80130e0:	2300      	movs	r3, #0
 80130e2:	2200      	movs	r2, #0
 80130e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80130e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80130ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80130f0:	f995 3000 	ldrsb.w	r3, [r5]
 80130f4:	e7dc      	b.n	80130b0 <expf+0x94>
 80130f6:	bf00      	nop
 80130f8:	20000ef4 	.word	0x20000ef4
 80130fc:	42b17180 	.word	0x42b17180
 8013100:	080a724f 	.word	0x080a724f
 8013104:	47efffff 	.word	0x47efffff
 8013108:	7ff00000 	.word	0x7ff00000
 801310c:	c2cff1b5 	.word	0xc2cff1b5

08013110 <fmodf>:
 8013110:	b5d0      	push	{r4, r6, r7, lr}
 8013112:	ed2d 8b02 	vpush	{d8}
 8013116:	b08a      	sub	sp, #40	; 0x28
 8013118:	eef0 8a40 	vmov.f32	s17, s0
 801311c:	eeb0 8a60 	vmov.f32	s16, s1
 8013120:	f001 f9b2 	bl	8014488 <__ieee754_fmodf>
 8013124:	4b26      	ldr	r3, [pc, #152]	; (80131c0 <fmodf+0xb0>)
 8013126:	f993 4000 	ldrsb.w	r4, [r3]
 801312a:	1c63      	adds	r3, r4, #1
 801312c:	d035      	beq.n	801319a <fmodf+0x8a>
 801312e:	eeb4 8a48 	vcmp.f32	s16, s16
 8013132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013136:	d630      	bvs.n	801319a <fmodf+0x8a>
 8013138:	eef4 8a68 	vcmp.f32	s17, s17
 801313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013140:	d62b      	bvs.n	801319a <fmodf+0x8a>
 8013142:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801314a:	d126      	bne.n	801319a <fmodf+0x8a>
 801314c:	2301      	movs	r3, #1
 801314e:	9300      	str	r3, [sp, #0]
 8013150:	4b1c      	ldr	r3, [pc, #112]	; (80131c4 <fmodf+0xb4>)
 8013152:	9301      	str	r3, [sp, #4]
 8013154:	ee18 0a90 	vmov	r0, s17
 8013158:	2300      	movs	r3, #0
 801315a:	9308      	str	r3, [sp, #32]
 801315c:	f7f3 fdec 	bl	8006d38 <__aeabi_f2d>
 8013160:	4606      	mov	r6, r0
 8013162:	460f      	mov	r7, r1
 8013164:	ee18 0a10 	vmov	r0, s16
 8013168:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801316c:	f7f3 fde4 	bl	8006d38 <__aeabi_f2d>
 8013170:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013174:	b9ac      	cbnz	r4, 80131a2 <fmodf+0x92>
 8013176:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801317a:	4668      	mov	r0, sp
 801317c:	f003 f887 	bl	801628e <matherr>
 8013180:	b1c8      	cbz	r0, 80131b6 <fmodf+0xa6>
 8013182:	9b08      	ldr	r3, [sp, #32]
 8013184:	b11b      	cbz	r3, 801318e <fmodf+0x7e>
 8013186:	f7fc f9ad 	bl	800f4e4 <__errno>
 801318a:	9b08      	ldr	r3, [sp, #32]
 801318c:	6003      	str	r3, [r0, #0]
 801318e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013192:	f7f4 f901 	bl	8007398 <__aeabi_d2f>
 8013196:	ee00 0a10 	vmov	s0, r0
 801319a:	b00a      	add	sp, #40	; 0x28
 801319c:	ecbd 8b02 	vpop	{d8}
 80131a0:	bdd0      	pop	{r4, r6, r7, pc}
 80131a2:	2200      	movs	r2, #0
 80131a4:	2300      	movs	r3, #0
 80131a6:	4610      	mov	r0, r2
 80131a8:	4619      	mov	r1, r3
 80131aa:	f7f3 ff47 	bl	800703c <__aeabi_ddiv>
 80131ae:	2c02      	cmp	r4, #2
 80131b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80131b4:	d1e1      	bne.n	801317a <fmodf+0x6a>
 80131b6:	f7fc f995 	bl	800f4e4 <__errno>
 80131ba:	2321      	movs	r3, #33	; 0x21
 80131bc:	6003      	str	r3, [r0, #0]
 80131be:	e7e0      	b.n	8013182 <fmodf+0x72>
 80131c0:	20000ef4 	.word	0x20000ef4
 80131c4:	080a7254 	.word	0x080a7254

080131c8 <logf>:
 80131c8:	b510      	push	{r4, lr}
 80131ca:	ed2d 8b02 	vpush	{d8}
 80131ce:	b08a      	sub	sp, #40	; 0x28
 80131d0:	eeb0 8a40 	vmov.f32	s16, s0
 80131d4:	f001 f9e0 	bl	8014598 <__ieee754_logf>
 80131d8:	4b31      	ldr	r3, [pc, #196]	; (80132a0 <logf+0xd8>)
 80131da:	f993 4000 	ldrsb.w	r4, [r3]
 80131de:	1c63      	adds	r3, r4, #1
 80131e0:	d059      	beq.n	8013296 <logf+0xce>
 80131e2:	eeb4 8a48 	vcmp.f32	s16, s16
 80131e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ea:	d654      	bvs.n	8013296 <logf+0xce>
 80131ec:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80131f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131f4:	dc4f      	bgt.n	8013296 <logf+0xce>
 80131f6:	4b2b      	ldr	r3, [pc, #172]	; (80132a4 <logf+0xdc>)
 80131f8:	9301      	str	r3, [sp, #4]
 80131fa:	ee18 0a10 	vmov	r0, s16
 80131fe:	2300      	movs	r3, #0
 8013200:	9308      	str	r3, [sp, #32]
 8013202:	f7f3 fd99 	bl	8006d38 <__aeabi_f2d>
 8013206:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801320a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801320e:	b994      	cbnz	r4, 8013236 <logf+0x6e>
 8013210:	4b25      	ldr	r3, [pc, #148]	; (80132a8 <logf+0xe0>)
 8013212:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013216:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801321e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013222:	d025      	beq.n	8013270 <logf+0xa8>
 8013224:	2301      	movs	r3, #1
 8013226:	2c02      	cmp	r4, #2
 8013228:	9300      	str	r3, [sp, #0]
 801322a:	d116      	bne.n	801325a <logf+0x92>
 801322c:	f7fc f95a 	bl	800f4e4 <__errno>
 8013230:	2321      	movs	r3, #33	; 0x21
 8013232:	6003      	str	r3, [r0, #0]
 8013234:	e016      	b.n	8013264 <logf+0x9c>
 8013236:	4b1d      	ldr	r3, [pc, #116]	; (80132ac <logf+0xe4>)
 8013238:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801323c:	2200      	movs	r2, #0
 801323e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013242:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013246:	d1ed      	bne.n	8013224 <logf+0x5c>
 8013248:	2302      	movs	r3, #2
 801324a:	429c      	cmp	r4, r3
 801324c:	9300      	str	r3, [sp, #0]
 801324e:	d111      	bne.n	8013274 <logf+0xac>
 8013250:	f7fc f948 	bl	800f4e4 <__errno>
 8013254:	2322      	movs	r3, #34	; 0x22
 8013256:	6003      	str	r3, [r0, #0]
 8013258:	e011      	b.n	801327e <logf+0xb6>
 801325a:	4668      	mov	r0, sp
 801325c:	f003 f817 	bl	801628e <matherr>
 8013260:	2800      	cmp	r0, #0
 8013262:	d0e3      	beq.n	801322c <logf+0x64>
 8013264:	4812      	ldr	r0, [pc, #72]	; (80132b0 <logf+0xe8>)
 8013266:	f003 f817 	bl	8016298 <nan>
 801326a:	ed8d 0b06 	vstr	d0, [sp, #24]
 801326e:	e006      	b.n	801327e <logf+0xb6>
 8013270:	2302      	movs	r3, #2
 8013272:	9300      	str	r3, [sp, #0]
 8013274:	4668      	mov	r0, sp
 8013276:	f003 f80a 	bl	801628e <matherr>
 801327a:	2800      	cmp	r0, #0
 801327c:	d0e8      	beq.n	8013250 <logf+0x88>
 801327e:	9b08      	ldr	r3, [sp, #32]
 8013280:	b11b      	cbz	r3, 801328a <logf+0xc2>
 8013282:	f7fc f92f 	bl	800f4e4 <__errno>
 8013286:	9b08      	ldr	r3, [sp, #32]
 8013288:	6003      	str	r3, [r0, #0]
 801328a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801328e:	f7f4 f883 	bl	8007398 <__aeabi_d2f>
 8013292:	ee00 0a10 	vmov	s0, r0
 8013296:	b00a      	add	sp, #40	; 0x28
 8013298:	ecbd 8b02 	vpop	{d8}
 801329c:	bd10      	pop	{r4, pc}
 801329e:	bf00      	nop
 80132a0:	20000ef4 	.word	0x20000ef4
 80132a4:	080a725a 	.word	0x080a725a
 80132a8:	c7efffff 	.word	0xc7efffff
 80132ac:	fff00000 	.word	0xfff00000
 80132b0:	080a70f9 	.word	0x080a70f9

080132b4 <log10f>:
 80132b4:	b510      	push	{r4, lr}
 80132b6:	ed2d 8b02 	vpush	{d8}
 80132ba:	b08a      	sub	sp, #40	; 0x28
 80132bc:	eeb0 8a40 	vmov.f32	s16, s0
 80132c0:	f001 fa58 	bl	8014774 <__ieee754_log10f>
 80132c4:	4b31      	ldr	r3, [pc, #196]	; (801338c <log10f+0xd8>)
 80132c6:	f993 4000 	ldrsb.w	r4, [r3]
 80132ca:	1c63      	adds	r3, r4, #1
 80132cc:	d059      	beq.n	8013382 <log10f+0xce>
 80132ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80132d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d6:	d654      	bvs.n	8013382 <log10f+0xce>
 80132d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80132dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132e0:	d84f      	bhi.n	8013382 <log10f+0xce>
 80132e2:	4b2b      	ldr	r3, [pc, #172]	; (8013390 <log10f+0xdc>)
 80132e4:	9301      	str	r3, [sp, #4]
 80132e6:	ee18 0a10 	vmov	r0, s16
 80132ea:	2300      	movs	r3, #0
 80132ec:	9308      	str	r3, [sp, #32]
 80132ee:	f7f3 fd23 	bl	8006d38 <__aeabi_f2d>
 80132f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80132f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132fa:	b994      	cbnz	r4, 8013322 <log10f+0x6e>
 80132fc:	4b25      	ldr	r3, [pc, #148]	; (8013394 <log10f+0xe0>)
 80132fe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013302:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801330a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801330e:	d025      	beq.n	801335c <log10f+0xa8>
 8013310:	2301      	movs	r3, #1
 8013312:	2c02      	cmp	r4, #2
 8013314:	9300      	str	r3, [sp, #0]
 8013316:	d116      	bne.n	8013346 <log10f+0x92>
 8013318:	f7fc f8e4 	bl	800f4e4 <__errno>
 801331c:	2321      	movs	r3, #33	; 0x21
 801331e:	6003      	str	r3, [r0, #0]
 8013320:	e016      	b.n	8013350 <log10f+0x9c>
 8013322:	4b1d      	ldr	r3, [pc, #116]	; (8013398 <log10f+0xe4>)
 8013324:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013328:	2200      	movs	r2, #0
 801332a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801332e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013332:	d1ed      	bne.n	8013310 <log10f+0x5c>
 8013334:	2302      	movs	r3, #2
 8013336:	429c      	cmp	r4, r3
 8013338:	9300      	str	r3, [sp, #0]
 801333a:	d111      	bne.n	8013360 <log10f+0xac>
 801333c:	f7fc f8d2 	bl	800f4e4 <__errno>
 8013340:	2322      	movs	r3, #34	; 0x22
 8013342:	6003      	str	r3, [r0, #0]
 8013344:	e011      	b.n	801336a <log10f+0xb6>
 8013346:	4668      	mov	r0, sp
 8013348:	f002 ffa1 	bl	801628e <matherr>
 801334c:	2800      	cmp	r0, #0
 801334e:	d0e3      	beq.n	8013318 <log10f+0x64>
 8013350:	4812      	ldr	r0, [pc, #72]	; (801339c <log10f+0xe8>)
 8013352:	f002 ffa1 	bl	8016298 <nan>
 8013356:	ed8d 0b06 	vstr	d0, [sp, #24]
 801335a:	e006      	b.n	801336a <log10f+0xb6>
 801335c:	2302      	movs	r3, #2
 801335e:	9300      	str	r3, [sp, #0]
 8013360:	4668      	mov	r0, sp
 8013362:	f002 ff94 	bl	801628e <matherr>
 8013366:	2800      	cmp	r0, #0
 8013368:	d0e8      	beq.n	801333c <log10f+0x88>
 801336a:	9b08      	ldr	r3, [sp, #32]
 801336c:	b11b      	cbz	r3, 8013376 <log10f+0xc2>
 801336e:	f7fc f8b9 	bl	800f4e4 <__errno>
 8013372:	9b08      	ldr	r3, [sp, #32]
 8013374:	6003      	str	r3, [r0, #0]
 8013376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801337a:	f7f4 f80d 	bl	8007398 <__aeabi_d2f>
 801337e:	ee00 0a10 	vmov	s0, r0
 8013382:	b00a      	add	sp, #40	; 0x28
 8013384:	ecbd 8b02 	vpop	{d8}
 8013388:	bd10      	pop	{r4, pc}
 801338a:	bf00      	nop
 801338c:	20000ef4 	.word	0x20000ef4
 8013390:	080a725f 	.word	0x080a725f
 8013394:	c7efffff 	.word	0xc7efffff
 8013398:	fff00000 	.word	0xfff00000
 801339c:	080a70f9 	.word	0x080a70f9

080133a0 <powf>:
 80133a0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80133a4:	ed2d 8b04 	vpush	{d8-d9}
 80133a8:	4ca7      	ldr	r4, [pc, #668]	; (8013648 <powf+0x2a8>)
 80133aa:	b08a      	sub	sp, #40	; 0x28
 80133ac:	eef0 8a40 	vmov.f32	s17, s0
 80133b0:	eeb0 8a60 	vmov.f32	s16, s1
 80133b4:	f001 fa34 	bl	8014820 <__ieee754_powf>
 80133b8:	f994 5000 	ldrsb.w	r5, [r4]
 80133bc:	1c6b      	adds	r3, r5, #1
 80133be:	eeb0 9a40 	vmov.f32	s18, s0
 80133c2:	4626      	mov	r6, r4
 80133c4:	d05f      	beq.n	8013486 <powf+0xe6>
 80133c6:	eeb4 8a48 	vcmp.f32	s16, s16
 80133ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133ce:	d65a      	bvs.n	8013486 <powf+0xe6>
 80133d0:	eef4 8a68 	vcmp.f32	s17, s17
 80133d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133d8:	d721      	bvc.n	801341e <powf+0x7e>
 80133da:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80133de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133e2:	d150      	bne.n	8013486 <powf+0xe6>
 80133e4:	2301      	movs	r3, #1
 80133e6:	9300      	str	r3, [sp, #0]
 80133e8:	4b98      	ldr	r3, [pc, #608]	; (801364c <powf+0x2ac>)
 80133ea:	9301      	str	r3, [sp, #4]
 80133ec:	ee18 0a90 	vmov	r0, s17
 80133f0:	2300      	movs	r3, #0
 80133f2:	9308      	str	r3, [sp, #32]
 80133f4:	f7f3 fca0 	bl	8006d38 <__aeabi_f2d>
 80133f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80133fc:	ee18 0a10 	vmov	r0, s16
 8013400:	f7f3 fc9a 	bl	8006d38 <__aeabi_f2d>
 8013404:	4b92      	ldr	r3, [pc, #584]	; (8013650 <powf+0x2b0>)
 8013406:	2200      	movs	r2, #0
 8013408:	2d02      	cmp	r5, #2
 801340a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801340e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013412:	d032      	beq.n	801347a <powf+0xda>
 8013414:	4668      	mov	r0, sp
 8013416:	f002 ff3a 	bl	801628e <matherr>
 801341a:	bb40      	cbnz	r0, 801346e <powf+0xce>
 801341c:	e065      	b.n	80134ea <powf+0x14a>
 801341e:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8013654 <powf+0x2b4>
 8013422:	eef4 8a69 	vcmp.f32	s17, s19
 8013426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801342a:	d163      	bne.n	80134f4 <powf+0x154>
 801342c:	eeb4 8a69 	vcmp.f32	s16, s19
 8013430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013434:	d12e      	bne.n	8013494 <powf+0xf4>
 8013436:	2301      	movs	r3, #1
 8013438:	9300      	str	r3, [sp, #0]
 801343a:	4b84      	ldr	r3, [pc, #528]	; (801364c <powf+0x2ac>)
 801343c:	9301      	str	r3, [sp, #4]
 801343e:	ee18 0a90 	vmov	r0, s17
 8013442:	2300      	movs	r3, #0
 8013444:	9308      	str	r3, [sp, #32]
 8013446:	f7f3 fc77 	bl	8006d38 <__aeabi_f2d>
 801344a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801344e:	ee18 0a10 	vmov	r0, s16
 8013452:	f7f3 fc71 	bl	8006d38 <__aeabi_f2d>
 8013456:	2200      	movs	r2, #0
 8013458:	2300      	movs	r3, #0
 801345a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801345e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013462:	2d00      	cmp	r5, #0
 8013464:	d0d6      	beq.n	8013414 <powf+0x74>
 8013466:	4b7a      	ldr	r3, [pc, #488]	; (8013650 <powf+0x2b0>)
 8013468:	2200      	movs	r2, #0
 801346a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801346e:	9b08      	ldr	r3, [sp, #32]
 8013470:	b11b      	cbz	r3, 801347a <powf+0xda>
 8013472:	f7fc f837 	bl	800f4e4 <__errno>
 8013476:	9b08      	ldr	r3, [sp, #32]
 8013478:	6003      	str	r3, [r0, #0]
 801347a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801347e:	f7f3 ff8b 	bl	8007398 <__aeabi_d2f>
 8013482:	ee09 0a10 	vmov	s18, r0
 8013486:	eeb0 0a49 	vmov.f32	s0, s18
 801348a:	b00a      	add	sp, #40	; 0x28
 801348c:	ecbd 8b04 	vpop	{d8-d9}
 8013490:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8013494:	eeb0 0a48 	vmov.f32	s0, s16
 8013498:	f003 f8a8 	bl	80165ec <finitef>
 801349c:	2800      	cmp	r0, #0
 801349e:	d0f2      	beq.n	8013486 <powf+0xe6>
 80134a0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80134a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134a8:	d5ed      	bpl.n	8013486 <powf+0xe6>
 80134aa:	2301      	movs	r3, #1
 80134ac:	9300      	str	r3, [sp, #0]
 80134ae:	4b67      	ldr	r3, [pc, #412]	; (801364c <powf+0x2ac>)
 80134b0:	9301      	str	r3, [sp, #4]
 80134b2:	ee18 0a90 	vmov	r0, s17
 80134b6:	2300      	movs	r3, #0
 80134b8:	9308      	str	r3, [sp, #32]
 80134ba:	f7f3 fc3d 	bl	8006d38 <__aeabi_f2d>
 80134be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80134c2:	ee18 0a10 	vmov	r0, s16
 80134c6:	f7f3 fc37 	bl	8006d38 <__aeabi_f2d>
 80134ca:	f994 3000 	ldrsb.w	r3, [r4]
 80134ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80134d2:	b923      	cbnz	r3, 80134de <powf+0x13e>
 80134d4:	2200      	movs	r2, #0
 80134d6:	2300      	movs	r3, #0
 80134d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80134dc:	e79a      	b.n	8013414 <powf+0x74>
 80134de:	495e      	ldr	r1, [pc, #376]	; (8013658 <powf+0x2b8>)
 80134e0:	2000      	movs	r0, #0
 80134e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80134e6:	2b02      	cmp	r3, #2
 80134e8:	d194      	bne.n	8013414 <powf+0x74>
 80134ea:	f7fb fffb 	bl	800f4e4 <__errno>
 80134ee:	2321      	movs	r3, #33	; 0x21
 80134f0:	6003      	str	r3, [r0, #0]
 80134f2:	e7bc      	b.n	801346e <powf+0xce>
 80134f4:	f003 f87a 	bl	80165ec <finitef>
 80134f8:	4605      	mov	r5, r0
 80134fa:	2800      	cmp	r0, #0
 80134fc:	d173      	bne.n	80135e6 <powf+0x246>
 80134fe:	eeb0 0a68 	vmov.f32	s0, s17
 8013502:	f003 f873 	bl	80165ec <finitef>
 8013506:	2800      	cmp	r0, #0
 8013508:	d06d      	beq.n	80135e6 <powf+0x246>
 801350a:	eeb0 0a48 	vmov.f32	s0, s16
 801350e:	f003 f86d 	bl	80165ec <finitef>
 8013512:	2800      	cmp	r0, #0
 8013514:	d067      	beq.n	80135e6 <powf+0x246>
 8013516:	ee18 0a90 	vmov	r0, s17
 801351a:	f7f3 fc0d 	bl	8006d38 <__aeabi_f2d>
 801351e:	4680      	mov	r8, r0
 8013520:	ee18 0a10 	vmov	r0, s16
 8013524:	4689      	mov	r9, r1
 8013526:	f7f3 fc07 	bl	8006d38 <__aeabi_f2d>
 801352a:	eeb4 9a49 	vcmp.f32	s18, s18
 801352e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013532:	f994 4000 	ldrsb.w	r4, [r4]
 8013536:	4b45      	ldr	r3, [pc, #276]	; (801364c <powf+0x2ac>)
 8013538:	d713      	bvc.n	8013562 <powf+0x1c2>
 801353a:	2201      	movs	r2, #1
 801353c:	e9cd 2300 	strd	r2, r3, [sp]
 8013540:	9508      	str	r5, [sp, #32]
 8013542:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8013546:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801354a:	2c00      	cmp	r4, #0
 801354c:	d0c2      	beq.n	80134d4 <powf+0x134>
 801354e:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8013552:	ee17 0a90 	vmov	r0, s15
 8013556:	f7f3 fbef 	bl	8006d38 <__aeabi_f2d>
 801355a:	2c02      	cmp	r4, #2
 801355c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013560:	e7c2      	b.n	80134e8 <powf+0x148>
 8013562:	2203      	movs	r2, #3
 8013564:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013568:	e9cd 2300 	strd	r2, r3, [sp]
 801356c:	9508      	str	r5, [sp, #32]
 801356e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8013572:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013576:	ee28 8a27 	vmul.f32	s16, s16, s15
 801357a:	b9fc      	cbnz	r4, 80135bc <powf+0x21c>
 801357c:	4b37      	ldr	r3, [pc, #220]	; (801365c <powf+0x2bc>)
 801357e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8013582:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801358a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801358e:	d553      	bpl.n	8013638 <powf+0x298>
 8013590:	eeb0 0a48 	vmov.f32	s0, s16
 8013594:	f003 f83a 	bl	801660c <rintf>
 8013598:	eeb4 0a48 	vcmp.f32	s0, s16
 801359c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135a0:	d004      	beq.n	80135ac <powf+0x20c>
 80135a2:	4b2f      	ldr	r3, [pc, #188]	; (8013660 <powf+0x2c0>)
 80135a4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80135a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80135ac:	f996 3000 	ldrsb.w	r3, [r6]
 80135b0:	2b02      	cmp	r3, #2
 80135b2:	d141      	bne.n	8013638 <powf+0x298>
 80135b4:	f7fb ff96 	bl	800f4e4 <__errno>
 80135b8:	2322      	movs	r3, #34	; 0x22
 80135ba:	e799      	b.n	80134f0 <powf+0x150>
 80135bc:	4b29      	ldr	r3, [pc, #164]	; (8013664 <powf+0x2c4>)
 80135be:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80135c2:	2200      	movs	r2, #0
 80135c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80135cc:	d5ee      	bpl.n	80135ac <powf+0x20c>
 80135ce:	eeb0 0a48 	vmov.f32	s0, s16
 80135d2:	f003 f81b 	bl	801660c <rintf>
 80135d6:	eeb4 0a48 	vcmp.f32	s0, s16
 80135da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135de:	d0e5      	beq.n	80135ac <powf+0x20c>
 80135e0:	2200      	movs	r2, #0
 80135e2:	4b1d      	ldr	r3, [pc, #116]	; (8013658 <powf+0x2b8>)
 80135e4:	e7e0      	b.n	80135a8 <powf+0x208>
 80135e6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80135ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135ee:	f47f af4a 	bne.w	8013486 <powf+0xe6>
 80135f2:	eeb0 0a68 	vmov.f32	s0, s17
 80135f6:	f002 fff9 	bl	80165ec <finitef>
 80135fa:	2800      	cmp	r0, #0
 80135fc:	f43f af43 	beq.w	8013486 <powf+0xe6>
 8013600:	eeb0 0a48 	vmov.f32	s0, s16
 8013604:	f002 fff2 	bl	80165ec <finitef>
 8013608:	2800      	cmp	r0, #0
 801360a:	f43f af3c 	beq.w	8013486 <powf+0xe6>
 801360e:	2304      	movs	r3, #4
 8013610:	9300      	str	r3, [sp, #0]
 8013612:	4b0e      	ldr	r3, [pc, #56]	; (801364c <powf+0x2ac>)
 8013614:	9301      	str	r3, [sp, #4]
 8013616:	ee18 0a90 	vmov	r0, s17
 801361a:	2300      	movs	r3, #0
 801361c:	9308      	str	r3, [sp, #32]
 801361e:	f7f3 fb8b 	bl	8006d38 <__aeabi_f2d>
 8013622:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013626:	ee18 0a10 	vmov	r0, s16
 801362a:	f7f3 fb85 	bl	8006d38 <__aeabi_f2d>
 801362e:	2200      	movs	r2, #0
 8013630:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013634:	2300      	movs	r3, #0
 8013636:	e7b7      	b.n	80135a8 <powf+0x208>
 8013638:	4668      	mov	r0, sp
 801363a:	f002 fe28 	bl	801628e <matherr>
 801363e:	2800      	cmp	r0, #0
 8013640:	f47f af15 	bne.w	801346e <powf+0xce>
 8013644:	e7b6      	b.n	80135b4 <powf+0x214>
 8013646:	bf00      	nop
 8013648:	20000ef4 	.word	0x20000ef4
 801364c:	080a7266 	.word	0x080a7266
 8013650:	3ff00000 	.word	0x3ff00000
 8013654:	00000000 	.word	0x00000000
 8013658:	fff00000 	.word	0xfff00000
 801365c:	47efffff 	.word	0x47efffff
 8013660:	c7efffff 	.word	0xc7efffff
 8013664:	7ff00000 	.word	0x7ff00000

08013668 <sinhf>:
 8013668:	b530      	push	{r4, r5, lr}
 801366a:	ed2d 8b02 	vpush	{d8}
 801366e:	4c2b      	ldr	r4, [pc, #172]	; (801371c <sinhf+0xb4>)
 8013670:	b08b      	sub	sp, #44	; 0x2c
 8013672:	eeb0 8a40 	vmov.f32	s16, s0
 8013676:	f001 fcbf 	bl	8014ff8 <__ieee754_sinhf>
 801367a:	f994 3000 	ldrsb.w	r3, [r4]
 801367e:	3301      	adds	r3, #1
 8013680:	eef0 8a40 	vmov.f32	s17, s0
 8013684:	d034      	beq.n	80136f0 <sinhf+0x88>
 8013686:	f002 ffb1 	bl	80165ec <finitef>
 801368a:	4605      	mov	r5, r0
 801368c:	2800      	cmp	r0, #0
 801368e:	d12f      	bne.n	80136f0 <sinhf+0x88>
 8013690:	eeb0 0a48 	vmov.f32	s0, s16
 8013694:	f002 ffaa 	bl	80165ec <finitef>
 8013698:	b350      	cbz	r0, 80136f0 <sinhf+0x88>
 801369a:	2303      	movs	r3, #3
 801369c:	9300      	str	r3, [sp, #0]
 801369e:	ee18 0a10 	vmov	r0, s16
 80136a2:	4b1f      	ldr	r3, [pc, #124]	; (8013720 <sinhf+0xb8>)
 80136a4:	9301      	str	r3, [sp, #4]
 80136a6:	9508      	str	r5, [sp, #32]
 80136a8:	f7f3 fb46 	bl	8006d38 <__aeabi_f2d>
 80136ac:	f994 3000 	ldrsb.w	r3, [r4]
 80136b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80136b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80136b8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80136bc:	b9f3      	cbnz	r3, 80136fc <sinhf+0x94>
 80136be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136c2:	bfd4      	ite	le
 80136c4:	4b17      	ldrle	r3, [pc, #92]	; (8013724 <sinhf+0xbc>)
 80136c6:	4b18      	ldrgt	r3, [pc, #96]	; (8013728 <sinhf+0xc0>)
 80136c8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80136cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80136d0:	4668      	mov	r0, sp
 80136d2:	f002 fddc 	bl	801628e <matherr>
 80136d6:	b1d8      	cbz	r0, 8013710 <sinhf+0xa8>
 80136d8:	9b08      	ldr	r3, [sp, #32]
 80136da:	b11b      	cbz	r3, 80136e4 <sinhf+0x7c>
 80136dc:	f7fb ff02 	bl	800f4e4 <__errno>
 80136e0:	9b08      	ldr	r3, [sp, #32]
 80136e2:	6003      	str	r3, [r0, #0]
 80136e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80136e8:	f7f3 fe56 	bl	8007398 <__aeabi_d2f>
 80136ec:	ee08 0a90 	vmov	s17, r0
 80136f0:	eeb0 0a68 	vmov.f32	s0, s17
 80136f4:	b00b      	add	sp, #44	; 0x2c
 80136f6:	ecbd 8b02 	vpop	{d8}
 80136fa:	bd30      	pop	{r4, r5, pc}
 80136fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013700:	bfd4      	ite	le
 8013702:	490a      	ldrle	r1, [pc, #40]	; (801372c <sinhf+0xc4>)
 8013704:	490a      	ldrgt	r1, [pc, #40]	; (8013730 <sinhf+0xc8>)
 8013706:	2000      	movs	r0, #0
 8013708:	2b02      	cmp	r3, #2
 801370a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801370e:	d1df      	bne.n	80136d0 <sinhf+0x68>
 8013710:	f7fb fee8 	bl	800f4e4 <__errno>
 8013714:	2322      	movs	r3, #34	; 0x22
 8013716:	6003      	str	r3, [r0, #0]
 8013718:	e7de      	b.n	80136d8 <sinhf+0x70>
 801371a:	bf00      	nop
 801371c:	20000ef4 	.word	0x20000ef4
 8013720:	080a726b 	.word	0x080a726b
 8013724:	c7efffff 	.word	0xc7efffff
 8013728:	47efffff 	.word	0x47efffff
 801372c:	fff00000 	.word	0xfff00000
 8013730:	7ff00000 	.word	0x7ff00000

08013734 <sqrtf>:
 8013734:	b510      	push	{r4, lr}
 8013736:	ed2d 8b02 	vpush	{d8}
 801373a:	b08a      	sub	sp, #40	; 0x28
 801373c:	eeb0 8a40 	vmov.f32	s16, s0
 8013740:	f001 fcc8 	bl	80150d4 <__ieee754_sqrtf>
 8013744:	4b21      	ldr	r3, [pc, #132]	; (80137cc <sqrtf+0x98>)
 8013746:	f993 4000 	ldrsb.w	r4, [r3]
 801374a:	1c63      	adds	r3, r4, #1
 801374c:	d02c      	beq.n	80137a8 <sqrtf+0x74>
 801374e:	eeb4 8a48 	vcmp.f32	s16, s16
 8013752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013756:	d627      	bvs.n	80137a8 <sqrtf+0x74>
 8013758:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801375c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013760:	d522      	bpl.n	80137a8 <sqrtf+0x74>
 8013762:	2301      	movs	r3, #1
 8013764:	9300      	str	r3, [sp, #0]
 8013766:	4b1a      	ldr	r3, [pc, #104]	; (80137d0 <sqrtf+0x9c>)
 8013768:	9301      	str	r3, [sp, #4]
 801376a:	ee18 0a10 	vmov	r0, s16
 801376e:	2300      	movs	r3, #0
 8013770:	9308      	str	r3, [sp, #32]
 8013772:	f7f3 fae1 	bl	8006d38 <__aeabi_f2d>
 8013776:	2200      	movs	r2, #0
 8013778:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801377c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013780:	2300      	movs	r3, #0
 8013782:	b9ac      	cbnz	r4, 80137b0 <sqrtf+0x7c>
 8013784:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013788:	4668      	mov	r0, sp
 801378a:	f002 fd80 	bl	801628e <matherr>
 801378e:	b1b8      	cbz	r0, 80137c0 <sqrtf+0x8c>
 8013790:	9b08      	ldr	r3, [sp, #32]
 8013792:	b11b      	cbz	r3, 801379c <sqrtf+0x68>
 8013794:	f7fb fea6 	bl	800f4e4 <__errno>
 8013798:	9b08      	ldr	r3, [sp, #32]
 801379a:	6003      	str	r3, [r0, #0]
 801379c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80137a0:	f7f3 fdfa 	bl	8007398 <__aeabi_d2f>
 80137a4:	ee00 0a10 	vmov	s0, r0
 80137a8:	b00a      	add	sp, #40	; 0x28
 80137aa:	ecbd 8b02 	vpop	{d8}
 80137ae:	bd10      	pop	{r4, pc}
 80137b0:	4610      	mov	r0, r2
 80137b2:	4619      	mov	r1, r3
 80137b4:	f7f3 fc42 	bl	800703c <__aeabi_ddiv>
 80137b8:	2c02      	cmp	r4, #2
 80137ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80137be:	d1e3      	bne.n	8013788 <sqrtf+0x54>
 80137c0:	f7fb fe90 	bl	800f4e4 <__errno>
 80137c4:	2321      	movs	r3, #33	; 0x21
 80137c6:	6003      	str	r3, [r0, #0]
 80137c8:	e7e2      	b.n	8013790 <sqrtf+0x5c>
 80137ca:	bf00      	nop
 80137cc:	20000ef4 	.word	0x20000ef4
 80137d0:	080a7271 	.word	0x080a7271
 80137d4:	00000000 	.word	0x00000000

080137d8 <__ieee754_rem_pio2>:
 80137d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137dc:	ec57 6b10 	vmov	r6, r7, d0
 80137e0:	4bc3      	ldr	r3, [pc, #780]	; (8013af0 <__ieee754_rem_pio2+0x318>)
 80137e2:	b08d      	sub	sp, #52	; 0x34
 80137e4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80137e8:	4598      	cmp	r8, r3
 80137ea:	4604      	mov	r4, r0
 80137ec:	9704      	str	r7, [sp, #16]
 80137ee:	dc07      	bgt.n	8013800 <__ieee754_rem_pio2+0x28>
 80137f0:	2200      	movs	r2, #0
 80137f2:	2300      	movs	r3, #0
 80137f4:	ed84 0b00 	vstr	d0, [r4]
 80137f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80137fc:	2500      	movs	r5, #0
 80137fe:	e027      	b.n	8013850 <__ieee754_rem_pio2+0x78>
 8013800:	4bbc      	ldr	r3, [pc, #752]	; (8013af4 <__ieee754_rem_pio2+0x31c>)
 8013802:	4598      	cmp	r8, r3
 8013804:	dc75      	bgt.n	80138f2 <__ieee754_rem_pio2+0x11a>
 8013806:	9b04      	ldr	r3, [sp, #16]
 8013808:	4dbb      	ldr	r5, [pc, #748]	; (8013af8 <__ieee754_rem_pio2+0x320>)
 801380a:	2b00      	cmp	r3, #0
 801380c:	ee10 0a10 	vmov	r0, s0
 8013810:	a3a9      	add	r3, pc, #676	; (adr r3, 8013ab8 <__ieee754_rem_pio2+0x2e0>)
 8013812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013816:	4639      	mov	r1, r7
 8013818:	dd36      	ble.n	8013888 <__ieee754_rem_pio2+0xb0>
 801381a:	f7f3 f92d 	bl	8006a78 <__aeabi_dsub>
 801381e:	45a8      	cmp	r8, r5
 8013820:	4606      	mov	r6, r0
 8013822:	460f      	mov	r7, r1
 8013824:	d018      	beq.n	8013858 <__ieee754_rem_pio2+0x80>
 8013826:	a3a6      	add	r3, pc, #664	; (adr r3, 8013ac0 <__ieee754_rem_pio2+0x2e8>)
 8013828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801382c:	f7f3 f924 	bl	8006a78 <__aeabi_dsub>
 8013830:	4602      	mov	r2, r0
 8013832:	460b      	mov	r3, r1
 8013834:	e9c4 2300 	strd	r2, r3, [r4]
 8013838:	4630      	mov	r0, r6
 801383a:	4639      	mov	r1, r7
 801383c:	f7f3 f91c 	bl	8006a78 <__aeabi_dsub>
 8013840:	a39f      	add	r3, pc, #636	; (adr r3, 8013ac0 <__ieee754_rem_pio2+0x2e8>)
 8013842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013846:	f7f3 f917 	bl	8006a78 <__aeabi_dsub>
 801384a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801384e:	2501      	movs	r5, #1
 8013850:	4628      	mov	r0, r5
 8013852:	b00d      	add	sp, #52	; 0x34
 8013854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013858:	a39b      	add	r3, pc, #620	; (adr r3, 8013ac8 <__ieee754_rem_pio2+0x2f0>)
 801385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801385e:	f7f3 f90b 	bl	8006a78 <__aeabi_dsub>
 8013862:	a39b      	add	r3, pc, #620	; (adr r3, 8013ad0 <__ieee754_rem_pio2+0x2f8>)
 8013864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013868:	4606      	mov	r6, r0
 801386a:	460f      	mov	r7, r1
 801386c:	f7f3 f904 	bl	8006a78 <__aeabi_dsub>
 8013870:	4602      	mov	r2, r0
 8013872:	460b      	mov	r3, r1
 8013874:	e9c4 2300 	strd	r2, r3, [r4]
 8013878:	4630      	mov	r0, r6
 801387a:	4639      	mov	r1, r7
 801387c:	f7f3 f8fc 	bl	8006a78 <__aeabi_dsub>
 8013880:	a393      	add	r3, pc, #588	; (adr r3, 8013ad0 <__ieee754_rem_pio2+0x2f8>)
 8013882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013886:	e7de      	b.n	8013846 <__ieee754_rem_pio2+0x6e>
 8013888:	f7f3 f8f8 	bl	8006a7c <__adddf3>
 801388c:	45a8      	cmp	r8, r5
 801388e:	4606      	mov	r6, r0
 8013890:	460f      	mov	r7, r1
 8013892:	d016      	beq.n	80138c2 <__ieee754_rem_pio2+0xea>
 8013894:	a38a      	add	r3, pc, #552	; (adr r3, 8013ac0 <__ieee754_rem_pio2+0x2e8>)
 8013896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801389a:	f7f3 f8ef 	bl	8006a7c <__adddf3>
 801389e:	4602      	mov	r2, r0
 80138a0:	460b      	mov	r3, r1
 80138a2:	e9c4 2300 	strd	r2, r3, [r4]
 80138a6:	4630      	mov	r0, r6
 80138a8:	4639      	mov	r1, r7
 80138aa:	f7f3 f8e5 	bl	8006a78 <__aeabi_dsub>
 80138ae:	a384      	add	r3, pc, #528	; (adr r3, 8013ac0 <__ieee754_rem_pio2+0x2e8>)
 80138b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138b4:	f7f3 f8e2 	bl	8006a7c <__adddf3>
 80138b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80138bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80138c0:	e7c6      	b.n	8013850 <__ieee754_rem_pio2+0x78>
 80138c2:	a381      	add	r3, pc, #516	; (adr r3, 8013ac8 <__ieee754_rem_pio2+0x2f0>)
 80138c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138c8:	f7f3 f8d8 	bl	8006a7c <__adddf3>
 80138cc:	a380      	add	r3, pc, #512	; (adr r3, 8013ad0 <__ieee754_rem_pio2+0x2f8>)
 80138ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138d2:	4606      	mov	r6, r0
 80138d4:	460f      	mov	r7, r1
 80138d6:	f7f3 f8d1 	bl	8006a7c <__adddf3>
 80138da:	4602      	mov	r2, r0
 80138dc:	460b      	mov	r3, r1
 80138de:	e9c4 2300 	strd	r2, r3, [r4]
 80138e2:	4630      	mov	r0, r6
 80138e4:	4639      	mov	r1, r7
 80138e6:	f7f3 f8c7 	bl	8006a78 <__aeabi_dsub>
 80138ea:	a379      	add	r3, pc, #484	; (adr r3, 8013ad0 <__ieee754_rem_pio2+0x2f8>)
 80138ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138f0:	e7e0      	b.n	80138b4 <__ieee754_rem_pio2+0xdc>
 80138f2:	4b82      	ldr	r3, [pc, #520]	; (8013afc <__ieee754_rem_pio2+0x324>)
 80138f4:	4598      	cmp	r8, r3
 80138f6:	f300 80d0 	bgt.w	8013a9a <__ieee754_rem_pio2+0x2c2>
 80138fa:	f002 fcbf 	bl	801627c <fabs>
 80138fe:	ec57 6b10 	vmov	r6, r7, d0
 8013902:	ee10 0a10 	vmov	r0, s0
 8013906:	a374      	add	r3, pc, #464	; (adr r3, 8013ad8 <__ieee754_rem_pio2+0x300>)
 8013908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801390c:	4639      	mov	r1, r7
 801390e:	f7f3 fa6b 	bl	8006de8 <__aeabi_dmul>
 8013912:	2200      	movs	r2, #0
 8013914:	4b7a      	ldr	r3, [pc, #488]	; (8013b00 <__ieee754_rem_pio2+0x328>)
 8013916:	f7f3 f8b1 	bl	8006a7c <__adddf3>
 801391a:	f7f3 fd15 	bl	8007348 <__aeabi_d2iz>
 801391e:	4605      	mov	r5, r0
 8013920:	f7f3 f9f8 	bl	8006d14 <__aeabi_i2d>
 8013924:	a364      	add	r3, pc, #400	; (adr r3, 8013ab8 <__ieee754_rem_pio2+0x2e0>)
 8013926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801392a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801392e:	f7f3 fa5b 	bl	8006de8 <__aeabi_dmul>
 8013932:	4602      	mov	r2, r0
 8013934:	460b      	mov	r3, r1
 8013936:	4630      	mov	r0, r6
 8013938:	4639      	mov	r1, r7
 801393a:	f7f3 f89d 	bl	8006a78 <__aeabi_dsub>
 801393e:	a360      	add	r3, pc, #384	; (adr r3, 8013ac0 <__ieee754_rem_pio2+0x2e8>)
 8013940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013944:	4682      	mov	sl, r0
 8013946:	468b      	mov	fp, r1
 8013948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801394c:	f7f3 fa4c 	bl	8006de8 <__aeabi_dmul>
 8013950:	2d1f      	cmp	r5, #31
 8013952:	4606      	mov	r6, r0
 8013954:	460f      	mov	r7, r1
 8013956:	dc0c      	bgt.n	8013972 <__ieee754_rem_pio2+0x19a>
 8013958:	1e6a      	subs	r2, r5, #1
 801395a:	4b6a      	ldr	r3, [pc, #424]	; (8013b04 <__ieee754_rem_pio2+0x32c>)
 801395c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013960:	4543      	cmp	r3, r8
 8013962:	d006      	beq.n	8013972 <__ieee754_rem_pio2+0x19a>
 8013964:	4632      	mov	r2, r6
 8013966:	463b      	mov	r3, r7
 8013968:	4650      	mov	r0, sl
 801396a:	4659      	mov	r1, fp
 801396c:	f7f3 f884 	bl	8006a78 <__aeabi_dsub>
 8013970:	e00e      	b.n	8013990 <__ieee754_rem_pio2+0x1b8>
 8013972:	4632      	mov	r2, r6
 8013974:	463b      	mov	r3, r7
 8013976:	4650      	mov	r0, sl
 8013978:	4659      	mov	r1, fp
 801397a:	f7f3 f87d 	bl	8006a78 <__aeabi_dsub>
 801397e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013982:	9305      	str	r3, [sp, #20]
 8013984:	9a05      	ldr	r2, [sp, #20]
 8013986:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801398a:	1ad3      	subs	r3, r2, r3
 801398c:	2b10      	cmp	r3, #16
 801398e:	dc02      	bgt.n	8013996 <__ieee754_rem_pio2+0x1be>
 8013990:	e9c4 0100 	strd	r0, r1, [r4]
 8013994:	e039      	b.n	8013a0a <__ieee754_rem_pio2+0x232>
 8013996:	a34c      	add	r3, pc, #304	; (adr r3, 8013ac8 <__ieee754_rem_pio2+0x2f0>)
 8013998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801399c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139a0:	f7f3 fa22 	bl	8006de8 <__aeabi_dmul>
 80139a4:	4606      	mov	r6, r0
 80139a6:	460f      	mov	r7, r1
 80139a8:	4602      	mov	r2, r0
 80139aa:	460b      	mov	r3, r1
 80139ac:	4650      	mov	r0, sl
 80139ae:	4659      	mov	r1, fp
 80139b0:	f7f3 f862 	bl	8006a78 <__aeabi_dsub>
 80139b4:	4602      	mov	r2, r0
 80139b6:	460b      	mov	r3, r1
 80139b8:	4680      	mov	r8, r0
 80139ba:	4689      	mov	r9, r1
 80139bc:	4650      	mov	r0, sl
 80139be:	4659      	mov	r1, fp
 80139c0:	f7f3 f85a 	bl	8006a78 <__aeabi_dsub>
 80139c4:	4632      	mov	r2, r6
 80139c6:	463b      	mov	r3, r7
 80139c8:	f7f3 f856 	bl	8006a78 <__aeabi_dsub>
 80139cc:	a340      	add	r3, pc, #256	; (adr r3, 8013ad0 <__ieee754_rem_pio2+0x2f8>)
 80139ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139d2:	4606      	mov	r6, r0
 80139d4:	460f      	mov	r7, r1
 80139d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139da:	f7f3 fa05 	bl	8006de8 <__aeabi_dmul>
 80139de:	4632      	mov	r2, r6
 80139e0:	463b      	mov	r3, r7
 80139e2:	f7f3 f849 	bl	8006a78 <__aeabi_dsub>
 80139e6:	4602      	mov	r2, r0
 80139e8:	460b      	mov	r3, r1
 80139ea:	4606      	mov	r6, r0
 80139ec:	460f      	mov	r7, r1
 80139ee:	4640      	mov	r0, r8
 80139f0:	4649      	mov	r1, r9
 80139f2:	f7f3 f841 	bl	8006a78 <__aeabi_dsub>
 80139f6:	9a05      	ldr	r2, [sp, #20]
 80139f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80139fc:	1ad3      	subs	r3, r2, r3
 80139fe:	2b31      	cmp	r3, #49	; 0x31
 8013a00:	dc20      	bgt.n	8013a44 <__ieee754_rem_pio2+0x26c>
 8013a02:	e9c4 0100 	strd	r0, r1, [r4]
 8013a06:	46c2      	mov	sl, r8
 8013a08:	46cb      	mov	fp, r9
 8013a0a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013a0e:	4650      	mov	r0, sl
 8013a10:	4642      	mov	r2, r8
 8013a12:	464b      	mov	r3, r9
 8013a14:	4659      	mov	r1, fp
 8013a16:	f7f3 f82f 	bl	8006a78 <__aeabi_dsub>
 8013a1a:	463b      	mov	r3, r7
 8013a1c:	4632      	mov	r2, r6
 8013a1e:	f7f3 f82b 	bl	8006a78 <__aeabi_dsub>
 8013a22:	9b04      	ldr	r3, [sp, #16]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013a2a:	f6bf af11 	bge.w	8013850 <__ieee754_rem_pio2+0x78>
 8013a2e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013a32:	6063      	str	r3, [r4, #4]
 8013a34:	f8c4 8000 	str.w	r8, [r4]
 8013a38:	60a0      	str	r0, [r4, #8]
 8013a3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a3e:	60e3      	str	r3, [r4, #12]
 8013a40:	426d      	negs	r5, r5
 8013a42:	e705      	b.n	8013850 <__ieee754_rem_pio2+0x78>
 8013a44:	a326      	add	r3, pc, #152	; (adr r3, 8013ae0 <__ieee754_rem_pio2+0x308>)
 8013a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a4e:	f7f3 f9cb 	bl	8006de8 <__aeabi_dmul>
 8013a52:	4606      	mov	r6, r0
 8013a54:	460f      	mov	r7, r1
 8013a56:	4602      	mov	r2, r0
 8013a58:	460b      	mov	r3, r1
 8013a5a:	4640      	mov	r0, r8
 8013a5c:	4649      	mov	r1, r9
 8013a5e:	f7f3 f80b 	bl	8006a78 <__aeabi_dsub>
 8013a62:	4602      	mov	r2, r0
 8013a64:	460b      	mov	r3, r1
 8013a66:	4682      	mov	sl, r0
 8013a68:	468b      	mov	fp, r1
 8013a6a:	4640      	mov	r0, r8
 8013a6c:	4649      	mov	r1, r9
 8013a6e:	f7f3 f803 	bl	8006a78 <__aeabi_dsub>
 8013a72:	4632      	mov	r2, r6
 8013a74:	463b      	mov	r3, r7
 8013a76:	f7f2 ffff 	bl	8006a78 <__aeabi_dsub>
 8013a7a:	a31b      	add	r3, pc, #108	; (adr r3, 8013ae8 <__ieee754_rem_pio2+0x310>)
 8013a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a80:	4606      	mov	r6, r0
 8013a82:	460f      	mov	r7, r1
 8013a84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a88:	f7f3 f9ae 	bl	8006de8 <__aeabi_dmul>
 8013a8c:	4632      	mov	r2, r6
 8013a8e:	463b      	mov	r3, r7
 8013a90:	f7f2 fff2 	bl	8006a78 <__aeabi_dsub>
 8013a94:	4606      	mov	r6, r0
 8013a96:	460f      	mov	r7, r1
 8013a98:	e764      	b.n	8013964 <__ieee754_rem_pio2+0x18c>
 8013a9a:	4b1b      	ldr	r3, [pc, #108]	; (8013b08 <__ieee754_rem_pio2+0x330>)
 8013a9c:	4598      	cmp	r8, r3
 8013a9e:	dd35      	ble.n	8013b0c <__ieee754_rem_pio2+0x334>
 8013aa0:	ee10 2a10 	vmov	r2, s0
 8013aa4:	463b      	mov	r3, r7
 8013aa6:	4630      	mov	r0, r6
 8013aa8:	4639      	mov	r1, r7
 8013aaa:	f7f2 ffe5 	bl	8006a78 <__aeabi_dsub>
 8013aae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013ab2:	e9c4 0100 	strd	r0, r1, [r4]
 8013ab6:	e6a1      	b.n	80137fc <__ieee754_rem_pio2+0x24>
 8013ab8:	54400000 	.word	0x54400000
 8013abc:	3ff921fb 	.word	0x3ff921fb
 8013ac0:	1a626331 	.word	0x1a626331
 8013ac4:	3dd0b461 	.word	0x3dd0b461
 8013ac8:	1a600000 	.word	0x1a600000
 8013acc:	3dd0b461 	.word	0x3dd0b461
 8013ad0:	2e037073 	.word	0x2e037073
 8013ad4:	3ba3198a 	.word	0x3ba3198a
 8013ad8:	6dc9c883 	.word	0x6dc9c883
 8013adc:	3fe45f30 	.word	0x3fe45f30
 8013ae0:	2e000000 	.word	0x2e000000
 8013ae4:	3ba3198a 	.word	0x3ba3198a
 8013ae8:	252049c1 	.word	0x252049c1
 8013aec:	397b839a 	.word	0x397b839a
 8013af0:	3fe921fb 	.word	0x3fe921fb
 8013af4:	4002d97b 	.word	0x4002d97b
 8013af8:	3ff921fb 	.word	0x3ff921fb
 8013afc:	413921fb 	.word	0x413921fb
 8013b00:	3fe00000 	.word	0x3fe00000
 8013b04:	080a7278 	.word	0x080a7278
 8013b08:	7fefffff 	.word	0x7fefffff
 8013b0c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013b10:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8013b14:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013b18:	4630      	mov	r0, r6
 8013b1a:	460f      	mov	r7, r1
 8013b1c:	f7f3 fc14 	bl	8007348 <__aeabi_d2iz>
 8013b20:	f7f3 f8f8 	bl	8006d14 <__aeabi_i2d>
 8013b24:	4602      	mov	r2, r0
 8013b26:	460b      	mov	r3, r1
 8013b28:	4630      	mov	r0, r6
 8013b2a:	4639      	mov	r1, r7
 8013b2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013b30:	f7f2 ffa2 	bl	8006a78 <__aeabi_dsub>
 8013b34:	2200      	movs	r2, #0
 8013b36:	4b1f      	ldr	r3, [pc, #124]	; (8013bb4 <__ieee754_rem_pio2+0x3dc>)
 8013b38:	f7f3 f956 	bl	8006de8 <__aeabi_dmul>
 8013b3c:	460f      	mov	r7, r1
 8013b3e:	4606      	mov	r6, r0
 8013b40:	f7f3 fc02 	bl	8007348 <__aeabi_d2iz>
 8013b44:	f7f3 f8e6 	bl	8006d14 <__aeabi_i2d>
 8013b48:	4602      	mov	r2, r0
 8013b4a:	460b      	mov	r3, r1
 8013b4c:	4630      	mov	r0, r6
 8013b4e:	4639      	mov	r1, r7
 8013b50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013b54:	f7f2 ff90 	bl	8006a78 <__aeabi_dsub>
 8013b58:	2200      	movs	r2, #0
 8013b5a:	4b16      	ldr	r3, [pc, #88]	; (8013bb4 <__ieee754_rem_pio2+0x3dc>)
 8013b5c:	f7f3 f944 	bl	8006de8 <__aeabi_dmul>
 8013b60:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013b64:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8013b68:	f04f 0803 	mov.w	r8, #3
 8013b6c:	2600      	movs	r6, #0
 8013b6e:	2700      	movs	r7, #0
 8013b70:	4632      	mov	r2, r6
 8013b72:	463b      	mov	r3, r7
 8013b74:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013b78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8013b7c:	f7f3 fb9c 	bl	80072b8 <__aeabi_dcmpeq>
 8013b80:	b9b0      	cbnz	r0, 8013bb0 <__ieee754_rem_pio2+0x3d8>
 8013b82:	4b0d      	ldr	r3, [pc, #52]	; (8013bb8 <__ieee754_rem_pio2+0x3e0>)
 8013b84:	9301      	str	r3, [sp, #4]
 8013b86:	2302      	movs	r3, #2
 8013b88:	9300      	str	r3, [sp, #0]
 8013b8a:	462a      	mov	r2, r5
 8013b8c:	4643      	mov	r3, r8
 8013b8e:	4621      	mov	r1, r4
 8013b90:	a806      	add	r0, sp, #24
 8013b92:	f001 fb6d 	bl	8015270 <__kernel_rem_pio2>
 8013b96:	9b04      	ldr	r3, [sp, #16]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	4605      	mov	r5, r0
 8013b9c:	f6bf ae58 	bge.w	8013850 <__ieee754_rem_pio2+0x78>
 8013ba0:	6863      	ldr	r3, [r4, #4]
 8013ba2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013ba6:	6063      	str	r3, [r4, #4]
 8013ba8:	68e3      	ldr	r3, [r4, #12]
 8013baa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013bae:	e746      	b.n	8013a3e <__ieee754_rem_pio2+0x266>
 8013bb0:	46d0      	mov	r8, sl
 8013bb2:	e7dd      	b.n	8013b70 <__ieee754_rem_pio2+0x398>
 8013bb4:	41700000 	.word	0x41700000
 8013bb8:	080a72f8 	.word	0x080a72f8

08013bbc <__ieee754_sqrt>:
 8013bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bc0:	4955      	ldr	r1, [pc, #340]	; (8013d18 <__ieee754_sqrt+0x15c>)
 8013bc2:	ec55 4b10 	vmov	r4, r5, d0
 8013bc6:	43a9      	bics	r1, r5
 8013bc8:	462b      	mov	r3, r5
 8013bca:	462a      	mov	r2, r5
 8013bcc:	d112      	bne.n	8013bf4 <__ieee754_sqrt+0x38>
 8013bce:	ee10 2a10 	vmov	r2, s0
 8013bd2:	ee10 0a10 	vmov	r0, s0
 8013bd6:	4629      	mov	r1, r5
 8013bd8:	f7f3 f906 	bl	8006de8 <__aeabi_dmul>
 8013bdc:	4602      	mov	r2, r0
 8013bde:	460b      	mov	r3, r1
 8013be0:	4620      	mov	r0, r4
 8013be2:	4629      	mov	r1, r5
 8013be4:	f7f2 ff4a 	bl	8006a7c <__adddf3>
 8013be8:	4604      	mov	r4, r0
 8013bea:	460d      	mov	r5, r1
 8013bec:	ec45 4b10 	vmov	d0, r4, r5
 8013bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bf4:	2d00      	cmp	r5, #0
 8013bf6:	ee10 0a10 	vmov	r0, s0
 8013bfa:	4621      	mov	r1, r4
 8013bfc:	dc0f      	bgt.n	8013c1e <__ieee754_sqrt+0x62>
 8013bfe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013c02:	4330      	orrs	r0, r6
 8013c04:	d0f2      	beq.n	8013bec <__ieee754_sqrt+0x30>
 8013c06:	b155      	cbz	r5, 8013c1e <__ieee754_sqrt+0x62>
 8013c08:	ee10 2a10 	vmov	r2, s0
 8013c0c:	4620      	mov	r0, r4
 8013c0e:	4629      	mov	r1, r5
 8013c10:	f7f2 ff32 	bl	8006a78 <__aeabi_dsub>
 8013c14:	4602      	mov	r2, r0
 8013c16:	460b      	mov	r3, r1
 8013c18:	f7f3 fa10 	bl	800703c <__aeabi_ddiv>
 8013c1c:	e7e4      	b.n	8013be8 <__ieee754_sqrt+0x2c>
 8013c1e:	151b      	asrs	r3, r3, #20
 8013c20:	d073      	beq.n	8013d0a <__ieee754_sqrt+0x14e>
 8013c22:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013c26:	07dd      	lsls	r5, r3, #31
 8013c28:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8013c2c:	bf48      	it	mi
 8013c2e:	0fc8      	lsrmi	r0, r1, #31
 8013c30:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013c34:	bf44      	itt	mi
 8013c36:	0049      	lslmi	r1, r1, #1
 8013c38:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8013c3c:	2500      	movs	r5, #0
 8013c3e:	1058      	asrs	r0, r3, #1
 8013c40:	0fcb      	lsrs	r3, r1, #31
 8013c42:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8013c46:	0049      	lsls	r1, r1, #1
 8013c48:	2316      	movs	r3, #22
 8013c4a:	462c      	mov	r4, r5
 8013c4c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8013c50:	19a7      	adds	r7, r4, r6
 8013c52:	4297      	cmp	r7, r2
 8013c54:	bfde      	ittt	le
 8013c56:	19bc      	addle	r4, r7, r6
 8013c58:	1bd2      	suble	r2, r2, r7
 8013c5a:	19ad      	addle	r5, r5, r6
 8013c5c:	0fcf      	lsrs	r7, r1, #31
 8013c5e:	3b01      	subs	r3, #1
 8013c60:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8013c64:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013c68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013c6c:	d1f0      	bne.n	8013c50 <__ieee754_sqrt+0x94>
 8013c6e:	f04f 0c20 	mov.w	ip, #32
 8013c72:	469e      	mov	lr, r3
 8013c74:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013c78:	42a2      	cmp	r2, r4
 8013c7a:	eb06 070e 	add.w	r7, r6, lr
 8013c7e:	dc02      	bgt.n	8013c86 <__ieee754_sqrt+0xca>
 8013c80:	d112      	bne.n	8013ca8 <__ieee754_sqrt+0xec>
 8013c82:	428f      	cmp	r7, r1
 8013c84:	d810      	bhi.n	8013ca8 <__ieee754_sqrt+0xec>
 8013c86:	2f00      	cmp	r7, #0
 8013c88:	eb07 0e06 	add.w	lr, r7, r6
 8013c8c:	da42      	bge.n	8013d14 <__ieee754_sqrt+0x158>
 8013c8e:	f1be 0f00 	cmp.w	lr, #0
 8013c92:	db3f      	blt.n	8013d14 <__ieee754_sqrt+0x158>
 8013c94:	f104 0801 	add.w	r8, r4, #1
 8013c98:	1b12      	subs	r2, r2, r4
 8013c9a:	428f      	cmp	r7, r1
 8013c9c:	bf88      	it	hi
 8013c9e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8013ca2:	1bc9      	subs	r1, r1, r7
 8013ca4:	4433      	add	r3, r6
 8013ca6:	4644      	mov	r4, r8
 8013ca8:	0052      	lsls	r2, r2, #1
 8013caa:	f1bc 0c01 	subs.w	ip, ip, #1
 8013cae:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8013cb2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013cb6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013cba:	d1dd      	bne.n	8013c78 <__ieee754_sqrt+0xbc>
 8013cbc:	430a      	orrs	r2, r1
 8013cbe:	d006      	beq.n	8013cce <__ieee754_sqrt+0x112>
 8013cc0:	1c5c      	adds	r4, r3, #1
 8013cc2:	bf13      	iteet	ne
 8013cc4:	3301      	addne	r3, #1
 8013cc6:	3501      	addeq	r5, #1
 8013cc8:	4663      	moveq	r3, ip
 8013cca:	f023 0301 	bicne.w	r3, r3, #1
 8013cce:	106a      	asrs	r2, r5, #1
 8013cd0:	085b      	lsrs	r3, r3, #1
 8013cd2:	07e9      	lsls	r1, r5, #31
 8013cd4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8013cd8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8013cdc:	bf48      	it	mi
 8013cde:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8013ce2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8013ce6:	461c      	mov	r4, r3
 8013ce8:	e780      	b.n	8013bec <__ieee754_sqrt+0x30>
 8013cea:	0aca      	lsrs	r2, r1, #11
 8013cec:	3815      	subs	r0, #21
 8013cee:	0549      	lsls	r1, r1, #21
 8013cf0:	2a00      	cmp	r2, #0
 8013cf2:	d0fa      	beq.n	8013cea <__ieee754_sqrt+0x12e>
 8013cf4:	02d6      	lsls	r6, r2, #11
 8013cf6:	d50a      	bpl.n	8013d0e <__ieee754_sqrt+0x152>
 8013cf8:	f1c3 0420 	rsb	r4, r3, #32
 8013cfc:	fa21 f404 	lsr.w	r4, r1, r4
 8013d00:	1e5d      	subs	r5, r3, #1
 8013d02:	4099      	lsls	r1, r3
 8013d04:	4322      	orrs	r2, r4
 8013d06:	1b43      	subs	r3, r0, r5
 8013d08:	e78b      	b.n	8013c22 <__ieee754_sqrt+0x66>
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	e7f0      	b.n	8013cf0 <__ieee754_sqrt+0x134>
 8013d0e:	0052      	lsls	r2, r2, #1
 8013d10:	3301      	adds	r3, #1
 8013d12:	e7ef      	b.n	8013cf4 <__ieee754_sqrt+0x138>
 8013d14:	46a0      	mov	r8, r4
 8013d16:	e7bf      	b.n	8013c98 <__ieee754_sqrt+0xdc>
 8013d18:	7ff00000 	.word	0x7ff00000

08013d1c <__ieee754_acosf>:
 8013d1c:	b508      	push	{r3, lr}
 8013d1e:	ee10 3a10 	vmov	r3, s0
 8013d22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013d26:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8013d2a:	ed2d 8b0c 	vpush	{d8-d13}
 8013d2e:	d10a      	bne.n	8013d46 <__ieee754_acosf+0x2a>
 8013d30:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8013ed0 <__ieee754_acosf+0x1b4>
 8013d34:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8013ed4 <__ieee754_acosf+0x1b8>
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	bfd8      	it	le
 8013d3c:	eeb0 0a48 	vmovle.f32	s0, s16
 8013d40:	ecbd 8b0c 	vpop	{d8-d13}
 8013d44:	bd08      	pop	{r3, pc}
 8013d46:	dd04      	ble.n	8013d52 <__ieee754_acosf+0x36>
 8013d48:	ee30 8a40 	vsub.f32	s16, s0, s0
 8013d4c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8013d50:	e7f6      	b.n	8013d40 <__ieee754_acosf+0x24>
 8013d52:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8013d56:	da3e      	bge.n	8013dd6 <__ieee754_acosf+0xba>
 8013d58:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8013d5c:	f340 80b5 	ble.w	8013eca <__ieee754_acosf+0x1ae>
 8013d60:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013d64:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8013ed8 <__ieee754_acosf+0x1bc>
 8013d68:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8013edc <__ieee754_acosf+0x1c0>
 8013d6c:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8013ee0 <__ieee754_acosf+0x1c4>
 8013d70:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 8013ee4 <__ieee754_acosf+0x1c8>
 8013d74:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013d78:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8013ee8 <__ieee754_acosf+0x1cc>
 8013d7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013d80:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8013eec <__ieee754_acosf+0x1d0>
 8013d84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013d88:	eddf 6a59 	vldr	s13, [pc, #356]	; 8013ef0 <__ieee754_acosf+0x1d4>
 8013d8c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013d90:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8013ef4 <__ieee754_acosf+0x1d8>
 8013d94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013d98:	eddf 6a57 	vldr	s13, [pc, #348]	; 8013ef8 <__ieee754_acosf+0x1dc>
 8013d9c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8013da0:	eddf 6a56 	vldr	s13, [pc, #344]	; 8013efc <__ieee754_acosf+0x1e0>
 8013da4:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013da8:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8013f00 <__ieee754_acosf+0x1e4>
 8013dac:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013db0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013db4:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013db8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013dbc:	eef0 7a66 	vmov.f32	s15, s13
 8013dc0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013dc4:	eea0 8a66 	vfms.f32	s16, s0, s13
 8013dc8:	ee30 8a48 	vsub.f32	s16, s0, s16
 8013dcc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8013f04 <__ieee754_acosf+0x1e8>
 8013dd0:	ee30 0a48 	vsub.f32	s0, s0, s16
 8013dd4:	e7b4      	b.n	8013d40 <__ieee754_acosf+0x24>
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	eddf da3f 	vldr	s27, [pc, #252]	; 8013ed8 <__ieee754_acosf+0x1bc>
 8013ddc:	eddf ca3f 	vldr	s25, [pc, #252]	; 8013edc <__ieee754_acosf+0x1c0>
 8013de0:	ed9f ca41 	vldr	s24, [pc, #260]	; 8013ee8 <__ieee754_acosf+0x1cc>
 8013de4:	eddf ba41 	vldr	s23, [pc, #260]	; 8013eec <__ieee754_acosf+0x1d0>
 8013de8:	ed9f ba41 	vldr	s22, [pc, #260]	; 8013ef0 <__ieee754_acosf+0x1d4>
 8013dec:	eddf 8a41 	vldr	s17, [pc, #260]	; 8013ef4 <__ieee754_acosf+0x1d8>
 8013df0:	ed9f da41 	vldr	s26, [pc, #260]	; 8013ef8 <__ieee754_acosf+0x1dc>
 8013df4:	eddf aa3a 	vldr	s21, [pc, #232]	; 8013ee0 <__ieee754_acosf+0x1c4>
 8013df8:	ed9f aa40 	vldr	s20, [pc, #256]	; 8013efc <__ieee754_acosf+0x1e0>
 8013dfc:	eddf 9a40 	vldr	s19, [pc, #256]	; 8013f00 <__ieee754_acosf+0x1e4>
 8013e00:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8013e04:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013e08:	da28      	bge.n	8013e5c <__ieee754_acosf+0x140>
 8013e0a:	ee30 0a09 	vadd.f32	s0, s0, s18
 8013e0e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013e12:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8013e16:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8013e1a:	eeac ca80 	vfma.f32	s24, s25, s0
 8013e1e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8013e22:	eeec ba00 	vfma.f32	s23, s24, s0
 8013e26:	eeea 9a00 	vfma.f32	s19, s20, s0
 8013e2a:	eeab ba80 	vfma.f32	s22, s23, s0
 8013e2e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8013e32:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8013e36:	ee68 8a80 	vmul.f32	s17, s17, s0
 8013e3a:	f001 f94b 	bl	80150d4 <__ieee754_sqrtf>
 8013e3e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8013e42:	eddf 7a31 	vldr	s15, [pc, #196]	; 8013f08 <__ieee754_acosf+0x1ec>
 8013e46:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013e4a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013e4e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013e52:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8013f0c <__ieee754_acosf+0x1f0>
 8013e56:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013e5a:	e771      	b.n	8013d40 <__ieee754_acosf+0x24>
 8013e5c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8013e60:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013e64:	eeb0 0a48 	vmov.f32	s0, s16
 8013e68:	f001 f934 	bl	80150d4 <__ieee754_sqrtf>
 8013e6c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8013e70:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8013e74:	eeac ca88 	vfma.f32	s24, s25, s16
 8013e78:	eeaa aa88 	vfma.f32	s20, s21, s16
 8013e7c:	eeec ba08 	vfma.f32	s23, s24, s16
 8013e80:	ee10 3a10 	vmov	r3, s0
 8013e84:	eeab ba88 	vfma.f32	s22, s23, s16
 8013e88:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013e8c:	f023 030f 	bic.w	r3, r3, #15
 8013e90:	eeea 9a08 	vfma.f32	s19, s20, s16
 8013e94:	ee07 3a90 	vmov	s15, r3
 8013e98:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8013e9c:	eeb0 6a48 	vmov.f32	s12, s16
 8013ea0:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8013ea4:	eea9 9a88 	vfma.f32	s18, s19, s16
 8013ea8:	ee70 6a27 	vadd.f32	s13, s0, s15
 8013eac:	ee68 8a88 	vmul.f32	s17, s17, s16
 8013eb0:	eeb0 7a40 	vmov.f32	s14, s0
 8013eb4:	ee86 0a26 	vdiv.f32	s0, s12, s13
 8013eb8:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8013ebc:	eea7 0a26 	vfma.f32	s0, s14, s13
 8013ec0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013ec4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013ec8:	e73a      	b.n	8013d40 <__ieee754_acosf+0x24>
 8013eca:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8013f10 <__ieee754_acosf+0x1f4>
 8013ece:	e737      	b.n	8013d40 <__ieee754_acosf+0x24>
 8013ed0:	00000000 	.word	0x00000000
 8013ed4:	40490fdb 	.word	0x40490fdb
 8013ed8:	3811ef08 	.word	0x3811ef08
 8013edc:	3a4f7f04 	.word	0x3a4f7f04
 8013ee0:	bf303361 	.word	0xbf303361
 8013ee4:	33a22168 	.word	0x33a22168
 8013ee8:	bd241146 	.word	0xbd241146
 8013eec:	3e4e0aa8 	.word	0x3e4e0aa8
 8013ef0:	bea6b090 	.word	0xbea6b090
 8013ef4:	3e2aaaab 	.word	0x3e2aaaab
 8013ef8:	3d9dc62e 	.word	0x3d9dc62e
 8013efc:	4001572d 	.word	0x4001572d
 8013f00:	c019d139 	.word	0xc019d139
 8013f04:	3fc90fda 	.word	0x3fc90fda
 8013f08:	b3a22168 	.word	0xb3a22168
 8013f0c:	40490fda 	.word	0x40490fda
 8013f10:	3fc90fdb 	.word	0x3fc90fdb

08013f14 <__ieee754_acoshf>:
 8013f14:	b508      	push	{r3, lr}
 8013f16:	ee10 3a10 	vmov	r3, s0
 8013f1a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013f1e:	ed2d 8b04 	vpush	{d8-d9}
 8013f22:	eeb0 8a40 	vmov.f32	s16, s0
 8013f26:	da06      	bge.n	8013f36 <__ieee754_acoshf+0x22>
 8013f28:	ee30 8a40 	vsub.f32	s16, s0, s0
 8013f2c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8013f30:	ecbd 8b04 	vpop	{d8-d9}
 8013f34:	bd08      	pop	{r3, pc}
 8013f36:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 8013f3a:	db0c      	blt.n	8013f56 <__ieee754_acoshf+0x42>
 8013f3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013f40:	db02      	blt.n	8013f48 <__ieee754_acoshf+0x34>
 8013f42:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013f46:	e7f3      	b.n	8013f30 <__ieee754_acoshf+0x1c>
 8013f48:	f000 fb26 	bl	8014598 <__ieee754_logf>
 8013f4c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8013fb4 <__ieee754_acoshf+0xa0>
 8013f50:	ee30 0a08 	vadd.f32	s0, s0, s16
 8013f54:	e7ec      	b.n	8013f30 <__ieee754_acoshf+0x1c>
 8013f56:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013f5a:	d028      	beq.n	8013fae <__ieee754_acoshf+0x9a>
 8013f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013f60:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8013f64:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 8013f68:	dd11      	ble.n	8013f8e <__ieee754_acoshf+0x7a>
 8013f6a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013f6e:	eea8 0a08 	vfma.f32	s0, s16, s16
 8013f72:	f001 f8af 	bl	80150d4 <__ieee754_sqrtf>
 8013f76:	ee70 7a08 	vadd.f32	s15, s0, s16
 8013f7a:	ee89 0a27 	vdiv.f32	s0, s18, s15
 8013f7e:	ee98 0a28 	vfnms.f32	s0, s16, s17
 8013f82:	ecbd 8b04 	vpop	{d8-d9}
 8013f86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013f8a:	f000 bb05 	b.w	8014598 <__ieee754_logf>
 8013f8e:	ee30 8a49 	vsub.f32	s16, s0, s18
 8013f92:	ee28 0a08 	vmul.f32	s0, s16, s16
 8013f96:	eea8 0a28 	vfma.f32	s0, s16, s17
 8013f9a:	f001 f89b 	bl	80150d4 <__ieee754_sqrtf>
 8013f9e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8013fa2:	ecbd 8b04 	vpop	{d8-d9}
 8013fa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013faa:	f7fe bc1f 	b.w	80127ec <log1pf>
 8013fae:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8013fb8 <__ieee754_acoshf+0xa4>
 8013fb2:	e7bd      	b.n	8013f30 <__ieee754_acoshf+0x1c>
 8013fb4:	3f317218 	.word	0x3f317218
 8013fb8:	00000000 	.word	0x00000000

08013fbc <__ieee754_asinf>:
 8013fbc:	b538      	push	{r3, r4, r5, lr}
 8013fbe:	ee10 5a10 	vmov	r5, s0
 8013fc2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013fc6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8013fca:	ed2d 8b04 	vpush	{d8-d9}
 8013fce:	d10c      	bne.n	8013fea <__ieee754_asinf+0x2e>
 8013fd0:	eddf 7a5e 	vldr	s15, [pc, #376]	; 801414c <__ieee754_asinf+0x190>
 8013fd4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8014150 <__ieee754_asinf+0x194>
 8013fd8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013fdc:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8013fe4:	ecbd 8b04 	vpop	{d8-d9}
 8013fe8:	bd38      	pop	{r3, r4, r5, pc}
 8013fea:	dd04      	ble.n	8013ff6 <__ieee754_asinf+0x3a>
 8013fec:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013ff0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013ff4:	e7f6      	b.n	8013fe4 <__ieee754_asinf+0x28>
 8013ff6:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8013ffa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013ffe:	da0b      	bge.n	8014018 <__ieee754_asinf+0x5c>
 8014000:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8014004:	da52      	bge.n	80140ac <__ieee754_asinf+0xf0>
 8014006:	eddf 7a53 	vldr	s15, [pc, #332]	; 8014154 <__ieee754_asinf+0x198>
 801400a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801400e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014016:	dce5      	bgt.n	8013fe4 <__ieee754_asinf+0x28>
 8014018:	f7fe fb9e 	bl	8012758 <fabsf>
 801401c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8014020:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8014024:	ee20 8a08 	vmul.f32	s16, s0, s16
 8014028:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8014158 <__ieee754_asinf+0x19c>
 801402c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801415c <__ieee754_asinf+0x1a0>
 8014030:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8014160 <__ieee754_asinf+0x1a4>
 8014034:	eea8 7a27 	vfma.f32	s14, s16, s15
 8014038:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8014164 <__ieee754_asinf+0x1a8>
 801403c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014040:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014168 <__ieee754_asinf+0x1ac>
 8014044:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014048:	eddf 7a48 	vldr	s15, [pc, #288]	; 801416c <__ieee754_asinf+0x1b0>
 801404c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014050:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8014170 <__ieee754_asinf+0x1b4>
 8014054:	eea7 9a88 	vfma.f32	s18, s15, s16
 8014058:	eddf 7a46 	vldr	s15, [pc, #280]	; 8014174 <__ieee754_asinf+0x1b8>
 801405c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8014060:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8014178 <__ieee754_asinf+0x1bc>
 8014064:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014068:	eddf 7a44 	vldr	s15, [pc, #272]	; 801417c <__ieee754_asinf+0x1c0>
 801406c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014070:	eeb0 0a48 	vmov.f32	s0, s16
 8014074:	eee7 8a88 	vfma.f32	s17, s15, s16
 8014078:	f001 f82c 	bl	80150d4 <__ieee754_sqrtf>
 801407c:	4b40      	ldr	r3, [pc, #256]	; (8014180 <__ieee754_asinf+0x1c4>)
 801407e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8014082:	429c      	cmp	r4, r3
 8014084:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8014088:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801408c:	dd3d      	ble.n	801410a <__ieee754_asinf+0x14e>
 801408e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8014092:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8014184 <__ieee754_asinf+0x1c8>
 8014096:	eee0 7a07 	vfma.f32	s15, s0, s14
 801409a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8014150 <__ieee754_asinf+0x194>
 801409e:	ee30 0a67 	vsub.f32	s0, s0, s15
 80140a2:	2d00      	cmp	r5, #0
 80140a4:	bfd8      	it	le
 80140a6:	eeb1 0a40 	vnegle.f32	s0, s0
 80140aa:	e79b      	b.n	8013fe4 <__ieee754_asinf+0x28>
 80140ac:	ee60 7a00 	vmul.f32	s15, s0, s0
 80140b0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8014158 <__ieee754_asinf+0x19c>
 80140b4:	ed9f 7a29 	vldr	s14, [pc, #164]	; 801415c <__ieee754_asinf+0x1a0>
 80140b8:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8014170 <__ieee754_asinf+0x1b4>
 80140bc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80140c0:	eddf 6a28 	vldr	s13, [pc, #160]	; 8014164 <__ieee754_asinf+0x1a8>
 80140c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80140c8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8014168 <__ieee754_asinf+0x1ac>
 80140cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80140d0:	eddf 6a26 	vldr	s13, [pc, #152]	; 801416c <__ieee754_asinf+0x1b0>
 80140d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80140d8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8014160 <__ieee754_asinf+0x1a4>
 80140dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80140e0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8014174 <__ieee754_asinf+0x1b8>
 80140e4:	eee7 6a86 	vfma.f32	s13, s15, s12
 80140e8:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8014178 <__ieee754_asinf+0x1bc>
 80140ec:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80140f0:	eddf 6a22 	vldr	s13, [pc, #136]	; 801417c <__ieee754_asinf+0x1c0>
 80140f4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80140f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80140fc:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8014100:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8014104:	eea0 0a27 	vfma.f32	s0, s0, s15
 8014108:	e76c      	b.n	8013fe4 <__ieee754_asinf+0x28>
 801410a:	ee10 3a10 	vmov	r3, s0
 801410e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014112:	f023 030f 	bic.w	r3, r3, #15
 8014116:	ee07 3a90 	vmov	s15, r3
 801411a:	eef1 6a67 	vneg.f32	s13, s15
 801411e:	eea6 8aa7 	vfma.f32	s16, s13, s15
 8014122:	ee70 5a00 	vadd.f32	s11, s0, s0
 8014126:	ee37 0a80 	vadd.f32	s0, s15, s0
 801412a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801414c <__ieee754_asinf+0x190>
 801412e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8014132:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8014188 <__ieee754_asinf+0x1cc>
 8014136:	eee5 7a47 	vfms.f32	s15, s10, s14
 801413a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801413e:	eeb0 6a40 	vmov.f32	s12, s0
 8014142:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014146:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801414a:	e7a8      	b.n	801409e <__ieee754_asinf+0xe2>
 801414c:	b33bbd2e 	.word	0xb33bbd2e
 8014150:	3fc90fdb 	.word	0x3fc90fdb
 8014154:	7149f2ca 	.word	0x7149f2ca
 8014158:	3811ef08 	.word	0x3811ef08
 801415c:	3a4f7f04 	.word	0x3a4f7f04
 8014160:	3e2aaaab 	.word	0x3e2aaaab
 8014164:	bd241146 	.word	0xbd241146
 8014168:	3e4e0aa8 	.word	0x3e4e0aa8
 801416c:	bea6b090 	.word	0xbea6b090
 8014170:	3d9dc62e 	.word	0x3d9dc62e
 8014174:	bf303361 	.word	0xbf303361
 8014178:	4001572d 	.word	0x4001572d
 801417c:	c019d139 	.word	0xc019d139
 8014180:	3f799999 	.word	0x3f799999
 8014184:	333bbd2e 	.word	0x333bbd2e
 8014188:	3f490fdb 	.word	0x3f490fdb

0801418c <__ieee754_atanhf>:
 801418c:	b510      	push	{r4, lr}
 801418e:	ee10 4a10 	vmov	r4, s0
 8014192:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014196:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801419a:	ed2d 8b02 	vpush	{d8}
 801419e:	dd06      	ble.n	80141ae <__ieee754_atanhf+0x22>
 80141a0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80141a4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80141a8:	ecbd 8b02 	vpop	{d8}
 80141ac:	bd10      	pop	{r4, pc}
 80141ae:	d104      	bne.n	80141ba <__ieee754_atanhf+0x2e>
 80141b0:	eddf 7a17 	vldr	s15, [pc, #92]	; 8014210 <__ieee754_atanhf+0x84>
 80141b4:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80141b8:	e7f6      	b.n	80141a8 <__ieee754_atanhf+0x1c>
 80141ba:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 80141be:	da08      	bge.n	80141d2 <__ieee754_atanhf+0x46>
 80141c0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8014214 <__ieee754_atanhf+0x88>
 80141c4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80141c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80141cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141d0:	dcea      	bgt.n	80141a8 <__ieee754_atanhf+0x1c>
 80141d2:	ee07 3a90 	vmov	s15, r3
 80141d6:	ee37 0aa7 	vadd.f32	s0, s15, s15
 80141da:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80141de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80141e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80141e6:	bfb6      	itet	lt
 80141e8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80141ec:	ee80 0a07 	vdivge.f32	s0, s0, s14
 80141f0:	eec7 6a87 	vdivlt.f32	s13, s15, s14
 80141f4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80141f8:	bfb8      	it	lt
 80141fa:	ee36 0a80 	vaddlt.f32	s0, s13, s0
 80141fe:	f7fe faf5 	bl	80127ec <log1pf>
 8014202:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014206:	2c00      	cmp	r4, #0
 8014208:	bfb8      	it	lt
 801420a:	eeb1 0a40 	vneglt.f32	s0, s0
 801420e:	e7cb      	b.n	80141a8 <__ieee754_atanhf+0x1c>
 8014210:	00000000 	.word	0x00000000
 8014214:	7149f2ca 	.word	0x7149f2ca

08014218 <__ieee754_coshf>:
 8014218:	b510      	push	{r4, lr}
 801421a:	ee10 4a10 	vmov	r4, s0
 801421e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8014222:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014226:	ed2d 8b02 	vpush	{d8}
 801422a:	db04      	blt.n	8014236 <__ieee754_coshf+0x1e>
 801422c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014230:	ecbd 8b02 	vpop	{d8}
 8014234:	bd10      	pop	{r4, pc}
 8014236:	4b25      	ldr	r3, [pc, #148]	; (80142cc <__ieee754_coshf+0xb4>)
 8014238:	429c      	cmp	r4, r3
 801423a:	dc15      	bgt.n	8014268 <__ieee754_coshf+0x50>
 801423c:	f7fe fa8c 	bl	8012758 <fabsf>
 8014240:	f002 f8a8 	bl	8016394 <expm1f>
 8014244:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014248:	f1b4 5f10 	cmp.w	r4, #603979776	; 0x24000000
 801424c:	eef0 7a40 	vmov.f32	s15, s0
 8014250:	ee30 0a07 	vadd.f32	s0, s0, s14
 8014254:	dbec      	blt.n	8014230 <__ieee754_coshf+0x18>
 8014256:	ee30 0a00 	vadd.f32	s0, s0, s0
 801425a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801425e:	eec7 6a80 	vdiv.f32	s13, s15, s0
 8014262:	ee36 0a87 	vadd.f32	s0, s13, s14
 8014266:	e7e3      	b.n	8014230 <__ieee754_coshf+0x18>
 8014268:	4b19      	ldr	r3, [pc, #100]	; (80142d0 <__ieee754_coshf+0xb8>)
 801426a:	429c      	cmp	r4, r3
 801426c:	dc0c      	bgt.n	8014288 <__ieee754_coshf+0x70>
 801426e:	f7fe fa73 	bl	8012758 <fabsf>
 8014272:	f000 f835 	bl	80142e0 <__ieee754_expf>
 8014276:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801427a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801427e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014282:	eeb0 0a67 	vmov.f32	s0, s15
 8014286:	e7d3      	b.n	8014230 <__ieee754_coshf+0x18>
 8014288:	4b12      	ldr	r3, [pc, #72]	; (80142d4 <__ieee754_coshf+0xbc>)
 801428a:	429c      	cmp	r4, r3
 801428c:	dc08      	bgt.n	80142a0 <__ieee754_coshf+0x88>
 801428e:	f7fe fa63 	bl	8012758 <fabsf>
 8014292:	f000 f825 	bl	80142e0 <__ieee754_expf>
 8014296:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801429a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801429e:	e7c7      	b.n	8014230 <__ieee754_coshf+0x18>
 80142a0:	4b0d      	ldr	r3, [pc, #52]	; (80142d8 <__ieee754_coshf+0xc0>)
 80142a2:	429c      	cmp	r4, r3
 80142a4:	dc0c      	bgt.n	80142c0 <__ieee754_coshf+0xa8>
 80142a6:	f7fe fa57 	bl	8012758 <fabsf>
 80142aa:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80142ae:	ee20 0a08 	vmul.f32	s0, s0, s16
 80142b2:	f000 f815 	bl	80142e0 <__ieee754_expf>
 80142b6:	ee20 8a08 	vmul.f32	s16, s0, s16
 80142ba:	ee28 0a00 	vmul.f32	s0, s16, s0
 80142be:	e7b7      	b.n	8014230 <__ieee754_coshf+0x18>
 80142c0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80142dc <__ieee754_coshf+0xc4>
 80142c4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80142c8:	e7b2      	b.n	8014230 <__ieee754_coshf+0x18>
 80142ca:	bf00      	nop
 80142cc:	3eb17217 	.word	0x3eb17217
 80142d0:	41afffff 	.word	0x41afffff
 80142d4:	42b17217 	.word	0x42b17217
 80142d8:	42b2d4fc 	.word	0x42b2d4fc
 80142dc:	7149f2ca 	.word	0x7149f2ca

080142e0 <__ieee754_expf>:
 80142e0:	ee10 2a10 	vmov	r2, s0
 80142e4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80142e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80142ec:	d902      	bls.n	80142f4 <__ieee754_expf+0x14>
 80142ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 80142f2:	4770      	bx	lr
 80142f4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80142f8:	d106      	bne.n	8014308 <__ieee754_expf+0x28>
 80142fa:	eddf 7a51 	vldr	s15, [pc, #324]	; 8014440 <__ieee754_expf+0x160>
 80142fe:	2b00      	cmp	r3, #0
 8014300:	bf18      	it	ne
 8014302:	eeb0 0a67 	vmovne.f32	s0, s15
 8014306:	4770      	bx	lr
 8014308:	484e      	ldr	r0, [pc, #312]	; (8014444 <__ieee754_expf+0x164>)
 801430a:	4282      	cmp	r2, r0
 801430c:	dd04      	ble.n	8014318 <__ieee754_expf+0x38>
 801430e:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8014448 <__ieee754_expf+0x168>
 8014312:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014316:	4770      	bx	lr
 8014318:	2a00      	cmp	r2, #0
 801431a:	da03      	bge.n	8014324 <__ieee754_expf+0x44>
 801431c:	4a4b      	ldr	r2, [pc, #300]	; (801444c <__ieee754_expf+0x16c>)
 801431e:	4291      	cmp	r1, r2
 8014320:	f200 808a 	bhi.w	8014438 <__ieee754_expf+0x158>
 8014324:	4a4a      	ldr	r2, [pc, #296]	; (8014450 <__ieee754_expf+0x170>)
 8014326:	4291      	cmp	r1, r2
 8014328:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801432c:	d954      	bls.n	80143d8 <__ieee754_expf+0xf8>
 801432e:	4a49      	ldr	r2, [pc, #292]	; (8014454 <__ieee754_expf+0x174>)
 8014330:	4291      	cmp	r1, r2
 8014332:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8014336:	d836      	bhi.n	80143a6 <__ieee754_expf+0xc6>
 8014338:	4947      	ldr	r1, [pc, #284]	; (8014458 <__ieee754_expf+0x178>)
 801433a:	4411      	add	r1, r2
 801433c:	ed91 7a00 	vldr	s14, [r1]
 8014340:	4946      	ldr	r1, [pc, #280]	; (801445c <__ieee754_expf+0x17c>)
 8014342:	440a      	add	r2, r1
 8014344:	edd2 7a00 	vldr	s15, [r2]
 8014348:	ee30 7a47 	vsub.f32	s14, s0, s14
 801434c:	f1c3 0201 	rsb	r2, r3, #1
 8014350:	1ad2      	subs	r2, r2, r3
 8014352:	ee37 0a67 	vsub.f32	s0, s14, s15
 8014356:	ee60 6a00 	vmul.f32	s13, s0, s0
 801435a:	eddf 5a41 	vldr	s11, [pc, #260]	; 8014460 <__ieee754_expf+0x180>
 801435e:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8014464 <__ieee754_expf+0x184>
 8014362:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8014366:	eddf 5a40 	vldr	s11, [pc, #256]	; 8014468 <__ieee754_expf+0x188>
 801436a:	eee5 5a26 	vfma.f32	s11, s10, s13
 801436e:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 801446c <__ieee754_expf+0x18c>
 8014372:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8014376:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8014470 <__ieee754_expf+0x190>
 801437a:	eee5 5a26 	vfma.f32	s11, s10, s13
 801437e:	eeb0 5a40 	vmov.f32	s10, s0
 8014382:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8014386:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801438a:	eef0 6a45 	vmov.f32	s13, s10
 801438e:	ee20 5a05 	vmul.f32	s10, s0, s10
 8014392:	bb92      	cbnz	r2, 80143fa <__ieee754_expf+0x11a>
 8014394:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8014398:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801439c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80143a0:	ee36 0a40 	vsub.f32	s0, s12, s0
 80143a4:	4770      	bx	lr
 80143a6:	4b33      	ldr	r3, [pc, #204]	; (8014474 <__ieee754_expf+0x194>)
 80143a8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8014478 <__ieee754_expf+0x198>
 80143ac:	4413      	add	r3, r2
 80143ae:	edd3 7a00 	vldr	s15, [r3]
 80143b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80143b6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801447c <__ieee754_expf+0x19c>
 80143ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80143be:	ee17 2a90 	vmov	r2, s15
 80143c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143c6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80143ca:	eeb0 7a40 	vmov.f32	s14, s0
 80143ce:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8014480 <__ieee754_expf+0x1a0>
 80143d2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80143d6:	e7bc      	b.n	8014352 <__ieee754_expf+0x72>
 80143d8:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 80143dc:	d20b      	bcs.n	80143f6 <__ieee754_expf+0x116>
 80143de:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8014448 <__ieee754_expf+0x168>
 80143e2:	ee70 6a26 	vadd.f32	s13, s0, s13
 80143e6:	eef4 6ac6 	vcmpe.f32	s13, s12
 80143ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ee:	dd02      	ble.n	80143f6 <__ieee754_expf+0x116>
 80143f0:	ee30 0a06 	vadd.f32	s0, s0, s12
 80143f4:	4770      	bx	lr
 80143f6:	2200      	movs	r2, #0
 80143f8:	e7ad      	b.n	8014356 <__ieee754_expf+0x76>
 80143fa:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80143fe:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8014402:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8014406:	bfb8      	it	lt
 8014408:	3264      	addlt	r2, #100	; 0x64
 801440a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801440e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8014412:	ee76 7a40 	vsub.f32	s15, s12, s0
 8014416:	ee17 3a90 	vmov	r3, s15
 801441a:	bfab      	itete	ge
 801441c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8014420:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8014424:	ee00 3a10 	vmovge	s0, r3
 8014428:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8014484 <__ieee754_expf+0x1a4>
 801442c:	bfbc      	itt	lt
 801442e:	ee00 3a10 	vmovlt	s0, r3
 8014432:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8014436:	4770      	bx	lr
 8014438:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014440 <__ieee754_expf+0x160>
 801443c:	4770      	bx	lr
 801443e:	bf00      	nop
 8014440:	00000000 	.word	0x00000000
 8014444:	42b17217 	.word	0x42b17217
 8014448:	7149f2ca 	.word	0x7149f2ca
 801444c:	42cff1b5 	.word	0x42cff1b5
 8014450:	3eb17218 	.word	0x3eb17218
 8014454:	3f851591 	.word	0x3f851591
 8014458:	080a7408 	.word	0x080a7408
 801445c:	080a7410 	.word	0x080a7410
 8014460:	3331bb4c 	.word	0x3331bb4c
 8014464:	b5ddea0e 	.word	0xb5ddea0e
 8014468:	388ab355 	.word	0x388ab355
 801446c:	bb360b61 	.word	0xbb360b61
 8014470:	3e2aaaab 	.word	0x3e2aaaab
 8014474:	080a7400 	.word	0x080a7400
 8014478:	3fb8aa3b 	.word	0x3fb8aa3b
 801447c:	3f317180 	.word	0x3f317180
 8014480:	3717f7d1 	.word	0x3717f7d1
 8014484:	0d800000 	.word	0x0d800000

08014488 <__ieee754_fmodf>:
 8014488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801448a:	ee10 6a90 	vmov	r6, s1
 801448e:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8014492:	ee10 3a10 	vmov	r3, s0
 8014496:	d009      	beq.n	80144ac <__ieee754_fmodf+0x24>
 8014498:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801449c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80144a0:	ee10 7a10 	vmov	r7, s0
 80144a4:	da02      	bge.n	80144ac <__ieee754_fmodf+0x24>
 80144a6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80144aa:	dd0a      	ble.n	80144c2 <__ieee754_fmodf+0x3a>
 80144ac:	ee07 3a90 	vmov	s15, r3
 80144b0:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80144b4:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 80144b8:	ee17 3a90 	vmov	r3, s15
 80144bc:	ee00 3a10 	vmov	s0, r3
 80144c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144c2:	42a9      	cmp	r1, r5
 80144c4:	dbfa      	blt.n	80144bc <__ieee754_fmodf+0x34>
 80144c6:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 80144ca:	d105      	bne.n	80144d8 <__ieee754_fmodf+0x50>
 80144cc:	4a30      	ldr	r2, [pc, #192]	; (8014590 <__ieee754_fmodf+0x108>)
 80144ce:	0fe3      	lsrs	r3, r4, #31
 80144d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	e7f1      	b.n	80144bc <__ieee754_fmodf+0x34>
 80144d8:	4b2e      	ldr	r3, [pc, #184]	; (8014594 <__ieee754_fmodf+0x10c>)
 80144da:	4299      	cmp	r1, r3
 80144dc:	dc3e      	bgt.n	801455c <__ieee754_fmodf+0xd4>
 80144de:	020a      	lsls	r2, r1, #8
 80144e0:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80144e4:	2a00      	cmp	r2, #0
 80144e6:	dc36      	bgt.n	8014556 <__ieee754_fmodf+0xce>
 80144e8:	429d      	cmp	r5, r3
 80144ea:	dc3a      	bgt.n	8014562 <__ieee754_fmodf+0xda>
 80144ec:	022b      	lsls	r3, r5, #8
 80144ee:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 80144f2:	005b      	lsls	r3, r3, #1
 80144f4:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80144f8:	d5fb      	bpl.n	80144f2 <__ieee754_fmodf+0x6a>
 80144fa:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80144fe:	bfbb      	ittet	lt
 8014500:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8014504:	1a1b      	sublt	r3, r3, r0
 8014506:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 801450a:	4099      	lsllt	r1, r3
 801450c:	bfa8      	it	ge
 801450e:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 8014512:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8014516:	bfb5      	itete	lt
 8014518:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 801451c:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8014520:	1a9b      	sublt	r3, r3, r2
 8014522:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8014526:	bfb8      	it	lt
 8014528:	409d      	lsllt	r5, r3
 801452a:	1a80      	subs	r0, r0, r2
 801452c:	1b4b      	subs	r3, r1, r5
 801452e:	b9d8      	cbnz	r0, 8014568 <__ieee754_fmodf+0xe0>
 8014530:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8014534:	bf28      	it	cs
 8014536:	460b      	movcs	r3, r1
 8014538:	2b00      	cmp	r3, #0
 801453a:	d0c7      	beq.n	80144cc <__ieee754_fmodf+0x44>
 801453c:	4915      	ldr	r1, [pc, #84]	; (8014594 <__ieee754_fmodf+0x10c>)
 801453e:	428b      	cmp	r3, r1
 8014540:	dd1a      	ble.n	8014578 <__ieee754_fmodf+0xf0>
 8014542:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8014546:	db1a      	blt.n	801457e <__ieee754_fmodf+0xf6>
 8014548:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 801454c:	4323      	orrs	r3, r4
 801454e:	327f      	adds	r2, #127	; 0x7f
 8014550:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014554:	e7b2      	b.n	80144bc <__ieee754_fmodf+0x34>
 8014556:	3801      	subs	r0, #1
 8014558:	0052      	lsls	r2, r2, #1
 801455a:	e7c3      	b.n	80144e4 <__ieee754_fmodf+0x5c>
 801455c:	15c8      	asrs	r0, r1, #23
 801455e:	387f      	subs	r0, #127	; 0x7f
 8014560:	e7c2      	b.n	80144e8 <__ieee754_fmodf+0x60>
 8014562:	15ea      	asrs	r2, r5, #23
 8014564:	3a7f      	subs	r2, #127	; 0x7f
 8014566:	e7c8      	b.n	80144fa <__ieee754_fmodf+0x72>
 8014568:	2b00      	cmp	r3, #0
 801456a:	da02      	bge.n	8014572 <__ieee754_fmodf+0xea>
 801456c:	0049      	lsls	r1, r1, #1
 801456e:	3801      	subs	r0, #1
 8014570:	e7dc      	b.n	801452c <__ieee754_fmodf+0xa4>
 8014572:	d0ab      	beq.n	80144cc <__ieee754_fmodf+0x44>
 8014574:	0059      	lsls	r1, r3, #1
 8014576:	e7fa      	b.n	801456e <__ieee754_fmodf+0xe6>
 8014578:	005b      	lsls	r3, r3, #1
 801457a:	3a01      	subs	r2, #1
 801457c:	e7df      	b.n	801453e <__ieee754_fmodf+0xb6>
 801457e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014582:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014586:	3282      	adds	r2, #130	; 0x82
 8014588:	4113      	asrs	r3, r2
 801458a:	4323      	orrs	r3, r4
 801458c:	e796      	b.n	80144bc <__ieee754_fmodf+0x34>
 801458e:	bf00      	nop
 8014590:	080a7418 	.word	0x080a7418
 8014594:	007fffff 	.word	0x007fffff

08014598 <__ieee754_logf>:
 8014598:	ee10 3a10 	vmov	r3, s0
 801459c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80145a0:	d106      	bne.n	80145b0 <__ieee754_logf+0x18>
 80145a2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8014738 <__ieee754_logf+0x1a0>
 80145a6:	eddf 7a65 	vldr	s15, [pc, #404]	; 801473c <__ieee754_logf+0x1a4>
 80145aa:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80145ae:	4770      	bx	lr
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	da02      	bge.n	80145ba <__ieee754_logf+0x22>
 80145b4:	ee30 7a40 	vsub.f32	s14, s0, s0
 80145b8:	e7f5      	b.n	80145a6 <__ieee754_logf+0xe>
 80145ba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80145be:	db02      	blt.n	80145c6 <__ieee754_logf+0x2e>
 80145c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80145c4:	4770      	bx	lr
 80145c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80145ca:	bfbf      	itttt	lt
 80145cc:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8014740 <__ieee754_logf+0x1a8>
 80145d0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80145d4:	f06f 0118 	mvnlt.w	r1, #24
 80145d8:	ee17 3a90 	vmovlt	r3, s15
 80145dc:	ea4f 52e3 	mov.w	r2, r3, asr #23
 80145e0:	bfa8      	it	ge
 80145e2:	2100      	movge	r1, #0
 80145e4:	3a7f      	subs	r2, #127	; 0x7f
 80145e6:	440a      	add	r2, r1
 80145e8:	4956      	ldr	r1, [pc, #344]	; (8014744 <__ieee754_logf+0x1ac>)
 80145ea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80145ee:	4419      	add	r1, r3
 80145f0:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 80145f4:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 80145f8:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80145fc:	4319      	orrs	r1, r3
 80145fe:	ee07 1a90 	vmov	s15, r1
 8014602:	f103 010f 	add.w	r1, r3, #15
 8014606:	f3c1 0116 	ubfx	r1, r1, #0, #23
 801460a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801460e:	290f      	cmp	r1, #15
 8014610:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014614:	dc31      	bgt.n	801467a <__ieee754_logf+0xe2>
 8014616:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801461a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801461e:	d10f      	bne.n	8014640 <__ieee754_logf+0xa8>
 8014620:	2a00      	cmp	r2, #0
 8014622:	f000 8085 	beq.w	8014730 <__ieee754_logf+0x198>
 8014626:	ee07 2a90 	vmov	s15, r2
 801462a:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8014748 <__ieee754_logf+0x1b0>
 801462e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 801474c <__ieee754_logf+0x1b4>
 8014632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014636:	ee27 0a80 	vmul.f32	s0, s15, s0
 801463a:	eea7 0a87 	vfma.f32	s0, s15, s14
 801463e:	4770      	bx	lr
 8014640:	eddf 7a43 	vldr	s15, [pc, #268]	; 8014750 <__ieee754_logf+0x1b8>
 8014644:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014648:	eea0 7a67 	vfms.f32	s14, s0, s15
 801464c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014650:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014654:	b912      	cbnz	r2, 801465c <__ieee754_logf+0xc4>
 8014656:	ee30 0a47 	vsub.f32	s0, s0, s14
 801465a:	4770      	bx	lr
 801465c:	ee07 2a90 	vmov	s15, r2
 8014660:	eddf 6a39 	vldr	s13, [pc, #228]	; 8014748 <__ieee754_logf+0x1b0>
 8014664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014668:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801466c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8014670:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801474c <__ieee754_logf+0x1b4>
 8014674:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8014678:	4770      	bx	lr
 801467a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801467e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014682:	eddf 5a34 	vldr	s11, [pc, #208]	; 8014754 <__ieee754_logf+0x1bc>
 8014686:	eddf 4a34 	vldr	s9, [pc, #208]	; 8014758 <__ieee754_logf+0x1c0>
 801468a:	4934      	ldr	r1, [pc, #208]	; (801475c <__ieee754_logf+0x1c4>)
 801468c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8014690:	4419      	add	r1, r3
 8014692:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8014696:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801469a:	430b      	orrs	r3, r1
 801469c:	2b00      	cmp	r3, #0
 801469e:	ee07 2a90 	vmov	s15, r2
 80146a2:	ee26 5a06 	vmul.f32	s10, s12, s12
 80146a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80146aa:	ee25 7a05 	vmul.f32	s14, s10, s10
 80146ae:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8014760 <__ieee754_logf+0x1c8>
 80146b2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80146b6:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8014764 <__ieee754_logf+0x1cc>
 80146ba:	eee7 5a87 	vfma.f32	s11, s15, s14
 80146be:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8014768 <__ieee754_logf+0x1d0>
 80146c2:	eee7 7a24 	vfma.f32	s15, s14, s9
 80146c6:	eddf 4a29 	vldr	s9, [pc, #164]	; 801476c <__ieee754_logf+0x1d4>
 80146ca:	eee7 4a87 	vfma.f32	s9, s15, s14
 80146ce:	eddf 7a28 	vldr	s15, [pc, #160]	; 8014770 <__ieee754_logf+0x1d8>
 80146d2:	eee4 7a87 	vfma.f32	s15, s9, s14
 80146d6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80146da:	eee5 7a87 	vfma.f32	s15, s11, s14
 80146de:	dd1c      	ble.n	801471a <__ieee754_logf+0x182>
 80146e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80146e4:	ee20 7a07 	vmul.f32	s14, s0, s14
 80146e8:	ee27 7a00 	vmul.f32	s14, s14, s0
 80146ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80146f0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80146f4:	b922      	cbnz	r2, 8014700 <__ieee754_logf+0x168>
 80146f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80146fe:	4770      	bx	lr
 8014700:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8014748 <__ieee754_logf+0x1b0>
 8014704:	eee6 7a86 	vfma.f32	s15, s13, s12
 8014708:	ee77 7a67 	vsub.f32	s15, s14, s15
 801470c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014710:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801474c <__ieee754_logf+0x1b4>
 8014714:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8014718:	4770      	bx	lr
 801471a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801471e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014722:	2a00      	cmp	r2, #0
 8014724:	d0e9      	beq.n	80146fa <__ieee754_logf+0x162>
 8014726:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8014748 <__ieee754_logf+0x1b0>
 801472a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801472e:	e7ed      	b.n	801470c <__ieee754_logf+0x174>
 8014730:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801473c <__ieee754_logf+0x1a4>
 8014734:	4770      	bx	lr
 8014736:	bf00      	nop
 8014738:	cc000000 	.word	0xcc000000
 801473c:	00000000 	.word	0x00000000
 8014740:	4c000000 	.word	0x4c000000
 8014744:	004afb20 	.word	0x004afb20
 8014748:	3717f7d1 	.word	0x3717f7d1
 801474c:	3f317180 	.word	0x3f317180
 8014750:	3eaaaaab 	.word	0x3eaaaaab
 8014754:	3e1cd04f 	.word	0x3e1cd04f
 8014758:	3e178897 	.word	0x3e178897
 801475c:	ffcf5c30 	.word	0xffcf5c30
 8014760:	3e638e29 	.word	0x3e638e29
 8014764:	3ecccccd 	.word	0x3ecccccd
 8014768:	3e3a3325 	.word	0x3e3a3325
 801476c:	3e924925 	.word	0x3e924925
 8014770:	3f2aaaab 	.word	0x3f2aaaab

08014774 <__ieee754_log10f>:
 8014774:	b508      	push	{r3, lr}
 8014776:	ee10 2a10 	vmov	r2, s0
 801477a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801477e:	ed2d 8b02 	vpush	{d8}
 8014782:	d108      	bne.n	8014796 <__ieee754_log10f+0x22>
 8014784:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8014808 <__ieee754_log10f+0x94>
 8014788:	eddf 7a20 	vldr	s15, [pc, #128]	; 801480c <__ieee754_log10f+0x98>
 801478c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8014790:	ecbd 8b02 	vpop	{d8}
 8014794:	bd08      	pop	{r3, pc}
 8014796:	2a00      	cmp	r2, #0
 8014798:	da02      	bge.n	80147a0 <__ieee754_log10f+0x2c>
 801479a:	ee30 7a40 	vsub.f32	s14, s0, s0
 801479e:	e7f3      	b.n	8014788 <__ieee754_log10f+0x14>
 80147a0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80147a4:	db02      	blt.n	80147ac <__ieee754_log10f+0x38>
 80147a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80147aa:	e7f1      	b.n	8014790 <__ieee754_log10f+0x1c>
 80147ac:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80147b0:	bfbf      	itttt	lt
 80147b2:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 8014810 <__ieee754_log10f+0x9c>
 80147b6:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80147ba:	f06f 0118 	mvnlt.w	r1, #24
 80147be:	ee17 2a90 	vmovlt	r2, s15
 80147c2:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80147c6:	bfa8      	it	ge
 80147c8:	2100      	movge	r1, #0
 80147ca:	3b7f      	subs	r3, #127	; 0x7f
 80147cc:	440b      	add	r3, r1
 80147ce:	0fd9      	lsrs	r1, r3, #31
 80147d0:	440b      	add	r3, r1
 80147d2:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80147d6:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 80147da:	ee07 3a90 	vmov	s15, r3
 80147de:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 80147e2:	ee00 3a10 	vmov	s0, r3
 80147e6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80147ea:	f7ff fed5 	bl	8014598 <__ieee754_logf>
 80147ee:	eddf 7a09 	vldr	s15, [pc, #36]	; 8014814 <__ieee754_log10f+0xa0>
 80147f2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80147f6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014818 <__ieee754_log10f+0xa4>
 80147fa:	eea8 0a27 	vfma.f32	s0, s16, s15
 80147fe:	eddf 7a07 	vldr	s15, [pc, #28]	; 801481c <__ieee754_log10f+0xa8>
 8014802:	eea8 0a27 	vfma.f32	s0, s16, s15
 8014806:	e7c3      	b.n	8014790 <__ieee754_log10f+0x1c>
 8014808:	cc000000 	.word	0xcc000000
 801480c:	00000000 	.word	0x00000000
 8014810:	4c000000 	.word	0x4c000000
 8014814:	3ede5bd9 	.word	0x3ede5bd9
 8014818:	355427db 	.word	0x355427db
 801481c:	3e9a2080 	.word	0x3e9a2080

08014820 <__ieee754_powf>:
 8014820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014824:	ee10 5a90 	vmov	r5, s1
 8014828:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 801482c:	ed2d 8b02 	vpush	{d8}
 8014830:	eeb0 8a40 	vmov.f32	s16, s0
 8014834:	eef0 8a60 	vmov.f32	s17, s1
 8014838:	f000 8293 	beq.w	8014d62 <__ieee754_powf+0x542>
 801483c:	ee10 8a10 	vmov	r8, s0
 8014840:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8014844:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014848:	dc06      	bgt.n	8014858 <__ieee754_powf+0x38>
 801484a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801484e:	dd0a      	ble.n	8014866 <__ieee754_powf+0x46>
 8014850:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8014854:	f000 8285 	beq.w	8014d62 <__ieee754_powf+0x542>
 8014858:	ecbd 8b02 	vpop	{d8}
 801485c:	48d9      	ldr	r0, [pc, #868]	; (8014bc4 <__ieee754_powf+0x3a4>)
 801485e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014862:	f001 becd 	b.w	8016600 <nanf>
 8014866:	f1b8 0f00 	cmp.w	r8, #0
 801486a:	da1d      	bge.n	80148a8 <__ieee754_powf+0x88>
 801486c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8014870:	da2c      	bge.n	80148cc <__ieee754_powf+0xac>
 8014872:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8014876:	db30      	blt.n	80148da <__ieee754_powf+0xba>
 8014878:	15fb      	asrs	r3, r7, #23
 801487a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801487e:	fa47 f603 	asr.w	r6, r7, r3
 8014882:	fa06 f303 	lsl.w	r3, r6, r3
 8014886:	42bb      	cmp	r3, r7
 8014888:	d127      	bne.n	80148da <__ieee754_powf+0xba>
 801488a:	f006 0601 	and.w	r6, r6, #1
 801488e:	f1c6 0602 	rsb	r6, r6, #2
 8014892:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8014896:	d122      	bne.n	80148de <__ieee754_powf+0xbe>
 8014898:	2d00      	cmp	r5, #0
 801489a:	f280 8268 	bge.w	8014d6e <__ieee754_powf+0x54e>
 801489e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80148a2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80148a6:	e00d      	b.n	80148c4 <__ieee754_powf+0xa4>
 80148a8:	2600      	movs	r6, #0
 80148aa:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80148ae:	d1f0      	bne.n	8014892 <__ieee754_powf+0x72>
 80148b0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80148b4:	f000 8255 	beq.w	8014d62 <__ieee754_powf+0x542>
 80148b8:	dd0a      	ble.n	80148d0 <__ieee754_powf+0xb0>
 80148ba:	2d00      	cmp	r5, #0
 80148bc:	f280 8254 	bge.w	8014d68 <__ieee754_powf+0x548>
 80148c0:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8014bc8 <__ieee754_powf+0x3a8>
 80148c4:	ecbd 8b02 	vpop	{d8}
 80148c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148cc:	2602      	movs	r6, #2
 80148ce:	e7ec      	b.n	80148aa <__ieee754_powf+0x8a>
 80148d0:	2d00      	cmp	r5, #0
 80148d2:	daf5      	bge.n	80148c0 <__ieee754_powf+0xa0>
 80148d4:	eeb1 0a68 	vneg.f32	s0, s17
 80148d8:	e7f4      	b.n	80148c4 <__ieee754_powf+0xa4>
 80148da:	2600      	movs	r6, #0
 80148dc:	e7d9      	b.n	8014892 <__ieee754_powf+0x72>
 80148de:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80148e2:	d102      	bne.n	80148ea <__ieee754_powf+0xca>
 80148e4:	ee28 0a08 	vmul.f32	s0, s16, s16
 80148e8:	e7ec      	b.n	80148c4 <__ieee754_powf+0xa4>
 80148ea:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80148ee:	eeb0 0a48 	vmov.f32	s0, s16
 80148f2:	d108      	bne.n	8014906 <__ieee754_powf+0xe6>
 80148f4:	f1b8 0f00 	cmp.w	r8, #0
 80148f8:	db05      	blt.n	8014906 <__ieee754_powf+0xe6>
 80148fa:	ecbd 8b02 	vpop	{d8}
 80148fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014902:	f000 bbe7 	b.w	80150d4 <__ieee754_sqrtf>
 8014906:	f7fd ff27 	bl	8012758 <fabsf>
 801490a:	b124      	cbz	r4, 8014916 <__ieee754_powf+0xf6>
 801490c:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8014910:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8014914:	d117      	bne.n	8014946 <__ieee754_powf+0x126>
 8014916:	2d00      	cmp	r5, #0
 8014918:	bfbc      	itt	lt
 801491a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801491e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8014922:	f1b8 0f00 	cmp.w	r8, #0
 8014926:	dacd      	bge.n	80148c4 <__ieee754_powf+0xa4>
 8014928:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 801492c:	ea54 0306 	orrs.w	r3, r4, r6
 8014930:	d104      	bne.n	801493c <__ieee754_powf+0x11c>
 8014932:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014936:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801493a:	e7c3      	b.n	80148c4 <__ieee754_powf+0xa4>
 801493c:	2e01      	cmp	r6, #1
 801493e:	d1c1      	bne.n	80148c4 <__ieee754_powf+0xa4>
 8014940:	eeb1 0a40 	vneg.f32	s0, s0
 8014944:	e7be      	b.n	80148c4 <__ieee754_powf+0xa4>
 8014946:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801494a:	3801      	subs	r0, #1
 801494c:	ea56 0300 	orrs.w	r3, r6, r0
 8014950:	d104      	bne.n	801495c <__ieee754_powf+0x13c>
 8014952:	ee38 8a48 	vsub.f32	s16, s16, s16
 8014956:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801495a:	e7b3      	b.n	80148c4 <__ieee754_powf+0xa4>
 801495c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8014960:	dd6d      	ble.n	8014a3e <__ieee754_powf+0x21e>
 8014962:	4b9a      	ldr	r3, [pc, #616]	; (8014bcc <__ieee754_powf+0x3ac>)
 8014964:	429c      	cmp	r4, r3
 8014966:	dc06      	bgt.n	8014976 <__ieee754_powf+0x156>
 8014968:	2d00      	cmp	r5, #0
 801496a:	daa9      	bge.n	80148c0 <__ieee754_powf+0xa0>
 801496c:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8014bd0 <__ieee754_powf+0x3b0>
 8014970:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014974:	e7a6      	b.n	80148c4 <__ieee754_powf+0xa4>
 8014976:	4b97      	ldr	r3, [pc, #604]	; (8014bd4 <__ieee754_powf+0x3b4>)
 8014978:	429c      	cmp	r4, r3
 801497a:	dd02      	ble.n	8014982 <__ieee754_powf+0x162>
 801497c:	2d00      	cmp	r5, #0
 801497e:	dcf5      	bgt.n	801496c <__ieee754_powf+0x14c>
 8014980:	e79e      	b.n	80148c0 <__ieee754_powf+0xa0>
 8014982:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014986:	ee30 0a67 	vsub.f32	s0, s0, s15
 801498a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8014bd8 <__ieee754_powf+0x3b8>
 801498e:	eef1 6a40 	vneg.f32	s13, s0
 8014992:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8014996:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801499a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801499e:	eee7 7a40 	vfms.f32	s15, s14, s0
 80149a2:	ee60 0a00 	vmul.f32	s1, s0, s0
 80149a6:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8014bdc <__ieee754_powf+0x3bc>
 80149aa:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80149ae:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8014be0 <__ieee754_powf+0x3c0>
 80149b2:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 80149b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80149ba:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8014be4 <__ieee754_powf+0x3c4>
 80149be:	eeb0 6a67 	vmov.f32	s12, s15
 80149c2:	eea0 6a07 	vfma.f32	s12, s0, s14
 80149c6:	ee16 3a10 	vmov	r3, s12
 80149ca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80149ce:	f023 030f 	bic.w	r3, r3, #15
 80149d2:	ee00 3a90 	vmov	s1, r3
 80149d6:	eee6 0a87 	vfma.f32	s1, s13, s14
 80149da:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80149de:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80149e2:	f025 050f 	bic.w	r5, r5, #15
 80149e6:	ee07 5a10 	vmov	s14, r5
 80149ea:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80149ee:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80149f2:	ee07 3a90 	vmov	s15, r3
 80149f6:	eee7 0a27 	vfma.f32	s1, s14, s15
 80149fa:	3e01      	subs	r6, #1
 80149fc:	ea56 0200 	orrs.w	r2, r6, r0
 8014a00:	ee07 5a10 	vmov	s14, r5
 8014a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014a08:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8014a0c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8014a10:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8014a14:	ee17 4a10 	vmov	r4, s14
 8014a18:	bf08      	it	eq
 8014a1a:	eeb0 8a40 	vmoveq.f32	s16, s0
 8014a1e:	2c00      	cmp	r4, #0
 8014a20:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014a24:	f340 8184 	ble.w	8014d30 <__ieee754_powf+0x510>
 8014a28:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8014a2c:	f340 80fc 	ble.w	8014c28 <__ieee754_powf+0x408>
 8014a30:	eddf 7a67 	vldr	s15, [pc, #412]	; 8014bd0 <__ieee754_powf+0x3b0>
 8014a34:	ee28 0a27 	vmul.f32	s0, s16, s15
 8014a38:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014a3c:	e742      	b.n	80148c4 <__ieee754_powf+0xa4>
 8014a3e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8014a42:	bfbf      	itttt	lt
 8014a44:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8014be8 <__ieee754_powf+0x3c8>
 8014a48:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8014a4c:	f06f 0217 	mvnlt.w	r2, #23
 8014a50:	ee17 4a90 	vmovlt	r4, s15
 8014a54:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8014a58:	bfa8      	it	ge
 8014a5a:	2200      	movge	r2, #0
 8014a5c:	3b7f      	subs	r3, #127	; 0x7f
 8014a5e:	4413      	add	r3, r2
 8014a60:	4a62      	ldr	r2, [pc, #392]	; (8014bec <__ieee754_powf+0x3cc>)
 8014a62:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8014a66:	4294      	cmp	r4, r2
 8014a68:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8014a6c:	dd06      	ble.n	8014a7c <__ieee754_powf+0x25c>
 8014a6e:	4a60      	ldr	r2, [pc, #384]	; (8014bf0 <__ieee754_powf+0x3d0>)
 8014a70:	4294      	cmp	r4, r2
 8014a72:	f340 80a5 	ble.w	8014bc0 <__ieee754_powf+0x3a0>
 8014a76:	3301      	adds	r3, #1
 8014a78:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8014a7c:	2400      	movs	r4, #0
 8014a7e:	4a5d      	ldr	r2, [pc, #372]	; (8014bf4 <__ieee754_powf+0x3d4>)
 8014a80:	00a7      	lsls	r7, r4, #2
 8014a82:	443a      	add	r2, r7
 8014a84:	ee07 1a90 	vmov	s15, r1
 8014a88:	ed92 7a00 	vldr	s14, [r2]
 8014a8c:	4a5a      	ldr	r2, [pc, #360]	; (8014bf8 <__ieee754_powf+0x3d8>)
 8014a8e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8014a92:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8014a96:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8014a9a:	1049      	asrs	r1, r1, #1
 8014a9c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8014aa0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8014aa4:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8014aa8:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8014aac:	ee06 1a10 	vmov	s12, r1
 8014ab0:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8014ab4:	ee14 ca90 	vmov	ip, s9
 8014ab8:	ea02 0c0c 	and.w	ip, r2, ip
 8014abc:	ee05 ca10 	vmov	s10, ip
 8014ac0:	eeb1 4a45 	vneg.f32	s8, s10
 8014ac4:	eee4 5a06 	vfma.f32	s11, s8, s12
 8014ac8:	ee36 6a47 	vsub.f32	s12, s12, s14
 8014acc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8014bfc <__ieee754_powf+0x3dc>
 8014ad0:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8014ad4:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8014ad8:	eee4 5a06 	vfma.f32	s11, s8, s12
 8014adc:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8014ae0:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8014ae4:	eddf 5a46 	vldr	s11, [pc, #280]	; 8014c00 <__ieee754_powf+0x3e0>
 8014ae8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8014aec:	eddf 5a45 	vldr	s11, [pc, #276]	; 8014c04 <__ieee754_powf+0x3e4>
 8014af0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8014af4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014bd8 <__ieee754_powf+0x3b8>
 8014af8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8014afc:	eddf 5a42 	vldr	s11, [pc, #264]	; 8014c08 <__ieee754_powf+0x3e8>
 8014b00:	eee7 5a27 	vfma.f32	s11, s14, s15
 8014b04:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8014c0c <__ieee754_powf+0x3ec>
 8014b08:	ee75 6a24 	vadd.f32	s13, s10, s9
 8014b0c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8014b10:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014b14:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8014b18:	eef0 7a65 	vmov.f32	s15, s11
 8014b1c:	eee3 6a87 	vfma.f32	s13, s7, s14
 8014b20:	eee5 7a05 	vfma.f32	s15, s10, s10
 8014b24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014b28:	ee17 1a90 	vmov	r1, s15
 8014b2c:	4011      	ands	r1, r2
 8014b2e:	ee07 1a90 	vmov	s15, r1
 8014b32:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8014b36:	eddf 5a36 	vldr	s11, [pc, #216]	; 8014c10 <__ieee754_powf+0x3f0>
 8014b3a:	eea4 7a05 	vfma.f32	s14, s8, s10
 8014b3e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8014b42:	ee27 7a24 	vmul.f32	s14, s14, s9
 8014b46:	eea7 7a86 	vfma.f32	s14, s15, s12
 8014b4a:	eeb0 6a47 	vmov.f32	s12, s14
 8014b4e:	eea5 6a27 	vfma.f32	s12, s10, s15
 8014b52:	ee16 1a10 	vmov	r1, s12
 8014b56:	4011      	ands	r1, r2
 8014b58:	ee06 1a90 	vmov	s13, r1
 8014b5c:	eee4 6a27 	vfma.f32	s13, s8, s15
 8014b60:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8014c14 <__ieee754_powf+0x3f4>
 8014b64:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014b68:	ee06 1a10 	vmov	s12, r1
 8014b6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014b70:	eddf 7a29 	vldr	s15, [pc, #164]	; 8014c18 <__ieee754_powf+0x3f8>
 8014b74:	4929      	ldr	r1, [pc, #164]	; (8014c1c <__ieee754_powf+0x3fc>)
 8014b76:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014b7a:	4439      	add	r1, r7
 8014b7c:	edd1 7a00 	vldr	s15, [r1]
 8014b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014b84:	ee07 3a90 	vmov	s15, r3
 8014b88:	eef0 0a47 	vmov.f32	s1, s14
 8014b8c:	4b24      	ldr	r3, [pc, #144]	; (8014c20 <__ieee754_powf+0x400>)
 8014b8e:	eee6 0a25 	vfma.f32	s1, s12, s11
 8014b92:	443b      	add	r3, r7
 8014b94:	ed93 5a00 	vldr	s10, [r3]
 8014b98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014b9c:	ee70 0a85 	vadd.f32	s1, s1, s10
 8014ba0:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8014ba4:	ee17 3a90 	vmov	r3, s15
 8014ba8:	4013      	ands	r3, r2
 8014baa:	ee07 3a90 	vmov	s15, r3
 8014bae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014bb2:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8014bb6:	eee6 7a65 	vfms.f32	s15, s12, s11
 8014bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014bbe:	e70e      	b.n	80149de <__ieee754_powf+0x1be>
 8014bc0:	2401      	movs	r4, #1
 8014bc2:	e75c      	b.n	8014a7e <__ieee754_powf+0x25e>
 8014bc4:	080a70f9 	.word	0x080a70f9
 8014bc8:	00000000 	.word	0x00000000
 8014bcc:	3f7ffff7 	.word	0x3f7ffff7
 8014bd0:	7149f2ca 	.word	0x7149f2ca
 8014bd4:	3f800007 	.word	0x3f800007
 8014bd8:	3eaaaaab 	.word	0x3eaaaaab
 8014bdc:	36eca570 	.word	0x36eca570
 8014be0:	3fb8aa3b 	.word	0x3fb8aa3b
 8014be4:	3fb8aa00 	.word	0x3fb8aa00
 8014be8:	4b800000 	.word	0x4b800000
 8014bec:	001cc471 	.word	0x001cc471
 8014bf0:	005db3d6 	.word	0x005db3d6
 8014bf4:	080a7420 	.word	0x080a7420
 8014bf8:	fffff000 	.word	0xfffff000
 8014bfc:	3e6c3255 	.word	0x3e6c3255
 8014c00:	3e53f142 	.word	0x3e53f142
 8014c04:	3e8ba305 	.word	0x3e8ba305
 8014c08:	3edb6db7 	.word	0x3edb6db7
 8014c0c:	3f19999a 	.word	0x3f19999a
 8014c10:	3f763800 	.word	0x3f763800
 8014c14:	3f76384f 	.word	0x3f76384f
 8014c18:	369dc3a0 	.word	0x369dc3a0
 8014c1c:	080a7430 	.word	0x080a7430
 8014c20:	080a7428 	.word	0x080a7428
 8014c24:	3338aa3c 	.word	0x3338aa3c
 8014c28:	f040 8092 	bne.w	8014d50 <__ieee754_powf+0x530>
 8014c2c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8014c24 <__ieee754_powf+0x404>
 8014c30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014c34:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8014c38:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c40:	f73f aef6 	bgt.w	8014a30 <__ieee754_powf+0x210>
 8014c44:	15db      	asrs	r3, r3, #23
 8014c46:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8014c4a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014c4e:	4103      	asrs	r3, r0
 8014c50:	4423      	add	r3, r4
 8014c52:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014c56:	4947      	ldr	r1, [pc, #284]	; (8014d74 <__ieee754_powf+0x554>)
 8014c58:	3a7f      	subs	r2, #127	; 0x7f
 8014c5a:	4111      	asrs	r1, r2
 8014c5c:	ea23 0101 	bic.w	r1, r3, r1
 8014c60:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8014c64:	ee07 1a10 	vmov	s14, r1
 8014c68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8014c6c:	f1c2 0217 	rsb	r2, r2, #23
 8014c70:	4110      	asrs	r0, r2
 8014c72:	2c00      	cmp	r4, #0
 8014c74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014c78:	bfb8      	it	lt
 8014c7a:	4240      	neglt	r0, r0
 8014c7c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8014c80:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8014d78 <__ieee754_powf+0x558>
 8014c84:	ee17 3a10 	vmov	r3, s14
 8014c88:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014c8c:	f023 030f 	bic.w	r3, r3, #15
 8014c90:	ee07 3a10 	vmov	s14, r3
 8014c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014c98:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014c9c:	eddf 7a37 	vldr	s15, [pc, #220]	; 8014d7c <__ieee754_powf+0x55c>
 8014ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ca4:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8014ca8:	eddf 6a35 	vldr	s13, [pc, #212]	; 8014d80 <__ieee754_powf+0x560>
 8014cac:	eeb0 0a67 	vmov.f32	s0, s15
 8014cb0:	eea7 0a26 	vfma.f32	s0, s14, s13
 8014cb4:	eeb0 6a40 	vmov.f32	s12, s0
 8014cb8:	eea7 6a66 	vfms.f32	s12, s14, s13
 8014cbc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014cc0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014cc4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8014d84 <__ieee754_powf+0x564>
 8014cc8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8014d88 <__ieee754_powf+0x568>
 8014ccc:	eea7 6a26 	vfma.f32	s12, s14, s13
 8014cd0:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8014d8c <__ieee754_powf+0x56c>
 8014cd4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014cd8:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8014d90 <__ieee754_powf+0x570>
 8014cdc:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014ce0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8014d94 <__ieee754_powf+0x574>
 8014ce4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014ce8:	eeb0 6a40 	vmov.f32	s12, s0
 8014cec:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8014cf0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014cf4:	eeb0 7a46 	vmov.f32	s14, s12
 8014cf8:	ee77 6a66 	vsub.f32	s13, s14, s13
 8014cfc:	ee20 6a06 	vmul.f32	s12, s0, s12
 8014d00:	eee0 7a27 	vfma.f32	s15, s0, s15
 8014d04:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8014d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d0c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014d10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014d14:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014d18:	ee10 3a10 	vmov	r3, s0
 8014d1c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8014d20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014d24:	da1a      	bge.n	8014d5c <__ieee754_powf+0x53c>
 8014d26:	f001 fccb 	bl	80166c0 <scalbnf>
 8014d2a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014d2e:	e5c9      	b.n	80148c4 <__ieee754_powf+0xa4>
 8014d30:	4a19      	ldr	r2, [pc, #100]	; (8014d98 <__ieee754_powf+0x578>)
 8014d32:	4293      	cmp	r3, r2
 8014d34:	dd02      	ble.n	8014d3c <__ieee754_powf+0x51c>
 8014d36:	eddf 7a19 	vldr	s15, [pc, #100]	; 8014d9c <__ieee754_powf+0x57c>
 8014d3a:	e67b      	b.n	8014a34 <__ieee754_powf+0x214>
 8014d3c:	d108      	bne.n	8014d50 <__ieee754_powf+0x530>
 8014d3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014d42:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8014d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d4a:	f6ff af7b 	blt.w	8014c44 <__ieee754_powf+0x424>
 8014d4e:	e7f2      	b.n	8014d36 <__ieee754_powf+0x516>
 8014d50:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8014d54:	f73f af76 	bgt.w	8014c44 <__ieee754_powf+0x424>
 8014d58:	2000      	movs	r0, #0
 8014d5a:	e78f      	b.n	8014c7c <__ieee754_powf+0x45c>
 8014d5c:	ee00 3a10 	vmov	s0, r3
 8014d60:	e7e3      	b.n	8014d2a <__ieee754_powf+0x50a>
 8014d62:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014d66:	e5ad      	b.n	80148c4 <__ieee754_powf+0xa4>
 8014d68:	eeb0 0a68 	vmov.f32	s0, s17
 8014d6c:	e5aa      	b.n	80148c4 <__ieee754_powf+0xa4>
 8014d6e:	eeb0 0a48 	vmov.f32	s0, s16
 8014d72:	e5a7      	b.n	80148c4 <__ieee754_powf+0xa4>
 8014d74:	007fffff 	.word	0x007fffff
 8014d78:	3f317218 	.word	0x3f317218
 8014d7c:	35bfbe8c 	.word	0x35bfbe8c
 8014d80:	3f317200 	.word	0x3f317200
 8014d84:	3331bb4c 	.word	0x3331bb4c
 8014d88:	b5ddea0e 	.word	0xb5ddea0e
 8014d8c:	388ab355 	.word	0x388ab355
 8014d90:	bb360b61 	.word	0xbb360b61
 8014d94:	3e2aaaab 	.word	0x3e2aaaab
 8014d98:	43160000 	.word	0x43160000
 8014d9c:	0da24260 	.word	0x0da24260

08014da0 <__ieee754_rem_pio2f>:
 8014da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014da2:	ee10 6a10 	vmov	r6, s0
 8014da6:	4b86      	ldr	r3, [pc, #536]	; (8014fc0 <__ieee754_rem_pio2f+0x220>)
 8014da8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8014dac:	429c      	cmp	r4, r3
 8014dae:	b087      	sub	sp, #28
 8014db0:	4605      	mov	r5, r0
 8014db2:	dc05      	bgt.n	8014dc0 <__ieee754_rem_pio2f+0x20>
 8014db4:	2300      	movs	r3, #0
 8014db6:	ed85 0a00 	vstr	s0, [r5]
 8014dba:	6043      	str	r3, [r0, #4]
 8014dbc:	2000      	movs	r0, #0
 8014dbe:	e020      	b.n	8014e02 <__ieee754_rem_pio2f+0x62>
 8014dc0:	4b80      	ldr	r3, [pc, #512]	; (8014fc4 <__ieee754_rem_pio2f+0x224>)
 8014dc2:	429c      	cmp	r4, r3
 8014dc4:	dc38      	bgt.n	8014e38 <__ieee754_rem_pio2f+0x98>
 8014dc6:	2e00      	cmp	r6, #0
 8014dc8:	f024 040f 	bic.w	r4, r4, #15
 8014dcc:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8014fc8 <__ieee754_rem_pio2f+0x228>
 8014dd0:	4b7e      	ldr	r3, [pc, #504]	; (8014fcc <__ieee754_rem_pio2f+0x22c>)
 8014dd2:	dd18      	ble.n	8014e06 <__ieee754_rem_pio2f+0x66>
 8014dd4:	429c      	cmp	r4, r3
 8014dd6:	ee70 7a47 	vsub.f32	s15, s0, s14
 8014dda:	bf09      	itett	eq
 8014ddc:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8014fd0 <__ieee754_rem_pio2f+0x230>
 8014de0:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8014fd4 <__ieee754_rem_pio2f+0x234>
 8014de4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8014de8:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8014fd8 <__ieee754_rem_pio2f+0x238>
 8014dec:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8014df0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014df4:	edc0 6a00 	vstr	s13, [r0]
 8014df8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014dfc:	edc0 7a01 	vstr	s15, [r0, #4]
 8014e00:	2001      	movs	r0, #1
 8014e02:	b007      	add	sp, #28
 8014e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e06:	429c      	cmp	r4, r3
 8014e08:	ee70 7a07 	vadd.f32	s15, s0, s14
 8014e0c:	bf09      	itett	eq
 8014e0e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8014fd0 <__ieee754_rem_pio2f+0x230>
 8014e12:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8014fd4 <__ieee754_rem_pio2f+0x234>
 8014e16:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8014e1a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8014fd8 <__ieee754_rem_pio2f+0x238>
 8014e1e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8014e22:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014e26:	edc0 6a00 	vstr	s13, [r0]
 8014e2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014e2e:	edc0 7a01 	vstr	s15, [r0, #4]
 8014e32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e36:	e7e4      	b.n	8014e02 <__ieee754_rem_pio2f+0x62>
 8014e38:	4b68      	ldr	r3, [pc, #416]	; (8014fdc <__ieee754_rem_pio2f+0x23c>)
 8014e3a:	429c      	cmp	r4, r3
 8014e3c:	dc71      	bgt.n	8014f22 <__ieee754_rem_pio2f+0x182>
 8014e3e:	f7fd fc8b 	bl	8012758 <fabsf>
 8014e42:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8014fe0 <__ieee754_rem_pio2f+0x240>
 8014e46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014e4a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014e52:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8014e56:	ee17 0a90 	vmov	r0, s15
 8014e5a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8014fc8 <__ieee754_rem_pio2f+0x228>
 8014e5e:	eeb1 7a46 	vneg.f32	s14, s12
 8014e62:	eea7 0a27 	vfma.f32	s0, s14, s15
 8014e66:	281f      	cmp	r0, #31
 8014e68:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8014fd4 <__ieee754_rem_pio2f+0x234>
 8014e6c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014e70:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014e74:	ee16 3a90 	vmov	r3, s13
 8014e78:	dc1c      	bgt.n	8014eb4 <__ieee754_rem_pio2f+0x114>
 8014e7a:	1e47      	subs	r7, r0, #1
 8014e7c:	4959      	ldr	r1, [pc, #356]	; (8014fe4 <__ieee754_rem_pio2f+0x244>)
 8014e7e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8014e82:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8014e86:	428a      	cmp	r2, r1
 8014e88:	d014      	beq.n	8014eb4 <__ieee754_rem_pio2f+0x114>
 8014e8a:	602b      	str	r3, [r5, #0]
 8014e8c:	ed95 7a00 	vldr	s14, [r5]
 8014e90:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014e94:	2e00      	cmp	r6, #0
 8014e96:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014e9a:	ed85 0a01 	vstr	s0, [r5, #4]
 8014e9e:	dab0      	bge.n	8014e02 <__ieee754_rem_pio2f+0x62>
 8014ea0:	eeb1 7a47 	vneg.f32	s14, s14
 8014ea4:	eeb1 0a40 	vneg.f32	s0, s0
 8014ea8:	ed85 7a00 	vstr	s14, [r5]
 8014eac:	ed85 0a01 	vstr	s0, [r5, #4]
 8014eb0:	4240      	negs	r0, r0
 8014eb2:	e7a6      	b.n	8014e02 <__ieee754_rem_pio2f+0x62>
 8014eb4:	15e4      	asrs	r4, r4, #23
 8014eb6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014eba:	1aa2      	subs	r2, r4, r2
 8014ebc:	2a08      	cmp	r2, #8
 8014ebe:	dde4      	ble.n	8014e8a <__ieee754_rem_pio2f+0xea>
 8014ec0:	eddf 7a43 	vldr	s15, [pc, #268]	; 8014fd0 <__ieee754_rem_pio2f+0x230>
 8014ec4:	eef0 6a40 	vmov.f32	s13, s0
 8014ec8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014ecc:	ee30 0a66 	vsub.f32	s0, s0, s13
 8014ed0:	eea7 0a27 	vfma.f32	s0, s14, s15
 8014ed4:	eddf 7a40 	vldr	s15, [pc, #256]	; 8014fd8 <__ieee754_rem_pio2f+0x238>
 8014ed8:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8014edc:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8014ee0:	eef0 7a40 	vmov.f32	s15, s0
 8014ee4:	ee15 3a90 	vmov	r3, s11
 8014ee8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014eec:	1aa4      	subs	r4, r4, r2
 8014eee:	2c19      	cmp	r4, #25
 8014ef0:	dc04      	bgt.n	8014efc <__ieee754_rem_pio2f+0x15c>
 8014ef2:	edc5 5a00 	vstr	s11, [r5]
 8014ef6:	eeb0 0a66 	vmov.f32	s0, s13
 8014efa:	e7c7      	b.n	8014e8c <__ieee754_rem_pio2f+0xec>
 8014efc:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8014fe8 <__ieee754_rem_pio2f+0x248>
 8014f00:	eeb0 0a66 	vmov.f32	s0, s13
 8014f04:	eea7 0a25 	vfma.f32	s0, s14, s11
 8014f08:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8014f0c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8014f10:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014fec <__ieee754_rem_pio2f+0x24c>
 8014f14:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8014f18:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014f1c:	ed85 7a00 	vstr	s14, [r5]
 8014f20:	e7b4      	b.n	8014e8c <__ieee754_rem_pio2f+0xec>
 8014f22:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014f26:	db06      	blt.n	8014f36 <__ieee754_rem_pio2f+0x196>
 8014f28:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014f2c:	edc0 7a01 	vstr	s15, [r0, #4]
 8014f30:	edc0 7a00 	vstr	s15, [r0]
 8014f34:	e742      	b.n	8014dbc <__ieee754_rem_pio2f+0x1c>
 8014f36:	15e2      	asrs	r2, r4, #23
 8014f38:	3a86      	subs	r2, #134	; 0x86
 8014f3a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8014f3e:	ee07 3a90 	vmov	s15, r3
 8014f42:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014f46:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8014ff0 <__ieee754_rem_pio2f+0x250>
 8014f4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014f4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014f52:	ed8d 7a03 	vstr	s14, [sp, #12]
 8014f56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014f5a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014f5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014f62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014f66:	ed8d 7a04 	vstr	s14, [sp, #16]
 8014f6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014f6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f76:	edcd 7a05 	vstr	s15, [sp, #20]
 8014f7a:	d11e      	bne.n	8014fba <__ieee754_rem_pio2f+0x21a>
 8014f7c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f84:	bf0c      	ite	eq
 8014f86:	2301      	moveq	r3, #1
 8014f88:	2302      	movne	r3, #2
 8014f8a:	491a      	ldr	r1, [pc, #104]	; (8014ff4 <__ieee754_rem_pio2f+0x254>)
 8014f8c:	9101      	str	r1, [sp, #4]
 8014f8e:	2102      	movs	r1, #2
 8014f90:	9100      	str	r1, [sp, #0]
 8014f92:	a803      	add	r0, sp, #12
 8014f94:	4629      	mov	r1, r5
 8014f96:	f000 fdc3 	bl	8015b20 <__kernel_rem_pio2f>
 8014f9a:	2e00      	cmp	r6, #0
 8014f9c:	f6bf af31 	bge.w	8014e02 <__ieee754_rem_pio2f+0x62>
 8014fa0:	edd5 7a00 	vldr	s15, [r5]
 8014fa4:	eef1 7a67 	vneg.f32	s15, s15
 8014fa8:	edc5 7a00 	vstr	s15, [r5]
 8014fac:	edd5 7a01 	vldr	s15, [r5, #4]
 8014fb0:	eef1 7a67 	vneg.f32	s15, s15
 8014fb4:	edc5 7a01 	vstr	s15, [r5, #4]
 8014fb8:	e77a      	b.n	8014eb0 <__ieee754_rem_pio2f+0x110>
 8014fba:	2303      	movs	r3, #3
 8014fbc:	e7e5      	b.n	8014f8a <__ieee754_rem_pio2f+0x1ea>
 8014fbe:	bf00      	nop
 8014fc0:	3f490fd8 	.word	0x3f490fd8
 8014fc4:	4016cbe3 	.word	0x4016cbe3
 8014fc8:	3fc90f80 	.word	0x3fc90f80
 8014fcc:	3fc90fd0 	.word	0x3fc90fd0
 8014fd0:	37354400 	.word	0x37354400
 8014fd4:	37354443 	.word	0x37354443
 8014fd8:	2e85a308 	.word	0x2e85a308
 8014fdc:	43490f80 	.word	0x43490f80
 8014fe0:	3f22f984 	.word	0x3f22f984
 8014fe4:	080a7438 	.word	0x080a7438
 8014fe8:	2e85a300 	.word	0x2e85a300
 8014fec:	248d3132 	.word	0x248d3132
 8014ff0:	43800000 	.word	0x43800000
 8014ff4:	080a74b8 	.word	0x080a74b8

08014ff8 <__ieee754_sinhf>:
 8014ff8:	b510      	push	{r4, lr}
 8014ffa:	ee10 3a10 	vmov	r3, s0
 8014ffe:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8015002:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015006:	ed2d 8b02 	vpush	{d8}
 801500a:	eef0 7a40 	vmov.f32	s15, s0
 801500e:	db06      	blt.n	801501e <__ieee754_sinhf+0x26>
 8015010:	ee70 7a00 	vadd.f32	s15, s0, s0
 8015014:	ecbd 8b02 	vpop	{d8}
 8015018:	eeb0 0a67 	vmov.f32	s0, s15
 801501c:	bd10      	pop	{r4, pc}
 801501e:	2b00      	cmp	r3, #0
 8015020:	4b28      	ldr	r3, [pc, #160]	; (80150c4 <__ieee754_sinhf+0xcc>)
 8015022:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8015026:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 801502a:	bfa8      	it	ge
 801502c:	eeb0 8a68 	vmovge.f32	s16, s17
 8015030:	429c      	cmp	r4, r3
 8015032:	dc2a      	bgt.n	801508a <__ieee754_sinhf+0x92>
 8015034:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 8015038:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801503c:	da08      	bge.n	8015050 <__ieee754_sinhf+0x58>
 801503e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80150c8 <__ieee754_sinhf+0xd0>
 8015042:	ee30 7a07 	vadd.f32	s14, s0, s14
 8015046:	eeb4 7ae8 	vcmpe.f32	s14, s17
 801504a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801504e:	dce1      	bgt.n	8015014 <__ieee754_sinhf+0x1c>
 8015050:	eeb0 0a67 	vmov.f32	s0, s15
 8015054:	f7fd fb80 	bl	8012758 <fabsf>
 8015058:	f001 f99c 	bl	8016394 <expm1f>
 801505c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8015060:	bfbb      	ittet	lt
 8015062:	ee20 7a00 	vmullt.f32	s14, s0, s0
 8015066:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 801506a:	ee70 8a28 	vaddge.f32	s17, s0, s17
 801506e:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 8015072:	bfad      	iteet	ge
 8015074:	eec0 7a28 	vdivge.f32	s15, s0, s17
 8015078:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 801507c:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 8015080:	ee77 7a80 	vaddge.f32	s15, s15, s0
 8015084:	ee67 7a88 	vmul.f32	s15, s15, s16
 8015088:	e7c4      	b.n	8015014 <__ieee754_sinhf+0x1c>
 801508a:	4b10      	ldr	r3, [pc, #64]	; (80150cc <__ieee754_sinhf+0xd4>)
 801508c:	429c      	cmp	r4, r3
 801508e:	dc06      	bgt.n	801509e <__ieee754_sinhf+0xa6>
 8015090:	f7fd fb62 	bl	8012758 <fabsf>
 8015094:	f7ff f924 	bl	80142e0 <__ieee754_expf>
 8015098:	ee60 7a08 	vmul.f32	s15, s0, s16
 801509c:	e7ba      	b.n	8015014 <__ieee754_sinhf+0x1c>
 801509e:	4b0c      	ldr	r3, [pc, #48]	; (80150d0 <__ieee754_sinhf+0xd8>)
 80150a0:	429c      	cmp	r4, r3
 80150a2:	dc0a      	bgt.n	80150ba <__ieee754_sinhf+0xc2>
 80150a4:	f7fd fb58 	bl	8012758 <fabsf>
 80150a8:	ee20 0a28 	vmul.f32	s0, s0, s17
 80150ac:	f7ff f918 	bl	80142e0 <__ieee754_expf>
 80150b0:	ee68 7a00 	vmul.f32	s15, s16, s0
 80150b4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80150b8:	e7ac      	b.n	8015014 <__ieee754_sinhf+0x1c>
 80150ba:	ed9f 7a03 	vldr	s14, [pc, #12]	; 80150c8 <__ieee754_sinhf+0xd0>
 80150be:	ee60 7a07 	vmul.f32	s15, s0, s14
 80150c2:	e7a7      	b.n	8015014 <__ieee754_sinhf+0x1c>
 80150c4:	41afffff 	.word	0x41afffff
 80150c8:	7cf0bdc2 	.word	0x7cf0bdc2
 80150cc:	42b17217 	.word	0x42b17217
 80150d0:	42b2d4fc 	.word	0x42b2d4fc

080150d4 <__ieee754_sqrtf>:
 80150d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80150d8:	4770      	bx	lr
 80150da:	0000      	movs	r0, r0
 80150dc:	0000      	movs	r0, r0
	...

080150e0 <__kernel_cos>:
 80150e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150e4:	ec59 8b10 	vmov	r8, r9, d0
 80150e8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80150ec:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80150f0:	ed2d 8b02 	vpush	{d8}
 80150f4:	eeb0 8a41 	vmov.f32	s16, s2
 80150f8:	eef0 8a61 	vmov.f32	s17, s3
 80150fc:	da07      	bge.n	801510e <__kernel_cos+0x2e>
 80150fe:	ee10 0a10 	vmov	r0, s0
 8015102:	4649      	mov	r1, r9
 8015104:	f7f2 f920 	bl	8007348 <__aeabi_d2iz>
 8015108:	2800      	cmp	r0, #0
 801510a:	f000 8089 	beq.w	8015220 <__kernel_cos+0x140>
 801510e:	4642      	mov	r2, r8
 8015110:	464b      	mov	r3, r9
 8015112:	4640      	mov	r0, r8
 8015114:	4649      	mov	r1, r9
 8015116:	f7f1 fe67 	bl	8006de8 <__aeabi_dmul>
 801511a:	2200      	movs	r2, #0
 801511c:	4b4e      	ldr	r3, [pc, #312]	; (8015258 <__kernel_cos+0x178>)
 801511e:	4604      	mov	r4, r0
 8015120:	460d      	mov	r5, r1
 8015122:	f7f1 fe61 	bl	8006de8 <__aeabi_dmul>
 8015126:	a340      	add	r3, pc, #256	; (adr r3, 8015228 <__kernel_cos+0x148>)
 8015128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801512c:	4682      	mov	sl, r0
 801512e:	468b      	mov	fp, r1
 8015130:	4620      	mov	r0, r4
 8015132:	4629      	mov	r1, r5
 8015134:	f7f1 fe58 	bl	8006de8 <__aeabi_dmul>
 8015138:	a33d      	add	r3, pc, #244	; (adr r3, 8015230 <__kernel_cos+0x150>)
 801513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801513e:	f7f1 fc9d 	bl	8006a7c <__adddf3>
 8015142:	4622      	mov	r2, r4
 8015144:	462b      	mov	r3, r5
 8015146:	f7f1 fe4f 	bl	8006de8 <__aeabi_dmul>
 801514a:	a33b      	add	r3, pc, #236	; (adr r3, 8015238 <__kernel_cos+0x158>)
 801514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015150:	f7f1 fc92 	bl	8006a78 <__aeabi_dsub>
 8015154:	4622      	mov	r2, r4
 8015156:	462b      	mov	r3, r5
 8015158:	f7f1 fe46 	bl	8006de8 <__aeabi_dmul>
 801515c:	a338      	add	r3, pc, #224	; (adr r3, 8015240 <__kernel_cos+0x160>)
 801515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015162:	f7f1 fc8b 	bl	8006a7c <__adddf3>
 8015166:	4622      	mov	r2, r4
 8015168:	462b      	mov	r3, r5
 801516a:	f7f1 fe3d 	bl	8006de8 <__aeabi_dmul>
 801516e:	a336      	add	r3, pc, #216	; (adr r3, 8015248 <__kernel_cos+0x168>)
 8015170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015174:	f7f1 fc80 	bl	8006a78 <__aeabi_dsub>
 8015178:	4622      	mov	r2, r4
 801517a:	462b      	mov	r3, r5
 801517c:	f7f1 fe34 	bl	8006de8 <__aeabi_dmul>
 8015180:	a333      	add	r3, pc, #204	; (adr r3, 8015250 <__kernel_cos+0x170>)
 8015182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015186:	f7f1 fc79 	bl	8006a7c <__adddf3>
 801518a:	4622      	mov	r2, r4
 801518c:	462b      	mov	r3, r5
 801518e:	f7f1 fe2b 	bl	8006de8 <__aeabi_dmul>
 8015192:	4622      	mov	r2, r4
 8015194:	462b      	mov	r3, r5
 8015196:	f7f1 fe27 	bl	8006de8 <__aeabi_dmul>
 801519a:	ec53 2b18 	vmov	r2, r3, d8
 801519e:	4604      	mov	r4, r0
 80151a0:	460d      	mov	r5, r1
 80151a2:	4640      	mov	r0, r8
 80151a4:	4649      	mov	r1, r9
 80151a6:	f7f1 fe1f 	bl	8006de8 <__aeabi_dmul>
 80151aa:	460b      	mov	r3, r1
 80151ac:	4602      	mov	r2, r0
 80151ae:	4629      	mov	r1, r5
 80151b0:	4620      	mov	r0, r4
 80151b2:	f7f1 fc61 	bl	8006a78 <__aeabi_dsub>
 80151b6:	4b29      	ldr	r3, [pc, #164]	; (801525c <__kernel_cos+0x17c>)
 80151b8:	429e      	cmp	r6, r3
 80151ba:	4680      	mov	r8, r0
 80151bc:	4689      	mov	r9, r1
 80151be:	dc11      	bgt.n	80151e4 <__kernel_cos+0x104>
 80151c0:	4602      	mov	r2, r0
 80151c2:	460b      	mov	r3, r1
 80151c4:	4650      	mov	r0, sl
 80151c6:	4659      	mov	r1, fp
 80151c8:	f7f1 fc56 	bl	8006a78 <__aeabi_dsub>
 80151cc:	460b      	mov	r3, r1
 80151ce:	4924      	ldr	r1, [pc, #144]	; (8015260 <__kernel_cos+0x180>)
 80151d0:	4602      	mov	r2, r0
 80151d2:	2000      	movs	r0, #0
 80151d4:	f7f1 fc50 	bl	8006a78 <__aeabi_dsub>
 80151d8:	ecbd 8b02 	vpop	{d8}
 80151dc:	ec41 0b10 	vmov	d0, r0, r1
 80151e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151e4:	4b1f      	ldr	r3, [pc, #124]	; (8015264 <__kernel_cos+0x184>)
 80151e6:	491e      	ldr	r1, [pc, #120]	; (8015260 <__kernel_cos+0x180>)
 80151e8:	429e      	cmp	r6, r3
 80151ea:	bfcc      	ite	gt
 80151ec:	4d1e      	ldrgt	r5, [pc, #120]	; (8015268 <__kernel_cos+0x188>)
 80151ee:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80151f2:	2400      	movs	r4, #0
 80151f4:	4622      	mov	r2, r4
 80151f6:	462b      	mov	r3, r5
 80151f8:	2000      	movs	r0, #0
 80151fa:	f7f1 fc3d 	bl	8006a78 <__aeabi_dsub>
 80151fe:	4622      	mov	r2, r4
 8015200:	4606      	mov	r6, r0
 8015202:	460f      	mov	r7, r1
 8015204:	462b      	mov	r3, r5
 8015206:	4650      	mov	r0, sl
 8015208:	4659      	mov	r1, fp
 801520a:	f7f1 fc35 	bl	8006a78 <__aeabi_dsub>
 801520e:	4642      	mov	r2, r8
 8015210:	464b      	mov	r3, r9
 8015212:	f7f1 fc31 	bl	8006a78 <__aeabi_dsub>
 8015216:	4602      	mov	r2, r0
 8015218:	460b      	mov	r3, r1
 801521a:	4630      	mov	r0, r6
 801521c:	4639      	mov	r1, r7
 801521e:	e7d9      	b.n	80151d4 <__kernel_cos+0xf4>
 8015220:	2000      	movs	r0, #0
 8015222:	490f      	ldr	r1, [pc, #60]	; (8015260 <__kernel_cos+0x180>)
 8015224:	e7d8      	b.n	80151d8 <__kernel_cos+0xf8>
 8015226:	bf00      	nop
 8015228:	be8838d4 	.word	0xbe8838d4
 801522c:	bda8fae9 	.word	0xbda8fae9
 8015230:	bdb4b1c4 	.word	0xbdb4b1c4
 8015234:	3e21ee9e 	.word	0x3e21ee9e
 8015238:	809c52ad 	.word	0x809c52ad
 801523c:	3e927e4f 	.word	0x3e927e4f
 8015240:	19cb1590 	.word	0x19cb1590
 8015244:	3efa01a0 	.word	0x3efa01a0
 8015248:	16c15177 	.word	0x16c15177
 801524c:	3f56c16c 	.word	0x3f56c16c
 8015250:	5555554c 	.word	0x5555554c
 8015254:	3fa55555 	.word	0x3fa55555
 8015258:	3fe00000 	.word	0x3fe00000
 801525c:	3fd33332 	.word	0x3fd33332
 8015260:	3ff00000 	.word	0x3ff00000
 8015264:	3fe90000 	.word	0x3fe90000
 8015268:	3fd20000 	.word	0x3fd20000
 801526c:	00000000 	.word	0x00000000

08015270 <__kernel_rem_pio2>:
 8015270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015274:	ed2d 8b02 	vpush	{d8}
 8015278:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801527c:	1ed4      	subs	r4, r2, #3
 801527e:	9308      	str	r3, [sp, #32]
 8015280:	9101      	str	r1, [sp, #4]
 8015282:	4bc5      	ldr	r3, [pc, #788]	; (8015598 <__kernel_rem_pio2+0x328>)
 8015284:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8015286:	9009      	str	r0, [sp, #36]	; 0x24
 8015288:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801528c:	9304      	str	r3, [sp, #16]
 801528e:	9b08      	ldr	r3, [sp, #32]
 8015290:	3b01      	subs	r3, #1
 8015292:	9307      	str	r3, [sp, #28]
 8015294:	2318      	movs	r3, #24
 8015296:	fb94 f4f3 	sdiv	r4, r4, r3
 801529a:	f06f 0317 	mvn.w	r3, #23
 801529e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80152a2:	fb04 3303 	mla	r3, r4, r3, r3
 80152a6:	eb03 0a02 	add.w	sl, r3, r2
 80152aa:	9b04      	ldr	r3, [sp, #16]
 80152ac:	9a07      	ldr	r2, [sp, #28]
 80152ae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8015588 <__kernel_rem_pio2+0x318>
 80152b2:	eb03 0802 	add.w	r8, r3, r2
 80152b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80152b8:	1aa7      	subs	r7, r4, r2
 80152ba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80152be:	ae22      	add	r6, sp, #136	; 0x88
 80152c0:	2500      	movs	r5, #0
 80152c2:	4545      	cmp	r5, r8
 80152c4:	dd13      	ble.n	80152ee <__kernel_rem_pio2+0x7e>
 80152c6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8015588 <__kernel_rem_pio2+0x318>
 80152ca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80152ce:	2600      	movs	r6, #0
 80152d0:	9b04      	ldr	r3, [sp, #16]
 80152d2:	429e      	cmp	r6, r3
 80152d4:	dc32      	bgt.n	801533c <__kernel_rem_pio2+0xcc>
 80152d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152d8:	9302      	str	r3, [sp, #8]
 80152da:	9b08      	ldr	r3, [sp, #32]
 80152dc:	199d      	adds	r5, r3, r6
 80152de:	ab22      	add	r3, sp, #136	; 0x88
 80152e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80152e4:	9306      	str	r3, [sp, #24]
 80152e6:	ec59 8b18 	vmov	r8, r9, d8
 80152ea:	2700      	movs	r7, #0
 80152ec:	e01f      	b.n	801532e <__kernel_rem_pio2+0xbe>
 80152ee:	42ef      	cmn	r7, r5
 80152f0:	d407      	bmi.n	8015302 <__kernel_rem_pio2+0x92>
 80152f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80152f6:	f7f1 fd0d 	bl	8006d14 <__aeabi_i2d>
 80152fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80152fe:	3501      	adds	r5, #1
 8015300:	e7df      	b.n	80152c2 <__kernel_rem_pio2+0x52>
 8015302:	ec51 0b18 	vmov	r0, r1, d8
 8015306:	e7f8      	b.n	80152fa <__kernel_rem_pio2+0x8a>
 8015308:	9906      	ldr	r1, [sp, #24]
 801530a:	9d02      	ldr	r5, [sp, #8]
 801530c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8015310:	9106      	str	r1, [sp, #24]
 8015312:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8015316:	9502      	str	r5, [sp, #8]
 8015318:	f7f1 fd66 	bl	8006de8 <__aeabi_dmul>
 801531c:	4602      	mov	r2, r0
 801531e:	460b      	mov	r3, r1
 8015320:	4640      	mov	r0, r8
 8015322:	4649      	mov	r1, r9
 8015324:	f7f1 fbaa 	bl	8006a7c <__adddf3>
 8015328:	3701      	adds	r7, #1
 801532a:	4680      	mov	r8, r0
 801532c:	4689      	mov	r9, r1
 801532e:	9b07      	ldr	r3, [sp, #28]
 8015330:	429f      	cmp	r7, r3
 8015332:	dde9      	ble.n	8015308 <__kernel_rem_pio2+0x98>
 8015334:	e8eb 8902 	strd	r8, r9, [fp], #8
 8015338:	3601      	adds	r6, #1
 801533a:	e7c9      	b.n	80152d0 <__kernel_rem_pio2+0x60>
 801533c:	9b04      	ldr	r3, [sp, #16]
 801533e:	aa0e      	add	r2, sp, #56	; 0x38
 8015340:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015344:	930c      	str	r3, [sp, #48]	; 0x30
 8015346:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8015348:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801534c:	9c04      	ldr	r4, [sp, #16]
 801534e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015350:	ab9a      	add	r3, sp, #616	; 0x268
 8015352:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8015356:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801535a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801535e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8015362:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8015366:	ab9a      	add	r3, sp, #616	; 0x268
 8015368:	445b      	add	r3, fp
 801536a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801536e:	2500      	movs	r5, #0
 8015370:	1b63      	subs	r3, r4, r5
 8015372:	2b00      	cmp	r3, #0
 8015374:	dc78      	bgt.n	8015468 <__kernel_rem_pio2+0x1f8>
 8015376:	4650      	mov	r0, sl
 8015378:	ec49 8b10 	vmov	d0, r8, r9
 801537c:	f000 ff94 	bl	80162a8 <scalbn>
 8015380:	ec57 6b10 	vmov	r6, r7, d0
 8015384:	2200      	movs	r2, #0
 8015386:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801538a:	ee10 0a10 	vmov	r0, s0
 801538e:	4639      	mov	r1, r7
 8015390:	f7f1 fd2a 	bl	8006de8 <__aeabi_dmul>
 8015394:	ec41 0b10 	vmov	d0, r0, r1
 8015398:	f7fc fd2a 	bl	8011df0 <floor>
 801539c:	2200      	movs	r2, #0
 801539e:	ec51 0b10 	vmov	r0, r1, d0
 80153a2:	4b7e      	ldr	r3, [pc, #504]	; (801559c <__kernel_rem_pio2+0x32c>)
 80153a4:	f7f1 fd20 	bl	8006de8 <__aeabi_dmul>
 80153a8:	4602      	mov	r2, r0
 80153aa:	460b      	mov	r3, r1
 80153ac:	4630      	mov	r0, r6
 80153ae:	4639      	mov	r1, r7
 80153b0:	f7f1 fb62 	bl	8006a78 <__aeabi_dsub>
 80153b4:	460f      	mov	r7, r1
 80153b6:	4606      	mov	r6, r0
 80153b8:	f7f1 ffc6 	bl	8007348 <__aeabi_d2iz>
 80153bc:	9006      	str	r0, [sp, #24]
 80153be:	f7f1 fca9 	bl	8006d14 <__aeabi_i2d>
 80153c2:	4602      	mov	r2, r0
 80153c4:	460b      	mov	r3, r1
 80153c6:	4630      	mov	r0, r6
 80153c8:	4639      	mov	r1, r7
 80153ca:	f7f1 fb55 	bl	8006a78 <__aeabi_dsub>
 80153ce:	f1ba 0f00 	cmp.w	sl, #0
 80153d2:	4606      	mov	r6, r0
 80153d4:	460f      	mov	r7, r1
 80153d6:	dd6c      	ble.n	80154b2 <__kernel_rem_pio2+0x242>
 80153d8:	1e62      	subs	r2, r4, #1
 80153da:	ab0e      	add	r3, sp, #56	; 0x38
 80153dc:	f1ca 0118 	rsb	r1, sl, #24
 80153e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80153e4:	9d06      	ldr	r5, [sp, #24]
 80153e6:	fa40 f301 	asr.w	r3, r0, r1
 80153ea:	441d      	add	r5, r3
 80153ec:	408b      	lsls	r3, r1
 80153ee:	1ac0      	subs	r0, r0, r3
 80153f0:	ab0e      	add	r3, sp, #56	; 0x38
 80153f2:	9506      	str	r5, [sp, #24]
 80153f4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80153f8:	f1ca 0317 	rsb	r3, sl, #23
 80153fc:	fa40 f303 	asr.w	r3, r0, r3
 8015400:	9302      	str	r3, [sp, #8]
 8015402:	9b02      	ldr	r3, [sp, #8]
 8015404:	2b00      	cmp	r3, #0
 8015406:	dd62      	ble.n	80154ce <__kernel_rem_pio2+0x25e>
 8015408:	9b06      	ldr	r3, [sp, #24]
 801540a:	2200      	movs	r2, #0
 801540c:	3301      	adds	r3, #1
 801540e:	9306      	str	r3, [sp, #24]
 8015410:	4615      	mov	r5, r2
 8015412:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8015416:	4294      	cmp	r4, r2
 8015418:	f300 8095 	bgt.w	8015546 <__kernel_rem_pio2+0x2d6>
 801541c:	f1ba 0f00 	cmp.w	sl, #0
 8015420:	dd07      	ble.n	8015432 <__kernel_rem_pio2+0x1c2>
 8015422:	f1ba 0f01 	cmp.w	sl, #1
 8015426:	f000 80a2 	beq.w	801556e <__kernel_rem_pio2+0x2fe>
 801542a:	f1ba 0f02 	cmp.w	sl, #2
 801542e:	f000 80c1 	beq.w	80155b4 <__kernel_rem_pio2+0x344>
 8015432:	9b02      	ldr	r3, [sp, #8]
 8015434:	2b02      	cmp	r3, #2
 8015436:	d14a      	bne.n	80154ce <__kernel_rem_pio2+0x25e>
 8015438:	4632      	mov	r2, r6
 801543a:	463b      	mov	r3, r7
 801543c:	2000      	movs	r0, #0
 801543e:	4958      	ldr	r1, [pc, #352]	; (80155a0 <__kernel_rem_pio2+0x330>)
 8015440:	f7f1 fb1a 	bl	8006a78 <__aeabi_dsub>
 8015444:	4606      	mov	r6, r0
 8015446:	460f      	mov	r7, r1
 8015448:	2d00      	cmp	r5, #0
 801544a:	d040      	beq.n	80154ce <__kernel_rem_pio2+0x25e>
 801544c:	4650      	mov	r0, sl
 801544e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8015590 <__kernel_rem_pio2+0x320>
 8015452:	f000 ff29 	bl	80162a8 <scalbn>
 8015456:	4630      	mov	r0, r6
 8015458:	4639      	mov	r1, r7
 801545a:	ec53 2b10 	vmov	r2, r3, d0
 801545e:	f7f1 fb0b 	bl	8006a78 <__aeabi_dsub>
 8015462:	4606      	mov	r6, r0
 8015464:	460f      	mov	r7, r1
 8015466:	e032      	b.n	80154ce <__kernel_rem_pio2+0x25e>
 8015468:	2200      	movs	r2, #0
 801546a:	4b4e      	ldr	r3, [pc, #312]	; (80155a4 <__kernel_rem_pio2+0x334>)
 801546c:	4640      	mov	r0, r8
 801546e:	4649      	mov	r1, r9
 8015470:	f7f1 fcba 	bl	8006de8 <__aeabi_dmul>
 8015474:	f7f1 ff68 	bl	8007348 <__aeabi_d2iz>
 8015478:	f7f1 fc4c 	bl	8006d14 <__aeabi_i2d>
 801547c:	2200      	movs	r2, #0
 801547e:	4b4a      	ldr	r3, [pc, #296]	; (80155a8 <__kernel_rem_pio2+0x338>)
 8015480:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015484:	f7f1 fcb0 	bl	8006de8 <__aeabi_dmul>
 8015488:	4602      	mov	r2, r0
 801548a:	460b      	mov	r3, r1
 801548c:	4640      	mov	r0, r8
 801548e:	4649      	mov	r1, r9
 8015490:	f7f1 faf2 	bl	8006a78 <__aeabi_dsub>
 8015494:	f7f1 ff58 	bl	8007348 <__aeabi_d2iz>
 8015498:	ab0e      	add	r3, sp, #56	; 0x38
 801549a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801549e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80154a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80154a6:	f7f1 fae9 	bl	8006a7c <__adddf3>
 80154aa:	3501      	adds	r5, #1
 80154ac:	4680      	mov	r8, r0
 80154ae:	4689      	mov	r9, r1
 80154b0:	e75e      	b.n	8015370 <__kernel_rem_pio2+0x100>
 80154b2:	d105      	bne.n	80154c0 <__kernel_rem_pio2+0x250>
 80154b4:	1e63      	subs	r3, r4, #1
 80154b6:	aa0e      	add	r2, sp, #56	; 0x38
 80154b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80154bc:	15c3      	asrs	r3, r0, #23
 80154be:	e79f      	b.n	8015400 <__kernel_rem_pio2+0x190>
 80154c0:	2200      	movs	r2, #0
 80154c2:	4b3a      	ldr	r3, [pc, #232]	; (80155ac <__kernel_rem_pio2+0x33c>)
 80154c4:	f7f1 ff16 	bl	80072f4 <__aeabi_dcmpge>
 80154c8:	2800      	cmp	r0, #0
 80154ca:	d139      	bne.n	8015540 <__kernel_rem_pio2+0x2d0>
 80154cc:	9002      	str	r0, [sp, #8]
 80154ce:	2200      	movs	r2, #0
 80154d0:	2300      	movs	r3, #0
 80154d2:	4630      	mov	r0, r6
 80154d4:	4639      	mov	r1, r7
 80154d6:	f7f1 feef 	bl	80072b8 <__aeabi_dcmpeq>
 80154da:	2800      	cmp	r0, #0
 80154dc:	f000 80c7 	beq.w	801566e <__kernel_rem_pio2+0x3fe>
 80154e0:	1e65      	subs	r5, r4, #1
 80154e2:	462b      	mov	r3, r5
 80154e4:	2200      	movs	r2, #0
 80154e6:	9904      	ldr	r1, [sp, #16]
 80154e8:	428b      	cmp	r3, r1
 80154ea:	da6a      	bge.n	80155c2 <__kernel_rem_pio2+0x352>
 80154ec:	2a00      	cmp	r2, #0
 80154ee:	f000 8088 	beq.w	8015602 <__kernel_rem_pio2+0x392>
 80154f2:	ab0e      	add	r3, sp, #56	; 0x38
 80154f4:	f1aa 0a18 	sub.w	sl, sl, #24
 80154f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	f000 80b4 	beq.w	801566a <__kernel_rem_pio2+0x3fa>
 8015502:	4650      	mov	r0, sl
 8015504:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8015590 <__kernel_rem_pio2+0x320>
 8015508:	f000 fece 	bl	80162a8 <scalbn>
 801550c:	00ec      	lsls	r4, r5, #3
 801550e:	ab72      	add	r3, sp, #456	; 0x1c8
 8015510:	191e      	adds	r6, r3, r4
 8015512:	ec59 8b10 	vmov	r8, r9, d0
 8015516:	f106 0a08 	add.w	sl, r6, #8
 801551a:	462f      	mov	r7, r5
 801551c:	2f00      	cmp	r7, #0
 801551e:	f280 80df 	bge.w	80156e0 <__kernel_rem_pio2+0x470>
 8015522:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8015588 <__kernel_rem_pio2+0x318>
 8015526:	f04f 0a00 	mov.w	sl, #0
 801552a:	eba5 030a 	sub.w	r3, r5, sl
 801552e:	2b00      	cmp	r3, #0
 8015530:	f2c0 810a 	blt.w	8015748 <__kernel_rem_pio2+0x4d8>
 8015534:	f8df b078 	ldr.w	fp, [pc, #120]	; 80155b0 <__kernel_rem_pio2+0x340>
 8015538:	ec59 8b18 	vmov	r8, r9, d8
 801553c:	2700      	movs	r7, #0
 801553e:	e0f5      	b.n	801572c <__kernel_rem_pio2+0x4bc>
 8015540:	2302      	movs	r3, #2
 8015542:	9302      	str	r3, [sp, #8]
 8015544:	e760      	b.n	8015408 <__kernel_rem_pio2+0x198>
 8015546:	ab0e      	add	r3, sp, #56	; 0x38
 8015548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801554c:	b94d      	cbnz	r5, 8015562 <__kernel_rem_pio2+0x2f2>
 801554e:	b12b      	cbz	r3, 801555c <__kernel_rem_pio2+0x2ec>
 8015550:	a80e      	add	r0, sp, #56	; 0x38
 8015552:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8015556:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801555a:	2301      	movs	r3, #1
 801555c:	3201      	adds	r2, #1
 801555e:	461d      	mov	r5, r3
 8015560:	e759      	b.n	8015416 <__kernel_rem_pio2+0x1a6>
 8015562:	a80e      	add	r0, sp, #56	; 0x38
 8015564:	1acb      	subs	r3, r1, r3
 8015566:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801556a:	462b      	mov	r3, r5
 801556c:	e7f6      	b.n	801555c <__kernel_rem_pio2+0x2ec>
 801556e:	1e62      	subs	r2, r4, #1
 8015570:	ab0e      	add	r3, sp, #56	; 0x38
 8015572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015576:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801557a:	a90e      	add	r1, sp, #56	; 0x38
 801557c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015580:	e757      	b.n	8015432 <__kernel_rem_pio2+0x1c2>
 8015582:	bf00      	nop
 8015584:	f3af 8000 	nop.w
	...
 8015594:	3ff00000 	.word	0x3ff00000
 8015598:	080a7810 	.word	0x080a7810
 801559c:	40200000 	.word	0x40200000
 80155a0:	3ff00000 	.word	0x3ff00000
 80155a4:	3e700000 	.word	0x3e700000
 80155a8:	41700000 	.word	0x41700000
 80155ac:	3fe00000 	.word	0x3fe00000
 80155b0:	080a77d0 	.word	0x080a77d0
 80155b4:	1e62      	subs	r2, r4, #1
 80155b6:	ab0e      	add	r3, sp, #56	; 0x38
 80155b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80155c0:	e7db      	b.n	801557a <__kernel_rem_pio2+0x30a>
 80155c2:	a90e      	add	r1, sp, #56	; 0x38
 80155c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80155c8:	3b01      	subs	r3, #1
 80155ca:	430a      	orrs	r2, r1
 80155cc:	e78b      	b.n	80154e6 <__kernel_rem_pio2+0x276>
 80155ce:	3301      	adds	r3, #1
 80155d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80155d4:	2900      	cmp	r1, #0
 80155d6:	d0fa      	beq.n	80155ce <__kernel_rem_pio2+0x35e>
 80155d8:	9a08      	ldr	r2, [sp, #32]
 80155da:	4422      	add	r2, r4
 80155dc:	00d2      	lsls	r2, r2, #3
 80155de:	a922      	add	r1, sp, #136	; 0x88
 80155e0:	18e3      	adds	r3, r4, r3
 80155e2:	9206      	str	r2, [sp, #24]
 80155e4:	440a      	add	r2, r1
 80155e6:	9302      	str	r3, [sp, #8]
 80155e8:	f10b 0108 	add.w	r1, fp, #8
 80155ec:	f102 0308 	add.w	r3, r2, #8
 80155f0:	1c66      	adds	r6, r4, #1
 80155f2:	910a      	str	r1, [sp, #40]	; 0x28
 80155f4:	2500      	movs	r5, #0
 80155f6:	930d      	str	r3, [sp, #52]	; 0x34
 80155f8:	9b02      	ldr	r3, [sp, #8]
 80155fa:	42b3      	cmp	r3, r6
 80155fc:	da04      	bge.n	8015608 <__kernel_rem_pio2+0x398>
 80155fe:	461c      	mov	r4, r3
 8015600:	e6a6      	b.n	8015350 <__kernel_rem_pio2+0xe0>
 8015602:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015604:	2301      	movs	r3, #1
 8015606:	e7e3      	b.n	80155d0 <__kernel_rem_pio2+0x360>
 8015608:	9b06      	ldr	r3, [sp, #24]
 801560a:	18ef      	adds	r7, r5, r3
 801560c:	ab22      	add	r3, sp, #136	; 0x88
 801560e:	441f      	add	r7, r3
 8015610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015612:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015616:	f7f1 fb7d 	bl	8006d14 <__aeabi_i2d>
 801561a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801561c:	461c      	mov	r4, r3
 801561e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015620:	e9c7 0100 	strd	r0, r1, [r7]
 8015624:	eb03 0b05 	add.w	fp, r3, r5
 8015628:	2700      	movs	r7, #0
 801562a:	f04f 0800 	mov.w	r8, #0
 801562e:	f04f 0900 	mov.w	r9, #0
 8015632:	9b07      	ldr	r3, [sp, #28]
 8015634:	429f      	cmp	r7, r3
 8015636:	dd08      	ble.n	801564a <__kernel_rem_pio2+0x3da>
 8015638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801563a:	aa72      	add	r2, sp, #456	; 0x1c8
 801563c:	18eb      	adds	r3, r5, r3
 801563e:	4413      	add	r3, r2
 8015640:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8015644:	3601      	adds	r6, #1
 8015646:	3508      	adds	r5, #8
 8015648:	e7d6      	b.n	80155f8 <__kernel_rem_pio2+0x388>
 801564a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801564e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8015652:	f7f1 fbc9 	bl	8006de8 <__aeabi_dmul>
 8015656:	4602      	mov	r2, r0
 8015658:	460b      	mov	r3, r1
 801565a:	4640      	mov	r0, r8
 801565c:	4649      	mov	r1, r9
 801565e:	f7f1 fa0d 	bl	8006a7c <__adddf3>
 8015662:	3701      	adds	r7, #1
 8015664:	4680      	mov	r8, r0
 8015666:	4689      	mov	r9, r1
 8015668:	e7e3      	b.n	8015632 <__kernel_rem_pio2+0x3c2>
 801566a:	3d01      	subs	r5, #1
 801566c:	e741      	b.n	80154f2 <__kernel_rem_pio2+0x282>
 801566e:	f1ca 0000 	rsb	r0, sl, #0
 8015672:	ec47 6b10 	vmov	d0, r6, r7
 8015676:	f000 fe17 	bl	80162a8 <scalbn>
 801567a:	ec57 6b10 	vmov	r6, r7, d0
 801567e:	2200      	movs	r2, #0
 8015680:	4b99      	ldr	r3, [pc, #612]	; (80158e8 <__kernel_rem_pio2+0x678>)
 8015682:	ee10 0a10 	vmov	r0, s0
 8015686:	4639      	mov	r1, r7
 8015688:	f7f1 fe34 	bl	80072f4 <__aeabi_dcmpge>
 801568c:	b1f8      	cbz	r0, 80156ce <__kernel_rem_pio2+0x45e>
 801568e:	2200      	movs	r2, #0
 8015690:	4b96      	ldr	r3, [pc, #600]	; (80158ec <__kernel_rem_pio2+0x67c>)
 8015692:	4630      	mov	r0, r6
 8015694:	4639      	mov	r1, r7
 8015696:	f7f1 fba7 	bl	8006de8 <__aeabi_dmul>
 801569a:	f7f1 fe55 	bl	8007348 <__aeabi_d2iz>
 801569e:	4680      	mov	r8, r0
 80156a0:	f7f1 fb38 	bl	8006d14 <__aeabi_i2d>
 80156a4:	2200      	movs	r2, #0
 80156a6:	4b90      	ldr	r3, [pc, #576]	; (80158e8 <__kernel_rem_pio2+0x678>)
 80156a8:	f7f1 fb9e 	bl	8006de8 <__aeabi_dmul>
 80156ac:	460b      	mov	r3, r1
 80156ae:	4602      	mov	r2, r0
 80156b0:	4639      	mov	r1, r7
 80156b2:	4630      	mov	r0, r6
 80156b4:	f7f1 f9e0 	bl	8006a78 <__aeabi_dsub>
 80156b8:	f7f1 fe46 	bl	8007348 <__aeabi_d2iz>
 80156bc:	1c65      	adds	r5, r4, #1
 80156be:	ab0e      	add	r3, sp, #56	; 0x38
 80156c0:	f10a 0a18 	add.w	sl, sl, #24
 80156c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80156c8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80156cc:	e719      	b.n	8015502 <__kernel_rem_pio2+0x292>
 80156ce:	4630      	mov	r0, r6
 80156d0:	4639      	mov	r1, r7
 80156d2:	f7f1 fe39 	bl	8007348 <__aeabi_d2iz>
 80156d6:	ab0e      	add	r3, sp, #56	; 0x38
 80156d8:	4625      	mov	r5, r4
 80156da:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80156de:	e710      	b.n	8015502 <__kernel_rem_pio2+0x292>
 80156e0:	ab0e      	add	r3, sp, #56	; 0x38
 80156e2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80156e6:	f7f1 fb15 	bl	8006d14 <__aeabi_i2d>
 80156ea:	4642      	mov	r2, r8
 80156ec:	464b      	mov	r3, r9
 80156ee:	f7f1 fb7b 	bl	8006de8 <__aeabi_dmul>
 80156f2:	2200      	movs	r2, #0
 80156f4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80156f8:	4b7c      	ldr	r3, [pc, #496]	; (80158ec <__kernel_rem_pio2+0x67c>)
 80156fa:	4640      	mov	r0, r8
 80156fc:	4649      	mov	r1, r9
 80156fe:	f7f1 fb73 	bl	8006de8 <__aeabi_dmul>
 8015702:	3f01      	subs	r7, #1
 8015704:	4680      	mov	r8, r0
 8015706:	4689      	mov	r9, r1
 8015708:	e708      	b.n	801551c <__kernel_rem_pio2+0x2ac>
 801570a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015712:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8015716:	f7f1 fb67 	bl	8006de8 <__aeabi_dmul>
 801571a:	4602      	mov	r2, r0
 801571c:	460b      	mov	r3, r1
 801571e:	4640      	mov	r0, r8
 8015720:	4649      	mov	r1, r9
 8015722:	f7f1 f9ab 	bl	8006a7c <__adddf3>
 8015726:	3701      	adds	r7, #1
 8015728:	4680      	mov	r8, r0
 801572a:	4689      	mov	r9, r1
 801572c:	9b04      	ldr	r3, [sp, #16]
 801572e:	429f      	cmp	r7, r3
 8015730:	dc01      	bgt.n	8015736 <__kernel_rem_pio2+0x4c6>
 8015732:	45ba      	cmp	sl, r7
 8015734:	dae9      	bge.n	801570a <__kernel_rem_pio2+0x49a>
 8015736:	ab4a      	add	r3, sp, #296	; 0x128
 8015738:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801573c:	e9c3 8900 	strd	r8, r9, [r3]
 8015740:	f10a 0a01 	add.w	sl, sl, #1
 8015744:	3e08      	subs	r6, #8
 8015746:	e6f0      	b.n	801552a <__kernel_rem_pio2+0x2ba>
 8015748:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801574a:	2b03      	cmp	r3, #3
 801574c:	d85b      	bhi.n	8015806 <__kernel_rem_pio2+0x596>
 801574e:	e8df f003 	tbb	[pc, r3]
 8015752:	264a      	.short	0x264a
 8015754:	0226      	.short	0x0226
 8015756:	ab9a      	add	r3, sp, #616	; 0x268
 8015758:	441c      	add	r4, r3
 801575a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801575e:	46a2      	mov	sl, r4
 8015760:	46ab      	mov	fp, r5
 8015762:	f1bb 0f00 	cmp.w	fp, #0
 8015766:	dc6c      	bgt.n	8015842 <__kernel_rem_pio2+0x5d2>
 8015768:	46a2      	mov	sl, r4
 801576a:	46ab      	mov	fp, r5
 801576c:	f1bb 0f01 	cmp.w	fp, #1
 8015770:	f300 8086 	bgt.w	8015880 <__kernel_rem_pio2+0x610>
 8015774:	2000      	movs	r0, #0
 8015776:	2100      	movs	r1, #0
 8015778:	2d01      	cmp	r5, #1
 801577a:	f300 80a0 	bgt.w	80158be <__kernel_rem_pio2+0x64e>
 801577e:	9b02      	ldr	r3, [sp, #8]
 8015780:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8015784:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8015788:	2b00      	cmp	r3, #0
 801578a:	f040 809e 	bne.w	80158ca <__kernel_rem_pio2+0x65a>
 801578e:	9b01      	ldr	r3, [sp, #4]
 8015790:	e9c3 7800 	strd	r7, r8, [r3]
 8015794:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8015798:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801579c:	e033      	b.n	8015806 <__kernel_rem_pio2+0x596>
 801579e:	3408      	adds	r4, #8
 80157a0:	ab4a      	add	r3, sp, #296	; 0x128
 80157a2:	441c      	add	r4, r3
 80157a4:	462e      	mov	r6, r5
 80157a6:	2000      	movs	r0, #0
 80157a8:	2100      	movs	r1, #0
 80157aa:	2e00      	cmp	r6, #0
 80157ac:	da3a      	bge.n	8015824 <__kernel_rem_pio2+0x5b4>
 80157ae:	9b02      	ldr	r3, [sp, #8]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d03d      	beq.n	8015830 <__kernel_rem_pio2+0x5c0>
 80157b4:	4602      	mov	r2, r0
 80157b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80157ba:	9c01      	ldr	r4, [sp, #4]
 80157bc:	e9c4 2300 	strd	r2, r3, [r4]
 80157c0:	4602      	mov	r2, r0
 80157c2:	460b      	mov	r3, r1
 80157c4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80157c8:	f7f1 f956 	bl	8006a78 <__aeabi_dsub>
 80157cc:	ae4c      	add	r6, sp, #304	; 0x130
 80157ce:	2401      	movs	r4, #1
 80157d0:	42a5      	cmp	r5, r4
 80157d2:	da30      	bge.n	8015836 <__kernel_rem_pio2+0x5c6>
 80157d4:	9b02      	ldr	r3, [sp, #8]
 80157d6:	b113      	cbz	r3, 80157de <__kernel_rem_pio2+0x56e>
 80157d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80157dc:	4619      	mov	r1, r3
 80157de:	9b01      	ldr	r3, [sp, #4]
 80157e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80157e4:	e00f      	b.n	8015806 <__kernel_rem_pio2+0x596>
 80157e6:	ab9a      	add	r3, sp, #616	; 0x268
 80157e8:	441c      	add	r4, r3
 80157ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80157ee:	2000      	movs	r0, #0
 80157f0:	2100      	movs	r1, #0
 80157f2:	2d00      	cmp	r5, #0
 80157f4:	da10      	bge.n	8015818 <__kernel_rem_pio2+0x5a8>
 80157f6:	9b02      	ldr	r3, [sp, #8]
 80157f8:	b113      	cbz	r3, 8015800 <__kernel_rem_pio2+0x590>
 80157fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80157fe:	4619      	mov	r1, r3
 8015800:	9b01      	ldr	r3, [sp, #4]
 8015802:	e9c3 0100 	strd	r0, r1, [r3]
 8015806:	9b06      	ldr	r3, [sp, #24]
 8015808:	f003 0007 	and.w	r0, r3, #7
 801580c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8015810:	ecbd 8b02 	vpop	{d8}
 8015814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015818:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801581c:	f7f1 f92e 	bl	8006a7c <__adddf3>
 8015820:	3d01      	subs	r5, #1
 8015822:	e7e6      	b.n	80157f2 <__kernel_rem_pio2+0x582>
 8015824:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015828:	f7f1 f928 	bl	8006a7c <__adddf3>
 801582c:	3e01      	subs	r6, #1
 801582e:	e7bc      	b.n	80157aa <__kernel_rem_pio2+0x53a>
 8015830:	4602      	mov	r2, r0
 8015832:	460b      	mov	r3, r1
 8015834:	e7c1      	b.n	80157ba <__kernel_rem_pio2+0x54a>
 8015836:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801583a:	f7f1 f91f 	bl	8006a7c <__adddf3>
 801583e:	3401      	adds	r4, #1
 8015840:	e7c6      	b.n	80157d0 <__kernel_rem_pio2+0x560>
 8015842:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8015846:	ed3a 7b02 	vldmdb	sl!, {d7}
 801584a:	4640      	mov	r0, r8
 801584c:	ec53 2b17 	vmov	r2, r3, d7
 8015850:	4649      	mov	r1, r9
 8015852:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015856:	f7f1 f911 	bl	8006a7c <__adddf3>
 801585a:	4602      	mov	r2, r0
 801585c:	460b      	mov	r3, r1
 801585e:	4606      	mov	r6, r0
 8015860:	460f      	mov	r7, r1
 8015862:	4640      	mov	r0, r8
 8015864:	4649      	mov	r1, r9
 8015866:	f7f1 f907 	bl	8006a78 <__aeabi_dsub>
 801586a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801586e:	f7f1 f905 	bl	8006a7c <__adddf3>
 8015872:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8015876:	e9ca 0100 	strd	r0, r1, [sl]
 801587a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801587e:	e770      	b.n	8015762 <__kernel_rem_pio2+0x4f2>
 8015880:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8015884:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015888:	4630      	mov	r0, r6
 801588a:	ec53 2b17 	vmov	r2, r3, d7
 801588e:	4639      	mov	r1, r7
 8015890:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015894:	f7f1 f8f2 	bl	8006a7c <__adddf3>
 8015898:	4602      	mov	r2, r0
 801589a:	460b      	mov	r3, r1
 801589c:	4680      	mov	r8, r0
 801589e:	4689      	mov	r9, r1
 80158a0:	4630      	mov	r0, r6
 80158a2:	4639      	mov	r1, r7
 80158a4:	f7f1 f8e8 	bl	8006a78 <__aeabi_dsub>
 80158a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80158ac:	f7f1 f8e6 	bl	8006a7c <__adddf3>
 80158b0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80158b4:	e9ca 0100 	strd	r0, r1, [sl]
 80158b8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80158bc:	e756      	b.n	801576c <__kernel_rem_pio2+0x4fc>
 80158be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80158c2:	f7f1 f8db 	bl	8006a7c <__adddf3>
 80158c6:	3d01      	subs	r5, #1
 80158c8:	e756      	b.n	8015778 <__kernel_rem_pio2+0x508>
 80158ca:	9b01      	ldr	r3, [sp, #4]
 80158cc:	9a01      	ldr	r2, [sp, #4]
 80158ce:	601f      	str	r7, [r3, #0]
 80158d0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80158d4:	605c      	str	r4, [r3, #4]
 80158d6:	609d      	str	r5, [r3, #8]
 80158d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80158dc:	60d3      	str	r3, [r2, #12]
 80158de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80158e2:	6110      	str	r0, [r2, #16]
 80158e4:	6153      	str	r3, [r2, #20]
 80158e6:	e78e      	b.n	8015806 <__kernel_rem_pio2+0x596>
 80158e8:	41700000 	.word	0x41700000
 80158ec:	3e700000 	.word	0x3e700000

080158f0 <__kernel_sin>:
 80158f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158f4:	ec55 4b10 	vmov	r4, r5, d0
 80158f8:	b085      	sub	sp, #20
 80158fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80158fe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015902:	ed8d 1b00 	vstr	d1, [sp]
 8015906:	9002      	str	r0, [sp, #8]
 8015908:	da06      	bge.n	8015918 <__kernel_sin+0x28>
 801590a:	ee10 0a10 	vmov	r0, s0
 801590e:	4629      	mov	r1, r5
 8015910:	f7f1 fd1a 	bl	8007348 <__aeabi_d2iz>
 8015914:	2800      	cmp	r0, #0
 8015916:	d051      	beq.n	80159bc <__kernel_sin+0xcc>
 8015918:	4622      	mov	r2, r4
 801591a:	462b      	mov	r3, r5
 801591c:	4620      	mov	r0, r4
 801591e:	4629      	mov	r1, r5
 8015920:	f7f1 fa62 	bl	8006de8 <__aeabi_dmul>
 8015924:	4682      	mov	sl, r0
 8015926:	468b      	mov	fp, r1
 8015928:	4602      	mov	r2, r0
 801592a:	460b      	mov	r3, r1
 801592c:	4620      	mov	r0, r4
 801592e:	4629      	mov	r1, r5
 8015930:	f7f1 fa5a 	bl	8006de8 <__aeabi_dmul>
 8015934:	a341      	add	r3, pc, #260	; (adr r3, 8015a3c <__kernel_sin+0x14c>)
 8015936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801593a:	4680      	mov	r8, r0
 801593c:	4689      	mov	r9, r1
 801593e:	4650      	mov	r0, sl
 8015940:	4659      	mov	r1, fp
 8015942:	f7f1 fa51 	bl	8006de8 <__aeabi_dmul>
 8015946:	a33f      	add	r3, pc, #252	; (adr r3, 8015a44 <__kernel_sin+0x154>)
 8015948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801594c:	f7f1 f894 	bl	8006a78 <__aeabi_dsub>
 8015950:	4652      	mov	r2, sl
 8015952:	465b      	mov	r3, fp
 8015954:	f7f1 fa48 	bl	8006de8 <__aeabi_dmul>
 8015958:	a33c      	add	r3, pc, #240	; (adr r3, 8015a4c <__kernel_sin+0x15c>)
 801595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801595e:	f7f1 f88d 	bl	8006a7c <__adddf3>
 8015962:	4652      	mov	r2, sl
 8015964:	465b      	mov	r3, fp
 8015966:	f7f1 fa3f 	bl	8006de8 <__aeabi_dmul>
 801596a:	a33a      	add	r3, pc, #232	; (adr r3, 8015a54 <__kernel_sin+0x164>)
 801596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015970:	f7f1 f882 	bl	8006a78 <__aeabi_dsub>
 8015974:	4652      	mov	r2, sl
 8015976:	465b      	mov	r3, fp
 8015978:	f7f1 fa36 	bl	8006de8 <__aeabi_dmul>
 801597c:	a337      	add	r3, pc, #220	; (adr r3, 8015a5c <__kernel_sin+0x16c>)
 801597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015982:	f7f1 f87b 	bl	8006a7c <__adddf3>
 8015986:	9b02      	ldr	r3, [sp, #8]
 8015988:	4606      	mov	r6, r0
 801598a:	460f      	mov	r7, r1
 801598c:	b9db      	cbnz	r3, 80159c6 <__kernel_sin+0xd6>
 801598e:	4602      	mov	r2, r0
 8015990:	460b      	mov	r3, r1
 8015992:	4650      	mov	r0, sl
 8015994:	4659      	mov	r1, fp
 8015996:	f7f1 fa27 	bl	8006de8 <__aeabi_dmul>
 801599a:	a325      	add	r3, pc, #148	; (adr r3, 8015a30 <__kernel_sin+0x140>)
 801599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159a0:	f7f1 f86a 	bl	8006a78 <__aeabi_dsub>
 80159a4:	4642      	mov	r2, r8
 80159a6:	464b      	mov	r3, r9
 80159a8:	f7f1 fa1e 	bl	8006de8 <__aeabi_dmul>
 80159ac:	4602      	mov	r2, r0
 80159ae:	460b      	mov	r3, r1
 80159b0:	4620      	mov	r0, r4
 80159b2:	4629      	mov	r1, r5
 80159b4:	f7f1 f862 	bl	8006a7c <__adddf3>
 80159b8:	4604      	mov	r4, r0
 80159ba:	460d      	mov	r5, r1
 80159bc:	ec45 4b10 	vmov	d0, r4, r5
 80159c0:	b005      	add	sp, #20
 80159c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159c6:	2200      	movs	r2, #0
 80159c8:	4b1b      	ldr	r3, [pc, #108]	; (8015a38 <__kernel_sin+0x148>)
 80159ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80159ce:	f7f1 fa0b 	bl	8006de8 <__aeabi_dmul>
 80159d2:	4632      	mov	r2, r6
 80159d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80159d8:	463b      	mov	r3, r7
 80159da:	4640      	mov	r0, r8
 80159dc:	4649      	mov	r1, r9
 80159de:	f7f1 fa03 	bl	8006de8 <__aeabi_dmul>
 80159e2:	4602      	mov	r2, r0
 80159e4:	460b      	mov	r3, r1
 80159e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80159ea:	f7f1 f845 	bl	8006a78 <__aeabi_dsub>
 80159ee:	4652      	mov	r2, sl
 80159f0:	465b      	mov	r3, fp
 80159f2:	f7f1 f9f9 	bl	8006de8 <__aeabi_dmul>
 80159f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80159fa:	f7f1 f83d 	bl	8006a78 <__aeabi_dsub>
 80159fe:	a30c      	add	r3, pc, #48	; (adr r3, 8015a30 <__kernel_sin+0x140>)
 8015a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a04:	4606      	mov	r6, r0
 8015a06:	460f      	mov	r7, r1
 8015a08:	4640      	mov	r0, r8
 8015a0a:	4649      	mov	r1, r9
 8015a0c:	f7f1 f9ec 	bl	8006de8 <__aeabi_dmul>
 8015a10:	4602      	mov	r2, r0
 8015a12:	460b      	mov	r3, r1
 8015a14:	4630      	mov	r0, r6
 8015a16:	4639      	mov	r1, r7
 8015a18:	f7f1 f830 	bl	8006a7c <__adddf3>
 8015a1c:	4602      	mov	r2, r0
 8015a1e:	460b      	mov	r3, r1
 8015a20:	4620      	mov	r0, r4
 8015a22:	4629      	mov	r1, r5
 8015a24:	f7f1 f828 	bl	8006a78 <__aeabi_dsub>
 8015a28:	e7c6      	b.n	80159b8 <__kernel_sin+0xc8>
 8015a2a:	bf00      	nop
 8015a2c:	f3af 8000 	nop.w
 8015a30:	55555549 	.word	0x55555549
 8015a34:	3fc55555 	.word	0x3fc55555
 8015a38:	3fe00000 	.word	0x3fe00000
 8015a3c:	5acfd57c 	.word	0x5acfd57c
 8015a40:	3de5d93a 	.word	0x3de5d93a
 8015a44:	8a2b9ceb 	.word	0x8a2b9ceb
 8015a48:	3e5ae5e6 	.word	0x3e5ae5e6
 8015a4c:	57b1fe7d 	.word	0x57b1fe7d
 8015a50:	3ec71de3 	.word	0x3ec71de3
 8015a54:	19c161d5 	.word	0x19c161d5
 8015a58:	3f2a01a0 	.word	0x3f2a01a0
 8015a5c:	1110f8a6 	.word	0x1110f8a6
 8015a60:	3f811111 	.word	0x3f811111

08015a64 <__kernel_cosf>:
 8015a64:	ee10 3a10 	vmov	r3, s0
 8015a68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015a6c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8015a70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015a74:	da05      	bge.n	8015a82 <__kernel_cosf+0x1e>
 8015a76:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015a7a:	ee17 2a90 	vmov	r2, s15
 8015a7e:	2a00      	cmp	r2, #0
 8015a80:	d03b      	beq.n	8015afa <__kernel_cosf+0x96>
 8015a82:	ee20 6a00 	vmul.f32	s12, s0, s0
 8015a86:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015a8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8015b00 <__kernel_cosf+0x9c>
 8015a8e:	4a1d      	ldr	r2, [pc, #116]	; (8015b04 <__kernel_cosf+0xa0>)
 8015a90:	ee66 7a07 	vmul.f32	s15, s12, s14
 8015a94:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8015b08 <__kernel_cosf+0xa4>
 8015a98:	eea6 7a25 	vfma.f32	s14, s12, s11
 8015a9c:	4293      	cmp	r3, r2
 8015a9e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8015b0c <__kernel_cosf+0xa8>
 8015aa2:	eee7 5a06 	vfma.f32	s11, s14, s12
 8015aa6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8015b10 <__kernel_cosf+0xac>
 8015aaa:	eea5 7a86 	vfma.f32	s14, s11, s12
 8015aae:	eddf 5a19 	vldr	s11, [pc, #100]	; 8015b14 <__kernel_cosf+0xb0>
 8015ab2:	eee7 5a06 	vfma.f32	s11, s14, s12
 8015ab6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8015b18 <__kernel_cosf+0xb4>
 8015aba:	eea5 7a86 	vfma.f32	s14, s11, s12
 8015abe:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8015ac2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015ac6:	eee6 0a07 	vfma.f32	s1, s12, s14
 8015aca:	dc04      	bgt.n	8015ad6 <__kernel_cosf+0x72>
 8015acc:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8015ad0:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8015ad4:	4770      	bx	lr
 8015ad6:	4a11      	ldr	r2, [pc, #68]	; (8015b1c <__kernel_cosf+0xb8>)
 8015ad8:	4293      	cmp	r3, r2
 8015ada:	bfda      	itte	le
 8015adc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8015ae0:	ee07 3a10 	vmovle	s14, r3
 8015ae4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8015ae8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015aec:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8015af0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015af4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015af8:	4770      	bx	lr
 8015afa:	eeb0 0a66 	vmov.f32	s0, s13
 8015afe:	4770      	bx	lr
 8015b00:	ad47d74e 	.word	0xad47d74e
 8015b04:	3e999999 	.word	0x3e999999
 8015b08:	310f74f6 	.word	0x310f74f6
 8015b0c:	b493f27c 	.word	0xb493f27c
 8015b10:	37d00d01 	.word	0x37d00d01
 8015b14:	bab60b61 	.word	0xbab60b61
 8015b18:	3d2aaaab 	.word	0x3d2aaaab
 8015b1c:	3f480000 	.word	0x3f480000

08015b20 <__kernel_rem_pio2f>:
 8015b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b24:	ed2d 8b04 	vpush	{d8-d9}
 8015b28:	b0d7      	sub	sp, #348	; 0x15c
 8015b2a:	469b      	mov	fp, r3
 8015b2c:	460e      	mov	r6, r1
 8015b2e:	4bbe      	ldr	r3, [pc, #760]	; (8015e28 <__kernel_rem_pio2f+0x308>)
 8015b30:	9964      	ldr	r1, [sp, #400]	; 0x190
 8015b32:	9002      	str	r0, [sp, #8]
 8015b34:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8015b38:	9865      	ldr	r0, [sp, #404]	; 0x194
 8015b3a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8015e38 <__kernel_rem_pio2f+0x318>
 8015b3e:	1ed1      	subs	r1, r2, #3
 8015b40:	2308      	movs	r3, #8
 8015b42:	fb91 f1f3 	sdiv	r1, r1, r3
 8015b46:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8015b4a:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 8015b4e:	1c4c      	adds	r4, r1, #1
 8015b50:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8015b54:	eba1 050a 	sub.w	r5, r1, sl
 8015b58:	aa1a      	add	r2, sp, #104	; 0x68
 8015b5a:	eb09 070a 	add.w	r7, r9, sl
 8015b5e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8015b62:	4696      	mov	lr, r2
 8015b64:	2300      	movs	r3, #0
 8015b66:	42bb      	cmp	r3, r7
 8015b68:	dd0f      	ble.n	8015b8a <__kernel_rem_pio2f+0x6a>
 8015b6a:	af42      	add	r7, sp, #264	; 0x108
 8015b6c:	2200      	movs	r2, #0
 8015b6e:	454a      	cmp	r2, r9
 8015b70:	dc27      	bgt.n	8015bc2 <__kernel_rem_pio2f+0xa2>
 8015b72:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8015b76:	eb0b 0302 	add.w	r3, fp, r2
 8015b7a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8015b7e:	9d02      	ldr	r5, [sp, #8]
 8015b80:	eddf 7aad 	vldr	s15, [pc, #692]	; 8015e38 <__kernel_rem_pio2f+0x318>
 8015b84:	f04f 0c00 	mov.w	ip, #0
 8015b88:	e015      	b.n	8015bb6 <__kernel_rem_pio2f+0x96>
 8015b8a:	42dd      	cmn	r5, r3
 8015b8c:	bf5d      	ittte	pl
 8015b8e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8015b92:	ee07 2a90 	vmovpl	s15, r2
 8015b96:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8015b9a:	eef0 7a47 	vmovmi.f32	s15, s14
 8015b9e:	ecee 7a01 	vstmia	lr!, {s15}
 8015ba2:	3301      	adds	r3, #1
 8015ba4:	e7df      	b.n	8015b66 <__kernel_rem_pio2f+0x46>
 8015ba6:	ecf5 6a01 	vldmia	r5!, {s13}
 8015baa:	ed33 7a01 	vldmdb	r3!, {s14}
 8015bae:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015bb2:	f10c 0c01 	add.w	ip, ip, #1
 8015bb6:	45d4      	cmp	ip, sl
 8015bb8:	ddf5      	ble.n	8015ba6 <__kernel_rem_pio2f+0x86>
 8015bba:	ece7 7a01 	vstmia	r7!, {s15}
 8015bbe:	3201      	adds	r2, #1
 8015bc0:	e7d5      	b.n	8015b6e <__kernel_rem_pio2f+0x4e>
 8015bc2:	ab06      	add	r3, sp, #24
 8015bc4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8015bc8:	9304      	str	r3, [sp, #16]
 8015bca:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8015e34 <__kernel_rem_pio2f+0x314>
 8015bce:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8015e30 <__kernel_rem_pio2f+0x310>
 8015bd2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8015bd6:	9303      	str	r3, [sp, #12]
 8015bd8:	464d      	mov	r5, r9
 8015bda:	ab56      	add	r3, sp, #344	; 0x158
 8015bdc:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8015be0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8015be4:	3f01      	subs	r7, #1
 8015be6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8015bea:	00bf      	lsls	r7, r7, #2
 8015bec:	ab56      	add	r3, sp, #344	; 0x158
 8015bee:	19da      	adds	r2, r3, r7
 8015bf0:	3a4c      	subs	r2, #76	; 0x4c
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	1ae9      	subs	r1, r5, r3
 8015bf6:	2900      	cmp	r1, #0
 8015bf8:	dc4c      	bgt.n	8015c94 <__kernel_rem_pio2f+0x174>
 8015bfa:	4620      	mov	r0, r4
 8015bfc:	f000 fd60 	bl	80166c0 <scalbnf>
 8015c00:	eeb0 8a40 	vmov.f32	s16, s0
 8015c04:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8015c08:	ee28 0a00 	vmul.f32	s0, s16, s0
 8015c0c:	f7fc fdac 	bl	8012768 <floorf>
 8015c10:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8015c14:	eea0 8a67 	vfms.f32	s16, s0, s15
 8015c18:	2c00      	cmp	r4, #0
 8015c1a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8015c1e:	edcd 7a01 	vstr	s15, [sp, #4]
 8015c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015c26:	ee38 8a67 	vsub.f32	s16, s16, s15
 8015c2a:	dd48      	ble.n	8015cbe <__kernel_rem_pio2f+0x19e>
 8015c2c:	1e69      	subs	r1, r5, #1
 8015c2e:	ab06      	add	r3, sp, #24
 8015c30:	f1c4 0008 	rsb	r0, r4, #8
 8015c34:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8015c38:	9a01      	ldr	r2, [sp, #4]
 8015c3a:	fa4c f300 	asr.w	r3, ip, r0
 8015c3e:	441a      	add	r2, r3
 8015c40:	4083      	lsls	r3, r0
 8015c42:	9201      	str	r2, [sp, #4]
 8015c44:	ebac 0203 	sub.w	r2, ip, r3
 8015c48:	ab06      	add	r3, sp, #24
 8015c4a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8015c4e:	f1c4 0307 	rsb	r3, r4, #7
 8015c52:	fa42 f803 	asr.w	r8, r2, r3
 8015c56:	f1b8 0f00 	cmp.w	r8, #0
 8015c5a:	dd41      	ble.n	8015ce0 <__kernel_rem_pio2f+0x1c0>
 8015c5c:	9b01      	ldr	r3, [sp, #4]
 8015c5e:	2000      	movs	r0, #0
 8015c60:	3301      	adds	r3, #1
 8015c62:	9301      	str	r3, [sp, #4]
 8015c64:	4601      	mov	r1, r0
 8015c66:	4285      	cmp	r5, r0
 8015c68:	dc6d      	bgt.n	8015d46 <__kernel_rem_pio2f+0x226>
 8015c6a:	2c00      	cmp	r4, #0
 8015c6c:	dd04      	ble.n	8015c78 <__kernel_rem_pio2f+0x158>
 8015c6e:	2c01      	cmp	r4, #1
 8015c70:	d07e      	beq.n	8015d70 <__kernel_rem_pio2f+0x250>
 8015c72:	2c02      	cmp	r4, #2
 8015c74:	f000 8086 	beq.w	8015d84 <__kernel_rem_pio2f+0x264>
 8015c78:	f1b8 0f02 	cmp.w	r8, #2
 8015c7c:	d130      	bne.n	8015ce0 <__kernel_rem_pio2f+0x1c0>
 8015c7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015c82:	ee30 8a48 	vsub.f32	s16, s0, s16
 8015c86:	b359      	cbz	r1, 8015ce0 <__kernel_rem_pio2f+0x1c0>
 8015c88:	4620      	mov	r0, r4
 8015c8a:	f000 fd19 	bl	80166c0 <scalbnf>
 8015c8e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8015c92:	e025      	b.n	8015ce0 <__kernel_rem_pio2f+0x1c0>
 8015c94:	ee60 7a28 	vmul.f32	s15, s0, s17
 8015c98:	a806      	add	r0, sp, #24
 8015c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015ca2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8015ca6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8015caa:	ee10 1a10 	vmov	r1, s0
 8015cae:	ed32 0a01 	vldmdb	r2!, {s0}
 8015cb2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8015cb6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8015cba:	3301      	adds	r3, #1
 8015cbc:	e79a      	b.n	8015bf4 <__kernel_rem_pio2f+0xd4>
 8015cbe:	d106      	bne.n	8015cce <__kernel_rem_pio2f+0x1ae>
 8015cc0:	1e6b      	subs	r3, r5, #1
 8015cc2:	aa06      	add	r2, sp, #24
 8015cc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015cc8:	ea4f 2822 	mov.w	r8, r2, asr #8
 8015ccc:	e7c3      	b.n	8015c56 <__kernel_rem_pio2f+0x136>
 8015cce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015cd2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cda:	da31      	bge.n	8015d40 <__kernel_rem_pio2f+0x220>
 8015cdc:	f04f 0800 	mov.w	r8, #0
 8015ce0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ce8:	f040 80a8 	bne.w	8015e3c <__kernel_rem_pio2f+0x31c>
 8015cec:	1e6b      	subs	r3, r5, #1
 8015cee:	4618      	mov	r0, r3
 8015cf0:	2200      	movs	r2, #0
 8015cf2:	4548      	cmp	r0, r9
 8015cf4:	da4d      	bge.n	8015d92 <__kernel_rem_pio2f+0x272>
 8015cf6:	2a00      	cmp	r2, #0
 8015cf8:	f000 8087 	beq.w	8015e0a <__kernel_rem_pio2f+0x2ea>
 8015cfc:	aa06      	add	r2, sp, #24
 8015cfe:	3c08      	subs	r4, #8
 8015d00:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8015d04:	2900      	cmp	r1, #0
 8015d06:	f000 808d 	beq.w	8015e24 <__kernel_rem_pio2f+0x304>
 8015d0a:	4620      	mov	r0, r4
 8015d0c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015d10:	9302      	str	r3, [sp, #8]
 8015d12:	f000 fcd5 	bl	80166c0 <scalbnf>
 8015d16:	9b02      	ldr	r3, [sp, #8]
 8015d18:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8015e34 <__kernel_rem_pio2f+0x314>
 8015d1c:	0099      	lsls	r1, r3, #2
 8015d1e:	aa42      	add	r2, sp, #264	; 0x108
 8015d20:	1850      	adds	r0, r2, r1
 8015d22:	1d05      	adds	r5, r0, #4
 8015d24:	461c      	mov	r4, r3
 8015d26:	2c00      	cmp	r4, #0
 8015d28:	f280 80b8 	bge.w	8015e9c <__kernel_rem_pio2f+0x37c>
 8015d2c:	2500      	movs	r5, #0
 8015d2e:	1b5c      	subs	r4, r3, r5
 8015d30:	2c00      	cmp	r4, #0
 8015d32:	f2c0 80d8 	blt.w	8015ee6 <__kernel_rem_pio2f+0x3c6>
 8015d36:	4f3d      	ldr	r7, [pc, #244]	; (8015e2c <__kernel_rem_pio2f+0x30c>)
 8015d38:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8015e38 <__kernel_rem_pio2f+0x318>
 8015d3c:	2400      	movs	r4, #0
 8015d3e:	e0c6      	b.n	8015ece <__kernel_rem_pio2f+0x3ae>
 8015d40:	f04f 0802 	mov.w	r8, #2
 8015d44:	e78a      	b.n	8015c5c <__kernel_rem_pio2f+0x13c>
 8015d46:	ab06      	add	r3, sp, #24
 8015d48:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015d4c:	b949      	cbnz	r1, 8015d62 <__kernel_rem_pio2f+0x242>
 8015d4e:	b12b      	cbz	r3, 8015d5c <__kernel_rem_pio2f+0x23c>
 8015d50:	aa06      	add	r2, sp, #24
 8015d52:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8015d56:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8015d5a:	2301      	movs	r3, #1
 8015d5c:	3001      	adds	r0, #1
 8015d5e:	4619      	mov	r1, r3
 8015d60:	e781      	b.n	8015c66 <__kernel_rem_pio2f+0x146>
 8015d62:	aa06      	add	r2, sp, #24
 8015d64:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8015d68:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8015d6c:	460b      	mov	r3, r1
 8015d6e:	e7f5      	b.n	8015d5c <__kernel_rem_pio2f+0x23c>
 8015d70:	1e68      	subs	r0, r5, #1
 8015d72:	ab06      	add	r3, sp, #24
 8015d74:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015d7c:	aa06      	add	r2, sp, #24
 8015d7e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8015d82:	e779      	b.n	8015c78 <__kernel_rem_pio2f+0x158>
 8015d84:	1e68      	subs	r0, r5, #1
 8015d86:	ab06      	add	r3, sp, #24
 8015d88:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015d90:	e7f4      	b.n	8015d7c <__kernel_rem_pio2f+0x25c>
 8015d92:	a906      	add	r1, sp, #24
 8015d94:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8015d98:	3801      	subs	r0, #1
 8015d9a:	430a      	orrs	r2, r1
 8015d9c:	e7a9      	b.n	8015cf2 <__kernel_rem_pio2f+0x1d2>
 8015d9e:	f10c 0c01 	add.w	ip, ip, #1
 8015da2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015da6:	2a00      	cmp	r2, #0
 8015da8:	d0f9      	beq.n	8015d9e <__kernel_rem_pio2f+0x27e>
 8015daa:	eb0b 0305 	add.w	r3, fp, r5
 8015dae:	aa1a      	add	r2, sp, #104	; 0x68
 8015db0:	009b      	lsls	r3, r3, #2
 8015db2:	1898      	adds	r0, r3, r2
 8015db4:	3004      	adds	r0, #4
 8015db6:	1c69      	adds	r1, r5, #1
 8015db8:	3704      	adds	r7, #4
 8015dba:	2200      	movs	r2, #0
 8015dbc:	4465      	add	r5, ip
 8015dbe:	9005      	str	r0, [sp, #20]
 8015dc0:	428d      	cmp	r5, r1
 8015dc2:	f6ff af0a 	blt.w	8015bda <__kernel_rem_pio2f+0xba>
 8015dc6:	a81a      	add	r0, sp, #104	; 0x68
 8015dc8:	eb02 0c03 	add.w	ip, r2, r3
 8015dcc:	4484      	add	ip, r0
 8015dce:	9803      	ldr	r0, [sp, #12]
 8015dd0:	f8dd e008 	ldr.w	lr, [sp, #8]
 8015dd4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8015dd8:	9001      	str	r0, [sp, #4]
 8015dda:	ee07 0a90 	vmov	s15, r0
 8015dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015de2:	9805      	ldr	r0, [sp, #20]
 8015de4:	edcc 7a00 	vstr	s15, [ip]
 8015de8:	eddf 7a13 	vldr	s15, [pc, #76]	; 8015e38 <__kernel_rem_pio2f+0x318>
 8015dec:	eb00 0802 	add.w	r8, r0, r2
 8015df0:	f04f 0c00 	mov.w	ip, #0
 8015df4:	45d4      	cmp	ip, sl
 8015df6:	dd0c      	ble.n	8015e12 <__kernel_rem_pio2f+0x2f2>
 8015df8:	eb02 0c07 	add.w	ip, r2, r7
 8015dfc:	a842      	add	r0, sp, #264	; 0x108
 8015dfe:	4484      	add	ip, r0
 8015e00:	edcc 7a01 	vstr	s15, [ip, #4]
 8015e04:	3101      	adds	r1, #1
 8015e06:	3204      	adds	r2, #4
 8015e08:	e7da      	b.n	8015dc0 <__kernel_rem_pio2f+0x2a0>
 8015e0a:	9b04      	ldr	r3, [sp, #16]
 8015e0c:	f04f 0c01 	mov.w	ip, #1
 8015e10:	e7c7      	b.n	8015da2 <__kernel_rem_pio2f+0x282>
 8015e12:	ecfe 6a01 	vldmia	lr!, {s13}
 8015e16:	ed38 7a01 	vldmdb	r8!, {s14}
 8015e1a:	f10c 0c01 	add.w	ip, ip, #1
 8015e1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015e22:	e7e7      	b.n	8015df4 <__kernel_rem_pio2f+0x2d4>
 8015e24:	3b01      	subs	r3, #1
 8015e26:	e769      	b.n	8015cfc <__kernel_rem_pio2f+0x1dc>
 8015e28:	080a784c 	.word	0x080a784c
 8015e2c:	080a7820 	.word	0x080a7820
 8015e30:	43800000 	.word	0x43800000
 8015e34:	3b800000 	.word	0x3b800000
 8015e38:	00000000 	.word	0x00000000
 8015e3c:	4260      	negs	r0, r4
 8015e3e:	eeb0 0a48 	vmov.f32	s0, s16
 8015e42:	f000 fc3d 	bl	80166c0 <scalbnf>
 8015e46:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8015e30 <__kernel_rem_pio2f+0x310>
 8015e4a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8015e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e52:	db1a      	blt.n	8015e8a <__kernel_rem_pio2f+0x36a>
 8015e54:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8015e34 <__kernel_rem_pio2f+0x314>
 8015e58:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015e5c:	aa06      	add	r2, sp, #24
 8015e5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015e62:	a906      	add	r1, sp, #24
 8015e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015e68:	3408      	adds	r4, #8
 8015e6a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8015e6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015e72:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8015e76:	ee10 3a10 	vmov	r3, s0
 8015e7a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8015e7e:	1c6b      	adds	r3, r5, #1
 8015e80:	ee17 2a90 	vmov	r2, s15
 8015e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015e88:	e73f      	b.n	8015d0a <__kernel_rem_pio2f+0x1ea>
 8015e8a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8015e8e:	aa06      	add	r2, sp, #24
 8015e90:	ee10 3a10 	vmov	r3, s0
 8015e94:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8015e98:	462b      	mov	r3, r5
 8015e9a:	e736      	b.n	8015d0a <__kernel_rem_pio2f+0x1ea>
 8015e9c:	aa06      	add	r2, sp, #24
 8015e9e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8015ea2:	9202      	str	r2, [sp, #8]
 8015ea4:	ee07 2a90 	vmov	s15, r2
 8015ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015eac:	3c01      	subs	r4, #1
 8015eae:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015eb2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015eb6:	ed65 7a01 	vstmdb	r5!, {s15}
 8015eba:	e734      	b.n	8015d26 <__kernel_rem_pio2f+0x206>
 8015ebc:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8015ec0:	ecf7 6a01 	vldmia	r7!, {s13}
 8015ec4:	ed9c 7a00 	vldr	s14, [ip]
 8015ec8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015ecc:	3401      	adds	r4, #1
 8015ece:	454c      	cmp	r4, r9
 8015ed0:	dc01      	bgt.n	8015ed6 <__kernel_rem_pio2f+0x3b6>
 8015ed2:	42a5      	cmp	r5, r4
 8015ed4:	daf2      	bge.n	8015ebc <__kernel_rem_pio2f+0x39c>
 8015ed6:	aa56      	add	r2, sp, #344	; 0x158
 8015ed8:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8015edc:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8015ee0:	3501      	adds	r5, #1
 8015ee2:	3804      	subs	r0, #4
 8015ee4:	e723      	b.n	8015d2e <__kernel_rem_pio2f+0x20e>
 8015ee6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8015ee8:	2a03      	cmp	r2, #3
 8015eea:	d84d      	bhi.n	8015f88 <__kernel_rem_pio2f+0x468>
 8015eec:	e8df f002 	tbb	[pc, r2]
 8015ef0:	021f1f3e 	.word	0x021f1f3e
 8015ef4:	aa56      	add	r2, sp, #344	; 0x158
 8015ef6:	4411      	add	r1, r2
 8015ef8:	399c      	subs	r1, #156	; 0x9c
 8015efa:	4608      	mov	r0, r1
 8015efc:	461c      	mov	r4, r3
 8015efe:	2c00      	cmp	r4, #0
 8015f00:	dc5f      	bgt.n	8015fc2 <__kernel_rem_pio2f+0x4a2>
 8015f02:	4608      	mov	r0, r1
 8015f04:	461c      	mov	r4, r3
 8015f06:	2c01      	cmp	r4, #1
 8015f08:	dc6b      	bgt.n	8015fe2 <__kernel_rem_pio2f+0x4c2>
 8015f0a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8015e38 <__kernel_rem_pio2f+0x318>
 8015f0e:	2b01      	cmp	r3, #1
 8015f10:	dc77      	bgt.n	8016002 <__kernel_rem_pio2f+0x4e2>
 8015f12:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8015f16:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8015f1a:	f1b8 0f00 	cmp.w	r8, #0
 8015f1e:	d176      	bne.n	801600e <__kernel_rem_pio2f+0x4ee>
 8015f20:	edc6 6a00 	vstr	s13, [r6]
 8015f24:	ed86 7a01 	vstr	s14, [r6, #4]
 8015f28:	edc6 7a02 	vstr	s15, [r6, #8]
 8015f2c:	e02c      	b.n	8015f88 <__kernel_rem_pio2f+0x468>
 8015f2e:	aa56      	add	r2, sp, #344	; 0x158
 8015f30:	4411      	add	r1, r2
 8015f32:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8015e38 <__kernel_rem_pio2f+0x318>
 8015f36:	399c      	subs	r1, #156	; 0x9c
 8015f38:	4618      	mov	r0, r3
 8015f3a:	2800      	cmp	r0, #0
 8015f3c:	da32      	bge.n	8015fa4 <__kernel_rem_pio2f+0x484>
 8015f3e:	f1b8 0f00 	cmp.w	r8, #0
 8015f42:	d035      	beq.n	8015fb0 <__kernel_rem_pio2f+0x490>
 8015f44:	eef1 7a47 	vneg.f32	s15, s14
 8015f48:	edc6 7a00 	vstr	s15, [r6]
 8015f4c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8015f50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015f54:	a82f      	add	r0, sp, #188	; 0xbc
 8015f56:	2101      	movs	r1, #1
 8015f58:	428b      	cmp	r3, r1
 8015f5a:	da2c      	bge.n	8015fb6 <__kernel_rem_pio2f+0x496>
 8015f5c:	f1b8 0f00 	cmp.w	r8, #0
 8015f60:	d001      	beq.n	8015f66 <__kernel_rem_pio2f+0x446>
 8015f62:	eef1 7a67 	vneg.f32	s15, s15
 8015f66:	edc6 7a01 	vstr	s15, [r6, #4]
 8015f6a:	e00d      	b.n	8015f88 <__kernel_rem_pio2f+0x468>
 8015f6c:	aa56      	add	r2, sp, #344	; 0x158
 8015f6e:	4411      	add	r1, r2
 8015f70:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8015e38 <__kernel_rem_pio2f+0x318>
 8015f74:	399c      	subs	r1, #156	; 0x9c
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	da0e      	bge.n	8015f98 <__kernel_rem_pio2f+0x478>
 8015f7a:	f1b8 0f00 	cmp.w	r8, #0
 8015f7e:	d001      	beq.n	8015f84 <__kernel_rem_pio2f+0x464>
 8015f80:	eef1 7a67 	vneg.f32	s15, s15
 8015f84:	edc6 7a00 	vstr	s15, [r6]
 8015f88:	9b01      	ldr	r3, [sp, #4]
 8015f8a:	f003 0007 	and.w	r0, r3, #7
 8015f8e:	b057      	add	sp, #348	; 0x15c
 8015f90:	ecbd 8b04 	vpop	{d8-d9}
 8015f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f98:	ed31 7a01 	vldmdb	r1!, {s14}
 8015f9c:	3b01      	subs	r3, #1
 8015f9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015fa2:	e7e8      	b.n	8015f76 <__kernel_rem_pio2f+0x456>
 8015fa4:	ed71 7a01 	vldmdb	r1!, {s15}
 8015fa8:	3801      	subs	r0, #1
 8015faa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015fae:	e7c4      	b.n	8015f3a <__kernel_rem_pio2f+0x41a>
 8015fb0:	eef0 7a47 	vmov.f32	s15, s14
 8015fb4:	e7c8      	b.n	8015f48 <__kernel_rem_pio2f+0x428>
 8015fb6:	ecb0 7a01 	vldmia	r0!, {s14}
 8015fba:	3101      	adds	r1, #1
 8015fbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015fc0:	e7ca      	b.n	8015f58 <__kernel_rem_pio2f+0x438>
 8015fc2:	ed50 7a02 	vldr	s15, [r0, #-8]
 8015fc6:	ed70 6a01 	vldmdb	r0!, {s13}
 8015fca:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8015fce:	3c01      	subs	r4, #1
 8015fd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015fd4:	ed00 7a01 	vstr	s14, [r0, #-4]
 8015fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015fdc:	edc0 7a00 	vstr	s15, [r0]
 8015fe0:	e78d      	b.n	8015efe <__kernel_rem_pio2f+0x3de>
 8015fe2:	ed50 7a02 	vldr	s15, [r0, #-8]
 8015fe6:	ed70 6a01 	vldmdb	r0!, {s13}
 8015fea:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8015fee:	3c01      	subs	r4, #1
 8015ff0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015ff4:	ed00 7a01 	vstr	s14, [r0, #-4]
 8015ff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015ffc:	edc0 7a00 	vstr	s15, [r0]
 8016000:	e781      	b.n	8015f06 <__kernel_rem_pio2f+0x3e6>
 8016002:	ed31 7a01 	vldmdb	r1!, {s14}
 8016006:	3b01      	subs	r3, #1
 8016008:	ee77 7a87 	vadd.f32	s15, s15, s14
 801600c:	e77f      	b.n	8015f0e <__kernel_rem_pio2f+0x3ee>
 801600e:	eef1 6a66 	vneg.f32	s13, s13
 8016012:	eeb1 7a47 	vneg.f32	s14, s14
 8016016:	edc6 6a00 	vstr	s13, [r6]
 801601a:	ed86 7a01 	vstr	s14, [r6, #4]
 801601e:	eef1 7a67 	vneg.f32	s15, s15
 8016022:	e781      	b.n	8015f28 <__kernel_rem_pio2f+0x408>

08016024 <__kernel_sinf>:
 8016024:	ee10 3a10 	vmov	r3, s0
 8016028:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801602c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016030:	da04      	bge.n	801603c <__kernel_sinf+0x18>
 8016032:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016036:	ee17 3a90 	vmov	r3, s15
 801603a:	b35b      	cbz	r3, 8016094 <__kernel_sinf+0x70>
 801603c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016040:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016098 <__kernel_sinf+0x74>
 8016044:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801609c <__kernel_sinf+0x78>
 8016048:	eea7 6a27 	vfma.f32	s12, s14, s15
 801604c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80160a0 <__kernel_sinf+0x7c>
 8016050:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016054:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80160a4 <__kernel_sinf+0x80>
 8016058:	eea7 6a87 	vfma.f32	s12, s15, s14
 801605c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80160a8 <__kernel_sinf+0x84>
 8016060:	ee60 6a07 	vmul.f32	s13, s0, s14
 8016064:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016068:	b930      	cbnz	r0, 8016078 <__kernel_sinf+0x54>
 801606a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80160ac <__kernel_sinf+0x88>
 801606e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016072:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016076:	4770      	bx	lr
 8016078:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801607c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016080:	eee0 7a86 	vfma.f32	s15, s1, s12
 8016084:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8016088:	eddf 7a09 	vldr	s15, [pc, #36]	; 80160b0 <__kernel_sinf+0x8c>
 801608c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8016090:	ee30 0a60 	vsub.f32	s0, s0, s1
 8016094:	4770      	bx	lr
 8016096:	bf00      	nop
 8016098:	2f2ec9d3 	.word	0x2f2ec9d3
 801609c:	b2d72f34 	.word	0xb2d72f34
 80160a0:	3638ef1b 	.word	0x3638ef1b
 80160a4:	b9500d01 	.word	0xb9500d01
 80160a8:	3c088889 	.word	0x3c088889
 80160ac:	be2aaaab 	.word	0xbe2aaaab
 80160b0:	3e2aaaab 	.word	0x3e2aaaab

080160b4 <__kernel_tanf>:
 80160b4:	b508      	push	{r3, lr}
 80160b6:	ee10 3a10 	vmov	r3, s0
 80160ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80160be:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 80160c2:	eef0 7a40 	vmov.f32	s15, s0
 80160c6:	da17      	bge.n	80160f8 <__kernel_tanf+0x44>
 80160c8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80160cc:	ee17 1a10 	vmov	r1, s14
 80160d0:	bb41      	cbnz	r1, 8016124 <__kernel_tanf+0x70>
 80160d2:	1c43      	adds	r3, r0, #1
 80160d4:	4313      	orrs	r3, r2
 80160d6:	d108      	bne.n	80160ea <__kernel_tanf+0x36>
 80160d8:	f7fc fb3e 	bl	8012758 <fabsf>
 80160dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80160e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80160e4:	eeb0 0a67 	vmov.f32	s0, s15
 80160e8:	bd08      	pop	{r3, pc}
 80160ea:	2801      	cmp	r0, #1
 80160ec:	d0fa      	beq.n	80160e4 <__kernel_tanf+0x30>
 80160ee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80160f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80160f6:	e7f5      	b.n	80160e4 <__kernel_tanf+0x30>
 80160f8:	494e      	ldr	r1, [pc, #312]	; (8016234 <__kernel_tanf+0x180>)
 80160fa:	428a      	cmp	r2, r1
 80160fc:	dd12      	ble.n	8016124 <__kernel_tanf+0x70>
 80160fe:	2b00      	cmp	r3, #0
 8016100:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8016238 <__kernel_tanf+0x184>
 8016104:	bfb8      	it	lt
 8016106:	eef1 7a40 	vneglt.f32	s15, s0
 801610a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801610e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801623c <__kernel_tanf+0x188>
 8016112:	bfb8      	it	lt
 8016114:	eef1 0a60 	vneglt.f32	s1, s1
 8016118:	ee77 0a60 	vsub.f32	s1, s14, s1
 801611c:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8016120:	eddf 0a47 	vldr	s1, [pc, #284]	; 8016240 <__kernel_tanf+0x18c>
 8016124:	ed9f 6a47 	vldr	s12, [pc, #284]	; 8016244 <__kernel_tanf+0x190>
 8016128:	eddf 5a47 	vldr	s11, [pc, #284]	; 8016248 <__kernel_tanf+0x194>
 801612c:	ed9f 5a47 	vldr	s10, [pc, #284]	; 801624c <__kernel_tanf+0x198>
 8016130:	4940      	ldr	r1, [pc, #256]	; (8016234 <__kernel_tanf+0x180>)
 8016132:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8016136:	428a      	cmp	r2, r1
 8016138:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801613c:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8016140:	eee7 5a06 	vfma.f32	s11, s14, s12
 8016144:	ed9f 6a42 	vldr	s12, [pc, #264]	; 8016250 <__kernel_tanf+0x19c>
 8016148:	eea5 6a87 	vfma.f32	s12, s11, s14
 801614c:	eddf 5a41 	vldr	s11, [pc, #260]	; 8016254 <__kernel_tanf+0x1a0>
 8016150:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016154:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8016258 <__kernel_tanf+0x1a4>
 8016158:	eea5 6a87 	vfma.f32	s12, s11, s14
 801615c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801625c <__kernel_tanf+0x1a8>
 8016160:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016164:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8016260 <__kernel_tanf+0x1ac>
 8016168:	eea7 6a05 	vfma.f32	s12, s14, s10
 801616c:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8016264 <__kernel_tanf+0x1b0>
 8016170:	eea6 5a07 	vfma.f32	s10, s12, s14
 8016174:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 8016268 <__kernel_tanf+0x1b4>
 8016178:	eea5 6a07 	vfma.f32	s12, s10, s14
 801617c:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 801626c <__kernel_tanf+0x1b8>
 8016180:	eea6 5a07 	vfma.f32	s10, s12, s14
 8016184:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8016270 <__kernel_tanf+0x1bc>
 8016188:	eea5 6a07 	vfma.f32	s12, s10, s14
 801618c:	eeb0 7a46 	vmov.f32	s14, s12
 8016190:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8016194:	eeb0 6a60 	vmov.f32	s12, s1
 8016198:	eea7 6a24 	vfma.f32	s12, s14, s9
 801619c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8016274 <__kernel_tanf+0x1c0>
 80161a0:	eee6 0a26 	vfma.f32	s1, s12, s13
 80161a4:	eee4 0a87 	vfma.f32	s1, s9, s14
 80161a8:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80161ac:	dd1d      	ble.n	80161ea <__kernel_tanf+0x136>
 80161ae:	ee07 0a10 	vmov	s14, r0
 80161b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80161b6:	ee66 5aa6 	vmul.f32	s11, s13, s13
 80161ba:	ee76 6a87 	vadd.f32	s13, s13, s14
 80161be:	179b      	asrs	r3, r3, #30
 80161c0:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 80161c4:	f003 0302 	and.w	r3, r3, #2
 80161c8:	f1c3 0301 	rsb	r3, r3, #1
 80161cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80161d0:	ee76 0a60 	vsub.f32	s1, s12, s1
 80161d4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80161d8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80161dc:	ee07 3a90 	vmov	s15, r3
 80161e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80161e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80161e8:	e77c      	b.n	80160e4 <__kernel_tanf+0x30>
 80161ea:	2801      	cmp	r0, #1
 80161ec:	d01f      	beq.n	801622e <__kernel_tanf+0x17a>
 80161ee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80161f2:	eec7 5a26 	vdiv.f32	s11, s14, s13
 80161f6:	4b20      	ldr	r3, [pc, #128]	; (8016278 <__kernel_tanf+0x1c4>)
 80161f8:	ee16 2a90 	vmov	r2, s13
 80161fc:	401a      	ands	r2, r3
 80161fe:	ee06 2a10 	vmov	s12, r2
 8016202:	ee15 2a90 	vmov	r2, s11
 8016206:	4013      	ands	r3, r2
 8016208:	ee07 3a10 	vmov	s14, r3
 801620c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016210:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016214:	ee76 7a67 	vsub.f32	s15, s12, s15
 8016218:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801621c:	eef0 7a66 	vmov.f32	s15, s13
 8016220:	eee7 7a20 	vfma.f32	s15, s14, s1
 8016224:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8016228:	eef0 7a47 	vmov.f32	s15, s14
 801622c:	e75a      	b.n	80160e4 <__kernel_tanf+0x30>
 801622e:	eef0 7a66 	vmov.f32	s15, s13
 8016232:	e757      	b.n	80160e4 <__kernel_tanf+0x30>
 8016234:	3f2ca13f 	.word	0x3f2ca13f
 8016238:	3f490fda 	.word	0x3f490fda
 801623c:	33222168 	.word	0x33222168
 8016240:	00000000 	.word	0x00000000
 8016244:	37d95384 	.word	0x37d95384
 8016248:	3895c07a 	.word	0x3895c07a
 801624c:	b79bae5f 	.word	0xb79bae5f
 8016250:	398137b9 	.word	0x398137b9
 8016254:	3abede48 	.word	0x3abede48
 8016258:	3c11371f 	.word	0x3c11371f
 801625c:	3d5d0dd1 	.word	0x3d5d0dd1
 8016260:	38a3f445 	.word	0x38a3f445
 8016264:	3a1a26c8 	.word	0x3a1a26c8
 8016268:	3b6b6916 	.word	0x3b6b6916
 801626c:	3cb327a4 	.word	0x3cb327a4
 8016270:	3e088889 	.word	0x3e088889
 8016274:	3eaaaaab 	.word	0x3eaaaaab
 8016278:	fffff000 	.word	0xfffff000

0801627c <fabs>:
 801627c:	ec51 0b10 	vmov	r0, r1, d0
 8016280:	ee10 2a10 	vmov	r2, s0
 8016284:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016288:	ec43 2b10 	vmov	d0, r2, r3
 801628c:	4770      	bx	lr

0801628e <matherr>:
 801628e:	2000      	movs	r0, #0
 8016290:	4770      	bx	lr
 8016292:	0000      	movs	r0, r0
 8016294:	0000      	movs	r0, r0
	...

08016298 <nan>:
 8016298:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80162a0 <nan+0x8>
 801629c:	4770      	bx	lr
 801629e:	bf00      	nop
 80162a0:	00000000 	.word	0x00000000
 80162a4:	7ff80000 	.word	0x7ff80000

080162a8 <scalbn>:
 80162a8:	b570      	push	{r4, r5, r6, lr}
 80162aa:	ec55 4b10 	vmov	r4, r5, d0
 80162ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80162b2:	4606      	mov	r6, r0
 80162b4:	462b      	mov	r3, r5
 80162b6:	b9aa      	cbnz	r2, 80162e4 <scalbn+0x3c>
 80162b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80162bc:	4323      	orrs	r3, r4
 80162be:	d03b      	beq.n	8016338 <scalbn+0x90>
 80162c0:	4b31      	ldr	r3, [pc, #196]	; (8016388 <scalbn+0xe0>)
 80162c2:	4629      	mov	r1, r5
 80162c4:	2200      	movs	r2, #0
 80162c6:	ee10 0a10 	vmov	r0, s0
 80162ca:	f7f0 fd8d 	bl	8006de8 <__aeabi_dmul>
 80162ce:	4b2f      	ldr	r3, [pc, #188]	; (801638c <scalbn+0xe4>)
 80162d0:	429e      	cmp	r6, r3
 80162d2:	4604      	mov	r4, r0
 80162d4:	460d      	mov	r5, r1
 80162d6:	da12      	bge.n	80162fe <scalbn+0x56>
 80162d8:	a327      	add	r3, pc, #156	; (adr r3, 8016378 <scalbn+0xd0>)
 80162da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162de:	f7f0 fd83 	bl	8006de8 <__aeabi_dmul>
 80162e2:	e009      	b.n	80162f8 <scalbn+0x50>
 80162e4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80162e8:	428a      	cmp	r2, r1
 80162ea:	d10c      	bne.n	8016306 <scalbn+0x5e>
 80162ec:	ee10 2a10 	vmov	r2, s0
 80162f0:	4620      	mov	r0, r4
 80162f2:	4629      	mov	r1, r5
 80162f4:	f7f0 fbc2 	bl	8006a7c <__adddf3>
 80162f8:	4604      	mov	r4, r0
 80162fa:	460d      	mov	r5, r1
 80162fc:	e01c      	b.n	8016338 <scalbn+0x90>
 80162fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016302:	460b      	mov	r3, r1
 8016304:	3a36      	subs	r2, #54	; 0x36
 8016306:	4432      	add	r2, r6
 8016308:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801630c:	428a      	cmp	r2, r1
 801630e:	dd0b      	ble.n	8016328 <scalbn+0x80>
 8016310:	ec45 4b11 	vmov	d1, r4, r5
 8016314:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8016380 <scalbn+0xd8>
 8016318:	f000 fa32 	bl	8016780 <copysign>
 801631c:	a318      	add	r3, pc, #96	; (adr r3, 8016380 <scalbn+0xd8>)
 801631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016322:	ec51 0b10 	vmov	r0, r1, d0
 8016326:	e7da      	b.n	80162de <scalbn+0x36>
 8016328:	2a00      	cmp	r2, #0
 801632a:	dd08      	ble.n	801633e <scalbn+0x96>
 801632c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016330:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016334:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016338:	ec45 4b10 	vmov	d0, r4, r5
 801633c:	bd70      	pop	{r4, r5, r6, pc}
 801633e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016342:	da0d      	bge.n	8016360 <scalbn+0xb8>
 8016344:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016348:	429e      	cmp	r6, r3
 801634a:	ec45 4b11 	vmov	d1, r4, r5
 801634e:	dce1      	bgt.n	8016314 <scalbn+0x6c>
 8016350:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8016378 <scalbn+0xd0>
 8016354:	f000 fa14 	bl	8016780 <copysign>
 8016358:	a307      	add	r3, pc, #28	; (adr r3, 8016378 <scalbn+0xd0>)
 801635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801635e:	e7e0      	b.n	8016322 <scalbn+0x7a>
 8016360:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016364:	3236      	adds	r2, #54	; 0x36
 8016366:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801636a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801636e:	4620      	mov	r0, r4
 8016370:	4629      	mov	r1, r5
 8016372:	2200      	movs	r2, #0
 8016374:	4b06      	ldr	r3, [pc, #24]	; (8016390 <scalbn+0xe8>)
 8016376:	e7b2      	b.n	80162de <scalbn+0x36>
 8016378:	c2f8f359 	.word	0xc2f8f359
 801637c:	01a56e1f 	.word	0x01a56e1f
 8016380:	8800759c 	.word	0x8800759c
 8016384:	7e37e43c 	.word	0x7e37e43c
 8016388:	43500000 	.word	0x43500000
 801638c:	ffff3cb0 	.word	0xffff3cb0
 8016390:	3c900000 	.word	0x3c900000

08016394 <expm1f>:
 8016394:	ee10 2a10 	vmov	r2, s0
 8016398:	4985      	ldr	r1, [pc, #532]	; (80165b0 <expm1f+0x21c>)
 801639a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801639e:	428b      	cmp	r3, r1
 80163a0:	d924      	bls.n	80163ec <expm1f+0x58>
 80163a2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80163a6:	d902      	bls.n	80163ae <expm1f+0x1a>
 80163a8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80163ac:	4770      	bx	lr
 80163ae:	d106      	bne.n	80163be <expm1f+0x2a>
 80163b0:	2a00      	cmp	r2, #0
 80163b2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80163b6:	bfb8      	it	lt
 80163b8:	eeb0 0a67 	vmovlt.f32	s0, s15
 80163bc:	4770      	bx	lr
 80163be:	2a00      	cmp	r2, #0
 80163c0:	db08      	blt.n	80163d4 <expm1f+0x40>
 80163c2:	4a7c      	ldr	r2, [pc, #496]	; (80165b4 <expm1f+0x220>)
 80163c4:	4293      	cmp	r3, r2
 80163c6:	f240 80eb 	bls.w	80165a0 <expm1f+0x20c>
 80163ca:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 80165b8 <expm1f+0x224>
 80163ce:	ee20 0a00 	vmul.f32	s0, s0, s0
 80163d2:	4770      	bx	lr
 80163d4:	eddf 7a79 	vldr	s15, [pc, #484]	; 80165bc <expm1f+0x228>
 80163d8:	ee70 7a27 	vadd.f32	s15, s0, s15
 80163dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80163e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163e4:	d554      	bpl.n	8016490 <expm1f+0xfc>
 80163e6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80163ea:	4770      	bx	lr
 80163ec:	4974      	ldr	r1, [pc, #464]	; (80165c0 <expm1f+0x22c>)
 80163ee:	428b      	cmp	r3, r1
 80163f0:	d96d      	bls.n	80164ce <expm1f+0x13a>
 80163f2:	4974      	ldr	r1, [pc, #464]	; (80165c4 <expm1f+0x230>)
 80163f4:	428b      	cmp	r3, r1
 80163f6:	d84b      	bhi.n	8016490 <expm1f+0xfc>
 80163f8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80165c8 <expm1f+0x234>
 80163fc:	2a00      	cmp	r2, #0
 80163fe:	bfa7      	ittee	ge
 8016400:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8016404:	eddf 7a71 	vldrge	s15, [pc, #452]	; 80165cc <expm1f+0x238>
 8016408:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 80165d0 <expm1f+0x23c>
 801640c:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8016410:	bfac      	ite	ge
 8016412:	2301      	movge	r3, #1
 8016414:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016418:	ee37 0a67 	vsub.f32	s0, s14, s15
 801641c:	ee37 7a40 	vsub.f32	s14, s14, s0
 8016420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016424:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8016428:	ee20 5a25 	vmul.f32	s10, s0, s11
 801642c:	eddf 6a69 	vldr	s13, [pc, #420]	; 80165d4 <expm1f+0x240>
 8016430:	ed9f 6a69 	vldr	s12, [pc, #420]	; 80165d8 <expm1f+0x244>
 8016434:	ee20 7a05 	vmul.f32	s14, s0, s10
 8016438:	eea7 6a26 	vfma.f32	s12, s14, s13
 801643c:	eddf 6a67 	vldr	s13, [pc, #412]	; 80165dc <expm1f+0x248>
 8016440:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016444:	ed9f 6a66 	vldr	s12, [pc, #408]	; 80165e0 <expm1f+0x24c>
 8016448:	eea6 6a87 	vfma.f32	s12, s13, s14
 801644c:	eddf 6a65 	vldr	s13, [pc, #404]	; 80165e4 <expm1f+0x250>
 8016450:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016454:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016458:	eef0 4a46 	vmov.f32	s9, s12
 801645c:	eee6 4a87 	vfma.f32	s9, s13, s14
 8016460:	eef0 6a64 	vmov.f32	s13, s9
 8016464:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8016468:	eee5 4a66 	vfms.f32	s9, s10, s13
 801646c:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8016470:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8016474:	eee0 6a64 	vfms.f32	s13, s0, s9
 8016478:	eef0 4a66 	vmov.f32	s9, s13
 801647c:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8016480:	ee66 6a87 	vmul.f32	s13, s13, s14
 8016484:	bb8b      	cbnz	r3, 80164ea <expm1f+0x156>
 8016486:	eef0 7a47 	vmov.f32	s15, s14
 801648a:	eed0 7a26 	vfnms.f32	s15, s0, s13
 801648e:	e027      	b.n	80164e0 <expm1f+0x14c>
 8016490:	eddf 7a55 	vldr	s15, [pc, #340]	; 80165e8 <expm1f+0x254>
 8016494:	2a00      	cmp	r2, #0
 8016496:	ee20 7a27 	vmul.f32	s14, s0, s15
 801649a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801649e:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80164a2:	bfa8      	it	ge
 80164a4:	eef0 7a66 	vmovge.f32	s15, s13
 80164a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80164ac:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80165c8 <expm1f+0x234>
 80164b0:	eddf 6a46 	vldr	s13, [pc, #280]	; 80165cc <expm1f+0x238>
 80164b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80164b8:	ee17 3a90 	vmov	r3, s15
 80164bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80164c0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80164c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80164c8:	eeb0 7a40 	vmov.f32	s14, s0
 80164cc:	e7a4      	b.n	8016418 <expm1f+0x84>
 80164ce:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80164d2:	d208      	bcs.n	80164e6 <expm1f+0x152>
 80164d4:	eddf 7a38 	vldr	s15, [pc, #224]	; 80165b8 <expm1f+0x224>
 80164d8:	ee70 7a27 	vadd.f32	s15, s0, s15
 80164dc:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80164e0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80164e4:	4770      	bx	lr
 80164e6:	2300      	movs	r3, #0
 80164e8:	e79c      	b.n	8016424 <expm1f+0x90>
 80164ea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80164ee:	1c5a      	adds	r2, r3, #1
 80164f0:	eed6 7a80 	vfnms.f32	s15, s13, s0
 80164f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80164f8:	d106      	bne.n	8016508 <expm1f+0x174>
 80164fa:	ee70 7a67 	vsub.f32	s15, s0, s15
 80164fe:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8016502:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8016506:	4770      	bx	lr
 8016508:	2b01      	cmp	r3, #1
 801650a:	d118      	bne.n	801653e <expm1f+0x1aa>
 801650c:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8016510:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016518:	bf41      	itttt	mi
 801651a:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 801651e:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 8016522:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 8016526:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 801652a:	bf5f      	itttt	pl
 801652c:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 8016530:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8016534:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 8016538:	eeb0 0a46 	vmovpl.f32	s0, s12
 801653c:	4770      	bx	lr
 801653e:	1c5a      	adds	r2, r3, #1
 8016540:	2a39      	cmp	r2, #57	; 0x39
 8016542:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8016546:	d90b      	bls.n	8016560 <expm1f+0x1cc>
 8016548:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801654c:	ee36 0a40 	vsub.f32	s0, s12, s0
 8016550:	ee10 3a10 	vmov	r3, s0
 8016554:	440b      	add	r3, r1
 8016556:	ee00 3a10 	vmov	s0, r3
 801655a:	ee30 0a46 	vsub.f32	s0, s0, s12
 801655e:	4770      	bx	lr
 8016560:	2b16      	cmp	r3, #22
 8016562:	dc11      	bgt.n	8016588 <expm1f+0x1f4>
 8016564:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016568:	fa42 f303 	asr.w	r3, r2, r3
 801656c:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8016570:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016574:	ee07 3a90 	vmov	s15, r3
 8016578:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801657c:	ee10 3a10 	vmov	r3, s0
 8016580:	440b      	add	r3, r1
 8016582:	ee00 3a10 	vmov	s0, r3
 8016586:	4770      	bx	lr
 8016588:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801658c:	05db      	lsls	r3, r3, #23
 801658e:	ee07 3a10 	vmov	s14, r3
 8016592:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016596:	ee30 0a67 	vsub.f32	s0, s0, s15
 801659a:	ee30 0a06 	vadd.f32	s0, s0, s12
 801659e:	e7ed      	b.n	801657c <expm1f+0x1e8>
 80165a0:	eddf 7a11 	vldr	s15, [pc, #68]	; 80165e8 <expm1f+0x254>
 80165a4:	ee20 7a27 	vmul.f32	s14, s0, s15
 80165a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80165ac:	e77c      	b.n	80164a8 <expm1f+0x114>
 80165ae:	bf00      	nop
 80165b0:	4195b843 	.word	0x4195b843
 80165b4:	42b17217 	.word	0x42b17217
 80165b8:	7149f2ca 	.word	0x7149f2ca
 80165bc:	0da24260 	.word	0x0da24260
 80165c0:	3eb17218 	.word	0x3eb17218
 80165c4:	3f851591 	.word	0x3f851591
 80165c8:	3f317180 	.word	0x3f317180
 80165cc:	3717f7d1 	.word	0x3717f7d1
 80165d0:	b717f7d1 	.word	0xb717f7d1
 80165d4:	b457edbb 	.word	0xb457edbb
 80165d8:	36867e54 	.word	0x36867e54
 80165dc:	b8a670cd 	.word	0xb8a670cd
 80165e0:	3ad00d01 	.word	0x3ad00d01
 80165e4:	bd088889 	.word	0xbd088889
 80165e8:	3fb8aa3b 	.word	0x3fb8aa3b

080165ec <finitef>:
 80165ec:	ee10 3a10 	vmov	r3, s0
 80165f0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80165f4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80165f8:	bfac      	ite	ge
 80165fa:	2000      	movge	r0, #0
 80165fc:	2001      	movlt	r0, #1
 80165fe:	4770      	bx	lr

08016600 <nanf>:
 8016600:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016608 <nanf+0x8>
 8016604:	4770      	bx	lr
 8016606:	bf00      	nop
 8016608:	7fc00000 	.word	0x7fc00000

0801660c <rintf>:
 801660c:	b513      	push	{r0, r1, r4, lr}
 801660e:	ee10 1a10 	vmov	r1, s0
 8016612:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016616:	0ddc      	lsrs	r4, r3, #23
 8016618:	3c7f      	subs	r4, #127	; 0x7f
 801661a:	2c16      	cmp	r4, #22
 801661c:	dc46      	bgt.n	80166ac <rintf+0xa0>
 801661e:	b32b      	cbz	r3, 801666c <rintf+0x60>
 8016620:	2c00      	cmp	r4, #0
 8016622:	ee10 2a10 	vmov	r2, s0
 8016626:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 801662a:	da21      	bge.n	8016670 <rintf+0x64>
 801662c:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8016630:	425b      	negs	r3, r3
 8016632:	4a21      	ldr	r2, [pc, #132]	; (80166b8 <rintf+0xac>)
 8016634:	0a5b      	lsrs	r3, r3, #9
 8016636:	0d09      	lsrs	r1, r1, #20
 8016638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801663c:	0509      	lsls	r1, r1, #20
 801663e:	430b      	orrs	r3, r1
 8016640:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8016644:	ee07 3a90 	vmov	s15, r3
 8016648:	edd2 6a00 	vldr	s13, [r2]
 801664c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8016650:	ed8d 7a01 	vstr	s14, [sp, #4]
 8016654:	eddd 7a01 	vldr	s15, [sp, #4]
 8016658:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801665c:	ee17 3a90 	vmov	r3, s15
 8016660:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016664:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8016668:	ee00 3a10 	vmov	s0, r3
 801666c:	b002      	add	sp, #8
 801666e:	bd10      	pop	{r4, pc}
 8016670:	4b12      	ldr	r3, [pc, #72]	; (80166bc <rintf+0xb0>)
 8016672:	4123      	asrs	r3, r4
 8016674:	4219      	tst	r1, r3
 8016676:	d0f9      	beq.n	801666c <rintf+0x60>
 8016678:	085b      	lsrs	r3, r3, #1
 801667a:	4219      	tst	r1, r3
 801667c:	d006      	beq.n	801668c <rintf+0x80>
 801667e:	ea21 0203 	bic.w	r2, r1, r3
 8016682:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8016686:	fa43 f404 	asr.w	r4, r3, r4
 801668a:	4322      	orrs	r2, r4
 801668c:	4b0a      	ldr	r3, [pc, #40]	; (80166b8 <rintf+0xac>)
 801668e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016692:	ed90 7a00 	vldr	s14, [r0]
 8016696:	ee07 2a90 	vmov	s15, r2
 801669a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801669e:	edcd 7a01 	vstr	s15, [sp, #4]
 80166a2:	ed9d 0a01 	vldr	s0, [sp, #4]
 80166a6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80166aa:	e7df      	b.n	801666c <rintf+0x60>
 80166ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80166b0:	d3dc      	bcc.n	801666c <rintf+0x60>
 80166b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80166b6:	e7d9      	b.n	801666c <rintf+0x60>
 80166b8:	080a7858 	.word	0x080a7858
 80166bc:	007fffff 	.word	0x007fffff

080166c0 <scalbnf>:
 80166c0:	b508      	push	{r3, lr}
 80166c2:	ee10 2a10 	vmov	r2, s0
 80166c6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80166ca:	ed2d 8b02 	vpush	{d8}
 80166ce:	eef0 0a40 	vmov.f32	s1, s0
 80166d2:	d004      	beq.n	80166de <scalbnf+0x1e>
 80166d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80166d8:	d306      	bcc.n	80166e8 <scalbnf+0x28>
 80166da:	ee70 0a00 	vadd.f32	s1, s0, s0
 80166de:	ecbd 8b02 	vpop	{d8}
 80166e2:	eeb0 0a60 	vmov.f32	s0, s1
 80166e6:	bd08      	pop	{r3, pc}
 80166e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80166ec:	d21c      	bcs.n	8016728 <scalbnf+0x68>
 80166ee:	4b1f      	ldr	r3, [pc, #124]	; (801676c <scalbnf+0xac>)
 80166f0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8016770 <scalbnf+0xb0>
 80166f4:	4298      	cmp	r0, r3
 80166f6:	ee60 0a27 	vmul.f32	s1, s0, s15
 80166fa:	db10      	blt.n	801671e <scalbnf+0x5e>
 80166fc:	ee10 2a90 	vmov	r2, s1
 8016700:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8016704:	3b19      	subs	r3, #25
 8016706:	4403      	add	r3, r0
 8016708:	2bfe      	cmp	r3, #254	; 0xfe
 801670a:	dd0f      	ble.n	801672c <scalbnf+0x6c>
 801670c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8016774 <scalbnf+0xb4>
 8016710:	eeb0 0a48 	vmov.f32	s0, s16
 8016714:	f000 f843 	bl	801679e <copysignf>
 8016718:	ee60 0a08 	vmul.f32	s1, s0, s16
 801671c:	e7df      	b.n	80166de <scalbnf+0x1e>
 801671e:	eddf 7a16 	vldr	s15, [pc, #88]	; 8016778 <scalbnf+0xb8>
 8016722:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8016726:	e7da      	b.n	80166de <scalbnf+0x1e>
 8016728:	0ddb      	lsrs	r3, r3, #23
 801672a:	e7ec      	b.n	8016706 <scalbnf+0x46>
 801672c:	2b00      	cmp	r3, #0
 801672e:	dd06      	ble.n	801673e <scalbnf+0x7e>
 8016730:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8016734:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8016738:	ee00 3a90 	vmov	s1, r3
 801673c:	e7cf      	b.n	80166de <scalbnf+0x1e>
 801673e:	f113 0f16 	cmn.w	r3, #22
 8016742:	da06      	bge.n	8016752 <scalbnf+0x92>
 8016744:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016748:	4298      	cmp	r0, r3
 801674a:	dcdf      	bgt.n	801670c <scalbnf+0x4c>
 801674c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8016778 <scalbnf+0xb8>
 8016750:	e7de      	b.n	8016710 <scalbnf+0x50>
 8016752:	3319      	adds	r3, #25
 8016754:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8016758:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801675c:	eddf 7a07 	vldr	s15, [pc, #28]	; 801677c <scalbnf+0xbc>
 8016760:	ee07 3a10 	vmov	s14, r3
 8016764:	ee67 0a27 	vmul.f32	s1, s14, s15
 8016768:	e7b9      	b.n	80166de <scalbnf+0x1e>
 801676a:	bf00      	nop
 801676c:	ffff3cb0 	.word	0xffff3cb0
 8016770:	4c000000 	.word	0x4c000000
 8016774:	7149f2ca 	.word	0x7149f2ca
 8016778:	0da24260 	.word	0x0da24260
 801677c:	33000000 	.word	0x33000000

08016780 <copysign>:
 8016780:	ec51 0b10 	vmov	r0, r1, d0
 8016784:	ee11 0a90 	vmov	r0, s3
 8016788:	ee10 2a10 	vmov	r2, s0
 801678c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8016790:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8016794:	ea41 0300 	orr.w	r3, r1, r0
 8016798:	ec43 2b10 	vmov	d0, r2, r3
 801679c:	4770      	bx	lr

0801679e <copysignf>:
 801679e:	ee10 3a10 	vmov	r3, s0
 80167a2:	ee10 2a90 	vmov	r2, s1
 80167a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80167aa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80167ae:	4313      	orrs	r3, r2
 80167b0:	ee00 3a10 	vmov	s0, r3
 80167b4:	4770      	bx	lr
	...

080167b8 <_init>:
 80167b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ba:	bf00      	nop
 80167bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167be:	bc08      	pop	{r3}
 80167c0:	469e      	mov	lr, r3
 80167c2:	4770      	bx	lr

080167c4 <_fini>:
 80167c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167c6:	bf00      	nop
 80167c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167ca:	bc08      	pop	{r3}
 80167cc:	469e      	mov	lr, r3
 80167ce:	4770      	bx	lr
