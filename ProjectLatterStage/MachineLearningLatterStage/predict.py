#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Nov 24 16:25:10 2019

@author: alex
"""

import pickle
import os
import numpy as np
from tqdm import tqdm
from scipy.io import wavfile
from python_speech_features import mfcc
from keras.models import load_model
import pandas as pd
from sklearn.metrics import accuracy_score




def build_predictions(audio_dir):
    y_true = []
    y_pred = []
    fn_prob = {}
    print('Extracting features from audio')
#    RESULTSOBTAINED = 0
#    GLASSRESULTOBTAINED = 0
#    PLASTICRESULTOBTAINED = 0
#    counter = 0
    totalNumPeaks = 0
    for fn in tqdm(os.listdir(audio_dir)):
        print("fn = ", fn)
        if fn == 'checkFiles.py':
            continue
        else:
            rate, wav = wavfile.read(os.path.join(audio_dir, fn))
            label = fn2class[fn]
            c = classes.index(label)
    #        print(label)
            y_prob = []
            
            
            originalSignal = wav
            tmpSignal = originalSignal
            peaks = []
            numPeaks = 0
            peakValue = np.amax(tmpSignal)
            originalPeakValue = peakValue
            while peakValue > 0.5*originalPeakValue:
                peakValueIndex = np.argmax(tmpSignal)
                minWin = peakValueIndex - int((rate/10)*0.3)
                maxWin = peakValueIndex + int((rate/10)*0.7)
                tmpSignal = np.append(tmpSignal[:minWin], tmpSignal[maxWin:])
                if maxWin > (originalSignal.shape[0]-(int((rate/10)*0.8))):
                    print("Peak too close to end of file")
                else:
                    peaks.append(minWin)
                    numPeaks += 1
                    peakValue = np.amax(tmpSignal)
            totalNumPeaks += numPeaks
            print("numPeaks = ", numPeaks)
        #    peakChoice = np.random.randint(len(peaks))
        #    startIndex = peaks[peakChoice]
        #    sample = originalSignal[startIndex:(startIndex + config.step)]
            
            
            for startIndex in peaks:
                print("startIndex = ", startIndex)
                sample = originalSignal[startIndex:(startIndex + config.step)]
                
                x = mfcc(sample, rate, numcep=config.nfeat,
                                 nfilt=config.nfilt, nfft=config.nfft)
                x = (x - config.min)/ (config.max - config.min)
            
            
    #        
    #        for i in range(0, wav.shape[0]-config.step, config.step):
    #            sample = wav[i:i+config.step]
    #            x = mfcc(sample, rate, numcep=config.nfeat,
    #                     nfilt=config.nfilt, nfft=config.nfft)
    #            #print(x.shape)
    #            x = (x - config.min)/ (config.max - config.min)
                ## Get random sample from glass and plastic classes
    #            if (RESULTSOBTAINED != 1):
    #                if GLASSRESULTOBTAINED == 0 and label == 'Glass' and counter > 100:
    #                    print("Assigning glass sample.")
    #                    print("glasslabel: ", label)
    #                    SampleGlass = x
    #                    GLASSRESULTOBTAINED = 1
    #                elif PLASTICRESULTOBTAINED == 0 and label == 'Plastic' and counter > 200:
    #                    print("Assigning plastic sample.")
    #                    print("plasticlabel: ", label)
    #                    SamplePlastic = x
    #                    PLASTICRESULTOBTAINED = 1
    #                elif GLASSRESULTOBTAINED == 1 and PLASTICRESULTOBTAINED == 1:
    #                    RESULTSOBTAINED = 1
    #                counter += 1
                if config.mode == 'conv':
                    x = x.reshape(1, x.shape[0], x.shape[1], 1)
                elif config.mode == 'time':
                    x = np.expand_dims(x, axis=0)
                y_hat = model.predict(x)
                y_prob.append(y_hat)
                y_pred.append(np.argmax(y_hat))
                y_true.append(c)
                
            fn_prob[fn] = np.mean(y_prob, axis=0).flatten()
        
#    return y_true, y_pred, fn_prob, SampleGlass, SamplePlastic
    return y_true, y_pred, fn_prob
    
    
    
    
    
df = pd.read_csv('materials2.csv')
classes = list(np.unique(df.label))
fn2class = dict(zip(df.filename, df.label))
p_path = os.path.join('pickles', 'conv.p')

with open(p_path, 'rb') as handle:
    config = pickle.load(handle)
    
model = load_model(config.model_path)
print("model loaded from: ", config.model_path)

y_true, y_pred, fn_prob = build_predictions('clean')
acc_score = accuracy_score(y_true=y_true, y_pred=y_pred)

y_probs = []
for i, row in df.iterrows():
    y_prob = fn_prob[row.filename]
    y_probs.append(y_prob)
    for c, p in zip(classes, y_prob):
        df.at[i, c] = p
        
y_pred = [classes[np.argmax(y)] for y in y_probs]
df['y_pred'] = y_pred

#print("Glass Sample: ", SampleGlass)
#print("Plastic Sample: ", SamplePlastic)

#inputReceived = np.array([[12.402840, -7.361262, 3.257198, 0.358307, 4.100760, 3.567119, 4.470837, 4.555652, 2.824630, 2.346791, 2.690601, 2.479539, 1.301344],              
#[2.346791, 2.690601, 2.479539, 1.301344, 11.522536, -5.713441, 20.992270, 14.343120, 8.925152, 9.926225, 6.835202, 6.056314, 11.012248],
#[9.926225, 6.835202, 6.056314, 11.012248, 3.319747, 1.065592, 7.271740, 6.647917, 11.518334, -4.927667, 20.736185, 13.033004, 8.674321],         
#[-4.927667, 20.736185, 13.033004, 8.674321, 9.099800, 7.623610, 2.987855, 15.089542, 6.167492, -0.493373, 5.531804, 3.086755, 11.507531],         
#[-0.493373, 5.531804, 3.086755, 11.507531, -6.089540, 22.581602, 15.162357, 7.464691, 6.231721, 10.198163, 8.376560, 9.977551, -0.136617],        
#[10.198163, 8.376560, 9.977551, -0.136617, 3.004511, 8.149891, 7.274699, 11.510149, -5.338683, 20.540167, 14.298659, 9.653598, 5.868131],       
#[20.540167, 14.298659, 9.653598, 5.868131, 10.101173, 5.680292, 9.711850, 5.332760, 2.066736, 2.077554, 7.406011, 11.529685, -5.466818],        
#[2.077554, 7.406011, 11.529685, -5.466818, 20.517635, 13.922548, 9.664377, 7.571798, 7.767688, 5.188498, 11.513948, 7.327131, 1.451020],         
#[5.188498, 11.513948, 7.327131, 1.451020, 0.988150, 4.597939, 11.538624, -5.688125, 20.076225, 14.108507, 9.244189, 7.389361, 10.117623]])
#
#inputAfterNorm = np.array([[0.636500, 0.484560, 0.566191, 0.543905, 0.572676, 0.568574, 0.575521, 0.576173, 0.562866, 0.559192, 0.561835, 0.560213, 0.551155],                
#[0.559192, 0.561835, 0.560213, 0.551155, 0.629733, 0.497228, 0.702533, 0.651416, 0.609765, 0.617461, 0.593698, 0.587710, 0.625810],
#[0.617461, 0.593698, 0.587710, 0.625810, 0.566672, 0.549343, 0.597054, 0.592258, 0.629700, 0.503268, 0.700564, 0.641345, 0.607836],              
#[0.503268, 0.700564, 0.641345, 0.607836, 0.611107, 0.599759, 0.564121, 0.657155, 0.588565, 0.537358, 0.583678, 0.564881, 0.629617],              
#[0.537358, 0.583678, 0.564881, 0.629617, 0.494336, 0.714751, 0.657714, 0.598537, 0.589058, 0.619551, 0.605547, 0.617855, 0.540101],              
#[0.619551, 0.605547, 0.617855, 0.540101, 0.564249, 0.603805, 0.597076, 0.629637, 0.500109, 0.699057, 0.651075, 0.615365, 0.586263],              
#[0.699057, 0.651075, 0.615365, 0.586263, 0.618806, 0.584819, 0.615813, 0.582147, 0.557039, 0.557122, 0.598086, 0.629788, 0.499124],              
#[0.557122, 0.598086, 0.629788, 0.499124, 0.698884, 0.648183, 0.615448, 0.599361, 0.600866, 0.581038, 0.629667, 0.597480, 0.552306],              
#[0.581038, 0.629667, 0.597480, 0.552306, 0.548747, 0.576498, 0.629856, 0.497422, 0.695491, 0.649613, 0.612217, 0.597958, 0.618932]])
#
#data = SampleGlass
#data = data.reshape(1, data.shape[0], data.shape[1], 1)
#result = model.predict(data)
#print("Glass Sample result: ", result)
#
#data2 = SamplePlastic
#data2 = data2.reshape(1, data2.shape[0], data2.shape[1], 1)
#result2 = model.predict(data2)
#print("Plastic Sample result: ", result2)
#print(result)

#SampleGlass = np.array(SampleGlass).tolist()
#SamplePlastic = np.array(SamplePlastic).tolist()
#
#print("Glass sample: \n\n\n", SampleGlass)
#print("Plastic sample: \n\n\n", SamplePlastic)


df.to_csv('predictions.csv', index=False)

#[[0.44283001 0.49835229 0.56735033 0.53319698 0.5879536  0.62122414
#  0.62042101 0.59734603 0.58475909 0.57692335 0.57887589 0.57097185
#  0.56757696]
# [0.43491467 0.52125466 0.53745949 0.51339187 0.65016119 0.76576697
#  0.71696816 0.54217923 0.56595414 0.63537343 0.58974691 0.5985609
#  0.57071709]
# [0.43568211 0.49133998 0.51352629 0.49586308 0.64613486 0.76360472
#  0.69937536 0.54169994 0.57960258 0.65787656 0.63717303 0.68946303
#  0.63898413]
# [0.435845   0.50267917 0.51337666 0.50732751 0.66173223 0.79074109
#  0.67543872 0.5281065  0.52000059 0.59969398 0.60101032 0.69520211
#  0.66101534]
# [0.43530124 0.52157347 0.51277762 0.53160307 0.67789621 0.78108297
#  0.66604141 0.54323667 0.48216256 0.56176773 0.62984863 0.66643375
#  0.64615604]
# [0.435476   0.52065289 0.54254817 0.5514295  0.65094003 0.7426898
#  0.62569532 0.52258984 0.51869867 0.55003968 0.66074889 0.61509993
#  0.60966009]
# [0.43568014 0.47027098 0.53997595 0.53136155 0.64201138 0.77038504
#  0.67058195 0.55529498 0.57209358 0.58486977 0.65480438 0.65911849
#  0.59978277]
# [0.43641472 0.46860959 0.54711483 0.50988447 0.65654826 0.81082039
#  0.69580801 0.52927756 0.5621042  0.57285451 0.6128904  0.63722406
#  0.55725083]
# [0.43467849 0.47393994 0.54150605 0.48535317 0.64165025 0.76723309
#  0.67059017 0.55682545 0.54776522 0.56048991 0.59219493 0.64194643
#  0.56854227]]
#GlassList = [[0.4346566982243327, 0.49404397967950797, 0.4058189542785778, 0.4261869213620283, 0.5472244288709084, 0.7193580370492515, 0.6920054124253472, 0.543326081894666, 0.4589060094353497, 0.48736989905850125, 0.5060334633498441, 0.5808648670057842, 0.5392161506375902], [0.43315731251010375, 0.4858579203340364, 0.42043930835329607, 0.4429127416602438, 0.5594656350981264, 0.720139485153404, 0.6910282989296093, 0.4915355706794101, 0.3630805619577958, 0.4288664688557151, 0.540102117187529, 0.6118849314035977, 0.599598953245156], [0.4334551592864103, 0.4929439845788353, 0.4130389580930875, 0.4299805038652329, 0.49084956793942425, 0.6691598697928006, 0.6499447964750976, 0.5073973610729836, 0.36189078331342034, 0.42366175930371225, 0.5498137725987843, 0.6112645482135598, 0.5855340394275718], [0.5572908999389035, 0.2970557137807987, 0.574708282123818, 0.5920951406777115, 0.46909708634156283, 0.6599390131141268, 0.3917117103367579, 0.5064338426907518, 0.7629104535399983, 0.32017584384592174, 0.6315160496032725, 0.47668372149405663, 0.5445597854926151], [0.563582920121653, 0.24823715044771713, 0.5820517352375925, 0.591054509211443, 0.5340304774014624, 0.619619246494207, 0.3361953410655889, 0.5153060615877784, 0.8764232879693478, 0.2427788709900672, 0.6062631066091261, 0.49095799951906843, 0.5283608820566335], [0.5653110646224294, 0.2535480682025547, 0.5655641201086481, 0.5793681954955782, 0.546157401343882, 0.6525560254609626, 0.3500511863455078, 0.4878815121246839, 0.9026845770907239, 0.23946326528947143, 0.630016231142894, 0.49998337535379245, 0.5142683866123141], [0.5595097119309096, 0.3348447185752112, 0.5550865942014923, 0.5710438906075378, 0.46911896949173176, 0.7036100795573385, 0.4029861542935439, 0.4172533399697033, 0.8442745234755019, 0.3095102910770951, 0.651774774970621, 0.4235432249993446, 0.5424742142259633], [0.5541430293591051, 0.3084903312399186, 0.5248633256633858, 0.5899981055180554, 0.4625517991378029, 0.736724963096822, 0.31810864060778454, 0.42208047209836747, 0.8574810720578054, 0.3266331740613876, 0.5665092756340918, 0.4240415723071528, 0.5712520754821879], [0.5461245482267222, 0.22200870424752286, 0.48382781603403413, 0.6634998962913996, 0.5441203450722331, 0.6846118503338358, 0.23704139724379347, 0.48752928694188624, 0.9197458740871736, 0.32290363084221174, 0.5303262098032853, 0.45917384050206184, 0.6049534420618273]]
#
#flatGlassList = [item for sublist in GlassList for item in sublist]
#
#PlasticList = [[0.442830012873196, 0.49835228698086215, 0.5673503317079368, 0.5331969824586692, 0.5879536020235846, 0.6212241438321423, 0.620421013758745, 0.597346029312374, 0.5847590889096912, 0.5769233460573892, 0.5788758920665873, 0.5709718529833958, 0.5675769614212296], [0.43491466900451453, 0.5212546628590053, 0.5374594856763947, 0.5133918693164369, 0.6501611948437183, 0.7657669677871757, 0.7169681620802852, 0.542179230837519, 0.5659541362650189, 0.6353734330088116, 0.5897469082136152, 0.5985608983471028, 0.5707170880642306], [0.43568211224507913, 0.491339975243016, 0.5135262859108191, 0.4958630810218451, 0.646134861099854, 0.7636047194213189, 0.6993753627819332, 0.5416999428521059, 0.5796025792437143, 0.6578765589437969, 0.6371730331860225, 0.689463031192684, 0.6389841299346789], [0.4358449988159812, 0.5026791675885665, 0.5133766636460622, 0.5073275050003809, 0.6617322278741558, 0.7907410929513486, 0.675438717505587, 0.5281064969321503, 0.5200005923595805, 0.5996939836260392, 0.6010103216069284, 0.6952021051957246, 0.6610153396079911], [0.4353012399829142, 0.5215734736908485, 0.5127776185686934, 0.5316030651468538, 0.6778962132391371, 0.7810829652128897, 0.6660414148328545, 0.5432366652679987, 0.4821625609894671, 0.5617677312379376, 0.6298486315815166, 0.6664337466018434, 0.6461560370057523], [0.43547600327859093, 0.5206528938528578, 0.5425481675647901, 0.5514295028666315, 0.6509400278103785, 0.7426897966659728, 0.6256953209620935, 0.5225898361959702, 0.518698672785644, 0.550039684548049, 0.6607488947404677, 0.6150999344917906, 0.6096600900784255], [0.43568013855678084, 0.47027098061583106, 0.539975946383748, 0.531361554511395, 0.6420113807294685, 0.7703850374607433, 0.6705819468340348, 0.555294978773981, 0.5720935777294366, 0.5848697733874295, 0.6548043766748696, 0.6591184886151469, 0.5997827705462225], [0.43641472455416325, 0.46860958635031896, 0.5471148265606416, 0.5098844667090547, 0.6565482624437484, 0.8108203920194009, 0.6958080065315556, 0.5292775631667684, 0.5621042001201323, 0.5728545080655933, 0.612890403245264, 0.6372240596360325, 0.5572508276110755], [0.4346784859532304, 0.47393993721948346, 0.541506048673682, 0.4853531736558012, 0.6416502469530756, 0.7672330908049875, 0.6705901730263519, 0.5568254514548264, 0.5477652237657866, 0.5604899057849329, 0.5921949347947477, 0.6419464317762571, 0.5685422664618982]]
#
#flatPlasticList = [item for sublist in PlasticList for item in sublist]
#
#print(len(flatGlassList))
#print(len(flatPlasticList))
#
#print("Glass sample: \n\n\n", flatGlassList)
#print("Plastic sample: \n\n\n", flatPlasticList)


##Plastic sample: [0.442830012873196, 0.49835228698086215, 0.5673503317079368, 0.5331969824586692, 0.5879536020235846, 0.6212241438321423, 0.620421013758745, 0.597346029312374, 0.5847590889096912, 0.5769233460573892, 0.5788758920665873, 0.5709718529833958, 0.5675769614212296, 0.43491466900451453, 0.5212546628590053, 0.5374594856763947, 0.5133918693164369, 0.6501611948437183, 0.7657669677871757, 0.7169681620802852, 0.542179230837519, 0.5659541362650189, 0.6353734330088116, 0.5897469082136152, 0.5985608983471028, 0.5707170880642306, 0.43568211224507913, 0.491339975243016, 0.5135262859108191, 0.4958630810218451, 0.646134861099854, 0.7636047194213189, 0.6993753627819332, 0.5416999428521059, 0.5796025792437143, 0.6578765589437969, 0.6371730331860225, 0.689463031192684, 0.6389841299346789, 0.4358449988159812, 0.5026791675885665, 0.5133766636460622, 0.5073275050003809, 0.6617322278741558, 0.7907410929513486, 0.675438717505587, 0.5281064969321503, 0.5200005923595805, 0.5996939836260392, 0.6010103216069284, 0.6952021051957246, 0.6610153396079911, 0.4353012399829142, 0.5215734736908485, 0.5127776185686934, 0.5316030651468538, 0.6778962132391371, 0.7810829652128897, 0.6660414148328545, 0.5432366652679987, 0.4821625609894671, 0.5617677312379376, 0.6298486315815166, 0.6664337466018434, 0.6461560370057523, 0.43547600327859093, 0.5206528938528578, 0.5425481675647901, 0.5514295028666315, 0.6509400278103785, 0.7426897966659728, 0.6256953209620935, 0.5225898361959702, 0.518698672785644, 0.550039684548049, 0.6607488947404677, 0.6150999344917906, 0.6096600900784255, 0.43568013855678084, 0.47027098061583106, 0.539975946383748, 0.531361554511395, 0.6420113807294685, 0.7703850374607433, 0.6705819468340348, 0.555294978773981, 0.5720935777294366, 0.5848697733874295, 0.6548043766748696, 0.6591184886151469, 0.5997827705462225, 0.43641472455416325, 0.46860958635031896, 0.5471148265606416, 0.5098844667090547, 0.6565482624437484, 0.8108203920194009, 0.6958080065315556, 0.5292775631667684, 0.5621042001201323, 0.5728545080655933, 0.612890403245264, 0.6372240596360325, 0.5572508276110755, 0.4346784859532304, 0.47393993721948346, 0.541506048673682, 0.4853531736558012, 0.6416502469530756, 0.7672330908049875, 0.6705901730263519, 0.5568254514548264, 0.5477652237657866, 0.5604899057849329, 0.5921949347947477, 0.6419464317762571, 0.5685422664618982]

##Glass sample: [0.4346566982243327, 0.49404397967950797, 0.4058189542785778, 0.4261869213620283, 0.5472244288709084, 0.7193580370492515, 0.6920054124253472, 0.543326081894666, 0.4589060094353497, 0.48736989905850125, 0.5060334633498441, 0.5808648670057842, 0.5392161506375902, 0.43315731251010375, 0.4858579203340364, 0.42043930835329607, 0.4429127416602438, 0.5594656350981264, 0.720139485153404, 0.6910282989296093, 0.4915355706794101, 0.3630805619577958, 0.4288664688557151, 0.540102117187529, 0.6118849314035977, 0.599598953245156, 0.4334551592864103, 0.4929439845788353, 0.4130389580930875, 0.4299805038652329, 0.49084956793942425, 0.6691598697928006, 0.6499447964750976, 0.5073973610729836, 0.36189078331342034, 0.42366175930371225, 0.5498137725987843, 0.6112645482135598, 0.5855340394275718, 0.5572908999389035, 0.2970557137807987, 0.574708282123818, 0.5920951406777115, 0.46909708634156283, 0.6599390131141268, 0.3917117103367579, 0.5064338426907518, 0.7629104535399983, 0.32017584384592174, 0.6315160496032725, 0.47668372149405663, 0.5445597854926151, 0.563582920121653, 0.24823715044771713, 0.5820517352375925, 0.591054509211443, 0.5340304774014624, 0.619619246494207, 0.3361953410655889, 0.5153060615877784, 0.8764232879693478, 0.2427788709900672, 0.6062631066091261, 0.49095799951906843, 0.5283608820566335, 0.5653110646224294, 0.2535480682025547, 0.5655641201086481, 0.5793681954955782, 0.546157401343882, 0.6525560254609626, 0.3500511863455078, 0.4878815121246839, 0.9026845770907239, 0.23946326528947143, 0.630016231142894, 0.49998337535379245, 0.5142683866123141, 0.5595097119309096, 0.3348447185752112, 0.5550865942014923, 0.5710438906075378, 0.46911896949173176, 0.7036100795573385, 0.4029861542935439, 0.4172533399697033, 0.8442745234755019, 0.3095102910770951, 0.651774774970621, 0.4235432249993446, 0.5424742142259633, 0.5541430293591051, 0.3084903312399186, 0.5248633256633858, 0.5899981055180554, 0.4625517991378029, 0.736724963096822, 0.31810864060778454, 0.42208047209836747, 0.8574810720578054, 0.3266331740613876, 0.5665092756340918, 0.4240415723071528, 0.5712520754821879, 0.5461245482267222, 0.22200870424752286, 0.48382781603403413, 0.6634998962913996, 0.5441203450722331, 0.6846118503338358, 0.23704139724379347, 0.48752928694188624, 0.9197458740871736, 0.32290363084221174, 0.5303262098032853, 0.45917384050206184, 0.6049534420618273]

























